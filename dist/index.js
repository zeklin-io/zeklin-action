import { createRequire as __WEBPACK_EXTERNAL_createRequire } from "module";
/******/ var __webpack_modules__ = ({

/***/ 9483:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.issue = exports.issueCommand = void 0;
const os = __importStar(__nccwpck_require__(2037));
const utils_1 = __nccwpck_require__(2994);
/**
 * Commands
 *
 * Command Format:
 *   ::name key=value,key=value::message
 *
 * Examples:
 *   ::warning::This is the message
 *   ::set-env name=MY_VAR::some value
 */
function issueCommand(command, properties, message) {
    const cmd = new Command(command, properties, message);
    process.stdout.write(cmd.toString() + os.EOL);
}
exports.issueCommand = issueCommand;
function issue(name, message = '') {
    issueCommand(name, {}, message);
}
exports.issue = issue;
const CMD_STRING = '::';
class Command {
    constructor(command, properties, message) {
        if (!command) {
            command = 'missing.command';
        }
        this.command = command;
        this.properties = properties;
        this.message = message;
    }
    toString() {
        let cmdStr = CMD_STRING + this.command;
        if (this.properties && Object.keys(this.properties).length > 0) {
            cmdStr += ' ';
            let first = true;
            for (const key in this.properties) {
                if (this.properties.hasOwnProperty(key)) {
                    const val = this.properties[key];
                    if (val) {
                        if (first) {
                            first = false;
                        }
                        else {
                            cmdStr += ',';
                        }
                        cmdStr += `${key}=${escapeProperty(val)}`;
                    }
                }
            }
        }
        cmdStr += `${CMD_STRING}${escapeData(this.message)}`;
        return cmdStr;
    }
}
function escapeData(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A');
}
function escapeProperty(s) {
    return utils_1.toCommandValue(s)
        .replace(/%/g, '%25')
        .replace(/\r/g, '%0D')
        .replace(/\n/g, '%0A')
        .replace(/:/g, '%3A')
        .replace(/,/g, '%2C');
}
//# sourceMappingURL=command.js.map

/***/ }),

/***/ 7733:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getIDToken = exports.getState = exports.saveState = exports.group = exports.endGroup = exports.startGroup = exports.info = exports.notice = exports.warning = exports.error = exports.debug = exports.isDebug = exports.setFailed = exports.setCommandEcho = exports.setOutput = exports.getBooleanInput = exports.getMultilineInput = exports.getInput = exports.addPath = exports.setSecret = exports.exportVariable = exports.ExitCode = void 0;
const command_1 = __nccwpck_require__(9483);
const file_command_1 = __nccwpck_require__(8541);
const utils_1 = __nccwpck_require__(2994);
const os = __importStar(__nccwpck_require__(2037));
const path = __importStar(__nccwpck_require__(1017));
const oidc_utils_1 = __nccwpck_require__(2422);
/**
 * The code to exit an action
 */
var ExitCode;
(function (ExitCode) {
    /**
     * A code indicating that the action was successful
     */
    ExitCode[ExitCode["Success"] = 0] = "Success";
    /**
     * A code indicating that the action was a failure
     */
    ExitCode[ExitCode["Failure"] = 1] = "Failure";
})(ExitCode = exports.ExitCode || (exports.ExitCode = {}));
//-----------------------------------------------------------------------
// Variables
//-----------------------------------------------------------------------
/**
 * Sets env variable for this action and future actions in the job
 * @param name the name of the variable to set
 * @param val the value of the variable. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function exportVariable(name, val) {
    const convertedVal = utils_1.toCommandValue(val);
    process.env[name] = convertedVal;
    const filePath = process.env['GITHUB_ENV'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('ENV', file_command_1.prepareKeyValueMessage(name, val));
    }
    command_1.issueCommand('set-env', { name }, convertedVal);
}
exports.exportVariable = exportVariable;
/**
 * Registers a secret which will get masked from logs
 * @param secret value of the secret
 */
function setSecret(secret) {
    command_1.issueCommand('add-mask', {}, secret);
}
exports.setSecret = setSecret;
/**
 * Prepends inputPath to the PATH (for this action and future actions)
 * @param inputPath
 */
function addPath(inputPath) {
    const filePath = process.env['GITHUB_PATH'] || '';
    if (filePath) {
        file_command_1.issueFileCommand('PATH', inputPath);
    }
    else {
        command_1.issueCommand('add-path', {}, inputPath);
    }
    process.env['PATH'] = `${inputPath}${path.delimiter}${process.env['PATH']}`;
}
exports.addPath = addPath;
/**
 * Gets the value of an input.
 * Unless trimWhitespace is set to false in InputOptions, the value is also trimmed.
 * Returns an empty string if the value is not defined.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string
 */
function getInput(name, options) {
    const val = process.env[`INPUT_${name.replace(/ /g, '_').toUpperCase()}`] || '';
    if (options && options.required && !val) {
        throw new Error(`Input required and not supplied: ${name}`);
    }
    if (options && options.trimWhitespace === false) {
        return val;
    }
    return val.trim();
}
exports.getInput = getInput;
/**
 * Gets the values of an multiline input.  Each value is also trimmed.
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   string[]
 *
 */
function getMultilineInput(name, options) {
    const inputs = getInput(name, options)
        .split('\n')
        .filter(x => x !== '');
    if (options && options.trimWhitespace === false) {
        return inputs;
    }
    return inputs.map(input => input.trim());
}
exports.getMultilineInput = getMultilineInput;
/**
 * Gets the input value of the boolean type in the YAML 1.2 "core schema" specification.
 * Support boolean input list: `true | True | TRUE | false | False | FALSE` .
 * The return value is also in boolean type.
 * ref: https://yaml.org/spec/1.2/spec.html#id2804923
 *
 * @param     name     name of the input to get
 * @param     options  optional. See InputOptions.
 * @returns   boolean
 */
function getBooleanInput(name, options) {
    const trueValue = ['true', 'True', 'TRUE'];
    const falseValue = ['false', 'False', 'FALSE'];
    const val = getInput(name, options);
    if (trueValue.includes(val))
        return true;
    if (falseValue.includes(val))
        return false;
    throw new TypeError(`Input does not meet YAML 1.2 "Core Schema" specification: ${name}\n` +
        `Support boolean input list: \`true | True | TRUE | false | False | FALSE\``);
}
exports.getBooleanInput = getBooleanInput;
/**
 * Sets the value of an output.
 *
 * @param     name     name of the output to set
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function setOutput(name, value) {
    const filePath = process.env['GITHUB_OUTPUT'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('OUTPUT', file_command_1.prepareKeyValueMessage(name, value));
    }
    process.stdout.write(os.EOL);
    command_1.issueCommand('set-output', { name }, utils_1.toCommandValue(value));
}
exports.setOutput = setOutput;
/**
 * Enables or disables the echoing of commands into stdout for the rest of the step.
 * Echoing is disabled by default if ACTIONS_STEP_DEBUG is not set.
 *
 */
function setCommandEcho(enabled) {
    command_1.issue('echo', enabled ? 'on' : 'off');
}
exports.setCommandEcho = setCommandEcho;
//-----------------------------------------------------------------------
// Results
//-----------------------------------------------------------------------
/**
 * Sets the action status to failed.
 * When the action exits it will be with an exit code of 1
 * @param message add error issue message
 */
function setFailed(message) {
    process.exitCode = ExitCode.Failure;
    error(message);
}
exports.setFailed = setFailed;
//-----------------------------------------------------------------------
// Logging Commands
//-----------------------------------------------------------------------
/**
 * Gets whether Actions Step Debug is on or not
 */
function isDebug() {
    return process.env['RUNNER_DEBUG'] === '1';
}
exports.isDebug = isDebug;
/**
 * Writes debug message to user log
 * @param message debug message
 */
function debug(message) {
    command_1.issueCommand('debug', {}, message);
}
exports.debug = debug;
/**
 * Adds an error issue
 * @param message error issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function error(message, properties = {}) {
    command_1.issueCommand('error', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.error = error;
/**
 * Adds a warning issue
 * @param message warning issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function warning(message, properties = {}) {
    command_1.issueCommand('warning', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.warning = warning;
/**
 * Adds a notice issue
 * @param message notice issue message. Errors will be converted to string via toString()
 * @param properties optional properties to add to the annotation.
 */
function notice(message, properties = {}) {
    command_1.issueCommand('notice', utils_1.toCommandProperties(properties), message instanceof Error ? message.toString() : message);
}
exports.notice = notice;
/**
 * Writes info to log with console.log.
 * @param message info message
 */
function info(message) {
    process.stdout.write(message + os.EOL);
}
exports.info = info;
/**
 * Begin an output group.
 *
 * Output until the next `groupEnd` will be foldable in this group
 *
 * @param name The name of the output group
 */
function startGroup(name) {
    command_1.issue('group', name);
}
exports.startGroup = startGroup;
/**
 * End an output group.
 */
function endGroup() {
    command_1.issue('endgroup');
}
exports.endGroup = endGroup;
/**
 * Wrap an asynchronous function call in a group.
 *
 * Returns the same type as the function itself.
 *
 * @param name The name of the group
 * @param fn The function to wrap in the group
 */
function group(name, fn) {
    return __awaiter(this, void 0, void 0, function* () {
        startGroup(name);
        let result;
        try {
            result = yield fn();
        }
        finally {
            endGroup();
        }
        return result;
    });
}
exports.group = group;
//-----------------------------------------------------------------------
// Wrapper action state
//-----------------------------------------------------------------------
/**
 * Saves state for current action, the state can only be retrieved by this action's post job execution.
 *
 * @param     name     name of the state to store
 * @param     value    value to store. Non-string values will be converted to a string via JSON.stringify
 */
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function saveState(name, value) {
    const filePath = process.env['GITHUB_STATE'] || '';
    if (filePath) {
        return file_command_1.issueFileCommand('STATE', file_command_1.prepareKeyValueMessage(name, value));
    }
    command_1.issueCommand('save-state', { name }, utils_1.toCommandValue(value));
}
exports.saveState = saveState;
/**
 * Gets the value of an state set by this action's main execution.
 *
 * @param     name     name of the state to get
 * @returns   string
 */
function getState(name) {
    return process.env[`STATE_${name}`] || '';
}
exports.getState = getState;
function getIDToken(aud) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield oidc_utils_1.OidcClient.getIDToken(aud);
    });
}
exports.getIDToken = getIDToken;
/**
 * Summary exports
 */
var summary_1 = __nccwpck_require__(513);
Object.defineProperty(exports, "summary", ({ enumerable: true, get: function () { return summary_1.summary; } }));
/**
 * @deprecated use core.summary
 */
var summary_2 = __nccwpck_require__(513);
Object.defineProperty(exports, "markdownSummary", ({ enumerable: true, get: function () { return summary_2.markdownSummary; } }));
/**
 * Path exports
 */
var path_utils_1 = __nccwpck_require__(3084);
Object.defineProperty(exports, "toPosixPath", ({ enumerable: true, get: function () { return path_utils_1.toPosixPath; } }));
Object.defineProperty(exports, "toWin32Path", ({ enumerable: true, get: function () { return path_utils_1.toWin32Path; } }));
Object.defineProperty(exports, "toPlatformPath", ({ enumerable: true, get: function () { return path_utils_1.toPlatformPath; } }));
//# sourceMappingURL=core.js.map

/***/ }),

/***/ 8541:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


// For internal use, subject to change.
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.prepareKeyValueMessage = exports.issueFileCommand = void 0;
// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
const fs = __importStar(__nccwpck_require__(7147));
const os = __importStar(__nccwpck_require__(2037));
const uuid_1 = __nccwpck_require__(2033);
const utils_1 = __nccwpck_require__(2994);
function issueFileCommand(command, message) {
    const filePath = process.env[`GITHUB_${command}`];
    if (!filePath) {
        throw new Error(`Unable to find environment variable for file command ${command}`);
    }
    if (!fs.existsSync(filePath)) {
        throw new Error(`Missing file at path: ${filePath}`);
    }
    fs.appendFileSync(filePath, `${utils_1.toCommandValue(message)}${os.EOL}`, {
        encoding: 'utf8'
    });
}
exports.issueFileCommand = issueFileCommand;
function prepareKeyValueMessage(key, value) {
    const delimiter = `ghadelimiter_${uuid_1.v4()}`;
    const convertedValue = utils_1.toCommandValue(value);
    // These should realistically never happen, but just in case someone finds a
    // way to exploit uuid generation let's not allow keys or values that contain
    // the delimiter.
    if (key.includes(delimiter)) {
        throw new Error(`Unexpected input: name should not contain the delimiter "${delimiter}"`);
    }
    if (convertedValue.includes(delimiter)) {
        throw new Error(`Unexpected input: value should not contain the delimiter "${delimiter}"`);
    }
    return `${key}<<${delimiter}${os.EOL}${convertedValue}${os.EOL}${delimiter}`;
}
exports.prepareKeyValueMessage = prepareKeyValueMessage;
//# sourceMappingURL=file-command.js.map

/***/ }),

/***/ 2422:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.OidcClient = void 0;
const http_client_1 = __nccwpck_require__(4284);
const auth_1 = __nccwpck_require__(5479);
const core_1 = __nccwpck_require__(7733);
class OidcClient {
    static createHttpClient(allowRetry = true, maxRetry = 10) {
        const requestOptions = {
            allowRetries: allowRetry,
            maxRetries: maxRetry
        };
        return new http_client_1.HttpClient('actions/oidc-client', [new auth_1.BearerCredentialHandler(OidcClient.getRequestToken())], requestOptions);
    }
    static getRequestToken() {
        const token = process.env['ACTIONS_ID_TOKEN_REQUEST_TOKEN'];
        if (!token) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_TOKEN env variable');
        }
        return token;
    }
    static getIDTokenUrl() {
        const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL'];
        if (!runtimeUrl) {
            throw new Error('Unable to get ACTIONS_ID_TOKEN_REQUEST_URL env variable');
        }
        return runtimeUrl;
    }
    static getCall(id_token_url) {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const httpclient = OidcClient.createHttpClient();
            const res = yield httpclient
                .getJson(id_token_url)
                .catch(error => {
                throw new Error(`Failed to get ID Token. \n 
        Error Code : ${error.statusCode}\n 
        Error Message: ${error.result.message}`);
            });
            const id_token = (_a = res.result) === null || _a === void 0 ? void 0 : _a.value;
            if (!id_token) {
                throw new Error('Response json body do not have ID Token field');
            }
            return id_token;
        });
    }
    static getIDToken(audience) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                // New ID Token is requested from action service
                let id_token_url = OidcClient.getIDTokenUrl();
                if (audience) {
                    const encodedAudience = encodeURIComponent(audience);
                    id_token_url = `${id_token_url}&audience=${encodedAudience}`;
                }
                core_1.debug(`ID token url is ${id_token_url}`);
                const id_token = yield OidcClient.getCall(id_token_url);
                core_1.setSecret(id_token);
                return id_token;
            }
            catch (error) {
                throw new Error(`Error message: ${error.message}`);
            }
        });
    }
}
exports.OidcClient = OidcClient;
//# sourceMappingURL=oidc-utils.js.map

/***/ }),

/***/ 3084:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toPlatformPath = exports.toWin32Path = exports.toPosixPath = void 0;
const path = __importStar(__nccwpck_require__(1017));
/**
 * toPosixPath converts the given path to the posix form. On Windows, \\ will be
 * replaced with /.
 *
 * @param pth. Path to transform.
 * @return string Posix path.
 */
function toPosixPath(pth) {
    return pth.replace(/[\\]/g, '/');
}
exports.toPosixPath = toPosixPath;
/**
 * toWin32Path converts the given path to the win32 form. On Linux, / will be
 * replaced with \\.
 *
 * @param pth. Path to transform.
 * @return string Win32 path.
 */
function toWin32Path(pth) {
    return pth.replace(/[/]/g, '\\');
}
exports.toWin32Path = toWin32Path;
/**
 * toPlatformPath converts the given path to a platform-specific path. It does
 * this by replacing instances of / and \ with the platform-specific path
 * separator.
 *
 * @param pth The path to platformize.
 * @return string The platform-specific path.
 */
function toPlatformPath(pth) {
    return pth.replace(/[/\\]/g, path.sep);
}
exports.toPlatformPath = toPlatformPath;
//# sourceMappingURL=path-utils.js.map

/***/ }),

/***/ 513:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.summary = exports.markdownSummary = exports.SUMMARY_DOCS_URL = exports.SUMMARY_ENV_VAR = void 0;
const os_1 = __nccwpck_require__(2037);
const fs_1 = __nccwpck_require__(7147);
const { access, appendFile, writeFile } = fs_1.promises;
exports.SUMMARY_ENV_VAR = 'GITHUB_STEP_SUMMARY';
exports.SUMMARY_DOCS_URL = 'https://docs.github.com/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary';
class Summary {
    constructor() {
        this._buffer = '';
    }
    /**
     * Finds the summary file path from the environment, rejects if env var is not found or file does not exist
     * Also checks r/w permissions.
     *
     * @returns step summary file path
     */
    filePath() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._filePath) {
                return this._filePath;
            }
            const pathFromEnv = process.env[exports.SUMMARY_ENV_VAR];
            if (!pathFromEnv) {
                throw new Error(`Unable to find environment variable for $${exports.SUMMARY_ENV_VAR}. Check if your runtime environment supports job summaries.`);
            }
            try {
                yield access(pathFromEnv, fs_1.constants.R_OK | fs_1.constants.W_OK);
            }
            catch (_a) {
                throw new Error(`Unable to access summary file: '${pathFromEnv}'. Check if the file has correct read/write permissions.`);
            }
            this._filePath = pathFromEnv;
            return this._filePath;
        });
    }
    /**
     * Wraps content in an HTML tag, adding any HTML attributes
     *
     * @param {string} tag HTML tag to wrap
     * @param {string | null} content content within the tag
     * @param {[attribute: string]: string} attrs key-value list of HTML attributes to add
     *
     * @returns {string} content wrapped in HTML element
     */
    wrap(tag, content, attrs = {}) {
        const htmlAttrs = Object.entries(attrs)
            .map(([key, value]) => ` ${key}="${value}"`)
            .join('');
        if (!content) {
            return `<${tag}${htmlAttrs}>`;
        }
        return `<${tag}${htmlAttrs}>${content}</${tag}>`;
    }
    /**
     * Writes text in the buffer to the summary buffer file and empties buffer. Will append by default.
     *
     * @param {SummaryWriteOptions} [options] (optional) options for write operation
     *
     * @returns {Promise<Summary>} summary instance
     */
    write(options) {
        return __awaiter(this, void 0, void 0, function* () {
            const overwrite = !!(options === null || options === void 0 ? void 0 : options.overwrite);
            const filePath = yield this.filePath();
            const writeFunc = overwrite ? writeFile : appendFile;
            yield writeFunc(filePath, this._buffer, { encoding: 'utf8' });
            return this.emptyBuffer();
        });
    }
    /**
     * Clears the summary buffer and wipes the summary file
     *
     * @returns {Summary} summary instance
     */
    clear() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.emptyBuffer().write({ overwrite: true });
        });
    }
    /**
     * Returns the current summary buffer as a string
     *
     * @returns {string} string of summary buffer
     */
    stringify() {
        return this._buffer;
    }
    /**
     * If the summary buffer is empty
     *
     * @returns {boolen} true if the buffer is empty
     */
    isEmptyBuffer() {
        return this._buffer.length === 0;
    }
    /**
     * Resets the summary buffer without writing to summary file
     *
     * @returns {Summary} summary instance
     */
    emptyBuffer() {
        this._buffer = '';
        return this;
    }
    /**
     * Adds raw text to the summary buffer
     *
     * @param {string} text content to add
     * @param {boolean} [addEOL=false] (optional) append an EOL to the raw text (default: false)
     *
     * @returns {Summary} summary instance
     */
    addRaw(text, addEOL = false) {
        this._buffer += text;
        return addEOL ? this.addEOL() : this;
    }
    /**
     * Adds the operating system-specific end-of-line marker to the buffer
     *
     * @returns {Summary} summary instance
     */
    addEOL() {
        return this.addRaw(os_1.EOL);
    }
    /**
     * Adds an HTML codeblock to the summary buffer
     *
     * @param {string} code content to render within fenced code block
     * @param {string} lang (optional) language to syntax highlight code
     *
     * @returns {Summary} summary instance
     */
    addCodeBlock(code, lang) {
        const attrs = Object.assign({}, (lang && { lang }));
        const element = this.wrap('pre', this.wrap('code', code), attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML list to the summary buffer
     *
     * @param {string[]} items list of items to render
     * @param {boolean} [ordered=false] (optional) if the rendered list should be ordered or not (default: false)
     *
     * @returns {Summary} summary instance
     */
    addList(items, ordered = false) {
        const tag = ordered ? 'ol' : 'ul';
        const listItems = items.map(item => this.wrap('li', item)).join('');
        const element = this.wrap(tag, listItems);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML table to the summary buffer
     *
     * @param {SummaryTableCell[]} rows table rows
     *
     * @returns {Summary} summary instance
     */
    addTable(rows) {
        const tableBody = rows
            .map(row => {
            const cells = row
                .map(cell => {
                if (typeof cell === 'string') {
                    return this.wrap('td', cell);
                }
                const { header, data, colspan, rowspan } = cell;
                const tag = header ? 'th' : 'td';
                const attrs = Object.assign(Object.assign({}, (colspan && { colspan })), (rowspan && { rowspan }));
                return this.wrap(tag, data, attrs);
            })
                .join('');
            return this.wrap('tr', cells);
        })
            .join('');
        const element = this.wrap('table', tableBody);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds a collapsable HTML details element to the summary buffer
     *
     * @param {string} label text for the closed state
     * @param {string} content collapsable content
     *
     * @returns {Summary} summary instance
     */
    addDetails(label, content) {
        const element = this.wrap('details', this.wrap('summary', label) + content);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML image tag to the summary buffer
     *
     * @param {string} src path to the image you to embed
     * @param {string} alt text description of the image
     * @param {SummaryImageOptions} options (optional) addition image attributes
     *
     * @returns {Summary} summary instance
     */
    addImage(src, alt, options) {
        const { width, height } = options || {};
        const attrs = Object.assign(Object.assign({}, (width && { width })), (height && { height }));
        const element = this.wrap('img', null, Object.assign({ src, alt }, attrs));
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML section heading element
     *
     * @param {string} text heading text
     * @param {number | string} [level=1] (optional) the heading level, default: 1
     *
     * @returns {Summary} summary instance
     */
    addHeading(text, level) {
        const tag = `h${level}`;
        const allowedTag = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'].includes(tag)
            ? tag
            : 'h1';
        const element = this.wrap(allowedTag, text);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML thematic break (<hr>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addSeparator() {
        const element = this.wrap('hr', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML line break (<br>) to the summary buffer
     *
     * @returns {Summary} summary instance
     */
    addBreak() {
        const element = this.wrap('br', null);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML blockquote to the summary buffer
     *
     * @param {string} text quote text
     * @param {string} cite (optional) citation url
     *
     * @returns {Summary} summary instance
     */
    addQuote(text, cite) {
        const attrs = Object.assign({}, (cite && { cite }));
        const element = this.wrap('blockquote', text, attrs);
        return this.addRaw(element).addEOL();
    }
    /**
     * Adds an HTML anchor tag to the summary buffer
     *
     * @param {string} text link text/content
     * @param {string} href hyperlink
     *
     * @returns {Summary} summary instance
     */
    addLink(text, href) {
        const element = this.wrap('a', text, { href });
        return this.addRaw(element).addEOL();
    }
}
const _summary = new Summary();
/**
 * @deprecated use `core.summary`
 */
exports.markdownSummary = _summary;
exports.summary = _summary;
//# sourceMappingURL=summary.js.map

/***/ }),

/***/ 2994:
/***/ ((__unused_webpack_module, exports) => {


// We use any as a valid input type
/* eslint-disable @typescript-eslint/no-explicit-any */
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.toCommandProperties = exports.toCommandValue = void 0;
/**
 * Sanitizes an input into a string so it can be passed into issueCommand safely
 * @param input input to sanitize into a string
 */
function toCommandValue(input) {
    if (input === null || input === undefined) {
        return '';
    }
    else if (typeof input === 'string' || input instanceof String) {
        return input;
    }
    return JSON.stringify(input);
}
exports.toCommandValue = toCommandValue;
/**
 *
 * @param annotationProperties
 * @returns The command properties to send with the actual annotation command
 * See IssueCommandProperties: https://github.com/actions/runner/blob/main/src/Runner.Worker/ActionCommandManager.cs#L646
 */
function toCommandProperties(annotationProperties) {
    if (!Object.keys(annotationProperties).length) {
        return {};
    }
    return {
        title: annotationProperties.title,
        file: annotationProperties.file,
        line: annotationProperties.startLine,
        endLine: annotationProperties.endLine,
        col: annotationProperties.startColumn,
        endColumn: annotationProperties.endColumn
    };
}
exports.toCommandProperties = toCommandProperties;
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ 1757:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getExecOutput = exports.exec = void 0;
const string_decoder_1 = __nccwpck_require__(1576);
const tr = __importStar(__nccwpck_require__(4626));
/**
 * Exec a command.
 * Output will be streamed to the live console.
 * Returns promise with return code
 *
 * @param     commandLine        command to execute (can include additional args). Must be correctly escaped.
 * @param     args               optional arguments for tool. Escaping is handled by the lib.
 * @param     options            optional exec options.  See ExecOptions
 * @returns   Promise<number>    exit code
 */
function exec(commandLine, args, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const commandArgs = tr.argStringToArray(commandLine);
        if (commandArgs.length === 0) {
            throw new Error(`Parameter 'commandLine' cannot be null or empty.`);
        }
        // Path to tool to execute should be first arg
        const toolPath = commandArgs[0];
        args = commandArgs.slice(1).concat(args || []);
        const runner = new tr.ToolRunner(toolPath, args, options);
        return runner.exec();
    });
}
exports.exec = exec;
/**
 * Exec a command and get the output.
 * Output will be streamed to the live console.
 * Returns promise with the exit code and collected stdout and stderr
 *
 * @param     commandLine           command to execute (can include additional args). Must be correctly escaped.
 * @param     args                  optional arguments for tool. Escaping is handled by the lib.
 * @param     options               optional exec options.  See ExecOptions
 * @returns   Promise<ExecOutput>   exit code, stdout, and stderr
 */
function getExecOutput(commandLine, args, options) {
    var _a, _b;
    return __awaiter(this, void 0, void 0, function* () {
        let stdout = '';
        let stderr = '';
        //Using string decoder covers the case where a mult-byte character is split
        const stdoutDecoder = new string_decoder_1.StringDecoder('utf8');
        const stderrDecoder = new string_decoder_1.StringDecoder('utf8');
        const originalStdoutListener = (_a = options === null || options === void 0 ? void 0 : options.listeners) === null || _a === void 0 ? void 0 : _a.stdout;
        const originalStdErrListener = (_b = options === null || options === void 0 ? void 0 : options.listeners) === null || _b === void 0 ? void 0 : _b.stderr;
        const stdErrListener = (data) => {
            stderr += stderrDecoder.write(data);
            if (originalStdErrListener) {
                originalStdErrListener(data);
            }
        };
        const stdOutListener = (data) => {
            stdout += stdoutDecoder.write(data);
            if (originalStdoutListener) {
                originalStdoutListener(data);
            }
        };
        const listeners = Object.assign(Object.assign({}, options === null || options === void 0 ? void 0 : options.listeners), { stdout: stdOutListener, stderr: stdErrListener });
        const exitCode = yield exec(commandLine, args, Object.assign(Object.assign({}, options), { listeners }));
        //flush any remaining characters
        stdout += stdoutDecoder.end();
        stderr += stderrDecoder.end();
        return {
            exitCode,
            stdout,
            stderr
        };
    });
}
exports.getExecOutput = getExecOutput;
//# sourceMappingURL=exec.js.map

/***/ }),

/***/ 4626:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.argStringToArray = exports.ToolRunner = void 0;
const os = __importStar(__nccwpck_require__(2037));
const events = __importStar(__nccwpck_require__(2361));
const child = __importStar(__nccwpck_require__(2081));
const path = __importStar(__nccwpck_require__(1017));
const io = __importStar(__nccwpck_require__(8629));
const ioUtil = __importStar(__nccwpck_require__(2548));
const timers_1 = __nccwpck_require__(9512);
/* eslint-disable @typescript-eslint/unbound-method */
const IS_WINDOWS = process.platform === 'win32';
/*
 * Class for running command line tools. Handles quoting and arg parsing in a platform agnostic way.
 */
class ToolRunner extends events.EventEmitter {
    constructor(toolPath, args, options) {
        super();
        if (!toolPath) {
            throw new Error("Parameter 'toolPath' cannot be null or empty.");
        }
        this.toolPath = toolPath;
        this.args = args || [];
        this.options = options || {};
    }
    _debug(message) {
        if (this.options.listeners && this.options.listeners.debug) {
            this.options.listeners.debug(message);
        }
    }
    _getCommandString(options, noPrefix) {
        const toolPath = this._getSpawnFileName();
        const args = this._getSpawnArgs(options);
        let cmd = noPrefix ? '' : '[command]'; // omit prefix when piped to a second tool
        if (IS_WINDOWS) {
            // Windows + cmd file
            if (this._isCmdFile()) {
                cmd += toolPath;
                for (const a of args) {
                    cmd += ` ${a}`;
                }
            }
            // Windows + verbatim
            else if (options.windowsVerbatimArguments) {
                cmd += `"${toolPath}"`;
                for (const a of args) {
                    cmd += ` ${a}`;
                }
            }
            // Windows (regular)
            else {
                cmd += this._windowsQuoteCmdArg(toolPath);
                for (const a of args) {
                    cmd += ` ${this._windowsQuoteCmdArg(a)}`;
                }
            }
        }
        else {
            // OSX/Linux - this can likely be improved with some form of quoting.
            // creating processes on Unix is fundamentally different than Windows.
            // on Unix, execvp() takes an arg array.
            cmd += toolPath;
            for (const a of args) {
                cmd += ` ${a}`;
            }
        }
        return cmd;
    }
    _processLineBuffer(data, strBuffer, onLine) {
        try {
            let s = strBuffer + data.toString();
            let n = s.indexOf(os.EOL);
            while (n > -1) {
                const line = s.substring(0, n);
                onLine(line);
                // the rest of the string ...
                s = s.substring(n + os.EOL.length);
                n = s.indexOf(os.EOL);
            }
            return s;
        }
        catch (err) {
            // streaming lines to console is best effort.  Don't fail a build.
            this._debug(`error processing line. Failed with error ${err}`);
            return '';
        }
    }
    _getSpawnFileName() {
        if (IS_WINDOWS) {
            if (this._isCmdFile()) {
                return process.env['COMSPEC'] || 'cmd.exe';
            }
        }
        return this.toolPath;
    }
    _getSpawnArgs(options) {
        if (IS_WINDOWS) {
            if (this._isCmdFile()) {
                let argline = `/D /S /C "${this._windowsQuoteCmdArg(this.toolPath)}`;
                for (const a of this.args) {
                    argline += ' ';
                    argline += options.windowsVerbatimArguments
                        ? a
                        : this._windowsQuoteCmdArg(a);
                }
                argline += '"';
                return [argline];
            }
        }
        return this.args;
    }
    _endsWith(str, end) {
        return str.endsWith(end);
    }
    _isCmdFile() {
        const upperToolPath = this.toolPath.toUpperCase();
        return (this._endsWith(upperToolPath, '.CMD') ||
            this._endsWith(upperToolPath, '.BAT'));
    }
    _windowsQuoteCmdArg(arg) {
        // for .exe, apply the normal quoting rules that libuv applies
        if (!this._isCmdFile()) {
            return this._uvQuoteCmdArg(arg);
        }
        // otherwise apply quoting rules specific to the cmd.exe command line parser.
        // the libuv rules are generic and are not designed specifically for cmd.exe
        // command line parser.
        //
        // for a detailed description of the cmd.exe command line parser, refer to
        // http://stackoverflow.com/questions/4094699/how-does-the-windows-command-interpreter-cmd-exe-parse-scripts/7970912#7970912
        // need quotes for empty arg
        if (!arg) {
            return '""';
        }
        // determine whether the arg needs to be quoted
        const cmdSpecialChars = [
            ' ',
            '\t',
            '&',
            '(',
            ')',
            '[',
            ']',
            '{',
            '}',
            '^',
            '=',
            ';',
            '!',
            "'",
            '+',
            ',',
            '`',
            '~',
            '|',
            '<',
            '>',
            '"'
        ];
        let needsQuotes = false;
        for (const char of arg) {
            if (cmdSpecialChars.some(x => x === char)) {
                needsQuotes = true;
                break;
            }
        }
        // short-circuit if quotes not needed
        if (!needsQuotes) {
            return arg;
        }
        // the following quoting rules are very similar to the rules that by libuv applies.
        //
        // 1) wrap the string in quotes
        //
        // 2) double-up quotes - i.e. " => ""
        //
        //    this is different from the libuv quoting rules. libuv replaces " with \", which unfortunately
        //    doesn't work well with a cmd.exe command line.
        //
        //    note, replacing " with "" also works well if the arg is passed to a downstream .NET console app.
        //    for example, the command line:
        //          foo.exe "myarg:""my val"""
        //    is parsed by a .NET console app into an arg array:
        //          [ "myarg:\"my val\"" ]
        //    which is the same end result when applying libuv quoting rules. although the actual
        //    command line from libuv quoting rules would look like:
        //          foo.exe "myarg:\"my val\""
        //
        // 3) double-up slashes that precede a quote,
        //    e.g.  hello \world    => "hello \world"
        //          hello\"world    => "hello\\""world"
        //          hello\\"world   => "hello\\\\""world"
        //          hello world\    => "hello world\\"
        //
        //    technically this is not required for a cmd.exe command line, or the batch argument parser.
        //    the reasons for including this as a .cmd quoting rule are:
        //
        //    a) this is optimized for the scenario where the argument is passed from the .cmd file to an
        //       external program. many programs (e.g. .NET console apps) rely on the slash-doubling rule.
        //
        //    b) it's what we've been doing previously (by deferring to node default behavior) and we
        //       haven't heard any complaints about that aspect.
        //
        // note, a weakness of the quoting rules chosen here, is that % is not escaped. in fact, % cannot be
        // escaped when used on the command line directly - even though within a .cmd file % can be escaped
        // by using %%.
        //
        // the saving grace is, on the command line, %var% is left as-is if var is not defined. this contrasts
        // the line parsing rules within a .cmd file, where if var is not defined it is replaced with nothing.
        //
        // one option that was explored was replacing % with ^% - i.e. %var% => ^%var^%. this hack would
        // often work, since it is unlikely that var^ would exist, and the ^ character is removed when the
        // variable is used. the problem, however, is that ^ is not removed when %* is used to pass the args
        // to an external program.
        //
        // an unexplored potential solution for the % escaping problem, is to create a wrapper .cmd file.
        // % can be escaped within a .cmd file.
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
            // walk the string in reverse
            reverse += arg[i - 1];
            if (quoteHit && arg[i - 1] === '\\') {
                reverse += '\\'; // double the slash
            }
            else if (arg[i - 1] === '"') {
                quoteHit = true;
                reverse += '"'; // double the quote
            }
            else {
                quoteHit = false;
            }
        }
        reverse += '"';
        return reverse
            .split('')
            .reverse()
            .join('');
    }
    _uvQuoteCmdArg(arg) {
        // Tool runner wraps child_process.spawn() and needs to apply the same quoting as
        // Node in certain cases where the undocumented spawn option windowsVerbatimArguments
        // is used.
        //
        // Since this function is a port of quote_cmd_arg from Node 4.x (technically, lib UV,
        // see https://github.com/nodejs/node/blob/v4.x/deps/uv/src/win/process.c for details),
        // pasting copyright notice from Node within this function:
        //
        //      Copyright Joyent, Inc. and other Node contributors. All rights reserved.
        //
        //      Permission is hereby granted, free of charge, to any person obtaining a copy
        //      of this software and associated documentation files (the "Software"), to
        //      deal in the Software without restriction, including without limitation the
        //      rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
        //      sell copies of the Software, and to permit persons to whom the Software is
        //      furnished to do so, subject to the following conditions:
        //
        //      The above copyright notice and this permission notice shall be included in
        //      all copies or substantial portions of the Software.
        //
        //      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        //      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        //      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        //      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        //      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
        //      FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
        //      IN THE SOFTWARE.
        if (!arg) {
            // Need double quotation for empty argument
            return '""';
        }
        if (!arg.includes(' ') && !arg.includes('\t') && !arg.includes('"')) {
            // No quotation needed
            return arg;
        }
        if (!arg.includes('"') && !arg.includes('\\')) {
            // No embedded double quotes or backslashes, so I can just wrap
            // quote marks around the whole thing.
            return `"${arg}"`;
        }
        // Expected input/output:
        //   input : hello"world
        //   output: "hello\"world"
        //   input : hello""world
        //   output: "hello\"\"world"
        //   input : hello\world
        //   output: hello\world
        //   input : hello\\world
        //   output: hello\\world
        //   input : hello\"world
        //   output: "hello\\\"world"
        //   input : hello\\"world
        //   output: "hello\\\\\"world"
        //   input : hello world\
        //   output: "hello world\\" - note the comment in libuv actually reads "hello world\"
        //                             but it appears the comment is wrong, it should be "hello world\\"
        let reverse = '"';
        let quoteHit = true;
        for (let i = arg.length; i > 0; i--) {
            // walk the string in reverse
            reverse += arg[i - 1];
            if (quoteHit && arg[i - 1] === '\\') {
                reverse += '\\';
            }
            else if (arg[i - 1] === '"') {
                quoteHit = true;
                reverse += '\\';
            }
            else {
                quoteHit = false;
            }
        }
        reverse += '"';
        return reverse
            .split('')
            .reverse()
            .join('');
    }
    _cloneExecOptions(options) {
        options = options || {};
        const result = {
            cwd: options.cwd || process.cwd(),
            env: options.env || process.env,
            silent: options.silent || false,
            windowsVerbatimArguments: options.windowsVerbatimArguments || false,
            failOnStdErr: options.failOnStdErr || false,
            ignoreReturnCode: options.ignoreReturnCode || false,
            delay: options.delay || 10000
        };
        result.outStream = options.outStream || process.stdout;
        result.errStream = options.errStream || process.stderr;
        return result;
    }
    _getSpawnOptions(options, toolPath) {
        options = options || {};
        const result = {};
        result.cwd = options.cwd;
        result.env = options.env;
        result['windowsVerbatimArguments'] =
            options.windowsVerbatimArguments || this._isCmdFile();
        if (options.windowsVerbatimArguments) {
            result.argv0 = `"${toolPath}"`;
        }
        return result;
    }
    /**
     * Exec a tool.
     * Output will be streamed to the live console.
     * Returns promise with return code
     *
     * @param     tool     path to tool to exec
     * @param     options  optional exec options.  See ExecOptions
     * @returns   number
     */
    exec() {
        return __awaiter(this, void 0, void 0, function* () {
            // root the tool path if it is unrooted and contains relative pathing
            if (!ioUtil.isRooted(this.toolPath) &&
                (this.toolPath.includes('/') ||
                    (IS_WINDOWS && this.toolPath.includes('\\')))) {
                // prefer options.cwd if it is specified, however options.cwd may also need to be rooted
                this.toolPath = path.resolve(process.cwd(), this.options.cwd || process.cwd(), this.toolPath);
            }
            // if the tool is only a file name, then resolve it from the PATH
            // otherwise verify it exists (add extension on Windows if necessary)
            this.toolPath = yield io.which(this.toolPath, true);
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                this._debug(`exec tool: ${this.toolPath}`);
                this._debug('arguments:');
                for (const arg of this.args) {
                    this._debug(`   ${arg}`);
                }
                const optionsNonNull = this._cloneExecOptions(this.options);
                if (!optionsNonNull.silent && optionsNonNull.outStream) {
                    optionsNonNull.outStream.write(this._getCommandString(optionsNonNull) + os.EOL);
                }
                const state = new ExecState(optionsNonNull, this.toolPath);
                state.on('debug', (message) => {
                    this._debug(message);
                });
                if (this.options.cwd && !(yield ioUtil.exists(this.options.cwd))) {
                    return reject(new Error(`The cwd: ${this.options.cwd} does not exist!`));
                }
                const fileName = this._getSpawnFileName();
                const cp = child.spawn(fileName, this._getSpawnArgs(optionsNonNull), this._getSpawnOptions(this.options, fileName));
                let stdbuffer = '';
                if (cp.stdout) {
                    cp.stdout.on('data', (data) => {
                        if (this.options.listeners && this.options.listeners.stdout) {
                            this.options.listeners.stdout(data);
                        }
                        if (!optionsNonNull.silent && optionsNonNull.outStream) {
                            optionsNonNull.outStream.write(data);
                        }
                        stdbuffer = this._processLineBuffer(data, stdbuffer, (line) => {
                            if (this.options.listeners && this.options.listeners.stdline) {
                                this.options.listeners.stdline(line);
                            }
                        });
                    });
                }
                let errbuffer = '';
                if (cp.stderr) {
                    cp.stderr.on('data', (data) => {
                        state.processStderr = true;
                        if (this.options.listeners && this.options.listeners.stderr) {
                            this.options.listeners.stderr(data);
                        }
                        if (!optionsNonNull.silent &&
                            optionsNonNull.errStream &&
                            optionsNonNull.outStream) {
                            const s = optionsNonNull.failOnStdErr
                                ? optionsNonNull.errStream
                                : optionsNonNull.outStream;
                            s.write(data);
                        }
                        errbuffer = this._processLineBuffer(data, errbuffer, (line) => {
                            if (this.options.listeners && this.options.listeners.errline) {
                                this.options.listeners.errline(line);
                            }
                        });
                    });
                }
                cp.on('error', (err) => {
                    state.processError = err.message;
                    state.processExited = true;
                    state.processClosed = true;
                    state.CheckComplete();
                });
                cp.on('exit', (code) => {
                    state.processExitCode = code;
                    state.processExited = true;
                    this._debug(`Exit code ${code} received from tool '${this.toolPath}'`);
                    state.CheckComplete();
                });
                cp.on('close', (code) => {
                    state.processExitCode = code;
                    state.processExited = true;
                    state.processClosed = true;
                    this._debug(`STDIO streams have closed for tool '${this.toolPath}'`);
                    state.CheckComplete();
                });
                state.on('done', (error, exitCode) => {
                    if (stdbuffer.length > 0) {
                        this.emit('stdline', stdbuffer);
                    }
                    if (errbuffer.length > 0) {
                        this.emit('errline', errbuffer);
                    }
                    cp.removeAllListeners();
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(exitCode);
                    }
                });
                if (this.options.input) {
                    if (!cp.stdin) {
                        throw new Error('child process missing stdin');
                    }
                    cp.stdin.end(this.options.input);
                }
            }));
        });
    }
}
exports.ToolRunner = ToolRunner;
/**
 * Convert an arg string to an array of args. Handles escaping
 *
 * @param    argString   string of arguments
 * @returns  string[]    array of arguments
 */
function argStringToArray(argString) {
    const args = [];
    let inQuotes = false;
    let escaped = false;
    let arg = '';
    function append(c) {
        // we only escape double quotes.
        if (escaped && c !== '"') {
            arg += '\\';
        }
        arg += c;
        escaped = false;
    }
    for (let i = 0; i < argString.length; i++) {
        const c = argString.charAt(i);
        if (c === '"') {
            if (!escaped) {
                inQuotes = !inQuotes;
            }
            else {
                append(c);
            }
            continue;
        }
        if (c === '\\' && escaped) {
            append(c);
            continue;
        }
        if (c === '\\' && inQuotes) {
            escaped = true;
            continue;
        }
        if (c === ' ' && !inQuotes) {
            if (arg.length > 0) {
                args.push(arg);
                arg = '';
            }
            continue;
        }
        append(c);
    }
    if (arg.length > 0) {
        args.push(arg.trim());
    }
    return args;
}
exports.argStringToArray = argStringToArray;
class ExecState extends events.EventEmitter {
    constructor(options, toolPath) {
        super();
        this.processClosed = false; // tracks whether the process has exited and stdio is closed
        this.processError = '';
        this.processExitCode = 0;
        this.processExited = false; // tracks whether the process has exited
        this.processStderr = false; // tracks whether stderr was written to
        this.delay = 10000; // 10 seconds
        this.done = false;
        this.timeout = null;
        if (!toolPath) {
            throw new Error('toolPath must not be empty');
        }
        this.options = options;
        this.toolPath = toolPath;
        if (options.delay) {
            this.delay = options.delay;
        }
    }
    CheckComplete() {
        if (this.done) {
            return;
        }
        if (this.processClosed) {
            this._setResult();
        }
        else if (this.processExited) {
            this.timeout = timers_1.setTimeout(ExecState.HandleTimeout, this.delay, this);
        }
    }
    _debug(message) {
        this.emit('debug', message);
    }
    _setResult() {
        // determine whether there is an error
        let error;
        if (this.processExited) {
            if (this.processError) {
                error = new Error(`There was an error when attempting to execute the process '${this.toolPath}'. This may indicate the process failed to start. Error: ${this.processError}`);
            }
            else if (this.processExitCode !== 0 && !this.options.ignoreReturnCode) {
                error = new Error(`The process '${this.toolPath}' failed with exit code ${this.processExitCode}`);
            }
            else if (this.processStderr && this.options.failOnStdErr) {
                error = new Error(`The process '${this.toolPath}' failed because one or more lines were written to the STDERR stream`);
            }
        }
        // clear the timeout
        if (this.timeout) {
            clearTimeout(this.timeout);
            this.timeout = null;
        }
        this.done = true;
        this.emit('done', error, this.processExitCode);
    }
    static HandleTimeout(state) {
        if (state.done) {
            return;
        }
        if (!state.processClosed && state.processExited) {
            const message = `The STDIO streams did not close within ${state.delay /
                1000} seconds of the exit event from process '${state.toolPath}'. This may indicate a child process inherited the STDIO streams and has not yet exited.`;
            state._debug(message);
        }
        state._setResult();
    }
}
//# sourceMappingURL=toolrunner.js.map

/***/ }),

/***/ 5479:
/***/ (function(__unused_webpack_module, exports) {


var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.PersonalAccessTokenCredentialHandler = exports.BearerCredentialHandler = exports.BasicCredentialHandler = void 0;
class BasicCredentialHandler {
    constructor(username, password) {
        this.username = username;
        this.password = password;
    }
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`${this.username}:${this.password}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BasicCredentialHandler = BasicCredentialHandler;
class BearerCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Bearer ${this.token}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.BearerCredentialHandler = BearerCredentialHandler;
class PersonalAccessTokenCredentialHandler {
    constructor(token) {
        this.token = token;
    }
    // currently implements pre-authorization
    // TODO: support preAuth = false where it hooks on 401
    prepareRequest(options) {
        if (!options.headers) {
            throw Error('The request has no headers');
        }
        options.headers['Authorization'] = `Basic ${Buffer.from(`PAT:${this.token}`).toString('base64')}`;
    }
    // This handler cannot handle 401
    canHandleAuthentication() {
        return false;
    }
    handleAuthentication() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new Error('not implemented');
        });
    }
}
exports.PersonalAccessTokenCredentialHandler = PersonalAccessTokenCredentialHandler;
//# sourceMappingURL=auth.js.map

/***/ }),

/***/ 4284:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


/* eslint-disable @typescript-eslint/no-explicit-any */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.HttpClient = exports.isHttps = exports.HttpClientResponse = exports.HttpClientError = exports.getProxyUrl = exports.MediaTypes = exports.Headers = exports.HttpCodes = void 0;
const http = __importStar(__nccwpck_require__(3685));
const https = __importStar(__nccwpck_require__(5687));
const pm = __importStar(__nccwpck_require__(2923));
const tunnel = __importStar(__nccwpck_require__(4249));
var HttpCodes;
(function (HttpCodes) {
    HttpCodes[HttpCodes["OK"] = 200] = "OK";
    HttpCodes[HttpCodes["MultipleChoices"] = 300] = "MultipleChoices";
    HttpCodes[HttpCodes["MovedPermanently"] = 301] = "MovedPermanently";
    HttpCodes[HttpCodes["ResourceMoved"] = 302] = "ResourceMoved";
    HttpCodes[HttpCodes["SeeOther"] = 303] = "SeeOther";
    HttpCodes[HttpCodes["NotModified"] = 304] = "NotModified";
    HttpCodes[HttpCodes["UseProxy"] = 305] = "UseProxy";
    HttpCodes[HttpCodes["SwitchProxy"] = 306] = "SwitchProxy";
    HttpCodes[HttpCodes["TemporaryRedirect"] = 307] = "TemporaryRedirect";
    HttpCodes[HttpCodes["PermanentRedirect"] = 308] = "PermanentRedirect";
    HttpCodes[HttpCodes["BadRequest"] = 400] = "BadRequest";
    HttpCodes[HttpCodes["Unauthorized"] = 401] = "Unauthorized";
    HttpCodes[HttpCodes["PaymentRequired"] = 402] = "PaymentRequired";
    HttpCodes[HttpCodes["Forbidden"] = 403] = "Forbidden";
    HttpCodes[HttpCodes["NotFound"] = 404] = "NotFound";
    HttpCodes[HttpCodes["MethodNotAllowed"] = 405] = "MethodNotAllowed";
    HttpCodes[HttpCodes["NotAcceptable"] = 406] = "NotAcceptable";
    HttpCodes[HttpCodes["ProxyAuthenticationRequired"] = 407] = "ProxyAuthenticationRequired";
    HttpCodes[HttpCodes["RequestTimeout"] = 408] = "RequestTimeout";
    HttpCodes[HttpCodes["Conflict"] = 409] = "Conflict";
    HttpCodes[HttpCodes["Gone"] = 410] = "Gone";
    HttpCodes[HttpCodes["TooManyRequests"] = 429] = "TooManyRequests";
    HttpCodes[HttpCodes["InternalServerError"] = 500] = "InternalServerError";
    HttpCodes[HttpCodes["NotImplemented"] = 501] = "NotImplemented";
    HttpCodes[HttpCodes["BadGateway"] = 502] = "BadGateway";
    HttpCodes[HttpCodes["ServiceUnavailable"] = 503] = "ServiceUnavailable";
    HttpCodes[HttpCodes["GatewayTimeout"] = 504] = "GatewayTimeout";
})(HttpCodes = exports.HttpCodes || (exports.HttpCodes = {}));
var Headers;
(function (Headers) {
    Headers["Accept"] = "accept";
    Headers["ContentType"] = "content-type";
})(Headers = exports.Headers || (exports.Headers = {}));
var MediaTypes;
(function (MediaTypes) {
    MediaTypes["ApplicationJson"] = "application/json";
})(MediaTypes = exports.MediaTypes || (exports.MediaTypes = {}));
/**
 * Returns the proxy URL, depending upon the supplied url and proxy environment variables.
 * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
 */
function getProxyUrl(serverUrl) {
    const proxyUrl = pm.getProxyUrl(new URL(serverUrl));
    return proxyUrl ? proxyUrl.href : '';
}
exports.getProxyUrl = getProxyUrl;
const HttpRedirectCodes = [
    HttpCodes.MovedPermanently,
    HttpCodes.ResourceMoved,
    HttpCodes.SeeOther,
    HttpCodes.TemporaryRedirect,
    HttpCodes.PermanentRedirect
];
const HttpResponseRetryCodes = [
    HttpCodes.BadGateway,
    HttpCodes.ServiceUnavailable,
    HttpCodes.GatewayTimeout
];
const RetryableHttpVerbs = ['OPTIONS', 'GET', 'DELETE', 'HEAD'];
const ExponentialBackoffCeiling = 10;
const ExponentialBackoffTimeSlice = 5;
class HttpClientError extends Error {
    constructor(message, statusCode) {
        super(message);
        this.name = 'HttpClientError';
        this.statusCode = statusCode;
        Object.setPrototypeOf(this, HttpClientError.prototype);
    }
}
exports.HttpClientError = HttpClientError;
class HttpClientResponse {
    constructor(message) {
        this.message = message;
    }
    readBody() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                let output = Buffer.alloc(0);
                this.message.on('data', (chunk) => {
                    output = Buffer.concat([output, chunk]);
                });
                this.message.on('end', () => {
                    resolve(output.toString());
                });
            }));
        });
    }
    readBodyBuffer() {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve) => __awaiter(this, void 0, void 0, function* () {
                const chunks = [];
                this.message.on('data', (chunk) => {
                    chunks.push(chunk);
                });
                this.message.on('end', () => {
                    resolve(Buffer.concat(chunks));
                });
            }));
        });
    }
}
exports.HttpClientResponse = HttpClientResponse;
function isHttps(requestUrl) {
    const parsedUrl = new URL(requestUrl);
    return parsedUrl.protocol === 'https:';
}
exports.isHttps = isHttps;
class HttpClient {
    constructor(userAgent, handlers, requestOptions) {
        this._ignoreSslError = false;
        this._allowRedirects = true;
        this._allowRedirectDowngrade = false;
        this._maxRedirects = 50;
        this._allowRetries = false;
        this._maxRetries = 1;
        this._keepAlive = false;
        this._disposed = false;
        this.userAgent = userAgent;
        this.handlers = handlers || [];
        this.requestOptions = requestOptions;
        if (requestOptions) {
            if (requestOptions.ignoreSslError != null) {
                this._ignoreSslError = requestOptions.ignoreSslError;
            }
            this._socketTimeout = requestOptions.socketTimeout;
            if (requestOptions.allowRedirects != null) {
                this._allowRedirects = requestOptions.allowRedirects;
            }
            if (requestOptions.allowRedirectDowngrade != null) {
                this._allowRedirectDowngrade = requestOptions.allowRedirectDowngrade;
            }
            if (requestOptions.maxRedirects != null) {
                this._maxRedirects = Math.max(requestOptions.maxRedirects, 0);
            }
            if (requestOptions.keepAlive != null) {
                this._keepAlive = requestOptions.keepAlive;
            }
            if (requestOptions.allowRetries != null) {
                this._allowRetries = requestOptions.allowRetries;
            }
            if (requestOptions.maxRetries != null) {
                this._maxRetries = requestOptions.maxRetries;
            }
        }
    }
    options(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('OPTIONS', requestUrl, null, additionalHeaders || {});
        });
    }
    get(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('GET', requestUrl, null, additionalHeaders || {});
        });
    }
    del(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('DELETE', requestUrl, null, additionalHeaders || {});
        });
    }
    post(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('POST', requestUrl, data, additionalHeaders || {});
        });
    }
    patch(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PATCH', requestUrl, data, additionalHeaders || {});
        });
    }
    put(requestUrl, data, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('PUT', requestUrl, data, additionalHeaders || {});
        });
    }
    head(requestUrl, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request('HEAD', requestUrl, null, additionalHeaders || {});
        });
    }
    sendStream(verb, requestUrl, stream, additionalHeaders) {
        return __awaiter(this, void 0, void 0, function* () {
            return this.request(verb, requestUrl, stream, additionalHeaders);
        });
    }
    /**
     * Gets a typed object from an endpoint
     * Be aware that not found returns a null.  Other errors (4xx, 5xx) reject the promise
     */
    getJson(requestUrl, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            const res = yield this.get(requestUrl, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    postJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.post(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    putJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.put(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    patchJson(requestUrl, obj, additionalHeaders = {}) {
        return __awaiter(this, void 0, void 0, function* () {
            const data = JSON.stringify(obj, null, 2);
            additionalHeaders[Headers.Accept] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.Accept, MediaTypes.ApplicationJson);
            additionalHeaders[Headers.ContentType] = this._getExistingOrDefaultHeader(additionalHeaders, Headers.ContentType, MediaTypes.ApplicationJson);
            const res = yield this.patch(requestUrl, data, additionalHeaders);
            return this._processResponse(res, this.requestOptions);
        });
    }
    /**
     * Makes a raw http request.
     * All other methods such as get, post, patch, and request ultimately call this.
     * Prefer get, del, post and patch
     */
    request(verb, requestUrl, data, headers) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this._disposed) {
                throw new Error('Client has already been disposed.');
            }
            const parsedUrl = new URL(requestUrl);
            let info = this._prepareRequest(verb, parsedUrl, headers);
            // Only perform retries on reads since writes may not be idempotent.
            const maxTries = this._allowRetries && RetryableHttpVerbs.includes(verb)
                ? this._maxRetries + 1
                : 1;
            let numTries = 0;
            let response;
            do {
                response = yield this.requestRaw(info, data);
                // Check if it's an authentication challenge
                if (response &&
                    response.message &&
                    response.message.statusCode === HttpCodes.Unauthorized) {
                    let authenticationHandler;
                    for (const handler of this.handlers) {
                        if (handler.canHandleAuthentication(response)) {
                            authenticationHandler = handler;
                            break;
                        }
                    }
                    if (authenticationHandler) {
                        return authenticationHandler.handleAuthentication(this, info, data);
                    }
                    else {
                        // We have received an unauthorized response but have no handlers to handle it.
                        // Let the response return to the caller.
                        return response;
                    }
                }
                let redirectsRemaining = this._maxRedirects;
                while (response.message.statusCode &&
                    HttpRedirectCodes.includes(response.message.statusCode) &&
                    this._allowRedirects &&
                    redirectsRemaining > 0) {
                    const redirectUrl = response.message.headers['location'];
                    if (!redirectUrl) {
                        // if there's no location to redirect to, we won't
                        break;
                    }
                    const parsedRedirectUrl = new URL(redirectUrl);
                    if (parsedUrl.protocol === 'https:' &&
                        parsedUrl.protocol !== parsedRedirectUrl.protocol &&
                        !this._allowRedirectDowngrade) {
                        throw new Error('Redirect from HTTPS to HTTP protocol. This downgrade is not allowed for security reasons. If you want to allow this behavior, set the allowRedirectDowngrade option to true.');
                    }
                    // we need to finish reading the response before reassigning response
                    // which will leak the open socket.
                    yield response.readBody();
                    // strip authorization header if redirected to a different hostname
                    if (parsedRedirectUrl.hostname !== parsedUrl.hostname) {
                        for (const header in headers) {
                            // header names are case insensitive
                            if (header.toLowerCase() === 'authorization') {
                                delete headers[header];
                            }
                        }
                    }
                    // let's make the request with the new redirectUrl
                    info = this._prepareRequest(verb, parsedRedirectUrl, headers);
                    response = yield this.requestRaw(info, data);
                    redirectsRemaining--;
                }
                if (!response.message.statusCode ||
                    !HttpResponseRetryCodes.includes(response.message.statusCode)) {
                    // If not a retry code, return immediately instead of retrying
                    return response;
                }
                numTries += 1;
                if (numTries < maxTries) {
                    yield response.readBody();
                    yield this._performExponentialBackoff(numTries);
                }
            } while (numTries < maxTries);
            return response;
        });
    }
    /**
     * Needs to be called if keepAlive is set to true in request options.
     */
    dispose() {
        if (this._agent) {
            this._agent.destroy();
        }
        this._disposed = true;
    }
    /**
     * Raw request.
     * @param info
     * @param data
     */
    requestRaw(info, data) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => {
                function callbackForResult(err, res) {
                    if (err) {
                        reject(err);
                    }
                    else if (!res) {
                        // If `err` is not passed, then `res` must be passed.
                        reject(new Error('Unknown error'));
                    }
                    else {
                        resolve(res);
                    }
                }
                this.requestRawWithCallback(info, data, callbackForResult);
            });
        });
    }
    /**
     * Raw request with callback.
     * @param info
     * @param data
     * @param onResult
     */
    requestRawWithCallback(info, data, onResult) {
        if (typeof data === 'string') {
            if (!info.options.headers) {
                info.options.headers = {};
            }
            info.options.headers['Content-Length'] = Buffer.byteLength(data, 'utf8');
        }
        let callbackCalled = false;
        function handleResult(err, res) {
            if (!callbackCalled) {
                callbackCalled = true;
                onResult(err, res);
            }
        }
        const req = info.httpModule.request(info.options, (msg) => {
            const res = new HttpClientResponse(msg);
            handleResult(undefined, res);
        });
        let socket;
        req.on('socket', sock => {
            socket = sock;
        });
        // If we ever get disconnected, we want the socket to timeout eventually
        req.setTimeout(this._socketTimeout || 3 * 60000, () => {
            if (socket) {
                socket.end();
            }
            handleResult(new Error(`Request timeout: ${info.options.path}`));
        });
        req.on('error', function (err) {
            // err has statusCode property
            // res should have headers
            handleResult(err);
        });
        if (data && typeof data === 'string') {
            req.write(data, 'utf8');
        }
        if (data && typeof data !== 'string') {
            data.on('close', function () {
                req.end();
            });
            data.pipe(req);
        }
        else {
            req.end();
        }
    }
    /**
     * Gets an http agent. This function is useful when you need an http agent that handles
     * routing through a proxy server - depending upon the url and proxy environment variables.
     * @param serverUrl  The server URL where the request will be sent. For example, https://api.github.com
     */
    getAgent(serverUrl) {
        const parsedUrl = new URL(serverUrl);
        return this._getAgent(parsedUrl);
    }
    _prepareRequest(method, requestUrl, headers) {
        const info = {};
        info.parsedUrl = requestUrl;
        const usingSsl = info.parsedUrl.protocol === 'https:';
        info.httpModule = usingSsl ? https : http;
        const defaultPort = usingSsl ? 443 : 80;
        info.options = {};
        info.options.host = info.parsedUrl.hostname;
        info.options.port = info.parsedUrl.port
            ? parseInt(info.parsedUrl.port)
            : defaultPort;
        info.options.path =
            (info.parsedUrl.pathname || '') + (info.parsedUrl.search || '');
        info.options.method = method;
        info.options.headers = this._mergeHeaders(headers);
        if (this.userAgent != null) {
            info.options.headers['user-agent'] = this.userAgent;
        }
        info.options.agent = this._getAgent(info.parsedUrl);
        // gives handlers an opportunity to participate
        if (this.handlers) {
            for (const handler of this.handlers) {
                handler.prepareRequest(info.options);
            }
        }
        return info;
    }
    _mergeHeaders(headers) {
        if (this.requestOptions && this.requestOptions.headers) {
            return Object.assign({}, lowercaseKeys(this.requestOptions.headers), lowercaseKeys(headers || {}));
        }
        return lowercaseKeys(headers || {});
    }
    _getExistingOrDefaultHeader(additionalHeaders, header, _default) {
        let clientHeader;
        if (this.requestOptions && this.requestOptions.headers) {
            clientHeader = lowercaseKeys(this.requestOptions.headers)[header];
        }
        return additionalHeaders[header] || clientHeader || _default;
    }
    _getAgent(parsedUrl) {
        let agent;
        const proxyUrl = pm.getProxyUrl(parsedUrl);
        const useProxy = proxyUrl && proxyUrl.hostname;
        if (this._keepAlive && useProxy) {
            agent = this._proxyAgent;
        }
        if (this._keepAlive && !useProxy) {
            agent = this._agent;
        }
        // if agent is already assigned use that agent.
        if (agent) {
            return agent;
        }
        const usingSsl = parsedUrl.protocol === 'https:';
        let maxSockets = 100;
        if (this.requestOptions) {
            maxSockets = this.requestOptions.maxSockets || http.globalAgent.maxSockets;
        }
        // This is `useProxy` again, but we need to check `proxyURl` directly for TypeScripts's flow analysis.
        if (proxyUrl && proxyUrl.hostname) {
            const agentOptions = {
                maxSockets,
                keepAlive: this._keepAlive,
                proxy: Object.assign(Object.assign({}, ((proxyUrl.username || proxyUrl.password) && {
                    proxyAuth: `${proxyUrl.username}:${proxyUrl.password}`
                })), { host: proxyUrl.hostname, port: proxyUrl.port })
            };
            let tunnelAgent;
            const overHttps = proxyUrl.protocol === 'https:';
            if (usingSsl) {
                tunnelAgent = overHttps ? tunnel.httpsOverHttps : tunnel.httpsOverHttp;
            }
            else {
                tunnelAgent = overHttps ? tunnel.httpOverHttps : tunnel.httpOverHttp;
            }
            agent = tunnelAgent(agentOptions);
            this._proxyAgent = agent;
        }
        // if reusing agent across request and tunneling agent isn't assigned create a new agent
        if (this._keepAlive && !agent) {
            const options = { keepAlive: this._keepAlive, maxSockets };
            agent = usingSsl ? new https.Agent(options) : new http.Agent(options);
            this._agent = agent;
        }
        // if not using private agent and tunnel agent isn't setup then use global agent
        if (!agent) {
            agent = usingSsl ? https.globalAgent : http.globalAgent;
        }
        if (usingSsl && this._ignoreSslError) {
            // we don't want to set NODE_TLS_REJECT_UNAUTHORIZED=0 since that will affect request for entire process
            // http.RequestOptions doesn't expose a way to modify RequestOptions.agent.options
            // we have to cast it to any and change it directly
            agent.options = Object.assign(agent.options || {}, {
                rejectUnauthorized: false
            });
        }
        return agent;
    }
    _performExponentialBackoff(retryNumber) {
        return __awaiter(this, void 0, void 0, function* () {
            retryNumber = Math.min(ExponentialBackoffCeiling, retryNumber);
            const ms = ExponentialBackoffTimeSlice * Math.pow(2, retryNumber);
            return new Promise(resolve => setTimeout(() => resolve(), ms));
        });
    }
    _processResponse(res, options) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {
                const statusCode = res.message.statusCode || 0;
                const response = {
                    statusCode,
                    result: null,
                    headers: {}
                };
                // not found leads to null obj returned
                if (statusCode === HttpCodes.NotFound) {
                    resolve(response);
                }
                // get the result from the body
                function dateTimeDeserializer(key, value) {
                    if (typeof value === 'string') {
                        const a = new Date(value);
                        if (!isNaN(a.valueOf())) {
                            return a;
                        }
                    }
                    return value;
                }
                let obj;
                let contents;
                try {
                    contents = yield res.readBody();
                    if (contents && contents.length > 0) {
                        if (options && options.deserializeDates) {
                            obj = JSON.parse(contents, dateTimeDeserializer);
                        }
                        else {
                            obj = JSON.parse(contents);
                        }
                        response.result = obj;
                    }
                    response.headers = res.message.headers;
                }
                catch (err) {
                    // Invalid resource (contents not json);  leaving result obj null
                }
                // note that 3xx redirects are handled by the http layer.
                if (statusCode > 299) {
                    let msg;
                    // if exception/error in body, attempt to get better error
                    if (obj && obj.message) {
                        msg = obj.message;
                    }
                    else if (contents && contents.length > 0) {
                        // it may be the case that the exception is in the body message as string
                        msg = contents;
                    }
                    else {
                        msg = `Failed request: (${statusCode})`;
                    }
                    const err = new HttpClientError(msg, statusCode);
                    err.result = response.result;
                    reject(err);
                }
                else {
                    resolve(response);
                }
            }));
        });
    }
}
exports.HttpClient = HttpClient;
const lowercaseKeys = (obj) => Object.keys(obj).reduce((c, k) => ((c[k.toLowerCase()] = obj[k]), c), {});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ 2923:
/***/ ((__unused_webpack_module, exports) => {


Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.checkBypass = exports.getProxyUrl = void 0;
function getProxyUrl(reqUrl) {
    const usingSsl = reqUrl.protocol === 'https:';
    if (checkBypass(reqUrl)) {
        return undefined;
    }
    const proxyVar = (() => {
        if (usingSsl) {
            return process.env['https_proxy'] || process.env['HTTPS_PROXY'];
        }
        else {
            return process.env['http_proxy'] || process.env['HTTP_PROXY'];
        }
    })();
    if (proxyVar) {
        try {
            return new URL(proxyVar);
        }
        catch (_a) {
            if (!proxyVar.startsWith('http://') && !proxyVar.startsWith('https://'))
                return new URL(`http://${proxyVar}`);
        }
    }
    else {
        return undefined;
    }
}
exports.getProxyUrl = getProxyUrl;
function checkBypass(reqUrl) {
    if (!reqUrl.hostname) {
        return false;
    }
    const reqHost = reqUrl.hostname;
    if (isLoopbackAddress(reqHost)) {
        return true;
    }
    const noProxy = process.env['no_proxy'] || process.env['NO_PROXY'] || '';
    if (!noProxy) {
        return false;
    }
    // Determine the request port
    let reqPort;
    if (reqUrl.port) {
        reqPort = Number(reqUrl.port);
    }
    else if (reqUrl.protocol === 'http:') {
        reqPort = 80;
    }
    else if (reqUrl.protocol === 'https:') {
        reqPort = 443;
    }
    // Format the request hostname and hostname with port
    const upperReqHosts = [reqUrl.hostname.toUpperCase()];
    if (typeof reqPort === 'number') {
        upperReqHosts.push(`${upperReqHosts[0]}:${reqPort}`);
    }
    // Compare request host against noproxy
    for (const upperNoProxyItem of noProxy
        .split(',')
        .map(x => x.trim().toUpperCase())
        .filter(x => x)) {
        if (upperNoProxyItem === '*' ||
            upperReqHosts.some(x => x === upperNoProxyItem ||
                x.endsWith(`.${upperNoProxyItem}`) ||
                (upperNoProxyItem.startsWith('.') &&
                    x.endsWith(`${upperNoProxyItem}`)))) {
            return true;
        }
    }
    return false;
}
exports.checkBypass = checkBypass;
function isLoopbackAddress(host) {
    const hostLower = host.toLowerCase();
    return (hostLower === 'localhost' ||
        hostLower.startsWith('127.') ||
        hostLower.startsWith('[::1]') ||
        hostLower.startsWith('[0:0:0:0:0:0:0:1]'));
}
//# sourceMappingURL=proxy.js.map

/***/ }),

/***/ 2548:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var _a;
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.getCmdPath = exports.tryGetExecutablePath = exports.isRooted = exports.isDirectory = exports.exists = exports.READONLY = exports.UV_FS_O_EXLOCK = exports.IS_WINDOWS = exports.unlink = exports.symlink = exports.stat = exports.rmdir = exports.rm = exports.rename = exports.readlink = exports.readdir = exports.open = exports.mkdir = exports.lstat = exports.copyFile = exports.chmod = void 0;
const fs = __importStar(__nccwpck_require__(7147));
const path = __importStar(__nccwpck_require__(1017));
_a = fs.promises
// export const {open} = 'fs'
, exports.chmod = _a.chmod, exports.copyFile = _a.copyFile, exports.lstat = _a.lstat, exports.mkdir = _a.mkdir, exports.open = _a.open, exports.readdir = _a.readdir, exports.readlink = _a.readlink, exports.rename = _a.rename, exports.rm = _a.rm, exports.rmdir = _a.rmdir, exports.stat = _a.stat, exports.symlink = _a.symlink, exports.unlink = _a.unlink;
// export const {open} = 'fs'
exports.IS_WINDOWS = process.platform === 'win32';
// See https://github.com/nodejs/node/blob/d0153aee367422d0858105abec186da4dff0a0c5/deps/uv/include/uv/win.h#L691
exports.UV_FS_O_EXLOCK = 0x10000000;
exports.READONLY = fs.constants.O_RDONLY;
function exists(fsPath) {
    return __awaiter(this, void 0, void 0, function* () {
        try {
            yield exports.stat(fsPath);
        }
        catch (err) {
            if (err.code === 'ENOENT') {
                return false;
            }
            throw err;
        }
        return true;
    });
}
exports.exists = exists;
function isDirectory(fsPath, useStat = false) {
    return __awaiter(this, void 0, void 0, function* () {
        const stats = useStat ? yield exports.stat(fsPath) : yield exports.lstat(fsPath);
        return stats.isDirectory();
    });
}
exports.isDirectory = isDirectory;
/**
 * On OSX/Linux, true if path starts with '/'. On Windows, true for paths like:
 * \, \hello, \\hello\share, C:, and C:\hello (and corresponding alternate separator cases).
 */
function isRooted(p) {
    p = normalizeSeparators(p);
    if (!p) {
        throw new Error('isRooted() parameter "p" cannot be empty');
    }
    if (exports.IS_WINDOWS) {
        return (p.startsWith('\\') || /^[A-Z]:/i.test(p) // e.g. \ or \hello or \\hello
        ); // e.g. C: or C:\hello
    }
    return p.startsWith('/');
}
exports.isRooted = isRooted;
/**
 * Best effort attempt to determine whether a file exists and is executable.
 * @param filePath    file path to check
 * @param extensions  additional file extensions to try
 * @return if file exists and is executable, returns the file path. otherwise empty string.
 */
function tryGetExecutablePath(filePath, extensions) {
    return __awaiter(this, void 0, void 0, function* () {
        let stats = undefined;
        try {
            // test file exists
            stats = yield exports.stat(filePath);
        }
        catch (err) {
            if (err.code !== 'ENOENT') {
                // eslint-disable-next-line no-console
                console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
            }
        }
        if (stats && stats.isFile()) {
            if (exports.IS_WINDOWS) {
                // on Windows, test for valid extension
                const upperExt = path.extname(filePath).toUpperCase();
                if (extensions.some(validExt => validExt.toUpperCase() === upperExt)) {
                    return filePath;
                }
            }
            else {
                if (isUnixExecutable(stats)) {
                    return filePath;
                }
            }
        }
        // try each extension
        const originalFilePath = filePath;
        for (const extension of extensions) {
            filePath = originalFilePath + extension;
            stats = undefined;
            try {
                stats = yield exports.stat(filePath);
            }
            catch (err) {
                if (err.code !== 'ENOENT') {
                    // eslint-disable-next-line no-console
                    console.log(`Unexpected error attempting to determine if executable file exists '${filePath}': ${err}`);
                }
            }
            if (stats && stats.isFile()) {
                if (exports.IS_WINDOWS) {
                    // preserve the case of the actual file (since an extension was appended)
                    try {
                        const directory = path.dirname(filePath);
                        const upperName = path.basename(filePath).toUpperCase();
                        for (const actualName of yield exports.readdir(directory)) {
                            if (upperName === actualName.toUpperCase()) {
                                filePath = path.join(directory, actualName);
                                break;
                            }
                        }
                    }
                    catch (err) {
                        // eslint-disable-next-line no-console
                        console.log(`Unexpected error attempting to determine the actual case of the file '${filePath}': ${err}`);
                    }
                    return filePath;
                }
                else {
                    if (isUnixExecutable(stats)) {
                        return filePath;
                    }
                }
            }
        }
        return '';
    });
}
exports.tryGetExecutablePath = tryGetExecutablePath;
function normalizeSeparators(p) {
    p = p || '';
    if (exports.IS_WINDOWS) {
        // convert slashes on Windows
        p = p.replace(/\//g, '\\');
        // remove redundant slashes
        return p.replace(/\\\\+/g, '\\');
    }
    // remove redundant slashes
    return p.replace(/\/\/+/g, '/');
}
// on Mac/Linux, test the execute bit
//     R   W  X  R  W X R W X
//   256 128 64 32 16 8 4 2 1
function isUnixExecutable(stats) {
    return ((stats.mode & 1) > 0 ||
        ((stats.mode & 8) > 0 && stats.gid === process.getgid()) ||
        ((stats.mode & 64) > 0 && stats.uid === process.getuid()));
}
// Get the path of cmd.exe in windows
function getCmdPath() {
    var _a;
    return (_a = process.env['COMSPEC']) !== null && _a !== void 0 ? _a : `cmd.exe`;
}
exports.getCmdPath = getCmdPath;
//# sourceMappingURL=io-util.js.map

/***/ }),

/***/ 8629:
/***/ (function(__unused_webpack_module, exports, __nccwpck_require__) {


var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", ({ value: true }));
exports.findInPath = exports.which = exports.mkdirP = exports.rmRF = exports.mv = exports.cp = void 0;
const assert_1 = __nccwpck_require__(9491);
const path = __importStar(__nccwpck_require__(1017));
const ioUtil = __importStar(__nccwpck_require__(2548));
/**
 * Copies a file or folder.
 * Based off of shelljs - https://github.com/shelljs/shelljs/blob/9237f66c52e5daa40458f94f9565e18e8132f5a6/src/cp.js
 *
 * @param     source    source path
 * @param     dest      destination path
 * @param     options   optional. See CopyOptions.
 */
function cp(source, dest, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        const { force, recursive, copySourceDirectory } = readCopyOptions(options);
        const destStat = (yield ioUtil.exists(dest)) ? yield ioUtil.stat(dest) : null;
        // Dest is an existing file, but not forcing
        if (destStat && destStat.isFile() && !force) {
            return;
        }
        // If dest is an existing directory, should copy inside.
        const newDest = destStat && destStat.isDirectory() && copySourceDirectory
            ? path.join(dest, path.basename(source))
            : dest;
        if (!(yield ioUtil.exists(source))) {
            throw new Error(`no such file or directory: ${source}`);
        }
        const sourceStat = yield ioUtil.stat(source);
        if (sourceStat.isDirectory()) {
            if (!recursive) {
                throw new Error(`Failed to copy. ${source} is a directory, but tried to copy without recursive flag.`);
            }
            else {
                yield cpDirRecursive(source, newDest, 0, force);
            }
        }
        else {
            if (path.relative(source, newDest) === '') {
                // a file cannot be copied to itself
                throw new Error(`'${newDest}' and '${source}' are the same file`);
            }
            yield copyFile(source, newDest, force);
        }
    });
}
exports.cp = cp;
/**
 * Moves a path.
 *
 * @param     source    source path
 * @param     dest      destination path
 * @param     options   optional. See MoveOptions.
 */
function mv(source, dest, options = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        if (yield ioUtil.exists(dest)) {
            let destExists = true;
            if (yield ioUtil.isDirectory(dest)) {
                // If dest is directory copy src into dest
                dest = path.join(dest, path.basename(source));
                destExists = yield ioUtil.exists(dest);
            }
            if (destExists) {
                if (options.force == null || options.force) {
                    yield rmRF(dest);
                }
                else {
                    throw new Error('Destination already exists');
                }
            }
        }
        yield mkdirP(path.dirname(dest));
        yield ioUtil.rename(source, dest);
    });
}
exports.mv = mv;
/**
 * Remove a path recursively with force
 *
 * @param inputPath path to remove
 */
function rmRF(inputPath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (ioUtil.IS_WINDOWS) {
            // Check for invalid characters
            // https://docs.microsoft.com/en-us/windows/win32/fileio/naming-a-file
            if (/[*"<>|]/.test(inputPath)) {
                throw new Error('File path must not contain `*`, `"`, `<`, `>` or `|` on Windows');
            }
        }
        try {
            // note if path does not exist, error is silent
            yield ioUtil.rm(inputPath, {
                force: true,
                maxRetries: 3,
                recursive: true,
                retryDelay: 300
            });
        }
        catch (err) {
            throw new Error(`File was unable to be removed ${err}`);
        }
    });
}
exports.rmRF = rmRF;
/**
 * Make a directory.  Creates the full path with folders in between
 * Will throw if it fails
 *
 * @param   fsPath        path to create
 * @returns Promise<void>
 */
function mkdirP(fsPath) {
    return __awaiter(this, void 0, void 0, function* () {
        assert_1.ok(fsPath, 'a path argument must be provided');
        yield ioUtil.mkdir(fsPath, { recursive: true });
    });
}
exports.mkdirP = mkdirP;
/**
 * Returns path of a tool had the tool actually been invoked.  Resolves via paths.
 * If you check and the tool does not exist, it will throw.
 *
 * @param     tool              name of the tool
 * @param     check             whether to check if tool exists
 * @returns   Promise<string>   path to tool
 */
function which(tool, check) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!tool) {
            throw new Error("parameter 'tool' is required");
        }
        // recursive when check=true
        if (check) {
            const result = yield which(tool, false);
            if (!result) {
                if (ioUtil.IS_WINDOWS) {
                    throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also verify the file has a valid extension for an executable file.`);
                }
                else {
                    throw new Error(`Unable to locate executable file: ${tool}. Please verify either the file path exists or the file can be found within a directory specified by the PATH environment variable. Also check the file mode to verify the file is executable.`);
                }
            }
            return result;
        }
        const matches = yield findInPath(tool);
        if (matches && matches.length > 0) {
            return matches[0];
        }
        return '';
    });
}
exports.which = which;
/**
 * Returns a list of all occurrences of the given tool on the system path.
 *
 * @returns   Promise<string[]>  the paths of the tool
 */
function findInPath(tool) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!tool) {
            throw new Error("parameter 'tool' is required");
        }
        // build the list of extensions to try
        const extensions = [];
        if (ioUtil.IS_WINDOWS && process.env['PATHEXT']) {
            for (const extension of process.env['PATHEXT'].split(path.delimiter)) {
                if (extension) {
                    extensions.push(extension);
                }
            }
        }
        // if it's rooted, return it if exists. otherwise return empty.
        if (ioUtil.isRooted(tool)) {
            const filePath = yield ioUtil.tryGetExecutablePath(tool, extensions);
            if (filePath) {
                return [filePath];
            }
            return [];
        }
        // if any path separators, return empty
        if (tool.includes(path.sep)) {
            return [];
        }
        // build the list of directories
        //
        // Note, technically "where" checks the current directory on Windows. From a toolkit perspective,
        // it feels like we should not do this. Checking the current directory seems like more of a use
        // case of a shell, and the which() function exposed by the toolkit should strive for consistency
        // across platforms.
        const directories = [];
        if (process.env.PATH) {
            for (const p of process.env.PATH.split(path.delimiter)) {
                if (p) {
                    directories.push(p);
                }
            }
        }
        // find all matches
        const matches = [];
        for (const directory of directories) {
            const filePath = yield ioUtil.tryGetExecutablePath(path.join(directory, tool), extensions);
            if (filePath) {
                matches.push(filePath);
            }
        }
        return matches;
    });
}
exports.findInPath = findInPath;
function readCopyOptions(options) {
    const force = options.force == null ? true : options.force;
    const recursive = Boolean(options.recursive);
    const copySourceDirectory = options.copySourceDirectory == null
        ? true
        : Boolean(options.copySourceDirectory);
    return { force, recursive, copySourceDirectory };
}
function cpDirRecursive(sourceDir, destDir, currentDepth, force) {
    return __awaiter(this, void 0, void 0, function* () {
        // Ensure there is not a run away recursive copy
        if (currentDepth >= 255)
            return;
        currentDepth++;
        yield mkdirP(destDir);
        const files = yield ioUtil.readdir(sourceDir);
        for (const fileName of files) {
            const srcFile = `${sourceDir}/${fileName}`;
            const destFile = `${destDir}/${fileName}`;
            const srcFileStat = yield ioUtil.lstat(srcFile);
            if (srcFileStat.isDirectory()) {
                // Recurse
                yield cpDirRecursive(srcFile, destFile, currentDepth, force);
            }
            else {
                yield copyFile(srcFile, destFile, force);
            }
        }
        // Change the mode for the newly created directory
        yield ioUtil.chmod(destDir, (yield ioUtil.stat(sourceDir)).mode);
    });
}
// Buffered file copy
function copyFile(srcFile, destFile, force) {
    return __awaiter(this, void 0, void 0, function* () {
        if ((yield ioUtil.lstat(srcFile)).isSymbolicLink()) {
            // unlink/re-link it
            try {
                yield ioUtil.lstat(destFile);
                yield ioUtil.unlink(destFile);
            }
            catch (e) {
                // Try to override file permission
                if (e.code === 'EPERM') {
                    yield ioUtil.chmod(destFile, '0666');
                    yield ioUtil.unlink(destFile);
                }
                // other errors = it doesn't exist, no work to do
            }
            // Copy over symlink
            const symlinkFull = yield ioUtil.readlink(srcFile);
            yield ioUtil.symlink(symlinkFull, destFile, ioUtil.IS_WINDOWS ? 'junction' : null);
        }
        else if (!(yield ioUtil.exists(destFile)) || force) {
            yield ioUtil.copyFile(srcFile, destFile);
        }
    });
}
//# sourceMappingURL=io.js.map

/***/ }),

/***/ 1351:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

/*! node-domexception. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */

if (!globalThis.DOMException) {
  try {
    const { MessageChannel } = __nccwpck_require__(1267),
    port = new MessageChannel().port1,
    ab = new ArrayBuffer()
    port.postMessage(ab, [ab, ab])
  } catch (err) {
    err.constructor.name === 'DOMException' && (
      globalThis.DOMException = err.constructor
    )
  }
}

module.exports = globalThis.DOMException


/***/ }),

/***/ 4249:
/***/ ((module, __unused_webpack_exports, __nccwpck_require__) => {

module.exports = __nccwpck_require__(709);


/***/ }),

/***/ 709:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



var net = __nccwpck_require__(1808);
var tls = __nccwpck_require__(4404);
var http = __nccwpck_require__(3685);
var https = __nccwpck_require__(5687);
var events = __nccwpck_require__(2361);
var assert = __nccwpck_require__(9491);
var util = __nccwpck_require__(3837);


exports.httpOverHttp = httpOverHttp;
exports.httpsOverHttp = httpsOverHttp;
exports.httpOverHttps = httpOverHttps;
exports.httpsOverHttps = httpsOverHttps;


function httpOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  return agent;
}

function httpsOverHttp(options) {
  var agent = new TunnelingAgent(options);
  agent.request = http.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}

function httpOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  return agent;
}

function httpsOverHttps(options) {
  var agent = new TunnelingAgent(options);
  agent.request = https.request;
  agent.createSocket = createSecureSocket;
  agent.defaultPort = 443;
  return agent;
}


function TunnelingAgent(options) {
  var self = this;
  self.options = options || {};
  self.proxyOptions = self.options.proxy || {};
  self.maxSockets = self.options.maxSockets || http.Agent.defaultMaxSockets;
  self.requests = [];
  self.sockets = [];

  self.on('free', function onFree(socket, host, port, localAddress) {
    var options = toOptions(host, port, localAddress);
    for (var i = 0, len = self.requests.length; i < len; ++i) {
      var pending = self.requests[i];
      if (pending.host === options.host && pending.port === options.port) {
        // Detect the request to connect same origin server,
        // reuse the connection.
        self.requests.splice(i, 1);
        pending.request.onSocket(socket);
        return;
      }
    }
    socket.destroy();
    self.removeSocket(socket);
  });
}
util.inherits(TunnelingAgent, events.EventEmitter);

TunnelingAgent.prototype.addRequest = function addRequest(req, host, port, localAddress) {
  var self = this;
  var options = mergeOptions({request: req}, self.options, toOptions(host, port, localAddress));

  if (self.sockets.length >= this.maxSockets) {
    // We are over limit so we'll add it to the queue.
    self.requests.push(options);
    return;
  }

  // If we are under maxSockets create a new one.
  self.createSocket(options, function(socket) {
    socket.on('free', onFree);
    socket.on('close', onCloseOrRemove);
    socket.on('agentRemove', onCloseOrRemove);
    req.onSocket(socket);

    function onFree() {
      self.emit('free', socket, options);
    }

    function onCloseOrRemove(err) {
      self.removeSocket(socket);
      socket.removeListener('free', onFree);
      socket.removeListener('close', onCloseOrRemove);
      socket.removeListener('agentRemove', onCloseOrRemove);
    }
  });
};

TunnelingAgent.prototype.createSocket = function createSocket(options, cb) {
  var self = this;
  var placeholder = {};
  self.sockets.push(placeholder);

  var connectOptions = mergeOptions({}, self.proxyOptions, {
    method: 'CONNECT',
    path: options.host + ':' + options.port,
    agent: false,
    headers: {
      host: options.host + ':' + options.port
    }
  });
  if (options.localAddress) {
    connectOptions.localAddress = options.localAddress;
  }
  if (connectOptions.proxyAuth) {
    connectOptions.headers = connectOptions.headers || {};
    connectOptions.headers['Proxy-Authorization'] = 'Basic ' +
        new Buffer(connectOptions.proxyAuth).toString('base64');
  }

  debug('making CONNECT request');
  var connectReq = self.request(connectOptions);
  connectReq.useChunkedEncodingByDefault = false; // for v0.6
  connectReq.once('response', onResponse); // for v0.6
  connectReq.once('upgrade', onUpgrade);   // for v0.6
  connectReq.once('connect', onConnect);   // for v0.7 or later
  connectReq.once('error', onError);
  connectReq.end();

  function onResponse(res) {
    // Very hacky. This is necessary to avoid http-parser leaks.
    res.upgrade = true;
  }

  function onUpgrade(res, socket, head) {
    // Hacky.
    process.nextTick(function() {
      onConnect(res, socket, head);
    });
  }

  function onConnect(res, socket, head) {
    connectReq.removeAllListeners();
    socket.removeAllListeners();

    if (res.statusCode !== 200) {
      debug('tunneling socket could not be established, statusCode=%d',
        res.statusCode);
      socket.destroy();
      var error = new Error('tunneling socket could not be established, ' +
        'statusCode=' + res.statusCode);
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    if (head.length > 0) {
      debug('got illegal response body from proxy');
      socket.destroy();
      var error = new Error('got illegal response body from proxy');
      error.code = 'ECONNRESET';
      options.request.emit('error', error);
      self.removeSocket(placeholder);
      return;
    }
    debug('tunneling connection has established');
    self.sockets[self.sockets.indexOf(placeholder)] = socket;
    return cb(socket);
  }

  function onError(cause) {
    connectReq.removeAllListeners();

    debug('tunneling socket could not be established, cause=%s\n',
          cause.message, cause.stack);
    var error = new Error('tunneling socket could not be established, ' +
                          'cause=' + cause.message);
    error.code = 'ECONNRESET';
    options.request.emit('error', error);
    self.removeSocket(placeholder);
  }
};

TunnelingAgent.prototype.removeSocket = function removeSocket(socket) {
  var pos = this.sockets.indexOf(socket)
  if (pos === -1) {
    return;
  }
  this.sockets.splice(pos, 1);

  var pending = this.requests.shift();
  if (pending) {
    // If we have pending requests and a socket gets closed a new one
    // needs to be created to take over in the pool for the one that closed.
    this.createSocket(pending, function(socket) {
      pending.request.onSocket(socket);
    });
  }
};

function createSecureSocket(options, cb) {
  var self = this;
  TunnelingAgent.prototype.createSocket.call(self, options, function(socket) {
    var hostHeader = options.request.getHeader('host');
    var tlsOptions = mergeOptions({}, self.options, {
      socket: socket,
      servername: hostHeader ? hostHeader.replace(/:.*$/, '') : options.host
    });

    // 0 is dummy port for v0.6
    var secureSocket = tls.connect(0, tlsOptions);
    self.sockets[self.sockets.indexOf(socket)] = secureSocket;
    cb(secureSocket);
  });
}


function toOptions(host, port, localAddress) {
  if (typeof host === 'string') { // since v0.10
    return {
      host: host,
      port: port,
      localAddress: localAddress
    };
  }
  return host; // for v0.11 or later
}

function mergeOptions(target) {
  for (var i = 1, len = arguments.length; i < len; ++i) {
    var overrides = arguments[i];
    if (typeof overrides === 'object') {
      var keys = Object.keys(overrides);
      for (var j = 0, keyLen = keys.length; j < keyLen; ++j) {
        var k = keys[j];
        if (overrides[k] !== undefined) {
          target[k] = overrides[k];
        }
      }
    }
  }
  return target;
}


var debug;
if (process.env.NODE_DEBUG && /\btunnel\b/.test(process.env.NODE_DEBUG)) {
  debug = function() {
    var args = Array.prototype.slice.call(arguments);
    if (typeof args[0] === 'string') {
      args[0] = 'TUNNEL: ' + args[0];
    } else {
      args.unshift('TUNNEL:');
    }
    console.error.apply(console, args);
  }
} else {
  debug = function() {};
}
exports.debug = debug; // for test


/***/ }),

/***/ 2033:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
Object.defineProperty(exports, "v1", ({
  enumerable: true,
  get: function () {
    return _v.default;
  }
}));
Object.defineProperty(exports, "v3", ({
  enumerable: true,
  get: function () {
    return _v2.default;
  }
}));
Object.defineProperty(exports, "v4", ({
  enumerable: true,
  get: function () {
    return _v3.default;
  }
}));
Object.defineProperty(exports, "v5", ({
  enumerable: true,
  get: function () {
    return _v4.default;
  }
}));
Object.defineProperty(exports, "NIL", ({
  enumerable: true,
  get: function () {
    return _nil.default;
  }
}));
Object.defineProperty(exports, "version", ({
  enumerable: true,
  get: function () {
    return _version.default;
  }
}));
Object.defineProperty(exports, "validate", ({
  enumerable: true,
  get: function () {
    return _validate.default;
  }
}));
Object.defineProperty(exports, "stringify", ({
  enumerable: true,
  get: function () {
    return _stringify.default;
  }
}));
Object.defineProperty(exports, "parse", ({
  enumerable: true,
  get: function () {
    return _parse.default;
  }
}));

var _v = _interopRequireDefault(__nccwpck_require__(9370));

var _v2 = _interopRequireDefault(__nccwpck_require__(8638));

var _v3 = _interopRequireDefault(__nccwpck_require__(3519));

var _v4 = _interopRequireDefault(__nccwpck_require__(8239));

var _nil = _interopRequireDefault(__nccwpck_require__(680));

var _version = _interopRequireDefault(__nccwpck_require__(3609));

var _validate = _interopRequireDefault(__nccwpck_require__(6009));

var _stringify = _interopRequireDefault(__nccwpck_require__(9729));

var _parse = _interopRequireDefault(__nccwpck_require__(8951));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***/ }),

/***/ 7276:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('md5').update(bytes).digest();
}

var _default = md5;
exports["default"] = _default;

/***/ }),

/***/ 680:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = '00000000-0000-0000-0000-000000000000';
exports["default"] = _default;

/***/ }),

/***/ 8951:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6009));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function parse(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  let v;
  const arr = new Uint8Array(16); // Parse ########-....-....-....-............

  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 0xff;
  arr[2] = v >>> 8 & 0xff;
  arr[3] = v & 0xff; // Parse ........-####-....-....-............

  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 0xff; // Parse ........-....-####-....-............

  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 0xff; // Parse ........-....-....-####-............

  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 0xff; // Parse ........-....-....-....-############
  // (Use "/" to avoid 32-bit truncation when bit-shifting high-order bytes)

  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 0x10000000000 & 0xff;
  arr[11] = v / 0x100000000 & 0xff;
  arr[12] = v >>> 24 & 0xff;
  arr[13] = v >>> 16 & 0xff;
  arr[14] = v >>> 8 & 0xff;
  arr[15] = v & 0xff;
  return arr;
}

var _default = parse;
exports["default"] = _default;

/***/ }),

/***/ 646:
/***/ ((__unused_webpack_module, exports) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;
var _default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
exports["default"] = _default;

/***/ }),

/***/ 7548:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = rng;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const rnds8Pool = new Uint8Array(256); // # of random values to pre-allocate

let poolPtr = rnds8Pool.length;

function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    _crypto.default.randomFillSync(rnds8Pool);

    poolPtr = 0;
  }

  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}

/***/ }),

/***/ 3557:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _crypto = _interopRequireDefault(__nccwpck_require__(6113));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === 'string') {
    bytes = Buffer.from(bytes, 'utf8');
  }

  return _crypto.default.createHash('sha1').update(bytes).digest();
}

var _default = sha1;
exports["default"] = _default;

/***/ }),

/***/ 9729:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6009));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */
const byteToHex = [];

for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 0x100).toString(16).substr(1));
}

function stringify(arr, offset = 0) {
  // Note: Be careful editing this code!  It's been tuned for performance
  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
  // of the following:
  // - One or more input array values don't map to a hex octet (leading to
  // "undefined" in the uuid)
  // - Invalid input values for the RFC `version` or `variant` fields

  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Stringified UUID is invalid');
  }

  return uuid;
}

var _default = stringify;
exports["default"] = _default;

/***/ }),

/***/ 9370:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(7548));

var _stringify = _interopRequireDefault(__nccwpck_require__(9729));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// **`v1()` - Generate time-based UUID**
//
// Inspired by https://github.com/LiosK/UUID.js
// and http://docs.python.org/library/uuid.html
let _nodeId;

let _clockseq; // Previous uuid creation time


let _lastMSecs = 0;
let _lastNSecs = 0; // See https://github.com/uuidjs/uuid for API details

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== undefined ? options.clockseq : _clockseq; // node and clockseq need to be initialized to random values if they're not
  // specified.  We do this lazily to minimize issues related to insufficient
  // system entropy.  See #189

  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || _rng.default)();

    if (node == null) {
      // Per 4.5, create and 48-bit node id, (47 random bits + multicast bit = 1)
      node = _nodeId = [seedBytes[0] | 0x01, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }

    if (clockseq == null) {
      // Per 4.2.2, randomize (14 bit) clockseq
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 0x3fff;
    }
  } // UUID timestamps are 100 nano-second units since the Gregorian epoch,
  // (1582-10-15 00:00).  JSNumbers aren't precise enough for this, so
  // time is handled internally as 'msecs' (integer milliseconds) and 'nsecs'
  // (100-nanoseconds offset from msecs) since unix epoch, 1970-01-01 00:00.


  let msecs = options.msecs !== undefined ? options.msecs : Date.now(); // Per 4.2.1.2, use count of uuid's generated during the current clock
  // cycle to simulate higher resolution clock

  let nsecs = options.nsecs !== undefined ? options.nsecs : _lastNSecs + 1; // Time since last uuid creation (in msecs)

  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 10000; // Per 4.2.1.2, Bump clockseq on clock regression

  if (dt < 0 && options.clockseq === undefined) {
    clockseq = clockseq + 1 & 0x3fff;
  } // Reset nsecs if clock regresses (new clockseq) or we've moved onto a new
  // time interval


  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === undefined) {
    nsecs = 0;
  } // Per 4.2.1.2 Throw error if too many uuids are requested


  if (nsecs >= 10000) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }

  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq; // Per 4.1.4 - Convert from unix epoch to Gregorian epoch

  msecs += 12219292800000; // `time_low`

  const tl = ((msecs & 0xfffffff) * 10000 + nsecs) % 0x100000000;
  b[i++] = tl >>> 24 & 0xff;
  b[i++] = tl >>> 16 & 0xff;
  b[i++] = tl >>> 8 & 0xff;
  b[i++] = tl & 0xff; // `time_mid`

  const tmh = msecs / 0x100000000 * 10000 & 0xfffffff;
  b[i++] = tmh >>> 8 & 0xff;
  b[i++] = tmh & 0xff; // `time_high_and_version`

  b[i++] = tmh >>> 24 & 0xf | 0x10; // include version

  b[i++] = tmh >>> 16 & 0xff; // `clock_seq_hi_and_reserved` (Per 4.2.2 - include variant)

  b[i++] = clockseq >>> 8 | 0x80; // `clock_seq_low`

  b[i++] = clockseq & 0xff; // `node`

  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }

  return buf || (0, _stringify.default)(b);
}

var _default = v1;
exports["default"] = _default;

/***/ }),

/***/ 8638:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(6694));

var _md = _interopRequireDefault(__nccwpck_require__(7276));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v3 = (0, _v.default)('v3', 0x30, _md.default);
var _default = v3;
exports["default"] = _default;

/***/ }),

/***/ 6694:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = _default;
exports.URL = exports.DNS = void 0;

var _stringify = _interopRequireDefault(__nccwpck_require__(9729));

var _parse = _interopRequireDefault(__nccwpck_require__(8951));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str)); // UTF8 escape

  const bytes = [];

  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }

  return bytes;
}

const DNS = '6ba7b810-9dad-11d1-80b4-00c04fd430c8';
exports.DNS = DNS;
const URL = '6ba7b811-9dad-11d1-80b4-00c04fd430c8';
exports.URL = URL;

function _default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === 'string') {
      value = stringToBytes(value);
    }

    if (typeof namespace === 'string') {
      namespace = (0, _parse.default)(namespace);
    }

    if (namespace.length !== 16) {
      throw TypeError('Namespace must be array-like (16 iterable integer values, 0-255)');
    } // Compute hash of namespace and value, Per 4.3
    // Future: Use spread syntax when supported on all platforms, e.g. `bytes =
    // hashfunc([...namespace, ... value])`


    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 0x0f | version;
    bytes[8] = bytes[8] & 0x3f | 0x80;

    if (buf) {
      offset = offset || 0;

      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }

      return buf;
    }

    return (0, _stringify.default)(bytes);
  } // Function#name is not settable on some platforms (#270)


  try {
    generateUUID.name = name; // eslint-disable-next-line no-empty
  } catch (err) {} // For CommonJS default export support


  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

/***/ }),

/***/ 3519:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _rng = _interopRequireDefault(__nccwpck_require__(7548));

var _stringify = _interopRequireDefault(__nccwpck_require__(9729));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function v4(options, buf, offset) {
  options = options || {};

  const rnds = options.random || (options.rng || _rng.default)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`


  rnds[6] = rnds[6] & 0x0f | 0x40;
  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided

  if (buf) {
    offset = offset || 0;

    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }

    return buf;
  }

  return (0, _stringify.default)(rnds);
}

var _default = v4;
exports["default"] = _default;

/***/ }),

/***/ 8239:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _v = _interopRequireDefault(__nccwpck_require__(6694));

var _sha = _interopRequireDefault(__nccwpck_require__(3557));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const v5 = (0, _v.default)('v5', 0x50, _sha.default);
var _default = v5;
exports["default"] = _default;

/***/ }),

/***/ 6009:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _regex = _interopRequireDefault(__nccwpck_require__(646));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function validate(uuid) {
  return typeof uuid === 'string' && _regex.default.test(uuid);
}

var _default = validate;
exports["default"] = _default;

/***/ }),

/***/ 3609:
/***/ ((__unused_webpack_module, exports, __nccwpck_require__) => {



Object.defineProperty(exports, "__esModule", ({
  value: true
}));
exports["default"] = void 0;

var _validate = _interopRequireDefault(__nccwpck_require__(6009));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function version(uuid) {
  if (!(0, _validate.default)(uuid)) {
    throw TypeError('Invalid UUID');
  }

  return parseInt(uuid.substr(14, 1), 16);
}

var _default = version;
exports["default"] = _default;

/***/ }),

/***/ 6484:
/***/ (function(__unused_webpack_module, exports) {

/**
 * web-streams-polyfill v3.2.1
 */
(function (global, factory) {
     true ? factory(exports) :
    0;
}(this, (function (exports) { 'use strict';

    /// <reference lib="es2015.symbol" />
    const SymbolPolyfill = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ?
        Symbol :
        description => `Symbol(${description})`;

    /// <reference lib="dom" />
    function noop() {
        return undefined;
    }
    function getGlobals() {
        if (typeof self !== 'undefined') {
            return self;
        }
        else if (typeof window !== 'undefined') {
            return window;
        }
        else if (typeof global !== 'undefined') {
            return global;
        }
        return undefined;
    }
    const globals = getGlobals();

    function typeIsObject(x) {
        return (typeof x === 'object' && x !== null) || typeof x === 'function';
    }
    const rethrowAssertionErrorRejection = noop;

    const originalPromise = Promise;
    const originalPromiseThen = Promise.prototype.then;
    const originalPromiseResolve = Promise.resolve.bind(originalPromise);
    const originalPromiseReject = Promise.reject.bind(originalPromise);
    function newPromise(executor) {
        return new originalPromise(executor);
    }
    function promiseResolvedWith(value) {
        return originalPromiseResolve(value);
    }
    function promiseRejectedWith(reason) {
        return originalPromiseReject(reason);
    }
    function PerformPromiseThen(promise, onFulfilled, onRejected) {
        // There doesn't appear to be any way to correctly emulate the behaviour from JavaScript, so this is just an
        // approximation.
        return originalPromiseThen.call(promise, onFulfilled, onRejected);
    }
    function uponPromise(promise, onFulfilled, onRejected) {
        PerformPromiseThen(PerformPromiseThen(promise, onFulfilled, onRejected), undefined, rethrowAssertionErrorRejection);
    }
    function uponFulfillment(promise, onFulfilled) {
        uponPromise(promise, onFulfilled);
    }
    function uponRejection(promise, onRejected) {
        uponPromise(promise, undefined, onRejected);
    }
    function transformPromiseWith(promise, fulfillmentHandler, rejectionHandler) {
        return PerformPromiseThen(promise, fulfillmentHandler, rejectionHandler);
    }
    function setPromiseIsHandledToTrue(promise) {
        PerformPromiseThen(promise, undefined, rethrowAssertionErrorRejection);
    }
    const queueMicrotask = (() => {
        const globalQueueMicrotask = globals && globals.queueMicrotask;
        if (typeof globalQueueMicrotask === 'function') {
            return globalQueueMicrotask;
        }
        const resolvedPromise = promiseResolvedWith(undefined);
        return (fn) => PerformPromiseThen(resolvedPromise, fn);
    })();
    function reflectCall(F, V, args) {
        if (typeof F !== 'function') {
            throw new TypeError('Argument is not a function');
        }
        return Function.prototype.apply.call(F, V, args);
    }
    function promiseCall(F, V, args) {
        try {
            return promiseResolvedWith(reflectCall(F, V, args));
        }
        catch (value) {
            return promiseRejectedWith(value);
        }
    }

    // Original from Chromium
    // https://chromium.googlesource.com/chromium/src/+/0aee4434a4dba42a42abaea9bfbc0cd196a63bc1/third_party/blink/renderer/core/streams/SimpleQueue.js
    const QUEUE_MAX_ARRAY_SIZE = 16384;
    /**
     * Simple queue structure.
     *
     * Avoids scalability issues with using a packed array directly by using
     * multiple arrays in a linked list and keeping the array size bounded.
     */
    class SimpleQueue {
        constructor() {
            this._cursor = 0;
            this._size = 0;
            // _front and _back are always defined.
            this._front = {
                _elements: [],
                _next: undefined
            };
            this._back = this._front;
            // The cursor is used to avoid calling Array.shift().
            // It contains the index of the front element of the array inside the
            // front-most node. It is always in the range [0, QUEUE_MAX_ARRAY_SIZE).
            this._cursor = 0;
            // When there is only one node, size === elements.length - cursor.
            this._size = 0;
        }
        get length() {
            return this._size;
        }
        // For exception safety, this method is structured in order:
        // 1. Read state
        // 2. Calculate required state mutations
        // 3. Perform state mutations
        push(element) {
            const oldBack = this._back;
            let newBack = oldBack;
            if (oldBack._elements.length === QUEUE_MAX_ARRAY_SIZE - 1) {
                newBack = {
                    _elements: [],
                    _next: undefined
                };
            }
            // push() is the mutation most likely to throw an exception, so it
            // goes first.
            oldBack._elements.push(element);
            if (newBack !== oldBack) {
                this._back = newBack;
                oldBack._next = newBack;
            }
            ++this._size;
        }
        // Like push(), shift() follows the read -> calculate -> mutate pattern for
        // exception safety.
        shift() { // must not be called on an empty queue
            const oldFront = this._front;
            let newFront = oldFront;
            const oldCursor = this._cursor;
            let newCursor = oldCursor + 1;
            const elements = oldFront._elements;
            const element = elements[oldCursor];
            if (newCursor === QUEUE_MAX_ARRAY_SIZE) {
                newFront = oldFront._next;
                newCursor = 0;
            }
            // No mutations before this point.
            --this._size;
            this._cursor = newCursor;
            if (oldFront !== newFront) {
                this._front = newFront;
            }
            // Permit shifted element to be garbage collected.
            elements[oldCursor] = undefined;
            return element;
        }
        // The tricky thing about forEach() is that it can be called
        // re-entrantly. The queue may be mutated inside the callback. It is easy to
        // see that push() within the callback has no negative effects since the end
        // of the queue is checked for on every iteration. If shift() is called
        // repeatedly within the callback then the next iteration may return an
        // element that has been removed. In this case the callback will be called
        // with undefined values until we either "catch up" with elements that still
        // exist or reach the back of the queue.
        forEach(callback) {
            let i = this._cursor;
            let node = this._front;
            let elements = node._elements;
            while (i !== elements.length || node._next !== undefined) {
                if (i === elements.length) {
                    node = node._next;
                    elements = node._elements;
                    i = 0;
                    if (elements.length === 0) {
                        break;
                    }
                }
                callback(elements[i]);
                ++i;
            }
        }
        // Return the element that would be returned if shift() was called now,
        // without modifying the queue.
        peek() { // must not be called on an empty queue
            const front = this._front;
            const cursor = this._cursor;
            return front._elements[cursor];
        }
    }

    function ReadableStreamReaderGenericInitialize(reader, stream) {
        reader._ownerReadableStream = stream;
        stream._reader = reader;
        if (stream._state === 'readable') {
            defaultReaderClosedPromiseInitialize(reader);
        }
        else if (stream._state === 'closed') {
            defaultReaderClosedPromiseInitializeAsResolved(reader);
        }
        else {
            defaultReaderClosedPromiseInitializeAsRejected(reader, stream._storedError);
        }
    }
    // A client of ReadableStreamDefaultReader and ReadableStreamBYOBReader may use these functions directly to bypass state
    // check.
    function ReadableStreamReaderGenericCancel(reader, reason) {
        const stream = reader._ownerReadableStream;
        return ReadableStreamCancel(stream, reason);
    }
    function ReadableStreamReaderGenericRelease(reader) {
        if (reader._ownerReadableStream._state === 'readable') {
            defaultReaderClosedPromiseReject(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
        }
        else {
            defaultReaderClosedPromiseResetToRejected(reader, new TypeError(`Reader was released and can no longer be used to monitor the stream's closedness`));
        }
        reader._ownerReadableStream._reader = undefined;
        reader._ownerReadableStream = undefined;
    }
    // Helper functions for the readers.
    function readerLockException(name) {
        return new TypeError('Cannot ' + name + ' a stream using a released reader');
    }
    // Helper functions for the ReadableStreamDefaultReader.
    function defaultReaderClosedPromiseInitialize(reader) {
        reader._closedPromise = newPromise((resolve, reject) => {
            reader._closedPromise_resolve = resolve;
            reader._closedPromise_reject = reject;
        });
    }
    function defaultReaderClosedPromiseInitializeAsRejected(reader, reason) {
        defaultReaderClosedPromiseInitialize(reader);
        defaultReaderClosedPromiseReject(reader, reason);
    }
    function defaultReaderClosedPromiseInitializeAsResolved(reader) {
        defaultReaderClosedPromiseInitialize(reader);
        defaultReaderClosedPromiseResolve(reader);
    }
    function defaultReaderClosedPromiseReject(reader, reason) {
        if (reader._closedPromise_reject === undefined) {
            return;
        }
        setPromiseIsHandledToTrue(reader._closedPromise);
        reader._closedPromise_reject(reason);
        reader._closedPromise_resolve = undefined;
        reader._closedPromise_reject = undefined;
    }
    function defaultReaderClosedPromiseResetToRejected(reader, reason) {
        defaultReaderClosedPromiseInitializeAsRejected(reader, reason);
    }
    function defaultReaderClosedPromiseResolve(reader) {
        if (reader._closedPromise_resolve === undefined) {
            return;
        }
        reader._closedPromise_resolve(undefined);
        reader._closedPromise_resolve = undefined;
        reader._closedPromise_reject = undefined;
    }

    const AbortSteps = SymbolPolyfill('[[AbortSteps]]');
    const ErrorSteps = SymbolPolyfill('[[ErrorSteps]]');
    const CancelSteps = SymbolPolyfill('[[CancelSteps]]');
    const PullSteps = SymbolPolyfill('[[PullSteps]]');

    /// <reference lib="es2015.core" />
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isFinite#Polyfill
    const NumberIsFinite = Number.isFinite || function (x) {
        return typeof x === 'number' && isFinite(x);
    };

    /// <reference lib="es2015.core" />
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc#Polyfill
    const MathTrunc = Math.trunc || function (v) {
        return v < 0 ? Math.ceil(v) : Math.floor(v);
    };

    // https://heycam.github.io/webidl/#idl-dictionaries
    function isDictionary(x) {
        return typeof x === 'object' || typeof x === 'function';
    }
    function assertDictionary(obj, context) {
        if (obj !== undefined && !isDictionary(obj)) {
            throw new TypeError(`${context} is not an object.`);
        }
    }
    // https://heycam.github.io/webidl/#idl-callback-functions
    function assertFunction(x, context) {
        if (typeof x !== 'function') {
            throw new TypeError(`${context} is not a function.`);
        }
    }
    // https://heycam.github.io/webidl/#idl-object
    function isObject(x) {
        return (typeof x === 'object' && x !== null) || typeof x === 'function';
    }
    function assertObject(x, context) {
        if (!isObject(x)) {
            throw new TypeError(`${context} is not an object.`);
        }
    }
    function assertRequiredArgument(x, position, context) {
        if (x === undefined) {
            throw new TypeError(`Parameter ${position} is required in '${context}'.`);
        }
    }
    function assertRequiredField(x, field, context) {
        if (x === undefined) {
            throw new TypeError(`${field} is required in '${context}'.`);
        }
    }
    // https://heycam.github.io/webidl/#idl-unrestricted-double
    function convertUnrestrictedDouble(value) {
        return Number(value);
    }
    function censorNegativeZero(x) {
        return x === 0 ? 0 : x;
    }
    function integerPart(x) {
        return censorNegativeZero(MathTrunc(x));
    }
    // https://heycam.github.io/webidl/#idl-unsigned-long-long
    function convertUnsignedLongLongWithEnforceRange(value, context) {
        const lowerBound = 0;
        const upperBound = Number.MAX_SAFE_INTEGER;
        let x = Number(value);
        x = censorNegativeZero(x);
        if (!NumberIsFinite(x)) {
            throw new TypeError(`${context} is not a finite number`);
        }
        x = integerPart(x);
        if (x < lowerBound || x > upperBound) {
            throw new TypeError(`${context} is outside the accepted range of ${lowerBound} to ${upperBound}, inclusive`);
        }
        if (!NumberIsFinite(x) || x === 0) {
            return 0;
        }
        // TODO Use BigInt if supported?
        // let xBigInt = BigInt(integerPart(x));
        // xBigInt = BigInt.asUintN(64, xBigInt);
        // return Number(xBigInt);
        return x;
    }

    function assertReadableStream(x, context) {
        if (!IsReadableStream(x)) {
            throw new TypeError(`${context} is not a ReadableStream.`);
        }
    }

    // Abstract operations for the ReadableStream.
    function AcquireReadableStreamDefaultReader(stream) {
        return new ReadableStreamDefaultReader(stream);
    }
    // ReadableStream API exposed for controllers.
    function ReadableStreamAddReadRequest(stream, readRequest) {
        stream._reader._readRequests.push(readRequest);
    }
    function ReadableStreamFulfillReadRequest(stream, chunk, done) {
        const reader = stream._reader;
        const readRequest = reader._readRequests.shift();
        if (done) {
            readRequest._closeSteps();
        }
        else {
            readRequest._chunkSteps(chunk);
        }
    }
    function ReadableStreamGetNumReadRequests(stream) {
        return stream._reader._readRequests.length;
    }
    function ReadableStreamHasDefaultReader(stream) {
        const reader = stream._reader;
        if (reader === undefined) {
            return false;
        }
        if (!IsReadableStreamDefaultReader(reader)) {
            return false;
        }
        return true;
    }
    /**
     * A default reader vended by a {@link ReadableStream}.
     *
     * @public
     */
    class ReadableStreamDefaultReader {
        constructor(stream) {
            assertRequiredArgument(stream, 1, 'ReadableStreamDefaultReader');
            assertReadableStream(stream, 'First parameter');
            if (IsReadableStreamLocked(stream)) {
                throw new TypeError('This stream has already been locked for exclusive reading by another reader');
            }
            ReadableStreamReaderGenericInitialize(this, stream);
            this._readRequests = new SimpleQueue();
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed,
         * or rejected if the stream ever errors or the reader's lock is released before the stream finishes closing.
         */
        get closed() {
            if (!IsReadableStreamDefaultReader(this)) {
                return promiseRejectedWith(defaultReaderBrandCheckException('closed'));
            }
            return this._closedPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(reason = undefined) {
            if (!IsReadableStreamDefaultReader(this)) {
                return promiseRejectedWith(defaultReaderBrandCheckException('cancel'));
            }
            if (this._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('cancel'));
            }
            return ReadableStreamReaderGenericCancel(this, reason);
        }
        /**
         * Returns a promise that allows access to the next chunk from the stream's internal queue, if available.
         *
         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.
         */
        read() {
            if (!IsReadableStreamDefaultReader(this)) {
                return promiseRejectedWith(defaultReaderBrandCheckException('read'));
            }
            if (this._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('read from'));
            }
            let resolvePromise;
            let rejectPromise;
            const promise = newPromise((resolve, reject) => {
                resolvePromise = resolve;
                rejectPromise = reject;
            });
            const readRequest = {
                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),
                _closeSteps: () => resolvePromise({ value: undefined, done: true }),
                _errorSteps: e => rejectPromise(e)
            };
            ReadableStreamDefaultReaderRead(this, readRequest);
            return promise;
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamDefaultReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
            if (!IsReadableStreamDefaultReader(this)) {
                throw defaultReaderBrandCheckException('releaseLock');
            }
            if (this._ownerReadableStream === undefined) {
                return;
            }
            if (this._readRequests.length > 0) {
                throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');
            }
            ReadableStreamReaderGenericRelease(this);
        }
    }
    Object.defineProperties(ReadableStreamDefaultReader.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStreamDefaultReader.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStreamDefaultReader',
            configurable: true
        });
    }
    // Abstract operations for the readers.
    function IsReadableStreamDefaultReader(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_readRequests')) {
            return false;
        }
        return x instanceof ReadableStreamDefaultReader;
    }
    function ReadableStreamDefaultReaderRead(reader, readRequest) {
        const stream = reader._ownerReadableStream;
        stream._disturbed = true;
        if (stream._state === 'closed') {
            readRequest._closeSteps();
        }
        else if (stream._state === 'errored') {
            readRequest._errorSteps(stream._storedError);
        }
        else {
            stream._readableStreamController[PullSteps](readRequest);
        }
    }
    // Helper functions for the ReadableStreamDefaultReader.
    function defaultReaderBrandCheckException(name) {
        return new TypeError(`ReadableStreamDefaultReader.prototype.${name} can only be used on a ReadableStreamDefaultReader`);
    }

    /// <reference lib="es2018.asynciterable" />
    /* eslint-disable @typescript-eslint/no-empty-function */
    const AsyncIteratorPrototype = Object.getPrototypeOf(Object.getPrototypeOf(async function* () { }).prototype);

    /// <reference lib="es2018.asynciterable" />
    class ReadableStreamAsyncIteratorImpl {
        constructor(reader, preventCancel) {
            this._ongoingPromise = undefined;
            this._isFinished = false;
            this._reader = reader;
            this._preventCancel = preventCancel;
        }
        next() {
            const nextSteps = () => this._nextSteps();
            this._ongoingPromise = this._ongoingPromise ?
                transformPromiseWith(this._ongoingPromise, nextSteps, nextSteps) :
                nextSteps();
            return this._ongoingPromise;
        }
        return(value) {
            const returnSteps = () => this._returnSteps(value);
            return this._ongoingPromise ?
                transformPromiseWith(this._ongoingPromise, returnSteps, returnSteps) :
                returnSteps();
        }
        _nextSteps() {
            if (this._isFinished) {
                return Promise.resolve({ value: undefined, done: true });
            }
            const reader = this._reader;
            if (reader._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('iterate'));
            }
            let resolvePromise;
            let rejectPromise;
            const promise = newPromise((resolve, reject) => {
                resolvePromise = resolve;
                rejectPromise = reject;
            });
            const readRequest = {
                _chunkSteps: chunk => {
                    this._ongoingPromise = undefined;
                    // This needs to be delayed by one microtask, otherwise we stop pulling too early which breaks a test.
                    // FIXME Is this a bug in the specification, or in the test?
                    queueMicrotask(() => resolvePromise({ value: chunk, done: false }));
                },
                _closeSteps: () => {
                    this._ongoingPromise = undefined;
                    this._isFinished = true;
                    ReadableStreamReaderGenericRelease(reader);
                    resolvePromise({ value: undefined, done: true });
                },
                _errorSteps: reason => {
                    this._ongoingPromise = undefined;
                    this._isFinished = true;
                    ReadableStreamReaderGenericRelease(reader);
                    rejectPromise(reason);
                }
            };
            ReadableStreamDefaultReaderRead(reader, readRequest);
            return promise;
        }
        _returnSteps(value) {
            if (this._isFinished) {
                return Promise.resolve({ value, done: true });
            }
            this._isFinished = true;
            const reader = this._reader;
            if (reader._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('finish iterating'));
            }
            if (!this._preventCancel) {
                const result = ReadableStreamReaderGenericCancel(reader, value);
                ReadableStreamReaderGenericRelease(reader);
                return transformPromiseWith(result, () => ({ value, done: true }));
            }
            ReadableStreamReaderGenericRelease(reader);
            return promiseResolvedWith({ value, done: true });
        }
    }
    const ReadableStreamAsyncIteratorPrototype = {
        next() {
            if (!IsReadableStreamAsyncIterator(this)) {
                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('next'));
            }
            return this._asyncIteratorImpl.next();
        },
        return(value) {
            if (!IsReadableStreamAsyncIterator(this)) {
                return promiseRejectedWith(streamAsyncIteratorBrandCheckException('return'));
            }
            return this._asyncIteratorImpl.return(value);
        }
    };
    if (AsyncIteratorPrototype !== undefined) {
        Object.setPrototypeOf(ReadableStreamAsyncIteratorPrototype, AsyncIteratorPrototype);
    }
    // Abstract operations for the ReadableStream.
    function AcquireReadableStreamAsyncIterator(stream, preventCancel) {
        const reader = AcquireReadableStreamDefaultReader(stream);
        const impl = new ReadableStreamAsyncIteratorImpl(reader, preventCancel);
        const iterator = Object.create(ReadableStreamAsyncIteratorPrototype);
        iterator._asyncIteratorImpl = impl;
        return iterator;
    }
    function IsReadableStreamAsyncIterator(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_asyncIteratorImpl')) {
            return false;
        }
        try {
            // noinspection SuspiciousTypeOfGuard
            return x._asyncIteratorImpl instanceof
                ReadableStreamAsyncIteratorImpl;
        }
        catch (_a) {
            return false;
        }
    }
    // Helper functions for the ReadableStream.
    function streamAsyncIteratorBrandCheckException(name) {
        return new TypeError(`ReadableStreamAsyncIterator.${name} can only be used on a ReadableSteamAsyncIterator`);
    }

    /// <reference lib="es2015.core" />
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN#Polyfill
    const NumberIsNaN = Number.isNaN || function (x) {
        // eslint-disable-next-line no-self-compare
        return x !== x;
    };

    function CreateArrayFromList(elements) {
        // We use arrays to represent lists, so this is basically a no-op.
        // Do a slice though just in case we happen to depend on the unique-ness.
        return elements.slice();
    }
    function CopyDataBlockBytes(dest, destOffset, src, srcOffset, n) {
        new Uint8Array(dest).set(new Uint8Array(src, srcOffset, n), destOffset);
    }
    // Not implemented correctly
    function TransferArrayBuffer(O) {
        return O;
    }
    // Not implemented correctly
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    function IsDetachedBuffer(O) {
        return false;
    }
    function ArrayBufferSlice(buffer, begin, end) {
        // ArrayBuffer.prototype.slice is not available on IE10
        // https://www.caniuse.com/mdn-javascript_builtins_arraybuffer_slice
        if (buffer.slice) {
            return buffer.slice(begin, end);
        }
        const length = end - begin;
        const slice = new ArrayBuffer(length);
        CopyDataBlockBytes(slice, 0, buffer, begin, length);
        return slice;
    }

    function IsNonNegativeNumber(v) {
        if (typeof v !== 'number') {
            return false;
        }
        if (NumberIsNaN(v)) {
            return false;
        }
        if (v < 0) {
            return false;
        }
        return true;
    }
    function CloneAsUint8Array(O) {
        const buffer = ArrayBufferSlice(O.buffer, O.byteOffset, O.byteOffset + O.byteLength);
        return new Uint8Array(buffer);
    }

    function DequeueValue(container) {
        const pair = container._queue.shift();
        container._queueTotalSize -= pair.size;
        if (container._queueTotalSize < 0) {
            container._queueTotalSize = 0;
        }
        return pair.value;
    }
    function EnqueueValueWithSize(container, value, size) {
        if (!IsNonNegativeNumber(size) || size === Infinity) {
            throw new RangeError('Size must be a finite, non-NaN, non-negative number.');
        }
        container._queue.push({ value, size });
        container._queueTotalSize += size;
    }
    function PeekQueueValue(container) {
        const pair = container._queue.peek();
        return pair.value;
    }
    function ResetQueue(container) {
        container._queue = new SimpleQueue();
        container._queueTotalSize = 0;
    }

    /**
     * A pull-into request in a {@link ReadableByteStreamController}.
     *
     * @public
     */
    class ReadableStreamBYOBRequest {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * Returns the view for writing in to, or `null` if the BYOB request has already been responded to.
         */
        get view() {
            if (!IsReadableStreamBYOBRequest(this)) {
                throw byobRequestBrandCheckException('view');
            }
            return this._view;
        }
        respond(bytesWritten) {
            if (!IsReadableStreamBYOBRequest(this)) {
                throw byobRequestBrandCheckException('respond');
            }
            assertRequiredArgument(bytesWritten, 1, 'respond');
            bytesWritten = convertUnsignedLongLongWithEnforceRange(bytesWritten, 'First parameter');
            if (this._associatedReadableByteStreamController === undefined) {
                throw new TypeError('This BYOB request has been invalidated');
            }
            if (IsDetachedBuffer(this._view.buffer)) ;
            ReadableByteStreamControllerRespond(this._associatedReadableByteStreamController, bytesWritten);
        }
        respondWithNewView(view) {
            if (!IsReadableStreamBYOBRequest(this)) {
                throw byobRequestBrandCheckException('respondWithNewView');
            }
            assertRequiredArgument(view, 1, 'respondWithNewView');
            if (!ArrayBuffer.isView(view)) {
                throw new TypeError('You can only respond with array buffer views');
            }
            if (this._associatedReadableByteStreamController === undefined) {
                throw new TypeError('This BYOB request has been invalidated');
            }
            if (IsDetachedBuffer(view.buffer)) ;
            ReadableByteStreamControllerRespondWithNewView(this._associatedReadableByteStreamController, view);
        }
    }
    Object.defineProperties(ReadableStreamBYOBRequest.prototype, {
        respond: { enumerable: true },
        respondWithNewView: { enumerable: true },
        view: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStreamBYOBRequest.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStreamBYOBRequest',
            configurable: true
        });
    }
    /**
     * Allows control of a {@link ReadableStream | readable byte stream}'s state and internal queue.
     *
     * @public
     */
    class ReadableByteStreamController {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * Returns the current BYOB pull request, or `null` if there isn't one.
         */
        get byobRequest() {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('byobRequest');
            }
            return ReadableByteStreamControllerGetBYOBRequest(this);
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying byte source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('desiredSize');
            }
            return ReadableByteStreamControllerGetDesiredSize(this);
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('close');
            }
            if (this._closeRequested) {
                throw new TypeError('The stream has already been closed; do not close it again!');
            }
            const state = this._controlledReadableByteStream._state;
            if (state !== 'readable') {
                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be closed`);
            }
            ReadableByteStreamControllerClose(this);
        }
        enqueue(chunk) {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('enqueue');
            }
            assertRequiredArgument(chunk, 1, 'enqueue');
            if (!ArrayBuffer.isView(chunk)) {
                throw new TypeError('chunk must be an array buffer view');
            }
            if (chunk.byteLength === 0) {
                throw new TypeError('chunk must have non-zero byteLength');
            }
            if (chunk.buffer.byteLength === 0) {
                throw new TypeError(`chunk's buffer must have non-zero byteLength`);
            }
            if (this._closeRequested) {
                throw new TypeError('stream is closed or draining');
            }
            const state = this._controlledReadableByteStream._state;
            if (state !== 'readable') {
                throw new TypeError(`The stream (in ${state} state) is not in the readable state and cannot be enqueued to`);
            }
            ReadableByteStreamControllerEnqueue(this, chunk);
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(e = undefined) {
            if (!IsReadableByteStreamController(this)) {
                throw byteStreamControllerBrandCheckException('error');
            }
            ReadableByteStreamControllerError(this, e);
        }
        /** @internal */
        [CancelSteps](reason) {
            ReadableByteStreamControllerClearPendingPullIntos(this);
            ResetQueue(this);
            const result = this._cancelAlgorithm(reason);
            ReadableByteStreamControllerClearAlgorithms(this);
            return result;
        }
        /** @internal */
        [PullSteps](readRequest) {
            const stream = this._controlledReadableByteStream;
            if (this._queueTotalSize > 0) {
                const entry = this._queue.shift();
                this._queueTotalSize -= entry.byteLength;
                ReadableByteStreamControllerHandleQueueDrain(this);
                const view = new Uint8Array(entry.buffer, entry.byteOffset, entry.byteLength);
                readRequest._chunkSteps(view);
                return;
            }
            const autoAllocateChunkSize = this._autoAllocateChunkSize;
            if (autoAllocateChunkSize !== undefined) {
                let buffer;
                try {
                    buffer = new ArrayBuffer(autoAllocateChunkSize);
                }
                catch (bufferE) {
                    readRequest._errorSteps(bufferE);
                    return;
                }
                const pullIntoDescriptor = {
                    buffer,
                    bufferByteLength: autoAllocateChunkSize,
                    byteOffset: 0,
                    byteLength: autoAllocateChunkSize,
                    bytesFilled: 0,
                    elementSize: 1,
                    viewConstructor: Uint8Array,
                    readerType: 'default'
                };
                this._pendingPullIntos.push(pullIntoDescriptor);
            }
            ReadableStreamAddReadRequest(stream, readRequest);
            ReadableByteStreamControllerCallPullIfNeeded(this);
        }
    }
    Object.defineProperties(ReadableByteStreamController.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        byobRequest: { enumerable: true },
        desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableByteStreamController.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableByteStreamController',
            configurable: true
        });
    }
    // Abstract operations for the ReadableByteStreamController.
    function IsReadableByteStreamController(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableByteStream')) {
            return false;
        }
        return x instanceof ReadableByteStreamController;
    }
    function IsReadableStreamBYOBRequest(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_associatedReadableByteStreamController')) {
            return false;
        }
        return x instanceof ReadableStreamBYOBRequest;
    }
    function ReadableByteStreamControllerCallPullIfNeeded(controller) {
        const shouldPull = ReadableByteStreamControllerShouldCallPull(controller);
        if (!shouldPull) {
            return;
        }
        if (controller._pulling) {
            controller._pullAgain = true;
            return;
        }
        controller._pulling = true;
        // TODO: Test controller argument
        const pullPromise = controller._pullAlgorithm();
        uponPromise(pullPromise, () => {
            controller._pulling = false;
            if (controller._pullAgain) {
                controller._pullAgain = false;
                ReadableByteStreamControllerCallPullIfNeeded(controller);
            }
        }, e => {
            ReadableByteStreamControllerError(controller, e);
        });
    }
    function ReadableByteStreamControllerClearPendingPullIntos(controller) {
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        controller._pendingPullIntos = new SimpleQueue();
    }
    function ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor) {
        let done = false;
        if (stream._state === 'closed') {
            done = true;
        }
        const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
        if (pullIntoDescriptor.readerType === 'default') {
            ReadableStreamFulfillReadRequest(stream, filledView, done);
        }
        else {
            ReadableStreamFulfillReadIntoRequest(stream, filledView, done);
        }
    }
    function ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor) {
        const bytesFilled = pullIntoDescriptor.bytesFilled;
        const elementSize = pullIntoDescriptor.elementSize;
        return new pullIntoDescriptor.viewConstructor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, bytesFilled / elementSize);
    }
    function ReadableByteStreamControllerEnqueueChunkToQueue(controller, buffer, byteOffset, byteLength) {
        controller._queue.push({ buffer, byteOffset, byteLength });
        controller._queueTotalSize += byteLength;
    }
    function ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor) {
        const elementSize = pullIntoDescriptor.elementSize;
        const currentAlignedBytes = pullIntoDescriptor.bytesFilled - pullIntoDescriptor.bytesFilled % elementSize;
        const maxBytesToCopy = Math.min(controller._queueTotalSize, pullIntoDescriptor.byteLength - pullIntoDescriptor.bytesFilled);
        const maxBytesFilled = pullIntoDescriptor.bytesFilled + maxBytesToCopy;
        const maxAlignedBytes = maxBytesFilled - maxBytesFilled % elementSize;
        let totalBytesToCopyRemaining = maxBytesToCopy;
        let ready = false;
        if (maxAlignedBytes > currentAlignedBytes) {
            totalBytesToCopyRemaining = maxAlignedBytes - pullIntoDescriptor.bytesFilled;
            ready = true;
        }
        const queue = controller._queue;
        while (totalBytesToCopyRemaining > 0) {
            const headOfQueue = queue.peek();
            const bytesToCopy = Math.min(totalBytesToCopyRemaining, headOfQueue.byteLength);
            const destStart = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
            CopyDataBlockBytes(pullIntoDescriptor.buffer, destStart, headOfQueue.buffer, headOfQueue.byteOffset, bytesToCopy);
            if (headOfQueue.byteLength === bytesToCopy) {
                queue.shift();
            }
            else {
                headOfQueue.byteOffset += bytesToCopy;
                headOfQueue.byteLength -= bytesToCopy;
            }
            controller._queueTotalSize -= bytesToCopy;
            ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesToCopy, pullIntoDescriptor);
            totalBytesToCopyRemaining -= bytesToCopy;
        }
        return ready;
    }
    function ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, size, pullIntoDescriptor) {
        pullIntoDescriptor.bytesFilled += size;
    }
    function ReadableByteStreamControllerHandleQueueDrain(controller) {
        if (controller._queueTotalSize === 0 && controller._closeRequested) {
            ReadableByteStreamControllerClearAlgorithms(controller);
            ReadableStreamClose(controller._controlledReadableByteStream);
        }
        else {
            ReadableByteStreamControllerCallPullIfNeeded(controller);
        }
    }
    function ReadableByteStreamControllerInvalidateBYOBRequest(controller) {
        if (controller._byobRequest === null) {
            return;
        }
        controller._byobRequest._associatedReadableByteStreamController = undefined;
        controller._byobRequest._view = null;
        controller._byobRequest = null;
    }
    function ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller) {
        while (controller._pendingPullIntos.length > 0) {
            if (controller._queueTotalSize === 0) {
                return;
            }
            const pullIntoDescriptor = controller._pendingPullIntos.peek();
            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
                ReadableByteStreamControllerShiftPendingPullInto(controller);
                ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
            }
        }
    }
    function ReadableByteStreamControllerPullInto(controller, view, readIntoRequest) {
        const stream = controller._controlledReadableByteStream;
        let elementSize = 1;
        if (view.constructor !== DataView) {
            elementSize = view.constructor.BYTES_PER_ELEMENT;
        }
        const ctor = view.constructor;
        // try {
        const buffer = TransferArrayBuffer(view.buffer);
        // } catch (e) {
        //   readIntoRequest._errorSteps(e);
        //   return;
        // }
        const pullIntoDescriptor = {
            buffer,
            bufferByteLength: buffer.byteLength,
            byteOffset: view.byteOffset,
            byteLength: view.byteLength,
            bytesFilled: 0,
            elementSize,
            viewConstructor: ctor,
            readerType: 'byob'
        };
        if (controller._pendingPullIntos.length > 0) {
            controller._pendingPullIntos.push(pullIntoDescriptor);
            // No ReadableByteStreamControllerCallPullIfNeeded() call since:
            // - No change happens on desiredSize
            // - The source has already been notified of that there's at least 1 pending read(view)
            ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
            return;
        }
        if (stream._state === 'closed') {
            const emptyView = new ctor(pullIntoDescriptor.buffer, pullIntoDescriptor.byteOffset, 0);
            readIntoRequest._closeSteps(emptyView);
            return;
        }
        if (controller._queueTotalSize > 0) {
            if (ReadableByteStreamControllerFillPullIntoDescriptorFromQueue(controller, pullIntoDescriptor)) {
                const filledView = ReadableByteStreamControllerConvertPullIntoDescriptor(pullIntoDescriptor);
                ReadableByteStreamControllerHandleQueueDrain(controller);
                readIntoRequest._chunkSteps(filledView);
                return;
            }
            if (controller._closeRequested) {
                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');
                ReadableByteStreamControllerError(controller, e);
                readIntoRequest._errorSteps(e);
                return;
            }
        }
        controller._pendingPullIntos.push(pullIntoDescriptor);
        ReadableStreamAddReadIntoRequest(stream, readIntoRequest);
        ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerRespondInClosedState(controller, firstDescriptor) {
        const stream = controller._controlledReadableByteStream;
        if (ReadableStreamHasBYOBReader(stream)) {
            while (ReadableStreamGetNumReadIntoRequests(stream) > 0) {
                const pullIntoDescriptor = ReadableByteStreamControllerShiftPendingPullInto(controller);
                ReadableByteStreamControllerCommitPullIntoDescriptor(stream, pullIntoDescriptor);
            }
        }
    }
    function ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, pullIntoDescriptor) {
        ReadableByteStreamControllerFillHeadPullIntoDescriptor(controller, bytesWritten, pullIntoDescriptor);
        if (pullIntoDescriptor.bytesFilled < pullIntoDescriptor.elementSize) {
            return;
        }
        ReadableByteStreamControllerShiftPendingPullInto(controller);
        const remainderSize = pullIntoDescriptor.bytesFilled % pullIntoDescriptor.elementSize;
        if (remainderSize > 0) {
            const end = pullIntoDescriptor.byteOffset + pullIntoDescriptor.bytesFilled;
            const remainder = ArrayBufferSlice(pullIntoDescriptor.buffer, end - remainderSize, end);
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, remainder, 0, remainder.byteLength);
        }
        pullIntoDescriptor.bytesFilled -= remainderSize;
        ReadableByteStreamControllerCommitPullIntoDescriptor(controller._controlledReadableByteStream, pullIntoDescriptor);
        ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
    }
    function ReadableByteStreamControllerRespondInternal(controller, bytesWritten) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        const state = controller._controlledReadableByteStream._state;
        if (state === 'closed') {
            ReadableByteStreamControllerRespondInClosedState(controller);
        }
        else {
            ReadableByteStreamControllerRespondInReadableState(controller, bytesWritten, firstDescriptor);
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerShiftPendingPullInto(controller) {
        const descriptor = controller._pendingPullIntos.shift();
        return descriptor;
    }
    function ReadableByteStreamControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableByteStream;
        if (stream._state !== 'readable') {
            return false;
        }
        if (controller._closeRequested) {
            return false;
        }
        if (!controller._started) {
            return false;
        }
        if (ReadableStreamHasDefaultReader(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
            return true;
        }
        if (ReadableStreamHasBYOBReader(stream) && ReadableStreamGetNumReadIntoRequests(stream) > 0) {
            return true;
        }
        const desiredSize = ReadableByteStreamControllerGetDesiredSize(controller);
        if (desiredSize > 0) {
            return true;
        }
        return false;
    }
    function ReadableByteStreamControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = undefined;
        controller._cancelAlgorithm = undefined;
    }
    // A client of ReadableByteStreamController may use these functions directly to bypass state check.
    function ReadableByteStreamControllerClose(controller) {
        const stream = controller._controlledReadableByteStream;
        if (controller._closeRequested || stream._state !== 'readable') {
            return;
        }
        if (controller._queueTotalSize > 0) {
            controller._closeRequested = true;
            return;
        }
        if (controller._pendingPullIntos.length > 0) {
            const firstPendingPullInto = controller._pendingPullIntos.peek();
            if (firstPendingPullInto.bytesFilled > 0) {
                const e = new TypeError('Insufficient bytes to fill elements in the given buffer');
                ReadableByteStreamControllerError(controller, e);
                throw e;
            }
        }
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamClose(stream);
    }
    function ReadableByteStreamControllerEnqueue(controller, chunk) {
        const stream = controller._controlledReadableByteStream;
        if (controller._closeRequested || stream._state !== 'readable') {
            return;
        }
        const buffer = chunk.buffer;
        const byteOffset = chunk.byteOffset;
        const byteLength = chunk.byteLength;
        const transferredBuffer = TransferArrayBuffer(buffer);
        if (controller._pendingPullIntos.length > 0) {
            const firstPendingPullInto = controller._pendingPullIntos.peek();
            if (IsDetachedBuffer(firstPendingPullInto.buffer)) ;
            firstPendingPullInto.buffer = TransferArrayBuffer(firstPendingPullInto.buffer);
        }
        ReadableByteStreamControllerInvalidateBYOBRequest(controller);
        if (ReadableStreamHasDefaultReader(stream)) {
            if (ReadableStreamGetNumReadRequests(stream) === 0) {
                ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
            }
            else {
                if (controller._pendingPullIntos.length > 0) {
                    ReadableByteStreamControllerShiftPendingPullInto(controller);
                }
                const transferredView = new Uint8Array(transferredBuffer, byteOffset, byteLength);
                ReadableStreamFulfillReadRequest(stream, transferredView, false);
            }
        }
        else if (ReadableStreamHasBYOBReader(stream)) {
            // TODO: Ideally in this branch detaching should happen only if the buffer is not consumed fully.
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
            ReadableByteStreamControllerProcessPullIntoDescriptorsUsingQueue(controller);
        }
        else {
            ReadableByteStreamControllerEnqueueChunkToQueue(controller, transferredBuffer, byteOffset, byteLength);
        }
        ReadableByteStreamControllerCallPullIfNeeded(controller);
    }
    function ReadableByteStreamControllerError(controller, e) {
        const stream = controller._controlledReadableByteStream;
        if (stream._state !== 'readable') {
            return;
        }
        ReadableByteStreamControllerClearPendingPullIntos(controller);
        ResetQueue(controller);
        ReadableByteStreamControllerClearAlgorithms(controller);
        ReadableStreamError(stream, e);
    }
    function ReadableByteStreamControllerGetBYOBRequest(controller) {
        if (controller._byobRequest === null && controller._pendingPullIntos.length > 0) {
            const firstDescriptor = controller._pendingPullIntos.peek();
            const view = new Uint8Array(firstDescriptor.buffer, firstDescriptor.byteOffset + firstDescriptor.bytesFilled, firstDescriptor.byteLength - firstDescriptor.bytesFilled);
            const byobRequest = Object.create(ReadableStreamBYOBRequest.prototype);
            SetUpReadableStreamBYOBRequest(byobRequest, controller, view);
            controller._byobRequest = byobRequest;
        }
        return controller._byobRequest;
    }
    function ReadableByteStreamControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableByteStream._state;
        if (state === 'errored') {
            return null;
        }
        if (state === 'closed') {
            return 0;
        }
        return controller._strategyHWM - controller._queueTotalSize;
    }
    function ReadableByteStreamControllerRespond(controller, bytesWritten) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const state = controller._controlledReadableByteStream._state;
        if (state === 'closed') {
            if (bytesWritten !== 0) {
                throw new TypeError('bytesWritten must be 0 when calling respond() on a closed stream');
            }
        }
        else {
            if (bytesWritten === 0) {
                throw new TypeError('bytesWritten must be greater than 0 when calling respond() on a readable stream');
            }
            if (firstDescriptor.bytesFilled + bytesWritten > firstDescriptor.byteLength) {
                throw new RangeError('bytesWritten out of range');
            }
        }
        firstDescriptor.buffer = TransferArrayBuffer(firstDescriptor.buffer);
        ReadableByteStreamControllerRespondInternal(controller, bytesWritten);
    }
    function ReadableByteStreamControllerRespondWithNewView(controller, view) {
        const firstDescriptor = controller._pendingPullIntos.peek();
        const state = controller._controlledReadableByteStream._state;
        if (state === 'closed') {
            if (view.byteLength !== 0) {
                throw new TypeError('The view\'s length must be 0 when calling respondWithNewView() on a closed stream');
            }
        }
        else {
            if (view.byteLength === 0) {
                throw new TypeError('The view\'s length must be greater than 0 when calling respondWithNewView() on a readable stream');
            }
        }
        if (firstDescriptor.byteOffset + firstDescriptor.bytesFilled !== view.byteOffset) {
            throw new RangeError('The region specified by view does not match byobRequest');
        }
        if (firstDescriptor.bufferByteLength !== view.buffer.byteLength) {
            throw new RangeError('The buffer of view has different capacity than byobRequest');
        }
        if (firstDescriptor.bytesFilled + view.byteLength > firstDescriptor.byteLength) {
            throw new RangeError('The region specified by view is larger than byobRequest');
        }
        const viewByteLength = view.byteLength;
        firstDescriptor.buffer = TransferArrayBuffer(view.buffer);
        ReadableByteStreamControllerRespondInternal(controller, viewByteLength);
    }
    function SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize) {
        controller._controlledReadableByteStream = stream;
        controller._pullAgain = false;
        controller._pulling = false;
        controller._byobRequest = null;
        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.
        controller._queue = controller._queueTotalSize = undefined;
        ResetQueue(controller);
        controller._closeRequested = false;
        controller._started = false;
        controller._strategyHWM = highWaterMark;
        controller._pullAlgorithm = pullAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        controller._autoAllocateChunkSize = autoAllocateChunkSize;
        controller._pendingPullIntos = new SimpleQueue();
        stream._readableStreamController = controller;
        const startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), () => {
            controller._started = true;
            ReadableByteStreamControllerCallPullIfNeeded(controller);
        }, r => {
            ReadableByteStreamControllerError(controller, r);
        });
    }
    function SetUpReadableByteStreamControllerFromUnderlyingSource(stream, underlyingByteSource, highWaterMark) {
        const controller = Object.create(ReadableByteStreamController.prototype);
        let startAlgorithm = () => undefined;
        let pullAlgorithm = () => promiseResolvedWith(undefined);
        let cancelAlgorithm = () => promiseResolvedWith(undefined);
        if (underlyingByteSource.start !== undefined) {
            startAlgorithm = () => underlyingByteSource.start(controller);
        }
        if (underlyingByteSource.pull !== undefined) {
            pullAlgorithm = () => underlyingByteSource.pull(controller);
        }
        if (underlyingByteSource.cancel !== undefined) {
            cancelAlgorithm = reason => underlyingByteSource.cancel(reason);
        }
        const autoAllocateChunkSize = underlyingByteSource.autoAllocateChunkSize;
        if (autoAllocateChunkSize === 0) {
            throw new TypeError('autoAllocateChunkSize must be greater than 0');
        }
        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, autoAllocateChunkSize);
    }
    function SetUpReadableStreamBYOBRequest(request, controller, view) {
        request._associatedReadableByteStreamController = controller;
        request._view = view;
    }
    // Helper functions for the ReadableStreamBYOBRequest.
    function byobRequestBrandCheckException(name) {
        return new TypeError(`ReadableStreamBYOBRequest.prototype.${name} can only be used on a ReadableStreamBYOBRequest`);
    }
    // Helper functions for the ReadableByteStreamController.
    function byteStreamControllerBrandCheckException(name) {
        return new TypeError(`ReadableByteStreamController.prototype.${name} can only be used on a ReadableByteStreamController`);
    }

    // Abstract operations for the ReadableStream.
    function AcquireReadableStreamBYOBReader(stream) {
        return new ReadableStreamBYOBReader(stream);
    }
    // ReadableStream API exposed for controllers.
    function ReadableStreamAddReadIntoRequest(stream, readIntoRequest) {
        stream._reader._readIntoRequests.push(readIntoRequest);
    }
    function ReadableStreamFulfillReadIntoRequest(stream, chunk, done) {
        const reader = stream._reader;
        const readIntoRequest = reader._readIntoRequests.shift();
        if (done) {
            readIntoRequest._closeSteps(chunk);
        }
        else {
            readIntoRequest._chunkSteps(chunk);
        }
    }
    function ReadableStreamGetNumReadIntoRequests(stream) {
        return stream._reader._readIntoRequests.length;
    }
    function ReadableStreamHasBYOBReader(stream) {
        const reader = stream._reader;
        if (reader === undefined) {
            return false;
        }
        if (!IsReadableStreamBYOBReader(reader)) {
            return false;
        }
        return true;
    }
    /**
     * A BYOB reader vended by a {@link ReadableStream}.
     *
     * @public
     */
    class ReadableStreamBYOBReader {
        constructor(stream) {
            assertRequiredArgument(stream, 1, 'ReadableStreamBYOBReader');
            assertReadableStream(stream, 'First parameter');
            if (IsReadableStreamLocked(stream)) {
                throw new TypeError('This stream has already been locked for exclusive reading by another reader');
            }
            if (!IsReadableByteStreamController(stream._readableStreamController)) {
                throw new TypeError('Cannot construct a ReadableStreamBYOBReader for a stream not constructed with a byte ' +
                    'source');
            }
            ReadableStreamReaderGenericInitialize(this, stream);
            this._readIntoRequests = new SimpleQueue();
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the reader's lock is released before the stream finishes closing.
         */
        get closed() {
            if (!IsReadableStreamBYOBReader(this)) {
                return promiseRejectedWith(byobReaderBrandCheckException('closed'));
            }
            return this._closedPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link ReadableStream.cancel | stream.cancel(reason)}.
         */
        cancel(reason = undefined) {
            if (!IsReadableStreamBYOBReader(this)) {
                return promiseRejectedWith(byobReaderBrandCheckException('cancel'));
            }
            if (this._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('cancel'));
            }
            return ReadableStreamReaderGenericCancel(this, reason);
        }
        /**
         * Attempts to reads bytes into view, and returns a promise resolved with the result.
         *
         * If reading a chunk causes the queue to become empty, more data will be pulled from the underlying source.
         */
        read(view) {
            if (!IsReadableStreamBYOBReader(this)) {
                return promiseRejectedWith(byobReaderBrandCheckException('read'));
            }
            if (!ArrayBuffer.isView(view)) {
                return promiseRejectedWith(new TypeError('view must be an array buffer view'));
            }
            if (view.byteLength === 0) {
                return promiseRejectedWith(new TypeError('view must have non-zero byteLength'));
            }
            if (view.buffer.byteLength === 0) {
                return promiseRejectedWith(new TypeError(`view's buffer must have non-zero byteLength`));
            }
            if (IsDetachedBuffer(view.buffer)) ;
            if (this._ownerReadableStream === undefined) {
                return promiseRejectedWith(readerLockException('read from'));
            }
            let resolvePromise;
            let rejectPromise;
            const promise = newPromise((resolve, reject) => {
                resolvePromise = resolve;
                rejectPromise = reject;
            });
            const readIntoRequest = {
                _chunkSteps: chunk => resolvePromise({ value: chunk, done: false }),
                _closeSteps: chunk => resolvePromise({ value: chunk, done: true }),
                _errorSteps: e => rejectPromise(e)
            };
            ReadableStreamBYOBReaderRead(this, view, readIntoRequest);
            return promise;
        }
        /**
         * Releases the reader's lock on the corresponding stream. After the lock is released, the reader is no longer active.
         * If the associated stream is errored when the lock is released, the reader will appear errored in the same way
         * from now on; otherwise, the reader will appear closed.
         *
         * A reader's lock cannot be released while it still has a pending read request, i.e., if a promise returned by
         * the reader's {@link ReadableStreamBYOBReader.read | read()} method has not yet been settled. Attempting to
         * do so will throw a `TypeError` and leave the reader locked to the stream.
         */
        releaseLock() {
            if (!IsReadableStreamBYOBReader(this)) {
                throw byobReaderBrandCheckException('releaseLock');
            }
            if (this._ownerReadableStream === undefined) {
                return;
            }
            if (this._readIntoRequests.length > 0) {
                throw new TypeError('Tried to release a reader lock when that reader has pending read() calls un-settled');
            }
            ReadableStreamReaderGenericRelease(this);
        }
    }
    Object.defineProperties(ReadableStreamBYOBReader.prototype, {
        cancel: { enumerable: true },
        read: { enumerable: true },
        releaseLock: { enumerable: true },
        closed: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStreamBYOBReader.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStreamBYOBReader',
            configurable: true
        });
    }
    // Abstract operations for the readers.
    function IsReadableStreamBYOBReader(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_readIntoRequests')) {
            return false;
        }
        return x instanceof ReadableStreamBYOBReader;
    }
    function ReadableStreamBYOBReaderRead(reader, view, readIntoRequest) {
        const stream = reader._ownerReadableStream;
        stream._disturbed = true;
        if (stream._state === 'errored') {
            readIntoRequest._errorSteps(stream._storedError);
        }
        else {
            ReadableByteStreamControllerPullInto(stream._readableStreamController, view, readIntoRequest);
        }
    }
    // Helper functions for the ReadableStreamBYOBReader.
    function byobReaderBrandCheckException(name) {
        return new TypeError(`ReadableStreamBYOBReader.prototype.${name} can only be used on a ReadableStreamBYOBReader`);
    }

    function ExtractHighWaterMark(strategy, defaultHWM) {
        const { highWaterMark } = strategy;
        if (highWaterMark === undefined) {
            return defaultHWM;
        }
        if (NumberIsNaN(highWaterMark) || highWaterMark < 0) {
            throw new RangeError('Invalid highWaterMark');
        }
        return highWaterMark;
    }
    function ExtractSizeAlgorithm(strategy) {
        const { size } = strategy;
        if (!size) {
            return () => 1;
        }
        return size;
    }

    function convertQueuingStrategy(init, context) {
        assertDictionary(init, context);
        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
        const size = init === null || init === void 0 ? void 0 : init.size;
        return {
            highWaterMark: highWaterMark === undefined ? undefined : convertUnrestrictedDouble(highWaterMark),
            size: size === undefined ? undefined : convertQueuingStrategySize(size, `${context} has member 'size' that`)
        };
    }
    function convertQueuingStrategySize(fn, context) {
        assertFunction(fn, context);
        return chunk => convertUnrestrictedDouble(fn(chunk));
    }

    function convertUnderlyingSink(original, context) {
        assertDictionary(original, context);
        const abort = original === null || original === void 0 ? void 0 : original.abort;
        const close = original === null || original === void 0 ? void 0 : original.close;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const type = original === null || original === void 0 ? void 0 : original.type;
        const write = original === null || original === void 0 ? void 0 : original.write;
        return {
            abort: abort === undefined ?
                undefined :
                convertUnderlyingSinkAbortCallback(abort, original, `${context} has member 'abort' that`),
            close: close === undefined ?
                undefined :
                convertUnderlyingSinkCloseCallback(close, original, `${context} has member 'close' that`),
            start: start === undefined ?
                undefined :
                convertUnderlyingSinkStartCallback(start, original, `${context} has member 'start' that`),
            write: write === undefined ?
                undefined :
                convertUnderlyingSinkWriteCallback(write, original, `${context} has member 'write' that`),
            type
        };
    }
    function convertUnderlyingSinkAbortCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
    }
    function convertUnderlyingSinkCloseCallback(fn, original, context) {
        assertFunction(fn, context);
        return () => promiseCall(fn, original, []);
    }
    function convertUnderlyingSinkStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertUnderlyingSinkWriteCallback(fn, original, context) {
        assertFunction(fn, context);
        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
    }

    function assertWritableStream(x, context) {
        if (!IsWritableStream(x)) {
            throw new TypeError(`${context} is not a WritableStream.`);
        }
    }

    function isAbortSignal(value) {
        if (typeof value !== 'object' || value === null) {
            return false;
        }
        try {
            return typeof value.aborted === 'boolean';
        }
        catch (_a) {
            // AbortSignal.prototype.aborted throws if its brand check fails
            return false;
        }
    }
    const supportsAbortController = typeof AbortController === 'function';
    /**
     * Construct a new AbortController, if supported by the platform.
     *
     * @internal
     */
    function createAbortController() {
        if (supportsAbortController) {
            return new AbortController();
        }
        return undefined;
    }

    /**
     * A writable stream represents a destination for data, into which you can write.
     *
     * @public
     */
    class WritableStream {
        constructor(rawUnderlyingSink = {}, rawStrategy = {}) {
            if (rawUnderlyingSink === undefined) {
                rawUnderlyingSink = null;
            }
            else {
                assertObject(rawUnderlyingSink, 'First parameter');
            }
            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');
            const underlyingSink = convertUnderlyingSink(rawUnderlyingSink, 'First parameter');
            InitializeWritableStream(this);
            const type = underlyingSink.type;
            if (type !== undefined) {
                throw new RangeError('Invalid type is specified');
            }
            const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
            const highWaterMark = ExtractHighWaterMark(strategy, 1);
            SetUpWritableStreamDefaultControllerFromUnderlyingSink(this, underlyingSink, highWaterMark, sizeAlgorithm);
        }
        /**
         * Returns whether or not the writable stream is locked to a writer.
         */
        get locked() {
            if (!IsWritableStream(this)) {
                throw streamBrandCheckException$2('locked');
            }
            return IsWritableStreamLocked(this);
        }
        /**
         * Aborts the stream, signaling that the producer can no longer successfully write to the stream and it is to be
         * immediately moved to an errored state, with any queued-up writes discarded. This will also execute any abort
         * mechanism of the underlying sink.
         *
         * The returned promise will fulfill if the stream shuts down successfully, or reject if the underlying sink signaled
         * that there was an error doing so. Additionally, it will reject with a `TypeError` (without attempting to cancel
         * the stream) if the stream is currently locked.
         */
        abort(reason = undefined) {
            if (!IsWritableStream(this)) {
                return promiseRejectedWith(streamBrandCheckException$2('abort'));
            }
            if (IsWritableStreamLocked(this)) {
                return promiseRejectedWith(new TypeError('Cannot abort a stream that already has a writer'));
            }
            return WritableStreamAbort(this, reason);
        }
        /**
         * Closes the stream. The underlying sink will finish processing any previously-written chunks, before invoking its
         * close behavior. During this time any further attempts to write will fail (without erroring the stream).
         *
         * The method returns a promise that will fulfill if all remaining chunks are successfully written and the stream
         * successfully closes, or rejects if an error is encountered during this process. Additionally, it will reject with
         * a `TypeError` (without attempting to cancel the stream) if the stream is currently locked.
         */
        close() {
            if (!IsWritableStream(this)) {
                return promiseRejectedWith(streamBrandCheckException$2('close'));
            }
            if (IsWritableStreamLocked(this)) {
                return promiseRejectedWith(new TypeError('Cannot close a stream that already has a writer'));
            }
            if (WritableStreamCloseQueuedOrInFlight(this)) {
                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));
            }
            return WritableStreamClose(this);
        }
        /**
         * Creates a {@link WritableStreamDefaultWriter | writer} and locks the stream to the new writer. While the stream
         * is locked, no other writer can be acquired until this one is released.
         *
         * This functionality is especially useful for creating abstractions that desire the ability to write to a stream
         * without interruption or interleaving. By getting a writer for the stream, you can ensure nobody else can write at
         * the same time, which would cause the resulting written data to be unpredictable and probably useless.
         */
        getWriter() {
            if (!IsWritableStream(this)) {
                throw streamBrandCheckException$2('getWriter');
            }
            return AcquireWritableStreamDefaultWriter(this);
        }
    }
    Object.defineProperties(WritableStream.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        getWriter: { enumerable: true },
        locked: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(WritableStream.prototype, SymbolPolyfill.toStringTag, {
            value: 'WritableStream',
            configurable: true
        });
    }
    // Abstract operations for the WritableStream.
    function AcquireWritableStreamDefaultWriter(stream) {
        return new WritableStreamDefaultWriter(stream);
    }
    // Throws if and only if startAlgorithm throws.
    function CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
        const stream = Object.create(WritableStream.prototype);
        InitializeWritableStream(stream);
        const controller = Object.create(WritableStreamDefaultController.prototype);
        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
        return stream;
    }
    function InitializeWritableStream(stream) {
        stream._state = 'writable';
        // The error that will be reported by new method calls once the state becomes errored. Only set when [[state]] is
        // 'erroring' or 'errored'. May be set to an undefined value.
        stream._storedError = undefined;
        stream._writer = undefined;
        // Initialize to undefined first because the constructor of the controller checks this
        // variable to validate the caller.
        stream._writableStreamController = undefined;
        // This queue is placed here instead of the writer class in order to allow for passing a writer to the next data
        // producer without waiting for the queued writes to finish.
        stream._writeRequests = new SimpleQueue();
        // Write requests are removed from _writeRequests when write() is called on the underlying sink. This prevents
        // them from being erroneously rejected on error. If a write() call is in-flight, the request is stored here.
        stream._inFlightWriteRequest = undefined;
        // The promise that was returned from writer.close(). Stored here because it may be fulfilled after the writer
        // has been detached.
        stream._closeRequest = undefined;
        // Close request is removed from _closeRequest when close() is called on the underlying sink. This prevents it
        // from being erroneously rejected on error. If a close() call is in-flight, the request is stored here.
        stream._inFlightCloseRequest = undefined;
        // The promise that was returned from writer.abort(). This may also be fulfilled after the writer has detached.
        stream._pendingAbortRequest = undefined;
        // The backpressure signal set by the controller.
        stream._backpressure = false;
    }
    function IsWritableStream(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_writableStreamController')) {
            return false;
        }
        return x instanceof WritableStream;
    }
    function IsWritableStreamLocked(stream) {
        if (stream._writer === undefined) {
            return false;
        }
        return true;
    }
    function WritableStreamAbort(stream, reason) {
        var _a;
        if (stream._state === 'closed' || stream._state === 'errored') {
            return promiseResolvedWith(undefined);
        }
        stream._writableStreamController._abortReason = reason;
        (_a = stream._writableStreamController._abortController) === null || _a === void 0 ? void 0 : _a.abort();
        // TypeScript narrows the type of `stream._state` down to 'writable' | 'erroring',
        // but it doesn't know that signaling abort runs author code that might have changed the state.
        // Widen the type again by casting to WritableStreamState.
        const state = stream._state;
        if (state === 'closed' || state === 'errored') {
            return promiseResolvedWith(undefined);
        }
        if (stream._pendingAbortRequest !== undefined) {
            return stream._pendingAbortRequest._promise;
        }
        let wasAlreadyErroring = false;
        if (state === 'erroring') {
            wasAlreadyErroring = true;
            // reason will not be used, so don't keep a reference to it.
            reason = undefined;
        }
        const promise = newPromise((resolve, reject) => {
            stream._pendingAbortRequest = {
                _promise: undefined,
                _resolve: resolve,
                _reject: reject,
                _reason: reason,
                _wasAlreadyErroring: wasAlreadyErroring
            };
        });
        stream._pendingAbortRequest._promise = promise;
        if (!wasAlreadyErroring) {
            WritableStreamStartErroring(stream, reason);
        }
        return promise;
    }
    function WritableStreamClose(stream) {
        const state = stream._state;
        if (state === 'closed' || state === 'errored') {
            return promiseRejectedWith(new TypeError(`The stream (in ${state} state) is not in the writable state and cannot be closed`));
        }
        const promise = newPromise((resolve, reject) => {
            const closeRequest = {
                _resolve: resolve,
                _reject: reject
            };
            stream._closeRequest = closeRequest;
        });
        const writer = stream._writer;
        if (writer !== undefined && stream._backpressure && state === 'writable') {
            defaultWriterReadyPromiseResolve(writer);
        }
        WritableStreamDefaultControllerClose(stream._writableStreamController);
        return promise;
    }
    // WritableStream API exposed for controllers.
    function WritableStreamAddWriteRequest(stream) {
        const promise = newPromise((resolve, reject) => {
            const writeRequest = {
                _resolve: resolve,
                _reject: reject
            };
            stream._writeRequests.push(writeRequest);
        });
        return promise;
    }
    function WritableStreamDealWithRejection(stream, error) {
        const state = stream._state;
        if (state === 'writable') {
            WritableStreamStartErroring(stream, error);
            return;
        }
        WritableStreamFinishErroring(stream);
    }
    function WritableStreamStartErroring(stream, reason) {
        const controller = stream._writableStreamController;
        stream._state = 'erroring';
        stream._storedError = reason;
        const writer = stream._writer;
        if (writer !== undefined) {
            WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, reason);
        }
        if (!WritableStreamHasOperationMarkedInFlight(stream) && controller._started) {
            WritableStreamFinishErroring(stream);
        }
    }
    function WritableStreamFinishErroring(stream) {
        stream._state = 'errored';
        stream._writableStreamController[ErrorSteps]();
        const storedError = stream._storedError;
        stream._writeRequests.forEach(writeRequest => {
            writeRequest._reject(storedError);
        });
        stream._writeRequests = new SimpleQueue();
        if (stream._pendingAbortRequest === undefined) {
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
            return;
        }
        const abortRequest = stream._pendingAbortRequest;
        stream._pendingAbortRequest = undefined;
        if (abortRequest._wasAlreadyErroring) {
            abortRequest._reject(storedError);
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
            return;
        }
        const promise = stream._writableStreamController[AbortSteps](abortRequest._reason);
        uponPromise(promise, () => {
            abortRequest._resolve();
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
        }, (reason) => {
            abortRequest._reject(reason);
            WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream);
        });
    }
    function WritableStreamFinishInFlightWrite(stream) {
        stream._inFlightWriteRequest._resolve(undefined);
        stream._inFlightWriteRequest = undefined;
    }
    function WritableStreamFinishInFlightWriteWithError(stream, error) {
        stream._inFlightWriteRequest._reject(error);
        stream._inFlightWriteRequest = undefined;
        WritableStreamDealWithRejection(stream, error);
    }
    function WritableStreamFinishInFlightClose(stream) {
        stream._inFlightCloseRequest._resolve(undefined);
        stream._inFlightCloseRequest = undefined;
        const state = stream._state;
        if (state === 'erroring') {
            // The error was too late to do anything, so it is ignored.
            stream._storedError = undefined;
            if (stream._pendingAbortRequest !== undefined) {
                stream._pendingAbortRequest._resolve();
                stream._pendingAbortRequest = undefined;
            }
        }
        stream._state = 'closed';
        const writer = stream._writer;
        if (writer !== undefined) {
            defaultWriterClosedPromiseResolve(writer);
        }
    }
    function WritableStreamFinishInFlightCloseWithError(stream, error) {
        stream._inFlightCloseRequest._reject(error);
        stream._inFlightCloseRequest = undefined;
        // Never execute sink abort() after sink close().
        if (stream._pendingAbortRequest !== undefined) {
            stream._pendingAbortRequest._reject(error);
            stream._pendingAbortRequest = undefined;
        }
        WritableStreamDealWithRejection(stream, error);
    }
    // TODO(ricea): Fix alphabetical order.
    function WritableStreamCloseQueuedOrInFlight(stream) {
        if (stream._closeRequest === undefined && stream._inFlightCloseRequest === undefined) {
            return false;
        }
        return true;
    }
    function WritableStreamHasOperationMarkedInFlight(stream) {
        if (stream._inFlightWriteRequest === undefined && stream._inFlightCloseRequest === undefined) {
            return false;
        }
        return true;
    }
    function WritableStreamMarkCloseRequestInFlight(stream) {
        stream._inFlightCloseRequest = stream._closeRequest;
        stream._closeRequest = undefined;
    }
    function WritableStreamMarkFirstWriteRequestInFlight(stream) {
        stream._inFlightWriteRequest = stream._writeRequests.shift();
    }
    function WritableStreamRejectCloseAndClosedPromiseIfNeeded(stream) {
        if (stream._closeRequest !== undefined) {
            stream._closeRequest._reject(stream._storedError);
            stream._closeRequest = undefined;
        }
        const writer = stream._writer;
        if (writer !== undefined) {
            defaultWriterClosedPromiseReject(writer, stream._storedError);
        }
    }
    function WritableStreamUpdateBackpressure(stream, backpressure) {
        const writer = stream._writer;
        if (writer !== undefined && backpressure !== stream._backpressure) {
            if (backpressure) {
                defaultWriterReadyPromiseReset(writer);
            }
            else {
                defaultWriterReadyPromiseResolve(writer);
            }
        }
        stream._backpressure = backpressure;
    }
    /**
     * A default writer vended by a {@link WritableStream}.
     *
     * @public
     */
    class WritableStreamDefaultWriter {
        constructor(stream) {
            assertRequiredArgument(stream, 1, 'WritableStreamDefaultWriter');
            assertWritableStream(stream, 'First parameter');
            if (IsWritableStreamLocked(stream)) {
                throw new TypeError('This stream has already been locked for exclusive writing by another writer');
            }
            this._ownerWritableStream = stream;
            stream._writer = this;
            const state = stream._state;
            if (state === 'writable') {
                if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._backpressure) {
                    defaultWriterReadyPromiseInitialize(this);
                }
                else {
                    defaultWriterReadyPromiseInitializeAsResolved(this);
                }
                defaultWriterClosedPromiseInitialize(this);
            }
            else if (state === 'erroring') {
                defaultWriterReadyPromiseInitializeAsRejected(this, stream._storedError);
                defaultWriterClosedPromiseInitialize(this);
            }
            else if (state === 'closed') {
                defaultWriterReadyPromiseInitializeAsResolved(this);
                defaultWriterClosedPromiseInitializeAsResolved(this);
            }
            else {
                const storedError = stream._storedError;
                defaultWriterReadyPromiseInitializeAsRejected(this, storedError);
                defaultWriterClosedPromiseInitializeAsRejected(this, storedError);
            }
        }
        /**
         * Returns a promise that will be fulfilled when the stream becomes closed, or rejected if the stream ever errors or
         * the writer’s lock is released before the stream finishes closing.
         */
        get closed() {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('closed'));
            }
            return this._closedPromise;
        }
        /**
         * Returns the desired size to fill the stream’s internal queue. It can be negative, if the queue is over-full.
         * A producer can use this information to determine the right amount of data to write.
         *
         * It will be `null` if the stream cannot be successfully written to (due to either being errored, or having an abort
         * queued up). It will return zero if the stream is closed. And the getter will throw an exception if invoked when
         * the writer’s lock is released.
         */
        get desiredSize() {
            if (!IsWritableStreamDefaultWriter(this)) {
                throw defaultWriterBrandCheckException('desiredSize');
            }
            if (this._ownerWritableStream === undefined) {
                throw defaultWriterLockException('desiredSize');
            }
            return WritableStreamDefaultWriterGetDesiredSize(this);
        }
        /**
         * Returns a promise that will be fulfilled when the desired size to fill the stream’s internal queue transitions
         * from non-positive to positive, signaling that it is no longer applying backpressure. Once the desired size dips
         * back to zero or below, the getter will return a new promise that stays pending until the next transition.
         *
         * If the stream becomes errored or aborted, or the writer’s lock is released, the returned promise will become
         * rejected.
         */
        get ready() {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('ready'));
            }
            return this._readyPromise;
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.abort | stream.abort(reason)}.
         */
        abort(reason = undefined) {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('abort'));
            }
            if (this._ownerWritableStream === undefined) {
                return promiseRejectedWith(defaultWriterLockException('abort'));
            }
            return WritableStreamDefaultWriterAbort(this, reason);
        }
        /**
         * If the reader is active, behaves the same as {@link WritableStream.close | stream.close()}.
         */
        close() {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('close'));
            }
            const stream = this._ownerWritableStream;
            if (stream === undefined) {
                return promiseRejectedWith(defaultWriterLockException('close'));
            }
            if (WritableStreamCloseQueuedOrInFlight(stream)) {
                return promiseRejectedWith(new TypeError('Cannot close an already-closing stream'));
            }
            return WritableStreamDefaultWriterClose(this);
        }
        /**
         * Releases the writer’s lock on the corresponding stream. After the lock is released, the writer is no longer active.
         * If the associated stream is errored when the lock is released, the writer will appear errored in the same way from
         * now on; otherwise, the writer will appear closed.
         *
         * Note that the lock can still be released even if some ongoing writes have not yet finished (i.e. even if the
         * promises returned from previous calls to {@link WritableStreamDefaultWriter.write | write()} have not yet settled).
         * It’s not necessary to hold the lock on the writer for the duration of the write; the lock instead simply prevents
         * other producers from writing in an interleaved manner.
         */
        releaseLock() {
            if (!IsWritableStreamDefaultWriter(this)) {
                throw defaultWriterBrandCheckException('releaseLock');
            }
            const stream = this._ownerWritableStream;
            if (stream === undefined) {
                return;
            }
            WritableStreamDefaultWriterRelease(this);
        }
        write(chunk = undefined) {
            if (!IsWritableStreamDefaultWriter(this)) {
                return promiseRejectedWith(defaultWriterBrandCheckException('write'));
            }
            if (this._ownerWritableStream === undefined) {
                return promiseRejectedWith(defaultWriterLockException('write to'));
            }
            return WritableStreamDefaultWriterWrite(this, chunk);
        }
    }
    Object.defineProperties(WritableStreamDefaultWriter.prototype, {
        abort: { enumerable: true },
        close: { enumerable: true },
        releaseLock: { enumerable: true },
        write: { enumerable: true },
        closed: { enumerable: true },
        desiredSize: { enumerable: true },
        ready: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(WritableStreamDefaultWriter.prototype, SymbolPolyfill.toStringTag, {
            value: 'WritableStreamDefaultWriter',
            configurable: true
        });
    }
    // Abstract operations for the WritableStreamDefaultWriter.
    function IsWritableStreamDefaultWriter(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_ownerWritableStream')) {
            return false;
        }
        return x instanceof WritableStreamDefaultWriter;
    }
    // A client of WritableStreamDefaultWriter may use these functions directly to bypass state check.
    function WritableStreamDefaultWriterAbort(writer, reason) {
        const stream = writer._ownerWritableStream;
        return WritableStreamAbort(stream, reason);
    }
    function WritableStreamDefaultWriterClose(writer) {
        const stream = writer._ownerWritableStream;
        return WritableStreamClose(stream);
    }
    function WritableStreamDefaultWriterCloseWithErrorPropagation(writer) {
        const stream = writer._ownerWritableStream;
        const state = stream._state;
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {
            return promiseResolvedWith(undefined);
        }
        if (state === 'errored') {
            return promiseRejectedWith(stream._storedError);
        }
        return WritableStreamDefaultWriterClose(writer);
    }
    function WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, error) {
        if (writer._closedPromiseState === 'pending') {
            defaultWriterClosedPromiseReject(writer, error);
        }
        else {
            defaultWriterClosedPromiseResetToRejected(writer, error);
        }
    }
    function WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, error) {
        if (writer._readyPromiseState === 'pending') {
            defaultWriterReadyPromiseReject(writer, error);
        }
        else {
            defaultWriterReadyPromiseResetToRejected(writer, error);
        }
    }
    function WritableStreamDefaultWriterGetDesiredSize(writer) {
        const stream = writer._ownerWritableStream;
        const state = stream._state;
        if (state === 'errored' || state === 'erroring') {
            return null;
        }
        if (state === 'closed') {
            return 0;
        }
        return WritableStreamDefaultControllerGetDesiredSize(stream._writableStreamController);
    }
    function WritableStreamDefaultWriterRelease(writer) {
        const stream = writer._ownerWritableStream;
        const releasedError = new TypeError(`Writer was released and can no longer be used to monitor the stream's closedness`);
        WritableStreamDefaultWriterEnsureReadyPromiseRejected(writer, releasedError);
        // The state transitions to "errored" before the sink abort() method runs, but the writer.closed promise is not
        // rejected until afterwards. This means that simply testing state will not work.
        WritableStreamDefaultWriterEnsureClosedPromiseRejected(writer, releasedError);
        stream._writer = undefined;
        writer._ownerWritableStream = undefined;
    }
    function WritableStreamDefaultWriterWrite(writer, chunk) {
        const stream = writer._ownerWritableStream;
        const controller = stream._writableStreamController;
        const chunkSize = WritableStreamDefaultControllerGetChunkSize(controller, chunk);
        if (stream !== writer._ownerWritableStream) {
            return promiseRejectedWith(defaultWriterLockException('write to'));
        }
        const state = stream._state;
        if (state === 'errored') {
            return promiseRejectedWith(stream._storedError);
        }
        if (WritableStreamCloseQueuedOrInFlight(stream) || state === 'closed') {
            return promiseRejectedWith(new TypeError('The stream is closing or closed and cannot be written to'));
        }
        if (state === 'erroring') {
            return promiseRejectedWith(stream._storedError);
        }
        const promise = WritableStreamAddWriteRequest(stream);
        WritableStreamDefaultControllerWrite(controller, chunk, chunkSize);
        return promise;
    }
    const closeSentinel = {};
    /**
     * Allows control of a {@link WritableStream | writable stream}'s state and internal queue.
     *
     * @public
     */
    class WritableStreamDefaultController {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * The reason which was passed to `WritableStream.abort(reason)` when the stream was aborted.
         *
         * @deprecated
         *  This property has been removed from the specification, see https://github.com/whatwg/streams/pull/1177.
         *  Use {@link WritableStreamDefaultController.signal}'s `reason` instead.
         */
        get abortReason() {
            if (!IsWritableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$2('abortReason');
            }
            return this._abortReason;
        }
        /**
         * An `AbortSignal` that can be used to abort the pending write or close operation when the stream is aborted.
         */
        get signal() {
            if (!IsWritableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$2('signal');
            }
            if (this._abortController === undefined) {
                // Older browsers or older Node versions may not support `AbortController` or `AbortSignal`.
                // We don't want to bundle and ship an `AbortController` polyfill together with our polyfill,
                // so instead we only implement support for `signal` if we find a global `AbortController` constructor.
                throw new TypeError('WritableStreamDefaultController.prototype.signal is not supported');
            }
            return this._abortController.signal;
        }
        /**
         * Closes the controlled writable stream, making all future interactions with it fail with the given error `e`.
         *
         * This method is rarely used, since usually it suffices to return a rejected promise from one of the underlying
         * sink's methods. However, it can be useful for suddenly shutting down a stream in response to an event outside the
         * normal lifecycle of interactions with the underlying sink.
         */
        error(e = undefined) {
            if (!IsWritableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$2('error');
            }
            const state = this._controlledWritableStream._state;
            if (state !== 'writable') {
                // The stream is closed, errored or will be soon. The sink can't do anything useful if it gets an error here, so
                // just treat it as a no-op.
                return;
            }
            WritableStreamDefaultControllerError(this, e);
        }
        /** @internal */
        [AbortSteps](reason) {
            const result = this._abortAlgorithm(reason);
            WritableStreamDefaultControllerClearAlgorithms(this);
            return result;
        }
        /** @internal */
        [ErrorSteps]() {
            ResetQueue(this);
        }
    }
    Object.defineProperties(WritableStreamDefaultController.prototype, {
        abortReason: { enumerable: true },
        signal: { enumerable: true },
        error: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(WritableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
            value: 'WritableStreamDefaultController',
            configurable: true
        });
    }
    // Abstract operations implementing interface required by the WritableStream.
    function IsWritableStreamDefaultController(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_controlledWritableStream')) {
            return false;
        }
        return x instanceof WritableStreamDefaultController;
    }
    function SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledWritableStream = stream;
        stream._writableStreamController = controller;
        // Need to set the slots so that the assert doesn't fire. In the spec the slots already exist implicitly.
        controller._queue = undefined;
        controller._queueTotalSize = undefined;
        ResetQueue(controller);
        controller._abortReason = undefined;
        controller._abortController = createAbortController();
        controller._started = false;
        controller._strategySizeAlgorithm = sizeAlgorithm;
        controller._strategyHWM = highWaterMark;
        controller._writeAlgorithm = writeAlgorithm;
        controller._closeAlgorithm = closeAlgorithm;
        controller._abortAlgorithm = abortAlgorithm;
        const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
        WritableStreamUpdateBackpressure(stream, backpressure);
        const startResult = startAlgorithm();
        const startPromise = promiseResolvedWith(startResult);
        uponPromise(startPromise, () => {
            controller._started = true;
            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
        }, r => {
            controller._started = true;
            WritableStreamDealWithRejection(stream, r);
        });
    }
    function SetUpWritableStreamDefaultControllerFromUnderlyingSink(stream, underlyingSink, highWaterMark, sizeAlgorithm) {
        const controller = Object.create(WritableStreamDefaultController.prototype);
        let startAlgorithm = () => undefined;
        let writeAlgorithm = () => promiseResolvedWith(undefined);
        let closeAlgorithm = () => promiseResolvedWith(undefined);
        let abortAlgorithm = () => promiseResolvedWith(undefined);
        if (underlyingSink.start !== undefined) {
            startAlgorithm = () => underlyingSink.start(controller);
        }
        if (underlyingSink.write !== undefined) {
            writeAlgorithm = chunk => underlyingSink.write(chunk, controller);
        }
        if (underlyingSink.close !== undefined) {
            closeAlgorithm = () => underlyingSink.close();
        }
        if (underlyingSink.abort !== undefined) {
            abortAlgorithm = reason => underlyingSink.abort(reason);
        }
        SetUpWritableStreamDefaultController(stream, controller, startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, highWaterMark, sizeAlgorithm);
    }
    // ClearAlgorithms may be called twice. Erroring the same stream in multiple ways will often result in redundant calls.
    function WritableStreamDefaultControllerClearAlgorithms(controller) {
        controller._writeAlgorithm = undefined;
        controller._closeAlgorithm = undefined;
        controller._abortAlgorithm = undefined;
        controller._strategySizeAlgorithm = undefined;
    }
    function WritableStreamDefaultControllerClose(controller) {
        EnqueueValueWithSize(controller, closeSentinel, 0);
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
    }
    function WritableStreamDefaultControllerGetChunkSize(controller, chunk) {
        try {
            return controller._strategySizeAlgorithm(chunk);
        }
        catch (chunkSizeE) {
            WritableStreamDefaultControllerErrorIfNeeded(controller, chunkSizeE);
            return 1;
        }
    }
    function WritableStreamDefaultControllerGetDesiredSize(controller) {
        return controller._strategyHWM - controller._queueTotalSize;
    }
    function WritableStreamDefaultControllerWrite(controller, chunk, chunkSize) {
        try {
            EnqueueValueWithSize(controller, chunk, chunkSize);
        }
        catch (enqueueE) {
            WritableStreamDefaultControllerErrorIfNeeded(controller, enqueueE);
            return;
        }
        const stream = controller._controlledWritableStream;
        if (!WritableStreamCloseQueuedOrInFlight(stream) && stream._state === 'writable') {
            const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
            WritableStreamUpdateBackpressure(stream, backpressure);
        }
        WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
    }
    // Abstract operations for the WritableStreamDefaultController.
    function WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller) {
        const stream = controller._controlledWritableStream;
        if (!controller._started) {
            return;
        }
        if (stream._inFlightWriteRequest !== undefined) {
            return;
        }
        const state = stream._state;
        if (state === 'erroring') {
            WritableStreamFinishErroring(stream);
            return;
        }
        if (controller._queue.length === 0) {
            return;
        }
        const value = PeekQueueValue(controller);
        if (value === closeSentinel) {
            WritableStreamDefaultControllerProcessClose(controller);
        }
        else {
            WritableStreamDefaultControllerProcessWrite(controller, value);
        }
    }
    function WritableStreamDefaultControllerErrorIfNeeded(controller, error) {
        if (controller._controlledWritableStream._state === 'writable') {
            WritableStreamDefaultControllerError(controller, error);
        }
    }
    function WritableStreamDefaultControllerProcessClose(controller) {
        const stream = controller._controlledWritableStream;
        WritableStreamMarkCloseRequestInFlight(stream);
        DequeueValue(controller);
        const sinkClosePromise = controller._closeAlgorithm();
        WritableStreamDefaultControllerClearAlgorithms(controller);
        uponPromise(sinkClosePromise, () => {
            WritableStreamFinishInFlightClose(stream);
        }, reason => {
            WritableStreamFinishInFlightCloseWithError(stream, reason);
        });
    }
    function WritableStreamDefaultControllerProcessWrite(controller, chunk) {
        const stream = controller._controlledWritableStream;
        WritableStreamMarkFirstWriteRequestInFlight(stream);
        const sinkWritePromise = controller._writeAlgorithm(chunk);
        uponPromise(sinkWritePromise, () => {
            WritableStreamFinishInFlightWrite(stream);
            const state = stream._state;
            DequeueValue(controller);
            if (!WritableStreamCloseQueuedOrInFlight(stream) && state === 'writable') {
                const backpressure = WritableStreamDefaultControllerGetBackpressure(controller);
                WritableStreamUpdateBackpressure(stream, backpressure);
            }
            WritableStreamDefaultControllerAdvanceQueueIfNeeded(controller);
        }, reason => {
            if (stream._state === 'writable') {
                WritableStreamDefaultControllerClearAlgorithms(controller);
            }
            WritableStreamFinishInFlightWriteWithError(stream, reason);
        });
    }
    function WritableStreamDefaultControllerGetBackpressure(controller) {
        const desiredSize = WritableStreamDefaultControllerGetDesiredSize(controller);
        return desiredSize <= 0;
    }
    // A client of WritableStreamDefaultController may use these functions directly to bypass state check.
    function WritableStreamDefaultControllerError(controller, error) {
        const stream = controller._controlledWritableStream;
        WritableStreamDefaultControllerClearAlgorithms(controller);
        WritableStreamStartErroring(stream, error);
    }
    // Helper functions for the WritableStream.
    function streamBrandCheckException$2(name) {
        return new TypeError(`WritableStream.prototype.${name} can only be used on a WritableStream`);
    }
    // Helper functions for the WritableStreamDefaultController.
    function defaultControllerBrandCheckException$2(name) {
        return new TypeError(`WritableStreamDefaultController.prototype.${name} can only be used on a WritableStreamDefaultController`);
    }
    // Helper functions for the WritableStreamDefaultWriter.
    function defaultWriterBrandCheckException(name) {
        return new TypeError(`WritableStreamDefaultWriter.prototype.${name} can only be used on a WritableStreamDefaultWriter`);
    }
    function defaultWriterLockException(name) {
        return new TypeError('Cannot ' + name + ' a stream using a released writer');
    }
    function defaultWriterClosedPromiseInitialize(writer) {
        writer._closedPromise = newPromise((resolve, reject) => {
            writer._closedPromise_resolve = resolve;
            writer._closedPromise_reject = reject;
            writer._closedPromiseState = 'pending';
        });
    }
    function defaultWriterClosedPromiseInitializeAsRejected(writer, reason) {
        defaultWriterClosedPromiseInitialize(writer);
        defaultWriterClosedPromiseReject(writer, reason);
    }
    function defaultWriterClosedPromiseInitializeAsResolved(writer) {
        defaultWriterClosedPromiseInitialize(writer);
        defaultWriterClosedPromiseResolve(writer);
    }
    function defaultWriterClosedPromiseReject(writer, reason) {
        if (writer._closedPromise_reject === undefined) {
            return;
        }
        setPromiseIsHandledToTrue(writer._closedPromise);
        writer._closedPromise_reject(reason);
        writer._closedPromise_resolve = undefined;
        writer._closedPromise_reject = undefined;
        writer._closedPromiseState = 'rejected';
    }
    function defaultWriterClosedPromiseResetToRejected(writer, reason) {
        defaultWriterClosedPromiseInitializeAsRejected(writer, reason);
    }
    function defaultWriterClosedPromiseResolve(writer) {
        if (writer._closedPromise_resolve === undefined) {
            return;
        }
        writer._closedPromise_resolve(undefined);
        writer._closedPromise_resolve = undefined;
        writer._closedPromise_reject = undefined;
        writer._closedPromiseState = 'resolved';
    }
    function defaultWriterReadyPromiseInitialize(writer) {
        writer._readyPromise = newPromise((resolve, reject) => {
            writer._readyPromise_resolve = resolve;
            writer._readyPromise_reject = reject;
        });
        writer._readyPromiseState = 'pending';
    }
    function defaultWriterReadyPromiseInitializeAsRejected(writer, reason) {
        defaultWriterReadyPromiseInitialize(writer);
        defaultWriterReadyPromiseReject(writer, reason);
    }
    function defaultWriterReadyPromiseInitializeAsResolved(writer) {
        defaultWriterReadyPromiseInitialize(writer);
        defaultWriterReadyPromiseResolve(writer);
    }
    function defaultWriterReadyPromiseReject(writer, reason) {
        if (writer._readyPromise_reject === undefined) {
            return;
        }
        setPromiseIsHandledToTrue(writer._readyPromise);
        writer._readyPromise_reject(reason);
        writer._readyPromise_resolve = undefined;
        writer._readyPromise_reject = undefined;
        writer._readyPromiseState = 'rejected';
    }
    function defaultWriterReadyPromiseReset(writer) {
        defaultWriterReadyPromiseInitialize(writer);
    }
    function defaultWriterReadyPromiseResetToRejected(writer, reason) {
        defaultWriterReadyPromiseInitializeAsRejected(writer, reason);
    }
    function defaultWriterReadyPromiseResolve(writer) {
        if (writer._readyPromise_resolve === undefined) {
            return;
        }
        writer._readyPromise_resolve(undefined);
        writer._readyPromise_resolve = undefined;
        writer._readyPromise_reject = undefined;
        writer._readyPromiseState = 'fulfilled';
    }

    /// <reference lib="dom" />
    const NativeDOMException = typeof DOMException !== 'undefined' ? DOMException : undefined;

    /// <reference types="node" />
    function isDOMExceptionConstructor(ctor) {
        if (!(typeof ctor === 'function' || typeof ctor === 'object')) {
            return false;
        }
        try {
            new ctor();
            return true;
        }
        catch (_a) {
            return false;
        }
    }
    function createDOMExceptionPolyfill() {
        // eslint-disable-next-line no-shadow
        const ctor = function DOMException(message, name) {
            this.message = message || '';
            this.name = name || 'Error';
            if (Error.captureStackTrace) {
                Error.captureStackTrace(this, this.constructor);
            }
        };
        ctor.prototype = Object.create(Error.prototype);
        Object.defineProperty(ctor.prototype, 'constructor', { value: ctor, writable: true, configurable: true });
        return ctor;
    }
    // eslint-disable-next-line no-redeclare
    const DOMException$1 = isDOMExceptionConstructor(NativeDOMException) ? NativeDOMException : createDOMExceptionPolyfill();

    function ReadableStreamPipeTo(source, dest, preventClose, preventAbort, preventCancel, signal) {
        const reader = AcquireReadableStreamDefaultReader(source);
        const writer = AcquireWritableStreamDefaultWriter(dest);
        source._disturbed = true;
        let shuttingDown = false;
        // This is used to keep track of the spec's requirement that we wait for ongoing writes during shutdown.
        let currentWrite = promiseResolvedWith(undefined);
        return newPromise((resolve, reject) => {
            let abortAlgorithm;
            if (signal !== undefined) {
                abortAlgorithm = () => {
                    const error = new DOMException$1('Aborted', 'AbortError');
                    const actions = [];
                    if (!preventAbort) {
                        actions.push(() => {
                            if (dest._state === 'writable') {
                                return WritableStreamAbort(dest, error);
                            }
                            return promiseResolvedWith(undefined);
                        });
                    }
                    if (!preventCancel) {
                        actions.push(() => {
                            if (source._state === 'readable') {
                                return ReadableStreamCancel(source, error);
                            }
                            return promiseResolvedWith(undefined);
                        });
                    }
                    shutdownWithAction(() => Promise.all(actions.map(action => action())), true, error);
                };
                if (signal.aborted) {
                    abortAlgorithm();
                    return;
                }
                signal.addEventListener('abort', abortAlgorithm);
            }
            // Using reader and writer, read all chunks from this and write them to dest
            // - Backpressure must be enforced
            // - Shutdown must stop all activity
            function pipeLoop() {
                return newPromise((resolveLoop, rejectLoop) => {
                    function next(done) {
                        if (done) {
                            resolveLoop();
                        }
                        else {
                            // Use `PerformPromiseThen` instead of `uponPromise` to avoid
                            // adding unnecessary `.catch(rethrowAssertionErrorRejection)` handlers
                            PerformPromiseThen(pipeStep(), next, rejectLoop);
                        }
                    }
                    next(false);
                });
            }
            function pipeStep() {
                if (shuttingDown) {
                    return promiseResolvedWith(true);
                }
                return PerformPromiseThen(writer._readyPromise, () => {
                    return newPromise((resolveRead, rejectRead) => {
                        ReadableStreamDefaultReaderRead(reader, {
                            _chunkSteps: chunk => {
                                currentWrite = PerformPromiseThen(WritableStreamDefaultWriterWrite(writer, chunk), undefined, noop);
                                resolveRead(false);
                            },
                            _closeSteps: () => resolveRead(true),
                            _errorSteps: rejectRead
                        });
                    });
                });
            }
            // Errors must be propagated forward
            isOrBecomesErrored(source, reader._closedPromise, storedError => {
                if (!preventAbort) {
                    shutdownWithAction(() => WritableStreamAbort(dest, storedError), true, storedError);
                }
                else {
                    shutdown(true, storedError);
                }
            });
            // Errors must be propagated backward
            isOrBecomesErrored(dest, writer._closedPromise, storedError => {
                if (!preventCancel) {
                    shutdownWithAction(() => ReadableStreamCancel(source, storedError), true, storedError);
                }
                else {
                    shutdown(true, storedError);
                }
            });
            // Closing must be propagated forward
            isOrBecomesClosed(source, reader._closedPromise, () => {
                if (!preventClose) {
                    shutdownWithAction(() => WritableStreamDefaultWriterCloseWithErrorPropagation(writer));
                }
                else {
                    shutdown();
                }
            });
            // Closing must be propagated backward
            if (WritableStreamCloseQueuedOrInFlight(dest) || dest._state === 'closed') {
                const destClosed = new TypeError('the destination writable stream closed before all data could be piped to it');
                if (!preventCancel) {
                    shutdownWithAction(() => ReadableStreamCancel(source, destClosed), true, destClosed);
                }
                else {
                    shutdown(true, destClosed);
                }
            }
            setPromiseIsHandledToTrue(pipeLoop());
            function waitForWritesToFinish() {
                // Another write may have started while we were waiting on this currentWrite, so we have to be sure to wait
                // for that too.
                const oldCurrentWrite = currentWrite;
                return PerformPromiseThen(currentWrite, () => oldCurrentWrite !== currentWrite ? waitForWritesToFinish() : undefined);
            }
            function isOrBecomesErrored(stream, promise, action) {
                if (stream._state === 'errored') {
                    action(stream._storedError);
                }
                else {
                    uponRejection(promise, action);
                }
            }
            function isOrBecomesClosed(stream, promise, action) {
                if (stream._state === 'closed') {
                    action();
                }
                else {
                    uponFulfillment(promise, action);
                }
            }
            function shutdownWithAction(action, originalIsError, originalError) {
                if (shuttingDown) {
                    return;
                }
                shuttingDown = true;
                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {
                    uponFulfillment(waitForWritesToFinish(), doTheRest);
                }
                else {
                    doTheRest();
                }
                function doTheRest() {
                    uponPromise(action(), () => finalize(originalIsError, originalError), newError => finalize(true, newError));
                }
            }
            function shutdown(isError, error) {
                if (shuttingDown) {
                    return;
                }
                shuttingDown = true;
                if (dest._state === 'writable' && !WritableStreamCloseQueuedOrInFlight(dest)) {
                    uponFulfillment(waitForWritesToFinish(), () => finalize(isError, error));
                }
                else {
                    finalize(isError, error);
                }
            }
            function finalize(isError, error) {
                WritableStreamDefaultWriterRelease(writer);
                ReadableStreamReaderGenericRelease(reader);
                if (signal !== undefined) {
                    signal.removeEventListener('abort', abortAlgorithm);
                }
                if (isError) {
                    reject(error);
                }
                else {
                    resolve(undefined);
                }
            }
        });
    }

    /**
     * Allows control of a {@link ReadableStream | readable stream}'s state and internal queue.
     *
     * @public
     */
    class ReadableStreamDefaultController {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * Returns the desired size to fill the controlled stream's internal queue. It can be negative, if the queue is
         * over-full. An underlying source ought to use this information to determine when and how to apply backpressure.
         */
        get desiredSize() {
            if (!IsReadableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$1('desiredSize');
            }
            return ReadableStreamDefaultControllerGetDesiredSize(this);
        }
        /**
         * Closes the controlled readable stream. Consumers will still be able to read any previously-enqueued chunks from
         * the stream, but once those are read, the stream will become closed.
         */
        close() {
            if (!IsReadableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$1('close');
            }
            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
                throw new TypeError('The stream is not in a state that permits close');
            }
            ReadableStreamDefaultControllerClose(this);
        }
        enqueue(chunk = undefined) {
            if (!IsReadableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$1('enqueue');
            }
            if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(this)) {
                throw new TypeError('The stream is not in a state that permits enqueue');
            }
            return ReadableStreamDefaultControllerEnqueue(this, chunk);
        }
        /**
         * Errors the controlled readable stream, making all future interactions with it fail with the given error `e`.
         */
        error(e = undefined) {
            if (!IsReadableStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException$1('error');
            }
            ReadableStreamDefaultControllerError(this, e);
        }
        /** @internal */
        [CancelSteps](reason) {
            ResetQueue(this);
            const result = this._cancelAlgorithm(reason);
            ReadableStreamDefaultControllerClearAlgorithms(this);
            return result;
        }
        /** @internal */
        [PullSteps](readRequest) {
            const stream = this._controlledReadableStream;
            if (this._queue.length > 0) {
                const chunk = DequeueValue(this);
                if (this._closeRequested && this._queue.length === 0) {
                    ReadableStreamDefaultControllerClearAlgorithms(this);
                    ReadableStreamClose(stream);
                }
                else {
                    ReadableStreamDefaultControllerCallPullIfNeeded(this);
                }
                readRequest._chunkSteps(chunk);
            }
            else {
                ReadableStreamAddReadRequest(stream, readRequest);
                ReadableStreamDefaultControllerCallPullIfNeeded(this);
            }
        }
    }
    Object.defineProperties(ReadableStreamDefaultController.prototype, {
        close: { enumerable: true },
        enqueue: { enumerable: true },
        error: { enumerable: true },
        desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStreamDefaultController',
            configurable: true
        });
    }
    // Abstract operations for the ReadableStreamDefaultController.
    function IsReadableStreamDefaultController(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_controlledReadableStream')) {
            return false;
        }
        return x instanceof ReadableStreamDefaultController;
    }
    function ReadableStreamDefaultControllerCallPullIfNeeded(controller) {
        const shouldPull = ReadableStreamDefaultControllerShouldCallPull(controller);
        if (!shouldPull) {
            return;
        }
        if (controller._pulling) {
            controller._pullAgain = true;
            return;
        }
        controller._pulling = true;
        const pullPromise = controller._pullAlgorithm();
        uponPromise(pullPromise, () => {
            controller._pulling = false;
            if (controller._pullAgain) {
                controller._pullAgain = false;
                ReadableStreamDefaultControllerCallPullIfNeeded(controller);
            }
        }, e => {
            ReadableStreamDefaultControllerError(controller, e);
        });
    }
    function ReadableStreamDefaultControllerShouldCallPull(controller) {
        const stream = controller._controlledReadableStream;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
            return false;
        }
        if (!controller._started) {
            return false;
        }
        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
            return true;
        }
        const desiredSize = ReadableStreamDefaultControllerGetDesiredSize(controller);
        if (desiredSize > 0) {
            return true;
        }
        return false;
    }
    function ReadableStreamDefaultControllerClearAlgorithms(controller) {
        controller._pullAlgorithm = undefined;
        controller._cancelAlgorithm = undefined;
        controller._strategySizeAlgorithm = undefined;
    }
    // A client of ReadableStreamDefaultController may use these functions directly to bypass state check.
    function ReadableStreamDefaultControllerClose(controller) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
            return;
        }
        const stream = controller._controlledReadableStream;
        controller._closeRequested = true;
        if (controller._queue.length === 0) {
            ReadableStreamDefaultControllerClearAlgorithms(controller);
            ReadableStreamClose(stream);
        }
    }
    function ReadableStreamDefaultControllerEnqueue(controller, chunk) {
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(controller)) {
            return;
        }
        const stream = controller._controlledReadableStream;
        if (IsReadableStreamLocked(stream) && ReadableStreamGetNumReadRequests(stream) > 0) {
            ReadableStreamFulfillReadRequest(stream, chunk, false);
        }
        else {
            let chunkSize;
            try {
                chunkSize = controller._strategySizeAlgorithm(chunk);
            }
            catch (chunkSizeE) {
                ReadableStreamDefaultControllerError(controller, chunkSizeE);
                throw chunkSizeE;
            }
            try {
                EnqueueValueWithSize(controller, chunk, chunkSize);
            }
            catch (enqueueE) {
                ReadableStreamDefaultControllerError(controller, enqueueE);
                throw enqueueE;
            }
        }
        ReadableStreamDefaultControllerCallPullIfNeeded(controller);
    }
    function ReadableStreamDefaultControllerError(controller, e) {
        const stream = controller._controlledReadableStream;
        if (stream._state !== 'readable') {
            return;
        }
        ResetQueue(controller);
        ReadableStreamDefaultControllerClearAlgorithms(controller);
        ReadableStreamError(stream, e);
    }
    function ReadableStreamDefaultControllerGetDesiredSize(controller) {
        const state = controller._controlledReadableStream._state;
        if (state === 'errored') {
            return null;
        }
        if (state === 'closed') {
            return 0;
        }
        return controller._strategyHWM - controller._queueTotalSize;
    }
    // This is used in the implementation of TransformStream.
    function ReadableStreamDefaultControllerHasBackpressure(controller) {
        if (ReadableStreamDefaultControllerShouldCallPull(controller)) {
            return false;
        }
        return true;
    }
    function ReadableStreamDefaultControllerCanCloseOrEnqueue(controller) {
        const state = controller._controlledReadableStream._state;
        if (!controller._closeRequested && state === 'readable') {
            return true;
        }
        return false;
    }
    function SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm) {
        controller._controlledReadableStream = stream;
        controller._queue = undefined;
        controller._queueTotalSize = undefined;
        ResetQueue(controller);
        controller._started = false;
        controller._closeRequested = false;
        controller._pullAgain = false;
        controller._pulling = false;
        controller._strategySizeAlgorithm = sizeAlgorithm;
        controller._strategyHWM = highWaterMark;
        controller._pullAlgorithm = pullAlgorithm;
        controller._cancelAlgorithm = cancelAlgorithm;
        stream._readableStreamController = controller;
        const startResult = startAlgorithm();
        uponPromise(promiseResolvedWith(startResult), () => {
            controller._started = true;
            ReadableStreamDefaultControllerCallPullIfNeeded(controller);
        }, r => {
            ReadableStreamDefaultControllerError(controller, r);
        });
    }
    function SetUpReadableStreamDefaultControllerFromUnderlyingSource(stream, underlyingSource, highWaterMark, sizeAlgorithm) {
        const controller = Object.create(ReadableStreamDefaultController.prototype);
        let startAlgorithm = () => undefined;
        let pullAlgorithm = () => promiseResolvedWith(undefined);
        let cancelAlgorithm = () => promiseResolvedWith(undefined);
        if (underlyingSource.start !== undefined) {
            startAlgorithm = () => underlyingSource.start(controller);
        }
        if (underlyingSource.pull !== undefined) {
            pullAlgorithm = () => underlyingSource.pull(controller);
        }
        if (underlyingSource.cancel !== undefined) {
            cancelAlgorithm = reason => underlyingSource.cancel(reason);
        }
        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
    }
    // Helper functions for the ReadableStreamDefaultController.
    function defaultControllerBrandCheckException$1(name) {
        return new TypeError(`ReadableStreamDefaultController.prototype.${name} can only be used on a ReadableStreamDefaultController`);
    }

    function ReadableStreamTee(stream, cloneForBranch2) {
        if (IsReadableByteStreamController(stream._readableStreamController)) {
            return ReadableByteStreamTee(stream);
        }
        return ReadableStreamDefaultTee(stream);
    }
    function ReadableStreamDefaultTee(stream, cloneForBranch2) {
        const reader = AcquireReadableStreamDefaultReader(stream);
        let reading = false;
        let readAgain = false;
        let canceled1 = false;
        let canceled2 = false;
        let reason1;
        let reason2;
        let branch1;
        let branch2;
        let resolveCancelPromise;
        const cancelPromise = newPromise(resolve => {
            resolveCancelPromise = resolve;
        });
        function pullAlgorithm() {
            if (reading) {
                readAgain = true;
                return promiseResolvedWith(undefined);
            }
            reading = true;
            const readRequest = {
                _chunkSteps: chunk => {
                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using
                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let
                    // successful synchronously-available reads get ahead of asynchronously-available errors.
                    queueMicrotask(() => {
                        readAgain = false;
                        const chunk1 = chunk;
                        const chunk2 = chunk;
                        // There is no way to access the cloning code right now in the reference implementation.
                        // If we add one then we'll need an implementation for serializable objects.
                        // if (!canceled2 && cloneForBranch2) {
                        //   chunk2 = StructuredDeserialize(StructuredSerialize(chunk2));
                        // }
                        if (!canceled1) {
                            ReadableStreamDefaultControllerEnqueue(branch1._readableStreamController, chunk1);
                        }
                        if (!canceled2) {
                            ReadableStreamDefaultControllerEnqueue(branch2._readableStreamController, chunk2);
                        }
                        reading = false;
                        if (readAgain) {
                            pullAlgorithm();
                        }
                    });
                },
                _closeSteps: () => {
                    reading = false;
                    if (!canceled1) {
                        ReadableStreamDefaultControllerClose(branch1._readableStreamController);
                    }
                    if (!canceled2) {
                        ReadableStreamDefaultControllerClose(branch2._readableStreamController);
                    }
                    if (!canceled1 || !canceled2) {
                        resolveCancelPromise(undefined);
                    }
                },
                _errorSteps: () => {
                    reading = false;
                }
            };
            ReadableStreamDefaultReaderRead(reader, readRequest);
            return promiseResolvedWith(undefined);
        }
        function cancel1Algorithm(reason) {
            canceled1 = true;
            reason1 = reason;
            if (canceled2) {
                const compositeReason = CreateArrayFromList([reason1, reason2]);
                const cancelResult = ReadableStreamCancel(stream, compositeReason);
                resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
        }
        function cancel2Algorithm(reason) {
            canceled2 = true;
            reason2 = reason;
            if (canceled1) {
                const compositeReason = CreateArrayFromList([reason1, reason2]);
                const cancelResult = ReadableStreamCancel(stream, compositeReason);
                resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
        }
        function startAlgorithm() {
            // do nothing
        }
        branch1 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel1Algorithm);
        branch2 = CreateReadableStream(startAlgorithm, pullAlgorithm, cancel2Algorithm);
        uponRejection(reader._closedPromise, (r) => {
            ReadableStreamDefaultControllerError(branch1._readableStreamController, r);
            ReadableStreamDefaultControllerError(branch2._readableStreamController, r);
            if (!canceled1 || !canceled2) {
                resolveCancelPromise(undefined);
            }
        });
        return [branch1, branch2];
    }
    function ReadableByteStreamTee(stream) {
        let reader = AcquireReadableStreamDefaultReader(stream);
        let reading = false;
        let readAgainForBranch1 = false;
        let readAgainForBranch2 = false;
        let canceled1 = false;
        let canceled2 = false;
        let reason1;
        let reason2;
        let branch1;
        let branch2;
        let resolveCancelPromise;
        const cancelPromise = newPromise(resolve => {
            resolveCancelPromise = resolve;
        });
        function forwardReaderError(thisReader) {
            uponRejection(thisReader._closedPromise, r => {
                if (thisReader !== reader) {
                    return;
                }
                ReadableByteStreamControllerError(branch1._readableStreamController, r);
                ReadableByteStreamControllerError(branch2._readableStreamController, r);
                if (!canceled1 || !canceled2) {
                    resolveCancelPromise(undefined);
                }
            });
        }
        function pullWithDefaultReader() {
            if (IsReadableStreamBYOBReader(reader)) {
                ReadableStreamReaderGenericRelease(reader);
                reader = AcquireReadableStreamDefaultReader(stream);
                forwardReaderError(reader);
            }
            const readRequest = {
                _chunkSteps: chunk => {
                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using
                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let
                    // successful synchronously-available reads get ahead of asynchronously-available errors.
                    queueMicrotask(() => {
                        readAgainForBranch1 = false;
                        readAgainForBranch2 = false;
                        const chunk1 = chunk;
                        let chunk2 = chunk;
                        if (!canceled1 && !canceled2) {
                            try {
                                chunk2 = CloneAsUint8Array(chunk);
                            }
                            catch (cloneE) {
                                ReadableByteStreamControllerError(branch1._readableStreamController, cloneE);
                                ReadableByteStreamControllerError(branch2._readableStreamController, cloneE);
                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                                return;
                            }
                        }
                        if (!canceled1) {
                            ReadableByteStreamControllerEnqueue(branch1._readableStreamController, chunk1);
                        }
                        if (!canceled2) {
                            ReadableByteStreamControllerEnqueue(branch2._readableStreamController, chunk2);
                        }
                        reading = false;
                        if (readAgainForBranch1) {
                            pull1Algorithm();
                        }
                        else if (readAgainForBranch2) {
                            pull2Algorithm();
                        }
                    });
                },
                _closeSteps: () => {
                    reading = false;
                    if (!canceled1) {
                        ReadableByteStreamControllerClose(branch1._readableStreamController);
                    }
                    if (!canceled2) {
                        ReadableByteStreamControllerClose(branch2._readableStreamController);
                    }
                    if (branch1._readableStreamController._pendingPullIntos.length > 0) {
                        ReadableByteStreamControllerRespond(branch1._readableStreamController, 0);
                    }
                    if (branch2._readableStreamController._pendingPullIntos.length > 0) {
                        ReadableByteStreamControllerRespond(branch2._readableStreamController, 0);
                    }
                    if (!canceled1 || !canceled2) {
                        resolveCancelPromise(undefined);
                    }
                },
                _errorSteps: () => {
                    reading = false;
                }
            };
            ReadableStreamDefaultReaderRead(reader, readRequest);
        }
        function pullWithBYOBReader(view, forBranch2) {
            if (IsReadableStreamDefaultReader(reader)) {
                ReadableStreamReaderGenericRelease(reader);
                reader = AcquireReadableStreamBYOBReader(stream);
                forwardReaderError(reader);
            }
            const byobBranch = forBranch2 ? branch2 : branch1;
            const otherBranch = forBranch2 ? branch1 : branch2;
            const readIntoRequest = {
                _chunkSteps: chunk => {
                    // This needs to be delayed a microtask because it takes at least a microtask to detect errors (using
                    // reader._closedPromise below), and we want errors in stream to error both branches immediately. We cannot let
                    // successful synchronously-available reads get ahead of asynchronously-available errors.
                    queueMicrotask(() => {
                        readAgainForBranch1 = false;
                        readAgainForBranch2 = false;
                        const byobCanceled = forBranch2 ? canceled2 : canceled1;
                        const otherCanceled = forBranch2 ? canceled1 : canceled2;
                        if (!otherCanceled) {
                            let clonedChunk;
                            try {
                                clonedChunk = CloneAsUint8Array(chunk);
                            }
                            catch (cloneE) {
                                ReadableByteStreamControllerError(byobBranch._readableStreamController, cloneE);
                                ReadableByteStreamControllerError(otherBranch._readableStreamController, cloneE);
                                resolveCancelPromise(ReadableStreamCancel(stream, cloneE));
                                return;
                            }
                            if (!byobCanceled) {
                                ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                            }
                            ReadableByteStreamControllerEnqueue(otherBranch._readableStreamController, clonedChunk);
                        }
                        else if (!byobCanceled) {
                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                        }
                        reading = false;
                        if (readAgainForBranch1) {
                            pull1Algorithm();
                        }
                        else if (readAgainForBranch2) {
                            pull2Algorithm();
                        }
                    });
                },
                _closeSteps: chunk => {
                    reading = false;
                    const byobCanceled = forBranch2 ? canceled2 : canceled1;
                    const otherCanceled = forBranch2 ? canceled1 : canceled2;
                    if (!byobCanceled) {
                        ReadableByteStreamControllerClose(byobBranch._readableStreamController);
                    }
                    if (!otherCanceled) {
                        ReadableByteStreamControllerClose(otherBranch._readableStreamController);
                    }
                    if (chunk !== undefined) {
                        if (!byobCanceled) {
                            ReadableByteStreamControllerRespondWithNewView(byobBranch._readableStreamController, chunk);
                        }
                        if (!otherCanceled && otherBranch._readableStreamController._pendingPullIntos.length > 0) {
                            ReadableByteStreamControllerRespond(otherBranch._readableStreamController, 0);
                        }
                    }
                    if (!byobCanceled || !otherCanceled) {
                        resolveCancelPromise(undefined);
                    }
                },
                _errorSteps: () => {
                    reading = false;
                }
            };
            ReadableStreamBYOBReaderRead(reader, view, readIntoRequest);
        }
        function pull1Algorithm() {
            if (reading) {
                readAgainForBranch1 = true;
                return promiseResolvedWith(undefined);
            }
            reading = true;
            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch1._readableStreamController);
            if (byobRequest === null) {
                pullWithDefaultReader();
            }
            else {
                pullWithBYOBReader(byobRequest._view, false);
            }
            return promiseResolvedWith(undefined);
        }
        function pull2Algorithm() {
            if (reading) {
                readAgainForBranch2 = true;
                return promiseResolvedWith(undefined);
            }
            reading = true;
            const byobRequest = ReadableByteStreamControllerGetBYOBRequest(branch2._readableStreamController);
            if (byobRequest === null) {
                pullWithDefaultReader();
            }
            else {
                pullWithBYOBReader(byobRequest._view, true);
            }
            return promiseResolvedWith(undefined);
        }
        function cancel1Algorithm(reason) {
            canceled1 = true;
            reason1 = reason;
            if (canceled2) {
                const compositeReason = CreateArrayFromList([reason1, reason2]);
                const cancelResult = ReadableStreamCancel(stream, compositeReason);
                resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
        }
        function cancel2Algorithm(reason) {
            canceled2 = true;
            reason2 = reason;
            if (canceled1) {
                const compositeReason = CreateArrayFromList([reason1, reason2]);
                const cancelResult = ReadableStreamCancel(stream, compositeReason);
                resolveCancelPromise(cancelResult);
            }
            return cancelPromise;
        }
        function startAlgorithm() {
            return;
        }
        branch1 = CreateReadableByteStream(startAlgorithm, pull1Algorithm, cancel1Algorithm);
        branch2 = CreateReadableByteStream(startAlgorithm, pull2Algorithm, cancel2Algorithm);
        forwardReaderError(reader);
        return [branch1, branch2];
    }

    function convertUnderlyingDefaultOrByteSource(source, context) {
        assertDictionary(source, context);
        const original = source;
        const autoAllocateChunkSize = original === null || original === void 0 ? void 0 : original.autoAllocateChunkSize;
        const cancel = original === null || original === void 0 ? void 0 : original.cancel;
        const pull = original === null || original === void 0 ? void 0 : original.pull;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const type = original === null || original === void 0 ? void 0 : original.type;
        return {
            autoAllocateChunkSize: autoAllocateChunkSize === undefined ?
                undefined :
                convertUnsignedLongLongWithEnforceRange(autoAllocateChunkSize, `${context} has member 'autoAllocateChunkSize' that`),
            cancel: cancel === undefined ?
                undefined :
                convertUnderlyingSourceCancelCallback(cancel, original, `${context} has member 'cancel' that`),
            pull: pull === undefined ?
                undefined :
                convertUnderlyingSourcePullCallback(pull, original, `${context} has member 'pull' that`),
            start: start === undefined ?
                undefined :
                convertUnderlyingSourceStartCallback(start, original, `${context} has member 'start' that`),
            type: type === undefined ? undefined : convertReadableStreamType(type, `${context} has member 'type' that`)
        };
    }
    function convertUnderlyingSourceCancelCallback(fn, original, context) {
        assertFunction(fn, context);
        return (reason) => promiseCall(fn, original, [reason]);
    }
    function convertUnderlyingSourcePullCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => promiseCall(fn, original, [controller]);
    }
    function convertUnderlyingSourceStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertReadableStreamType(type, context) {
        type = `${type}`;
        if (type !== 'bytes') {
            throw new TypeError(`${context} '${type}' is not a valid enumeration value for ReadableStreamType`);
        }
        return type;
    }

    function convertReaderOptions(options, context) {
        assertDictionary(options, context);
        const mode = options === null || options === void 0 ? void 0 : options.mode;
        return {
            mode: mode === undefined ? undefined : convertReadableStreamReaderMode(mode, `${context} has member 'mode' that`)
        };
    }
    function convertReadableStreamReaderMode(mode, context) {
        mode = `${mode}`;
        if (mode !== 'byob') {
            throw new TypeError(`${context} '${mode}' is not a valid enumeration value for ReadableStreamReaderMode`);
        }
        return mode;
    }

    function convertIteratorOptions(options, context) {
        assertDictionary(options, context);
        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
        return { preventCancel: Boolean(preventCancel) };
    }

    function convertPipeOptions(options, context) {
        assertDictionary(options, context);
        const preventAbort = options === null || options === void 0 ? void 0 : options.preventAbort;
        const preventCancel = options === null || options === void 0 ? void 0 : options.preventCancel;
        const preventClose = options === null || options === void 0 ? void 0 : options.preventClose;
        const signal = options === null || options === void 0 ? void 0 : options.signal;
        if (signal !== undefined) {
            assertAbortSignal(signal, `${context} has member 'signal' that`);
        }
        return {
            preventAbort: Boolean(preventAbort),
            preventCancel: Boolean(preventCancel),
            preventClose: Boolean(preventClose),
            signal
        };
    }
    function assertAbortSignal(signal, context) {
        if (!isAbortSignal(signal)) {
            throw new TypeError(`${context} is not an AbortSignal.`);
        }
    }

    function convertReadableWritablePair(pair, context) {
        assertDictionary(pair, context);
        const readable = pair === null || pair === void 0 ? void 0 : pair.readable;
        assertRequiredField(readable, 'readable', 'ReadableWritablePair');
        assertReadableStream(readable, `${context} has member 'readable' that`);
        const writable = pair === null || pair === void 0 ? void 0 : pair.writable;
        assertRequiredField(writable, 'writable', 'ReadableWritablePair');
        assertWritableStream(writable, `${context} has member 'writable' that`);
        return { readable, writable };
    }

    /**
     * A readable stream represents a source of data, from which you can read.
     *
     * @public
     */
    class ReadableStream {
        constructor(rawUnderlyingSource = {}, rawStrategy = {}) {
            if (rawUnderlyingSource === undefined) {
                rawUnderlyingSource = null;
            }
            else {
                assertObject(rawUnderlyingSource, 'First parameter');
            }
            const strategy = convertQueuingStrategy(rawStrategy, 'Second parameter');
            const underlyingSource = convertUnderlyingDefaultOrByteSource(rawUnderlyingSource, 'First parameter');
            InitializeReadableStream(this);
            if (underlyingSource.type === 'bytes') {
                if (strategy.size !== undefined) {
                    throw new RangeError('The strategy for a byte stream cannot have a size function');
                }
                const highWaterMark = ExtractHighWaterMark(strategy, 0);
                SetUpReadableByteStreamControllerFromUnderlyingSource(this, underlyingSource, highWaterMark);
            }
            else {
                const sizeAlgorithm = ExtractSizeAlgorithm(strategy);
                const highWaterMark = ExtractHighWaterMark(strategy, 1);
                SetUpReadableStreamDefaultControllerFromUnderlyingSource(this, underlyingSource, highWaterMark, sizeAlgorithm);
            }
        }
        /**
         * Whether or not the readable stream is locked to a {@link ReadableStreamDefaultReader | reader}.
         */
        get locked() {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('locked');
            }
            return IsReadableStreamLocked(this);
        }
        /**
         * Cancels the stream, signaling a loss of interest in the stream by a consumer.
         *
         * The supplied `reason` argument will be given to the underlying source's {@link UnderlyingSource.cancel | cancel()}
         * method, which might or might not use it.
         */
        cancel(reason = undefined) {
            if (!IsReadableStream(this)) {
                return promiseRejectedWith(streamBrandCheckException$1('cancel'));
            }
            if (IsReadableStreamLocked(this)) {
                return promiseRejectedWith(new TypeError('Cannot cancel a stream that already has a reader'));
            }
            return ReadableStreamCancel(this, reason);
        }
        getReader(rawOptions = undefined) {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('getReader');
            }
            const options = convertReaderOptions(rawOptions, 'First parameter');
            if (options.mode === undefined) {
                return AcquireReadableStreamDefaultReader(this);
            }
            return AcquireReadableStreamBYOBReader(this);
        }
        pipeThrough(rawTransform, rawOptions = {}) {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('pipeThrough');
            }
            assertRequiredArgument(rawTransform, 1, 'pipeThrough');
            const transform = convertReadableWritablePair(rawTransform, 'First parameter');
            const options = convertPipeOptions(rawOptions, 'Second parameter');
            if (IsReadableStreamLocked(this)) {
                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked ReadableStream');
            }
            if (IsWritableStreamLocked(transform.writable)) {
                throw new TypeError('ReadableStream.prototype.pipeThrough cannot be used on a locked WritableStream');
            }
            const promise = ReadableStreamPipeTo(this, transform.writable, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
            setPromiseIsHandledToTrue(promise);
            return transform.readable;
        }
        pipeTo(destination, rawOptions = {}) {
            if (!IsReadableStream(this)) {
                return promiseRejectedWith(streamBrandCheckException$1('pipeTo'));
            }
            if (destination === undefined) {
                return promiseRejectedWith(`Parameter 1 is required in 'pipeTo'.`);
            }
            if (!IsWritableStream(destination)) {
                return promiseRejectedWith(new TypeError(`ReadableStream.prototype.pipeTo's first argument must be a WritableStream`));
            }
            let options;
            try {
                options = convertPipeOptions(rawOptions, 'Second parameter');
            }
            catch (e) {
                return promiseRejectedWith(e);
            }
            if (IsReadableStreamLocked(this)) {
                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked ReadableStream'));
            }
            if (IsWritableStreamLocked(destination)) {
                return promiseRejectedWith(new TypeError('ReadableStream.prototype.pipeTo cannot be used on a locked WritableStream'));
            }
            return ReadableStreamPipeTo(this, destination, options.preventClose, options.preventAbort, options.preventCancel, options.signal);
        }
        /**
         * Tees this readable stream, returning a two-element array containing the two resulting branches as
         * new {@link ReadableStream} instances.
         *
         * Teeing a stream will lock it, preventing any other consumer from acquiring a reader.
         * To cancel the stream, cancel both of the resulting branches; a composite cancellation reason will then be
         * propagated to the stream's underlying source.
         *
         * Note that the chunks seen in each branch will be the same object. If the chunks are not immutable,
         * this could allow interference between the two branches.
         */
        tee() {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('tee');
            }
            const branches = ReadableStreamTee(this);
            return CreateArrayFromList(branches);
        }
        values(rawOptions = undefined) {
            if (!IsReadableStream(this)) {
                throw streamBrandCheckException$1('values');
            }
            const options = convertIteratorOptions(rawOptions, 'First parameter');
            return AcquireReadableStreamAsyncIterator(this, options.preventCancel);
        }
    }
    Object.defineProperties(ReadableStream.prototype, {
        cancel: { enumerable: true },
        getReader: { enumerable: true },
        pipeThrough: { enumerable: true },
        pipeTo: { enumerable: true },
        tee: { enumerable: true },
        values: { enumerable: true },
        locked: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.toStringTag, {
            value: 'ReadableStream',
            configurable: true
        });
    }
    if (typeof SymbolPolyfill.asyncIterator === 'symbol') {
        Object.defineProperty(ReadableStream.prototype, SymbolPolyfill.asyncIterator, {
            value: ReadableStream.prototype.values,
            writable: true,
            configurable: true
        });
    }
    // Abstract operations for the ReadableStream.
    // Throws if and only if startAlgorithm throws.
    function CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark = 1, sizeAlgorithm = () => 1) {
        const stream = Object.create(ReadableStream.prototype);
        InitializeReadableStream(stream);
        const controller = Object.create(ReadableStreamDefaultController.prototype);
        SetUpReadableStreamDefaultController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, highWaterMark, sizeAlgorithm);
        return stream;
    }
    // Throws if and only if startAlgorithm throws.
    function CreateReadableByteStream(startAlgorithm, pullAlgorithm, cancelAlgorithm) {
        const stream = Object.create(ReadableStream.prototype);
        InitializeReadableStream(stream);
        const controller = Object.create(ReadableByteStreamController.prototype);
        SetUpReadableByteStreamController(stream, controller, startAlgorithm, pullAlgorithm, cancelAlgorithm, 0, undefined);
        return stream;
    }
    function InitializeReadableStream(stream) {
        stream._state = 'readable';
        stream._reader = undefined;
        stream._storedError = undefined;
        stream._disturbed = false;
    }
    function IsReadableStream(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_readableStreamController')) {
            return false;
        }
        return x instanceof ReadableStream;
    }
    function IsReadableStreamLocked(stream) {
        if (stream._reader === undefined) {
            return false;
        }
        return true;
    }
    // ReadableStream API exposed for controllers.
    function ReadableStreamCancel(stream, reason) {
        stream._disturbed = true;
        if (stream._state === 'closed') {
            return promiseResolvedWith(undefined);
        }
        if (stream._state === 'errored') {
            return promiseRejectedWith(stream._storedError);
        }
        ReadableStreamClose(stream);
        const reader = stream._reader;
        if (reader !== undefined && IsReadableStreamBYOBReader(reader)) {
            reader._readIntoRequests.forEach(readIntoRequest => {
                readIntoRequest._closeSteps(undefined);
            });
            reader._readIntoRequests = new SimpleQueue();
        }
        const sourceCancelPromise = stream._readableStreamController[CancelSteps](reason);
        return transformPromiseWith(sourceCancelPromise, noop);
    }
    function ReadableStreamClose(stream) {
        stream._state = 'closed';
        const reader = stream._reader;
        if (reader === undefined) {
            return;
        }
        defaultReaderClosedPromiseResolve(reader);
        if (IsReadableStreamDefaultReader(reader)) {
            reader._readRequests.forEach(readRequest => {
                readRequest._closeSteps();
            });
            reader._readRequests = new SimpleQueue();
        }
    }
    function ReadableStreamError(stream, e) {
        stream._state = 'errored';
        stream._storedError = e;
        const reader = stream._reader;
        if (reader === undefined) {
            return;
        }
        defaultReaderClosedPromiseReject(reader, e);
        if (IsReadableStreamDefaultReader(reader)) {
            reader._readRequests.forEach(readRequest => {
                readRequest._errorSteps(e);
            });
            reader._readRequests = new SimpleQueue();
        }
        else {
            reader._readIntoRequests.forEach(readIntoRequest => {
                readIntoRequest._errorSteps(e);
            });
            reader._readIntoRequests = new SimpleQueue();
        }
    }
    // Helper functions for the ReadableStream.
    function streamBrandCheckException$1(name) {
        return new TypeError(`ReadableStream.prototype.${name} can only be used on a ReadableStream`);
    }

    function convertQueuingStrategyInit(init, context) {
        assertDictionary(init, context);
        const highWaterMark = init === null || init === void 0 ? void 0 : init.highWaterMark;
        assertRequiredField(highWaterMark, 'highWaterMark', 'QueuingStrategyInit');
        return {
            highWaterMark: convertUnrestrictedDouble(highWaterMark)
        };
    }

    // The size function must not have a prototype property nor be a constructor
    const byteLengthSizeFunction = (chunk) => {
        return chunk.byteLength;
    };
    try {
        Object.defineProperty(byteLengthSizeFunction, 'name', {
            value: 'size',
            configurable: true
        });
    }
    catch (_a) {
        // This property is non-configurable in older browsers, so ignore if this throws.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility
    }
    /**
     * A queuing strategy that counts the number of bytes in each chunk.
     *
     * @public
     */
    class ByteLengthQueuingStrategy {
        constructor(options) {
            assertRequiredArgument(options, 1, 'ByteLengthQueuingStrategy');
            options = convertQueuingStrategyInit(options, 'First parameter');
            this._byteLengthQueuingStrategyHighWaterMark = options.highWaterMark;
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
            if (!IsByteLengthQueuingStrategy(this)) {
                throw byteLengthBrandCheckException('highWaterMark');
            }
            return this._byteLengthQueuingStrategyHighWaterMark;
        }
        /**
         * Measures the size of `chunk` by returning the value of its `byteLength` property.
         */
        get size() {
            if (!IsByteLengthQueuingStrategy(this)) {
                throw byteLengthBrandCheckException('size');
            }
            return byteLengthSizeFunction;
        }
    }
    Object.defineProperties(ByteLengthQueuingStrategy.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(ByteLengthQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
            value: 'ByteLengthQueuingStrategy',
            configurable: true
        });
    }
    // Helper functions for the ByteLengthQueuingStrategy.
    function byteLengthBrandCheckException(name) {
        return new TypeError(`ByteLengthQueuingStrategy.prototype.${name} can only be used on a ByteLengthQueuingStrategy`);
    }
    function IsByteLengthQueuingStrategy(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_byteLengthQueuingStrategyHighWaterMark')) {
            return false;
        }
        return x instanceof ByteLengthQueuingStrategy;
    }

    // The size function must not have a prototype property nor be a constructor
    const countSizeFunction = () => {
        return 1;
    };
    try {
        Object.defineProperty(countSizeFunction, 'name', {
            value: 'size',
            configurable: true
        });
    }
    catch (_a) {
        // This property is non-configurable in older browsers, so ignore if this throws.
        // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/name#browser_compatibility
    }
    /**
     * A queuing strategy that counts the number of chunks.
     *
     * @public
     */
    class CountQueuingStrategy {
        constructor(options) {
            assertRequiredArgument(options, 1, 'CountQueuingStrategy');
            options = convertQueuingStrategyInit(options, 'First parameter');
            this._countQueuingStrategyHighWaterMark = options.highWaterMark;
        }
        /**
         * Returns the high water mark provided to the constructor.
         */
        get highWaterMark() {
            if (!IsCountQueuingStrategy(this)) {
                throw countBrandCheckException('highWaterMark');
            }
            return this._countQueuingStrategyHighWaterMark;
        }
        /**
         * Measures the size of `chunk` by always returning 1.
         * This ensures that the total queue size is a count of the number of chunks in the queue.
         */
        get size() {
            if (!IsCountQueuingStrategy(this)) {
                throw countBrandCheckException('size');
            }
            return countSizeFunction;
        }
    }
    Object.defineProperties(CountQueuingStrategy.prototype, {
        highWaterMark: { enumerable: true },
        size: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(CountQueuingStrategy.prototype, SymbolPolyfill.toStringTag, {
            value: 'CountQueuingStrategy',
            configurable: true
        });
    }
    // Helper functions for the CountQueuingStrategy.
    function countBrandCheckException(name) {
        return new TypeError(`CountQueuingStrategy.prototype.${name} can only be used on a CountQueuingStrategy`);
    }
    function IsCountQueuingStrategy(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_countQueuingStrategyHighWaterMark')) {
            return false;
        }
        return x instanceof CountQueuingStrategy;
    }

    function convertTransformer(original, context) {
        assertDictionary(original, context);
        const flush = original === null || original === void 0 ? void 0 : original.flush;
        const readableType = original === null || original === void 0 ? void 0 : original.readableType;
        const start = original === null || original === void 0 ? void 0 : original.start;
        const transform = original === null || original === void 0 ? void 0 : original.transform;
        const writableType = original === null || original === void 0 ? void 0 : original.writableType;
        return {
            flush: flush === undefined ?
                undefined :
                convertTransformerFlushCallback(flush, original, `${context} has member 'flush' that`),
            readableType,
            start: start === undefined ?
                undefined :
                convertTransformerStartCallback(start, original, `${context} has member 'start' that`),
            transform: transform === undefined ?
                undefined :
                convertTransformerTransformCallback(transform, original, `${context} has member 'transform' that`),
            writableType
        };
    }
    function convertTransformerFlushCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => promiseCall(fn, original, [controller]);
    }
    function convertTransformerStartCallback(fn, original, context) {
        assertFunction(fn, context);
        return (controller) => reflectCall(fn, original, [controller]);
    }
    function convertTransformerTransformCallback(fn, original, context) {
        assertFunction(fn, context);
        return (chunk, controller) => promiseCall(fn, original, [chunk, controller]);
    }

    // Class TransformStream
    /**
     * A transform stream consists of a pair of streams: a {@link WritableStream | writable stream},
     * known as its writable side, and a {@link ReadableStream | readable stream}, known as its readable side.
     * In a manner specific to the transform stream in question, writes to the writable side result in new data being
     * made available for reading from the readable side.
     *
     * @public
     */
    class TransformStream {
        constructor(rawTransformer = {}, rawWritableStrategy = {}, rawReadableStrategy = {}) {
            if (rawTransformer === undefined) {
                rawTransformer = null;
            }
            const writableStrategy = convertQueuingStrategy(rawWritableStrategy, 'Second parameter');
            const readableStrategy = convertQueuingStrategy(rawReadableStrategy, 'Third parameter');
            const transformer = convertTransformer(rawTransformer, 'First parameter');
            if (transformer.readableType !== undefined) {
                throw new RangeError('Invalid readableType specified');
            }
            if (transformer.writableType !== undefined) {
                throw new RangeError('Invalid writableType specified');
            }
            const readableHighWaterMark = ExtractHighWaterMark(readableStrategy, 0);
            const readableSizeAlgorithm = ExtractSizeAlgorithm(readableStrategy);
            const writableHighWaterMark = ExtractHighWaterMark(writableStrategy, 1);
            const writableSizeAlgorithm = ExtractSizeAlgorithm(writableStrategy);
            let startPromise_resolve;
            const startPromise = newPromise(resolve => {
                startPromise_resolve = resolve;
            });
            InitializeTransformStream(this, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
            SetUpTransformStreamDefaultControllerFromTransformer(this, transformer);
            if (transformer.start !== undefined) {
                startPromise_resolve(transformer.start(this._transformStreamController));
            }
            else {
                startPromise_resolve(undefined);
            }
        }
        /**
         * The readable side of the transform stream.
         */
        get readable() {
            if (!IsTransformStream(this)) {
                throw streamBrandCheckException('readable');
            }
            return this._readable;
        }
        /**
         * The writable side of the transform stream.
         */
        get writable() {
            if (!IsTransformStream(this)) {
                throw streamBrandCheckException('writable');
            }
            return this._writable;
        }
    }
    Object.defineProperties(TransformStream.prototype, {
        readable: { enumerable: true },
        writable: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(TransformStream.prototype, SymbolPolyfill.toStringTag, {
            value: 'TransformStream',
            configurable: true
        });
    }
    function InitializeTransformStream(stream, startPromise, writableHighWaterMark, writableSizeAlgorithm, readableHighWaterMark, readableSizeAlgorithm) {
        function startAlgorithm() {
            return startPromise;
        }
        function writeAlgorithm(chunk) {
            return TransformStreamDefaultSinkWriteAlgorithm(stream, chunk);
        }
        function abortAlgorithm(reason) {
            return TransformStreamDefaultSinkAbortAlgorithm(stream, reason);
        }
        function closeAlgorithm() {
            return TransformStreamDefaultSinkCloseAlgorithm(stream);
        }
        stream._writable = CreateWritableStream(startAlgorithm, writeAlgorithm, closeAlgorithm, abortAlgorithm, writableHighWaterMark, writableSizeAlgorithm);
        function pullAlgorithm() {
            return TransformStreamDefaultSourcePullAlgorithm(stream);
        }
        function cancelAlgorithm(reason) {
            TransformStreamErrorWritableAndUnblockWrite(stream, reason);
            return promiseResolvedWith(undefined);
        }
        stream._readable = CreateReadableStream(startAlgorithm, pullAlgorithm, cancelAlgorithm, readableHighWaterMark, readableSizeAlgorithm);
        // The [[backpressure]] slot is set to undefined so that it can be initialised by TransformStreamSetBackpressure.
        stream._backpressure = undefined;
        stream._backpressureChangePromise = undefined;
        stream._backpressureChangePromise_resolve = undefined;
        TransformStreamSetBackpressure(stream, true);
        stream._transformStreamController = undefined;
    }
    function IsTransformStream(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_transformStreamController')) {
            return false;
        }
        return x instanceof TransformStream;
    }
    // This is a no-op if both sides are already errored.
    function TransformStreamError(stream, e) {
        ReadableStreamDefaultControllerError(stream._readable._readableStreamController, e);
        TransformStreamErrorWritableAndUnblockWrite(stream, e);
    }
    function TransformStreamErrorWritableAndUnblockWrite(stream, e) {
        TransformStreamDefaultControllerClearAlgorithms(stream._transformStreamController);
        WritableStreamDefaultControllerErrorIfNeeded(stream._writable._writableStreamController, e);
        if (stream._backpressure) {
            // Pretend that pull() was called to permit any pending write() calls to complete. TransformStreamSetBackpressure()
            // cannot be called from enqueue() or pull() once the ReadableStream is errored, so this will will be the final time
            // _backpressure is set.
            TransformStreamSetBackpressure(stream, false);
        }
    }
    function TransformStreamSetBackpressure(stream, backpressure) {
        // Passes also when called during construction.
        if (stream._backpressureChangePromise !== undefined) {
            stream._backpressureChangePromise_resolve();
        }
        stream._backpressureChangePromise = newPromise(resolve => {
            stream._backpressureChangePromise_resolve = resolve;
        });
        stream._backpressure = backpressure;
    }
    // Class TransformStreamDefaultController
    /**
     * Allows control of the {@link ReadableStream} and {@link WritableStream} of the associated {@link TransformStream}.
     *
     * @public
     */
    class TransformStreamDefaultController {
        constructor() {
            throw new TypeError('Illegal constructor');
        }
        /**
         * Returns the desired size to fill the readable side’s internal queue. It can be negative, if the queue is over-full.
         */
        get desiredSize() {
            if (!IsTransformStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException('desiredSize');
            }
            const readableController = this._controlledTransformStream._readable._readableStreamController;
            return ReadableStreamDefaultControllerGetDesiredSize(readableController);
        }
        enqueue(chunk = undefined) {
            if (!IsTransformStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException('enqueue');
            }
            TransformStreamDefaultControllerEnqueue(this, chunk);
        }
        /**
         * Errors both the readable side and the writable side of the controlled transform stream, making all future
         * interactions with it fail with the given error `e`. Any chunks queued for transformation will be discarded.
         */
        error(reason = undefined) {
            if (!IsTransformStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException('error');
            }
            TransformStreamDefaultControllerError(this, reason);
        }
        /**
         * Closes the readable side and errors the writable side of the controlled transform stream. This is useful when the
         * transformer only needs to consume a portion of the chunks written to the writable side.
         */
        terminate() {
            if (!IsTransformStreamDefaultController(this)) {
                throw defaultControllerBrandCheckException('terminate');
            }
            TransformStreamDefaultControllerTerminate(this);
        }
    }
    Object.defineProperties(TransformStreamDefaultController.prototype, {
        enqueue: { enumerable: true },
        error: { enumerable: true },
        terminate: { enumerable: true },
        desiredSize: { enumerable: true }
    });
    if (typeof SymbolPolyfill.toStringTag === 'symbol') {
        Object.defineProperty(TransformStreamDefaultController.prototype, SymbolPolyfill.toStringTag, {
            value: 'TransformStreamDefaultController',
            configurable: true
        });
    }
    // Transform Stream Default Controller Abstract Operations
    function IsTransformStreamDefaultController(x) {
        if (!typeIsObject(x)) {
            return false;
        }
        if (!Object.prototype.hasOwnProperty.call(x, '_controlledTransformStream')) {
            return false;
        }
        return x instanceof TransformStreamDefaultController;
    }
    function SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm) {
        controller._controlledTransformStream = stream;
        stream._transformStreamController = controller;
        controller._transformAlgorithm = transformAlgorithm;
        controller._flushAlgorithm = flushAlgorithm;
    }
    function SetUpTransformStreamDefaultControllerFromTransformer(stream, transformer) {
        const controller = Object.create(TransformStreamDefaultController.prototype);
        let transformAlgorithm = (chunk) => {
            try {
                TransformStreamDefaultControllerEnqueue(controller, chunk);
                return promiseResolvedWith(undefined);
            }
            catch (transformResultE) {
                return promiseRejectedWith(transformResultE);
            }
        };
        let flushAlgorithm = () => promiseResolvedWith(undefined);
        if (transformer.transform !== undefined) {
            transformAlgorithm = chunk => transformer.transform(chunk, controller);
        }
        if (transformer.flush !== undefined) {
            flushAlgorithm = () => transformer.flush(controller);
        }
        SetUpTransformStreamDefaultController(stream, controller, transformAlgorithm, flushAlgorithm);
    }
    function TransformStreamDefaultControllerClearAlgorithms(controller) {
        controller._transformAlgorithm = undefined;
        controller._flushAlgorithm = undefined;
    }
    function TransformStreamDefaultControllerEnqueue(controller, chunk) {
        const stream = controller._controlledTransformStream;
        const readableController = stream._readable._readableStreamController;
        if (!ReadableStreamDefaultControllerCanCloseOrEnqueue(readableController)) {
            throw new TypeError('Readable side is not in a state that permits enqueue');
        }
        // We throttle transform invocations based on the backpressure of the ReadableStream, but we still
        // accept TransformStreamDefaultControllerEnqueue() calls.
        try {
            ReadableStreamDefaultControllerEnqueue(readableController, chunk);
        }
        catch (e) {
            // This happens when readableStrategy.size() throws.
            TransformStreamErrorWritableAndUnblockWrite(stream, e);
            throw stream._readable._storedError;
        }
        const backpressure = ReadableStreamDefaultControllerHasBackpressure(readableController);
        if (backpressure !== stream._backpressure) {
            TransformStreamSetBackpressure(stream, true);
        }
    }
    function TransformStreamDefaultControllerError(controller, e) {
        TransformStreamError(controller._controlledTransformStream, e);
    }
    function TransformStreamDefaultControllerPerformTransform(controller, chunk) {
        const transformPromise = controller._transformAlgorithm(chunk);
        return transformPromiseWith(transformPromise, undefined, r => {
            TransformStreamError(controller._controlledTransformStream, r);
            throw r;
        });
    }
    function TransformStreamDefaultControllerTerminate(controller) {
        const stream = controller._controlledTransformStream;
        const readableController = stream._readable._readableStreamController;
        ReadableStreamDefaultControllerClose(readableController);
        const error = new TypeError('TransformStream terminated');
        TransformStreamErrorWritableAndUnblockWrite(stream, error);
    }
    // TransformStreamDefaultSink Algorithms
    function TransformStreamDefaultSinkWriteAlgorithm(stream, chunk) {
        const controller = stream._transformStreamController;
        if (stream._backpressure) {
            const backpressureChangePromise = stream._backpressureChangePromise;
            return transformPromiseWith(backpressureChangePromise, () => {
                const writable = stream._writable;
                const state = writable._state;
                if (state === 'erroring') {
                    throw writable._storedError;
                }
                return TransformStreamDefaultControllerPerformTransform(controller, chunk);
            });
        }
        return TransformStreamDefaultControllerPerformTransform(controller, chunk);
    }
    function TransformStreamDefaultSinkAbortAlgorithm(stream, reason) {
        // abort() is not called synchronously, so it is possible for abort() to be called when the stream is already
        // errored.
        TransformStreamError(stream, reason);
        return promiseResolvedWith(undefined);
    }
    function TransformStreamDefaultSinkCloseAlgorithm(stream) {
        // stream._readable cannot change after construction, so caching it across a call to user code is safe.
        const readable = stream._readable;
        const controller = stream._transformStreamController;
        const flushPromise = controller._flushAlgorithm();
        TransformStreamDefaultControllerClearAlgorithms(controller);
        // Return a promise that is fulfilled with undefined on success.
        return transformPromiseWith(flushPromise, () => {
            if (readable._state === 'errored') {
                throw readable._storedError;
            }
            ReadableStreamDefaultControllerClose(readable._readableStreamController);
        }, r => {
            TransformStreamError(stream, r);
            throw readable._storedError;
        });
    }
    // TransformStreamDefaultSource Algorithms
    function TransformStreamDefaultSourcePullAlgorithm(stream) {
        // Invariant. Enforced by the promises returned by start() and pull().
        TransformStreamSetBackpressure(stream, false);
        // Prevent the next pull() call until there is backpressure.
        return stream._backpressureChangePromise;
    }
    // Helper functions for the TransformStreamDefaultController.
    function defaultControllerBrandCheckException(name) {
        return new TypeError(`TransformStreamDefaultController.prototype.${name} can only be used on a TransformStreamDefaultController`);
    }
    // Helper functions for the TransformStream.
    function streamBrandCheckException(name) {
        return new TypeError(`TransformStream.prototype.${name} can only be used on a TransformStream`);
    }

    exports.ByteLengthQueuingStrategy = ByteLengthQueuingStrategy;
    exports.CountQueuingStrategy = CountQueuingStrategy;
    exports.ReadableByteStreamController = ReadableByteStreamController;
    exports.ReadableStream = ReadableStream;
    exports.ReadableStreamBYOBReader = ReadableStreamBYOBReader;
    exports.ReadableStreamBYOBRequest = ReadableStreamBYOBRequest;
    exports.ReadableStreamDefaultController = ReadableStreamDefaultController;
    exports.ReadableStreamDefaultReader = ReadableStreamDefaultReader;
    exports.TransformStream = TransformStream;
    exports.TransformStreamDefaultController = TransformStreamDefaultController;
    exports.WritableStream = WritableStream;
    exports.WritableStreamDefaultController = WritableStreamDefaultController;
    exports.WritableStreamDefaultWriter = WritableStreamDefaultWriter;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ponyfill.es2018.js.map


/***/ }),

/***/ 9491:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("assert");

/***/ }),

/***/ 4300:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("buffer");

/***/ }),

/***/ 2081:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("child_process");

/***/ }),

/***/ 6113:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("crypto");

/***/ }),

/***/ 2361:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("events");

/***/ }),

/***/ 7147:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("fs");

/***/ }),

/***/ 3685:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("http");

/***/ }),

/***/ 5687:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("https");

/***/ }),

/***/ 1808:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("net");

/***/ }),

/***/ 7742:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:process");

/***/ }),

/***/ 2477:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:stream/web");

/***/ }),

/***/ 2037:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("os");

/***/ }),

/***/ 1017:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("path");

/***/ }),

/***/ 1576:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("string_decoder");

/***/ }),

/***/ 9512:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("timers");

/***/ }),

/***/ 4404:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("tls");

/***/ }),

/***/ 3837:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("util");

/***/ }),

/***/ 1267:
/***/ ((module) => {

module.exports = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("worker_threads");

/***/ }),

/***/ 4348:
/***/ ((__unused_webpack_module, __unused_webpack_exports, __nccwpck_require__) => {

/* c8 ignore start */
// 64 KiB (same size chrome slice theirs blob into Uint8array's)
const POOL_SIZE = 65536

if (!globalThis.ReadableStream) {
  // `node:stream/web` got introduced in v16.5.0 as experimental
  // and it's preferred over the polyfilled version. So we also
  // suppress the warning that gets emitted by NodeJS for using it.
  try {
    const process = __nccwpck_require__(7742)
    const { emitWarning } = process
    try {
      process.emitWarning = () => {}
      Object.assign(globalThis, __nccwpck_require__(2477))
      process.emitWarning = emitWarning
    } catch (error) {
      process.emitWarning = emitWarning
      throw error
    }
  } catch (error) {
    // fallback to polyfill implementation
    Object.assign(globalThis, __nccwpck_require__(6484))
  }
}

try {
  // Don't use node: prefix for this, require+node: is not supported until node v14.14
  // Only `import()` can use prefix in 12.20 and later
  const { Blob } = __nccwpck_require__(4300)
  if (Blob && !Blob.prototype.stream) {
    Blob.prototype.stream = function name (params) {
      let position = 0
      const blob = this

      return new ReadableStream({
        type: 'bytes',
        async pull (ctrl) {
          const chunk = blob.slice(position, Math.min(blob.size, position + POOL_SIZE))
          const buffer = await chunk.arrayBuffer()
          position += buffer.byteLength
          ctrl.enqueue(new Uint8Array(buffer))

          if (position === blob.size) {
            ctrl.close()
          }
        }
      })
    }
  }
} catch (error) {}
/* c8 ignore end */


/***/ }),

/***/ 1564:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {

/* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony export File */
/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(8967);


const _File = class File extends _index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z {
  #lastModified = 0
  #name = ''

  /**
   * @param {*[]} fileBits
   * @param {string} fileName
   * @param {{lastModified?: number, type?: string}} options
   */// @ts-ignore
  constructor (fileBits, fileName, options = {}) {
    if (arguments.length < 2) {
      throw new TypeError(`Failed to construct 'File': 2 arguments required, but only ${arguments.length} present.`)
    }
    super(fileBits, options)

    if (options === null) options = {}

    // Simulate WebIDL type casting for NaN value in lastModified option.
    const lastModified = options.lastModified === undefined ? Date.now() : Number(options.lastModified)
    if (!Number.isNaN(lastModified)) {
      this.#lastModified = lastModified
    }

    this.#name = String(fileName)
  }

  get name () {
    return this.#name
  }

  get lastModified () {
    return this.#lastModified
  }

  get [Symbol.toStringTag] () {
    return 'File'
  }

  static [Symbol.hasInstance] (object) {
    return !!object && object instanceof _index_js__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z &&
      /^(File)$/.test(object[Symbol.toStringTag])
  }
}

/** @type {typeof globalThis.File} */// @ts-ignore
const File = _File
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (File);


/***/ }),

/***/ 7253:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {


// EXPORTS
__nccwpck_require__.d(__webpack_exports__, {
  "$B": () => (/* reexport */ file/* default */.Z)
});

// UNUSED EXPORTS: Blob, blobFrom, blobFromSync, default, fileFrom, fileFromSync

;// CONCATENATED MODULE: external "node:fs"
const external_node_fs_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:fs");
;// CONCATENATED MODULE: external "node:path"
const external_node_path_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:path");
// EXTERNAL MODULE: ./node_modules/.pnpm/node-domexception@1.0.0/node_modules/node-domexception/index.js
var node_domexception = __nccwpck_require__(1351);
// EXTERNAL MODULE: ./node_modules/.pnpm/fetch-blob@3.2.0/node_modules/fetch-blob/file.js
var file = __nccwpck_require__(1564);
// EXTERNAL MODULE: ./node_modules/.pnpm/fetch-blob@3.2.0/node_modules/fetch-blob/index.js
var fetch_blob = __nccwpck_require__(8967);
;// CONCATENATED MODULE: ./node_modules/.pnpm/fetch-blob@3.2.0/node_modules/fetch-blob/from.js







const { stat } = external_node_fs_namespaceObject.promises

/**
 * @param {string} path filepath on the disk
 * @param {string} [type] mimetype to use
 */
const blobFromSync = (path, type) => fromBlob(statSync(path), path, type)

/**
 * @param {string} path filepath on the disk
 * @param {string} [type] mimetype to use
 * @returns {Promise<Blob>}
 */
const blobFrom = (path, type) => stat(path).then(stat => fromBlob(stat, path, type))

/**
 * @param {string} path filepath on the disk
 * @param {string} [type] mimetype to use
 * @returns {Promise<File>}
 */
const fileFrom = (path, type) => stat(path).then(stat => fromFile(stat, path, type))

/**
 * @param {string} path filepath on the disk
 * @param {string} [type] mimetype to use
 */
const fileFromSync = (path, type) => fromFile(statSync(path), path, type)

// @ts-ignore
const fromBlob = (stat, path, type = '') => new Blob([new BlobDataItem({
  path,
  size: stat.size,
  lastModified: stat.mtimeMs,
  start: 0
})], { type })

// @ts-ignore
const fromFile = (stat, path, type = '') => new File([new BlobDataItem({
  path,
  size: stat.size,
  lastModified: stat.mtimeMs,
  start: 0
})], basename(path), { type, lastModified: stat.mtimeMs })

/**
 * This is a blob backed up by a file on the disk
 * with minium requirement. Its wrapped around a Blob as a blobPart
 * so you have no direct access to this.
 *
 * @private
 */
class BlobDataItem {
  #path
  #start

  constructor (options) {
    this.#path = options.path
    this.#start = options.start
    this.size = options.size
    this.lastModified = options.lastModified
  }

  /**
   * Slicing arguments is first validated and formatted
   * to not be out of range by Blob.prototype.slice
   */
  slice (start, end) {
    return new BlobDataItem({
      path: this.#path,
      lastModified: this.lastModified,
      size: end - start,
      start: this.#start + start
    })
  }

  async * stream () {
    const { mtimeMs } = await stat(this.#path)
    if (mtimeMs > this.lastModified) {
      throw new DOMException('The requested file could not be read, typically due to permission problems that have occurred after a reference to a file was acquired.', 'NotReadableError')
    }
    yield * createReadStream(this.#path, {
      start: this.#start,
      end: this.#start + this.size - 1
    })
  }

  get [Symbol.toStringTag] () {
    return 'Blob'
  }
}

/* harmony default export */ const from = ((/* unused pure expression or super */ null && (blobFromSync)));



/***/ }),

/***/ 8967:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {

/* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
/* harmony export */   "Z": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* unused harmony export Blob */
/* harmony import */ var _streams_cjs__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(4348);
/*! fetch-blob. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */

// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)
// Node has recently added whatwg stream into core



// 64 KiB (same size chrome slice theirs blob into Uint8array's)
const POOL_SIZE = 65536

/** @param {(Blob | Uint8Array)[]} parts */
async function * toIterator (parts, clone = true) {
  for (const part of parts) {
    if ('stream' in part) {
      yield * (/** @type {AsyncIterableIterator<Uint8Array>} */ (part.stream()))
    } else if (ArrayBuffer.isView(part)) {
      if (clone) {
        let position = part.byteOffset
        const end = part.byteOffset + part.byteLength
        while (position !== end) {
          const size = Math.min(end - position, POOL_SIZE)
          const chunk = part.buffer.slice(position, position + size)
          position += chunk.byteLength
          yield new Uint8Array(chunk)
        }
      } else {
        yield part
      }
    /* c8 ignore next 10 */
    } else {
      // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)
      let position = 0, b = (/** @type {Blob} */ (part))
      while (position !== b.size) {
        const chunk = b.slice(position, Math.min(b.size, position + POOL_SIZE))
        const buffer = await chunk.arrayBuffer()
        position += buffer.byteLength
        yield new Uint8Array(buffer)
      }
    }
  }
}

const _Blob = class Blob {
  /** @type {Array.<(Blob|Uint8Array)>} */
  #parts = []
  #type = ''
  #size = 0
  #endings = 'transparent'

  /**
   * The Blob() constructor returns a new Blob object. The content
   * of the blob consists of the concatenation of the values given
   * in the parameter array.
   *
   * @param {*} blobParts
   * @param {{ type?: string, endings?: string }} [options]
   */
  constructor (blobParts = [], options = {}) {
    if (typeof blobParts !== 'object' || blobParts === null) {
      throw new TypeError('Failed to construct \'Blob\': The provided value cannot be converted to a sequence.')
    }

    if (typeof blobParts[Symbol.iterator] !== 'function') {
      throw new TypeError('Failed to construct \'Blob\': The object must have a callable @@iterator property.')
    }

    if (typeof options !== 'object' && typeof options !== 'function') {
      throw new TypeError('Failed to construct \'Blob\': parameter 2 cannot convert to dictionary.')
    }

    if (options === null) options = {}

    const encoder = new TextEncoder()
    for (const element of blobParts) {
      let part
      if (ArrayBuffer.isView(element)) {
        part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength))
      } else if (element instanceof ArrayBuffer) {
        part = new Uint8Array(element.slice(0))
      } else if (element instanceof Blob) {
        part = element
      } else {
        part = encoder.encode(`${element}`)
      }

      this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size
      this.#parts.push(part)
    }

    this.#endings = `${options.endings === undefined ? 'transparent' : options.endings}`
    const type = options.type === undefined ? '' : String(options.type)
    this.#type = /^[\x20-\x7E]*$/.test(type) ? type : ''
  }

  /**
   * The Blob interface's size property returns the
   * size of the Blob in bytes.
   */
  get size () {
    return this.#size
  }

  /**
   * The type property of a Blob object returns the MIME type of the file.
   */
  get type () {
    return this.#type
  }

  /**
   * The text() method in the Blob interface returns a Promise
   * that resolves with a string containing the contents of
   * the blob, interpreted as UTF-8.
   *
   * @return {Promise<string>}
   */
  async text () {
    // More optimized than using this.arrayBuffer()
    // that requires twice as much ram
    const decoder = new TextDecoder()
    let str = ''
    for await (const part of toIterator(this.#parts, false)) {
      str += decoder.decode(part, { stream: true })
    }
    // Remaining
    str += decoder.decode()
    return str
  }

  /**
   * The arrayBuffer() method in the Blob interface returns a
   * Promise that resolves with the contents of the blob as
   * binary data contained in an ArrayBuffer.
   *
   * @return {Promise<ArrayBuffer>}
   */
  async arrayBuffer () {
    // Easier way... Just a unnecessary overhead
    // const view = new Uint8Array(this.size);
    // await this.stream().getReader({mode: 'byob'}).read(view);
    // return view.buffer;

    const data = new Uint8Array(this.size)
    let offset = 0
    for await (const chunk of toIterator(this.#parts, false)) {
      data.set(chunk, offset)
      offset += chunk.length
    }

    return data.buffer
  }

  stream () {
    const it = toIterator(this.#parts, true)

    return new globalThis.ReadableStream({
      // @ts-ignore
      type: 'bytes',
      async pull (ctrl) {
        const chunk = await it.next()
        chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value)
      },

      async cancel () {
        await it.return()
      }
    })
  }

  /**
   * The Blob interface's slice() method creates and returns a
   * new Blob object which contains data from a subset of the
   * blob on which it's called.
   *
   * @param {number} [start]
   * @param {number} [end]
   * @param {string} [type]
   */
  slice (start = 0, end = this.size, type = '') {
    const { size } = this

    let relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size)
    let relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size)

    const span = Math.max(relativeEnd - relativeStart, 0)
    const parts = this.#parts
    const blobParts = []
    let added = 0

    for (const part of parts) {
      // don't add the overflow to new blobParts
      if (added >= span) {
        break
      }

      const size = ArrayBuffer.isView(part) ? part.byteLength : part.size
      if (relativeStart && size <= relativeStart) {
        // Skip the beginning and change the relative
        // start & end position as we skip the unwanted parts
        relativeStart -= size
        relativeEnd -= size
      } else {
        let chunk
        if (ArrayBuffer.isView(part)) {
          chunk = part.subarray(relativeStart, Math.min(size, relativeEnd))
          added += chunk.byteLength
        } else {
          chunk = part.slice(relativeStart, Math.min(size, relativeEnd))
          added += chunk.size
        }
        relativeEnd -= size
        blobParts.push(chunk)
        relativeStart = 0 // All next sequential parts should start at 0
      }
    }

    const blob = new Blob([], { type: String(type).toLowerCase() })
    blob.#size = span
    blob.#parts = blobParts

    return blob
  }

  get [Symbol.toStringTag] () {
    return 'Blob'
  }

  static [Symbol.hasInstance] (object) {
    return (
      object &&
      typeof object === 'object' &&
      typeof object.constructor === 'function' &&
      (
        typeof object.stream === 'function' ||
        typeof object.arrayBuffer === 'function'
      ) &&
      /^(Blob|File)$/.test(object[Symbol.toStringTag])
    )
  }
}

Object.defineProperties(_Blob.prototype, {
  size: { enumerable: true },
  type: { enumerable: true },
  slice: { enumerable: true }
})

/** @type {typeof globalThis.Blob} */
const Blob = _Blob
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Blob);


/***/ }),

/***/ 2000:
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __nccwpck_require__) => {

/* harmony export */ __nccwpck_require__.d(__webpack_exports__, {
/* harmony export */   "Ct": () => (/* binding */ FormData),
/* harmony export */   "au": () => (/* binding */ formDataToBlob)
/* harmony export */ });
/* unused harmony export File */
/* harmony import */ var fetch_blob__WEBPACK_IMPORTED_MODULE_0__ = __nccwpck_require__(8967);
/* harmony import */ var fetch_blob_file_js__WEBPACK_IMPORTED_MODULE_1__ = __nccwpck_require__(1564);
/*! formdata-polyfill. MIT License. Jimmy Wärting <https://jimmy.warting.se/opensource> */




var {toStringTag:t,iterator:i,hasInstance:h}=Symbol,
r=Math.random,
m='append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(','),
f=(a,b,c)=>(a+='',/^(Blob|File)$/.test(b && b[t])?[(c=c!==void 0?c+'':b[t]=='File'?b.name:'blob',a),b.name!==c||b[t]=='blob'?new fetch_blob_file_js__WEBPACK_IMPORTED_MODULE_1__/* ["default"] */ .Z([b],c,b):b]:[a,b+'']),
e=(c,f)=>(f?c:c.replace(/\r?\n|\r/g,'\r\n')).replace(/\n/g,'%0A').replace(/\r/g,'%0D').replace(/"/g,'%22'),
x=(n, a, e)=>{if(a.length<e){throw new TypeError(`Failed to execute '${n}' on 'FormData': ${e} arguments required, but only ${a.length} present.`)}}

const File = (/* unused pure expression or super */ null && (F))

/** @type {typeof globalThis.FormData} */
const FormData = class FormData {
#d=[];
constructor(...a){if(a.length)throw new TypeError(`Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.`)}
get [t]() {return 'FormData'}
[i](){return this.entries()}
static [h](o) {return o&&typeof o==='object'&&o[t]==='FormData'&&!m.some(m=>typeof o[m]!='function')}
append(...a){x('append',arguments,2);this.#d.push(f(...a))}
delete(a){x('delete',arguments,1);a+='';this.#d=this.#d.filter(([b])=>b!==a)}
get(a){x('get',arguments,1);a+='';for(var b=this.#d,l=b.length,c=0;c<l;c++)if(b[c][0]===a)return b[c][1];return null}
getAll(a,b){x('getAll',arguments,1);b=[];a+='';this.#d.forEach(c=>c[0]===a&&b.push(c[1]));return b}
has(a){x('has',arguments,1);a+='';return this.#d.some(b=>b[0]===a)}
forEach(a,b){x('forEach',arguments,1);for(var [c,d]of this)a.call(b,d,c,this)}
set(...a){x('set',arguments,2);var b=[],c=!0;a=f(...a);this.#d.forEach(d=>{d[0]===a[0]?c&&(c=!b.push(a)):b.push(d)});c&&b.push(a);this.#d=b}
*entries(){yield*this.#d}
*keys(){for(var[a]of this)yield a}
*values(){for(var[,a]of this)yield a}}

/** @param {FormData} F */
function formDataToBlob (F,B=fetch_blob__WEBPACK_IMPORTED_MODULE_0__/* ["default"] */ .Z){
var b=`${r()}${r()}`.replace(/\./g, '').slice(-28).padStart(32, '-'),c=[],p=`--${b}\r\nContent-Disposition: form-data; name="`
F.forEach((v,n)=>typeof v=='string'
?c.push(p+e(n)+`"\r\n\r\n${v.replace(/\r(?!\n)|(?<!\r)\n/g, '\r\n')}\r\n`)
:c.push(p+e(n)+`"; filename="${e(v.name, 1)}"\r\nContent-Type: ${v.type||"application/octet-stream"}\r\n\r\n`, v, '\r\n'))
c.push(`--${b}--`)
return new B(c,{type:"multipart/form-data; boundary="+b})}


/***/ })

/******/ });
/************************************************************************/
/******/ // The module cache
/******/ var __webpack_module_cache__ = {};
/******/ 
/******/ // The require function
/******/ function __nccwpck_require__(moduleId) {
/******/ 	// Check if module is in cache
/******/ 	var cachedModule = __webpack_module_cache__[moduleId];
/******/ 	if (cachedModule !== undefined) {
/******/ 		return cachedModule.exports;
/******/ 	}
/******/ 	// Create a new module (and put it into the cache)
/******/ 	var module = __webpack_module_cache__[moduleId] = {
/******/ 		// no module.id needed
/******/ 		// no module.loaded needed
/******/ 		exports: {}
/******/ 	};
/******/ 
/******/ 	// Execute the module function
/******/ 	var threw = true;
/******/ 	try {
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __nccwpck_require__);
/******/ 		threw = false;
/******/ 	} finally {
/******/ 		if(threw) delete __webpack_module_cache__[moduleId];
/******/ 	}
/******/ 
/******/ 	// Return the exports of the module
/******/ 	return module.exports;
/******/ }
/******/ 
/******/ // expose the modules object (__webpack_modules__)
/******/ __nccwpck_require__.m = __webpack_modules__;
/******/ 
/************************************************************************/
/******/ /* webpack/runtime/define property getters */
/******/ (() => {
/******/ 	// define getter functions for harmony exports
/******/ 	__nccwpck_require__.d = (exports, definition) => {
/******/ 		for(var key in definition) {
/******/ 			if(__nccwpck_require__.o(definition, key) && !__nccwpck_require__.o(exports, key)) {
/******/ 				Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 			}
/******/ 		}
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/ensure chunk */
/******/ (() => {
/******/ 	__nccwpck_require__.f = {};
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__nccwpck_require__.e = (chunkId) => {
/******/ 		return Promise.all(Object.keys(__nccwpck_require__.f).reduce((promises, key) => {
/******/ 			__nccwpck_require__.f[key](chunkId, promises);
/******/ 			return promises;
/******/ 		}, []));
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/get javascript chunk filename */
/******/ (() => {
/******/ 	// This function allow to reference async chunks
/******/ 	__nccwpck_require__.u = (chunkId) => {
/******/ 		// return url for filenames based on template
/******/ 		return "" + chunkId + ".index.js";
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/hasOwnProperty shorthand */
/******/ (() => {
/******/ 	__nccwpck_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ })();
/******/ 
/******/ /* webpack/runtime/make namespace object */
/******/ (() => {
/******/ 	// define __esModule on exports
/******/ 	__nccwpck_require__.r = (exports) => {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/ })();
/******/ 
/******/ /* webpack/runtime/compat */
/******/ 
/******/ if (typeof __nccwpck_require__ !== 'undefined') __nccwpck_require__.ab = new URL('.', import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/) ? 1 : 0, -1) + "/";
/******/ 
/******/ /* webpack/runtime/import chunk loading */
/******/ (() => {
/******/ 	// no baseURI
/******/ 	
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		179: 0
/******/ 	};
/******/ 	
/******/ 	var installChunk = (data) => {
/******/ 		var {ids, modules, runtime} = data;
/******/ 		// add "modules" to the modules object,
/******/ 		// then flag all "ids" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0;
/******/ 		for(moduleId in modules) {
/******/ 			if(__nccwpck_require__.o(modules, moduleId)) {
/******/ 				__nccwpck_require__.m[moduleId] = modules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(runtime) runtime(__nccwpck_require__);
/******/ 		for(;i < ids.length; i++) {
/******/ 			chunkId = ids[i];
/******/ 			if(__nccwpck_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 				installedChunks[chunkId][0]();
/******/ 			}
/******/ 			installedChunks[ids[i]] = 0;
/******/ 		}
/******/ 	
/******/ 	}
/******/ 	
/******/ 	__nccwpck_require__.f.j = (chunkId, promises) => {
/******/ 			// import() chunk loading for javascript
/******/ 			var installedChunkData = __nccwpck_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;
/******/ 			if(installedChunkData !== 0) { // 0 means "already installed".
/******/ 	
/******/ 				// a Promise means "currently loading".
/******/ 				if(installedChunkData) {
/******/ 					promises.push(installedChunkData[1]);
/******/ 				} else {
/******/ 					if(true) { // all chunks have JS
/******/ 						// setup Promise in chunk cache
/******/ 						var promise = import("./" + __nccwpck_require__.u(chunkId)).then(installChunk, (e) => {
/******/ 							if(installedChunks[chunkId] !== 0) installedChunks[chunkId] = undefined;
/******/ 							throw e;
/******/ 						});
/******/ 						var promise = Promise.race([promise, new Promise((resolve) => (installedChunkData = installedChunks[chunkId] = [resolve]))])
/******/ 						promises.push(installedChunkData[1] = promise);
/******/ 					} else installedChunks[chunkId] = 0;
/******/ 				}
/******/ 			}
/******/ 	};
/******/ 	
/******/ 	// no external install chunk
/******/ 	
/******/ 	// no on chunks loaded
/******/ })();
/******/ 
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be isolated against other modules in the chunk.
(() => {

// EXPORTS
__nccwpck_require__.d(__webpack_exports__, {
  "k": () => (/* binding */ Inputs),
  "D": () => (/* binding */ main)
});

// EXTERNAL MODULE: ./node_modules/.pnpm/@actions+core@1.10.0/node_modules/@actions/core/lib/core.js
var lib_core = __nccwpck_require__(7733);
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Function.mjs
/**
 * Tests if a value is a `function`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isFunction } from '@effect/data/Predicate'
 *
 * assert.deepStrictEqual(isFunction(isFunction), true)
 * assert.deepStrictEqual(isFunction("function"), false)
 *
 * @category guards
 * @since 1.0.0
 */
const Function_isFunction = input => typeof input === "function";
/**
 * Creates a function that can be used in a data-last (aka `pipe`able) or
 * data-first style.
 *
 * The first parameter to `dual` is either the arity of the uncurried function
 * or a predicate that determines if the function is being used in a data-first
 * or data-last style.
 *
 * Using the arity is the most common use case, but there are some cases where
 * you may want to use a predicate. For example, if you have a function that
 * takes an optional argument, you can use a predicate to determine if the
 * function is being used in a data-first or data-last style.
 *
 * @param arity - Either the arity of the uncurried function or a predicate
 *                which determines if the function is being used in a data-first
 *                or data-last style.
 * @param body - The definition of the uncurried function.
 *
 * @example
 * import { dual, pipe } from "@effect/data/Function"
 *
 * // Exampe using arity to determine data-first or data-last style
 * export const sum: {
 *   (that: number): (self: number) => number
 *   (self: number, that: number): number
 * } = dual(2, (self: number, that: number): number => self + that)
 *
 * assert.deepStrictEqual(sum(2, 3), 5)
 * assert.deepStrictEqual(pipe(2, sum(3)), 5)
 *
 * // Example using a predicate to determine data-first or data-last style
 * export const sum2: {
 *   (that: number): (self: number) => number
 *   (self: number, that: number): number
 * } = dual((args) => args.length === 1, (self: number, that: number): number => self + that)
 *
 * assert.deepStrictEqual(sum(2, 3), 5)
 * assert.deepStrictEqual(pipe(2, sum(3)), 5)
 *
 * @since 1.0.0
 */
const Function_dual = function (arity, body) {
  if (typeof arity === "function") {
    return function () {
      if (arity(arguments)) {
        // @ts-expect-error
        return body.apply(this, arguments);
      }
      return self => body(self, ...arguments);
    };
  }
  switch (arity) {
    case 0:
      return body;
    case 1:
      return function (a) {
        if (arguments.length >= 1) {
          return body(a);
        }
        return function () {
          return body(a);
        };
      };
    case 2:
      return function (a, b) {
        if (arguments.length >= 2) {
          return body(a, b);
        }
        return function (self) {
          return body(self, a);
        };
      };
    case 3:
      return function (a, b, c) {
        if (arguments.length >= 3) {
          return body(a, b, c);
        }
        return function (self) {
          return body(self, a, b);
        };
      };
    case 4:
      return function (a, b, c, d) {
        if (arguments.length >= 4) {
          return body(a, b, c, d);
        }
        return function (self) {
          return body(self, a, b, c);
        };
      };
    case 5:
      return function (a, b, c, d, e) {
        if (arguments.length >= 5) {
          return body(a, b, c, d, e);
        }
        return function (self) {
          return body(self, a, b, c, d);
        };
      };
    default:
      return function () {
        if (arguments.length >= arity) {
          // @ts-expect-error
          return body.apply(this, arguments);
        }
        const args = arguments;
        return function (self) {
          return body(self, ...args);
        };
      };
  }
};
/**
 * Apply a function to a given value.
 *
 * @param a - The value that the function will be applied to.
 * @param self - The function to be applied to a value.
 *
 * @example
 * import { pipe, apply } from "@effect/data/Function"
 * import { length } from '@effect/data/String'
 *
 * assert.deepStrictEqual(pipe(length, apply("hello")), 5)
 *
 * @since 1.0.0
 */
const apply = a => self => self(a);
/**
 * The identity function, i.e. A function that returns its input argument.
 *
 * @param a - The input argument.
 *
 * @example
 * import { identity } from "@effect/data/Function"
 *
 * assert.deepStrictEqual(identity(5), 5)
 *
 * @since 1.0.0
 */
const Function_identity = a => a;
/**
 * Casts the result to the specified type.
 *
 * @param a - The value to be casted to the target type.
 *
 * @example
 * import { unsafeCoerce, identity } from "@effect/data/Function"
 *
 * assert.deepStrictEqual(unsafeCoerce, identity)
 *
 * @since 1.0.0
 */
const Function_unsafeCoerce = (/* unused pure expression or super */ null && (Function_identity));
/**
 * Creates a constant value that never changes.
 *
 * This is useful when you want to pass a value to a higher-order function (a function that takes another function as its argument)
 * and want that inner function to always use the same value, no matter how many times it is called.
 *
 * @param value - The constant value to be returned.
 *
 * @example
 * import { constant } from "@effect/data/Function"
 *
 * const constNull = constant(null)
 *
 * assert.deepStrictEqual(constNull(), null)
 * assert.deepStrictEqual(constNull(), null)
 *
 * @since 1.0.0
 */
const constant = value => () => value;
/**
 * A thunk that returns always `true`.
 *
 * @example
 * import { constTrue } from "@effect/data/Function"
 *
 * assert.deepStrictEqual(constTrue(), true)
 *
 * @since 1.0.0
 */
const Function_constTrue = /*#__PURE__*/constant(true);
/**
 * A thunk that returns always `false`.
 *
 * @example
 * import { constFalse } from "@effect/data/Function"
 *
 * assert.deepStrictEqual(constFalse(), false)
 *
 * @since 1.0.0
 */
const constFalse = /*#__PURE__*/constant(false);
/**
 * A thunk that returns always `null`.
 *
 * @example
 * import { constNull } from "@effect/data/Function"
 *
 * assert.deepStrictEqual(constNull(), null)
 *
 * @since 1.0.0
 */
const Function_constNull = /*#__PURE__*/(/* unused pure expression or super */ null && (constant(null)));
/**
 * A thunk that returns always `undefined`.
 *
 * @example
 * import { constUndefined } from "@effect/data/Function"
 *
 * assert.deepStrictEqual(constUndefined(), undefined)
 *
 * @since 1.0.0
 */
const Function_constUndefined = /*#__PURE__*/constant(undefined);
/**
 * A thunk that returns always `void`.
 *
 * @example
 * import { constVoid } from "@effect/data/Function"
 *
 * assert.deepStrictEqual(constVoid(), undefined)
 *
 * @since 1.0.0
 */
const Function_constVoid = Function_constUndefined;
/**
 * Reverses the order of arguments for a curried function.
 *
 * @param f - A curried function that takes multiple arguments.
 *
 * @example
 * import { flip } from "@effect/data/Function"
 *
 * const f = (a: number) => (b: string) => a - b.length
 *
 * assert.deepStrictEqual(flip(f)('aaa')(2), -1)
 *
 * @since 1.0.0
 */
const flip = f => (...b) => (...a) => f(...a)(...b);
/**
 * Composes two functions, `ab` and `bc` into a single function that takes in an argument `a` of type `A` and returns a result of type `C`.
 * The result is obtained by first applying the `ab` function to `a` and then applying the `bc` function to the result of `ab`.
 *
 * @param ab - A function that maps from `A` to `B`.
 * @param bc - A function that maps from `B` to `C`.
 *
 * @example
 * import { compose } from "@effect/data/Function"
 *
 * const increment = (n: number) => n + 1;
 * const square = (n: number) => n * n;
 *
 * assert.strictEqual(compose(increment, square)(2), 9);
 *
 * @since 1.0.0
 */
const compose = /*#__PURE__*/(/* unused pure expression or super */ null && (Function_dual(2, (ab, bc) => a => bc(ab(a)))));
/**
 * The `absurd` function is a stub for cases where a value of type `never` is encountered in your code,
 * meaning that it should be impossible for this code to be executed.
 *
 * This function is particularly when it's necessary to specify that certain cases are impossible.
 *
 * @since 1.0.0
 */
const absurd = _ => {
  throw new Error("Called `absurd` function which should be uncallable");
};
/**
 * Creates a tupled version of this function: instead of `n` arguments, it accepts a single tuple argument.
 *
 * @example
 * import { tupled } from "@effect/data/Function"
 *
 * const sumTupled = tupled((x: number, y: number): number => x + y)
 *
 * assert.deepStrictEqual(sumTupled([1, 2]), 3)
 *
 * @since 1.0.0
 */
const tupled = f => a => f(...a);
/**
 * Inverse function of `tupled`
 *
 * @example
 * import { untupled } from "@effect/data/Function"
 *
 * const getFirst = untupled(<A, B>(tuple: [A, B]): A => tuple[0])
 *
 * assert.deepStrictEqual(getFirst(1, 2), 1)
 *
 * @since 1.0.0
 */
const untupled = f => (...a) => f(a);
function Function_pipe(a, ab, bc, cd, de, ef, fg, gh, hi) {
  switch (arguments.length) {
    case 1:
      return a;
    case 2:
      return ab(a);
    case 3:
      return bc(ab(a));
    case 4:
      return cd(bc(ab(a)));
    case 5:
      return de(cd(bc(ab(a))));
    case 6:
      return ef(de(cd(bc(ab(a)))));
    case 7:
      return fg(ef(de(cd(bc(ab(a))))));
    case 8:
      return gh(fg(ef(de(cd(bc(ab(a)))))));
    case 9:
      return hi(gh(fg(ef(de(cd(bc(ab(a))))))));
    default:
      {
        let ret = arguments[0];
        for (let i = 1; i < arguments.length; i++) {
          ret = arguments[i](ret);
        }
        return ret;
      }
  }
}
function flow(ab, bc, cd, de, ef, fg, gh, hi, ij) {
  switch (arguments.length) {
    case 1:
      return ab;
    case 2:
      return function () {
        return bc(ab.apply(this, arguments));
      };
    case 3:
      return function () {
        return cd(bc(ab.apply(this, arguments)));
      };
    case 4:
      return function () {
        return de(cd(bc(ab.apply(this, arguments))));
      };
    case 5:
      return function () {
        return ef(de(cd(bc(ab.apply(this, arguments)))));
      };
    case 6:
      return function () {
        return fg(ef(de(cd(bc(ab.apply(this, arguments))))));
      };
    case 7:
      return function () {
        return gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))));
      };
    case 8:
      return function () {
        return hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments))))))));
      };
    case 9:
      return function () {
        return ij(hi(gh(fg(ef(de(cd(bc(ab.apply(this, arguments)))))))));
      };
  }
  return;
}
/**
 * Type hole simulation.
 *
 * @since 1.0.0
 */
const hole = /*#__PURE__*/(/* unused pure expression or super */ null && (Function_unsafeCoerce(absurd)));
/**
 * The SK combinator, also known as the "S-K combinator" or "S-combinator", is a fundamental combinator in the
 * lambda calculus and the SKI combinator calculus.
 *
 * This function is useful for discarding the first argument passed to it and returning the second argument.
 *
 * @param _ - The first argument to be discarded.
 * @param b - The second argument to be returned.
 *
 * @example
 * import { SK } from "@effect/data/Function";
 *
 * assert.deepStrictEqual(SK(0, "hello"), "hello")
 *
 * @since 1.0.0
 */
const SK = (_, b) => b;
//# sourceMappingURL=Function.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Predicate.mjs
/**
 * @since 1.0.0
 */

/**
 * Given a `Predicate<A>` returns a `Predicate<B>`
 *
 * @param self - the `Predicate<A>` to be transformed to `Predicate<B>`.
 * @param f - a function to transform `B` to `A`.
 *
 * @example
 * import * as P from "@effect/data/Predicate"
 * import * as N from "@effect/data/Number"
 *
 * const minLength3 = P.mapInput(N.greaterThan(2), (s: string) => s.length)
 *
 * assert.deepStrictEqual(minLength3("a"), false)
 * assert.deepStrictEqual(minLength3("aa"), false)
 * assert.deepStrictEqual(minLength3("aaa"), true)
 * assert.deepStrictEqual(minLength3("aaaa"), true)
 *
 * @category combinators
 * @since 1.0.0
 */
const mapInput = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => b => self(f(b)))));
/**
 * Tests if a value is a `string`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isString } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isString("a"), true)
 *
 * assert.deepStrictEqual(isString(1), false)
 *
 * @category guards
 * @since 1.0.0
 */
const Predicate_isString = input => typeof input === "string";
/**
 * Tests if a value is a `number`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isNumber } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isNumber(2), true)
 *
 * assert.deepStrictEqual(isNumber("2"), false)
 *
 * @category guards
 * @since 1.0.0
 */
const Predicate_isNumber = input => typeof input === "number";
/**
 * Tests if a value is a `boolean`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isBoolean } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isBoolean(true), true)
 *
 * assert.deepStrictEqual(isBoolean("true"), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isBoolean = input => typeof input === "boolean";
/**
 * Tests if a value is a `bigint`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isBigint } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isBigint(1n), true)
 *
 * assert.deepStrictEqual(isBigint(1), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isBigint = input => typeof input === "bigint";
/**
 * Tests if a value is a `symbol`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isSymbol } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isSymbol(Symbol.for("a")), true)
 *
 * assert.deepStrictEqual(isSymbol("a"), false)
 *
 * @category guards
 * @since 1.0.0
 */
const Predicate_isSymbol = input => typeof input === "symbol";
/**
 * Tests if a value is a `function`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isFunction } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isFunction(isFunction), true)
 *
 * assert.deepStrictEqual(isFunction("function"), false)
 *
 * @category guards
 * @since 1.0.0
 */
const Predicate_isFunction = Function_isFunction;
/**
 * Tests if a value is `undefined`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isUndefined } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isUndefined(undefined), true)
 *
 * assert.deepStrictEqual(isUndefined(null), false)
 * assert.deepStrictEqual(isUndefined("undefined"), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isUndefined = input => input === undefined;
/**
 * Tests if a value is not `undefined`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isNotUndefined } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isNotUndefined(null), true)
 * assert.deepStrictEqual(isNotUndefined("undefined"), true)
 *
 * assert.deepStrictEqual(isNotUndefined(undefined), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isNotUndefined = input => input !== undefined;
/**
 * Tests if a value is `undefined`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isNull } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isNull(null), true)
 *
 * assert.deepStrictEqual(isNull(undefined), false)
 * assert.deepStrictEqual(isNull("null"), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isNull = input => input === null;
/**
 * Tests if a value is not `undefined`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isNotNull } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isNotNull(undefined), true)
 * assert.deepStrictEqual(isNotNull("null"), true)
 *
 * assert.deepStrictEqual(isNotNull(null), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isNotNull = input => input !== null;
/**
 * A guard that always fails.
 *
 * @param _ - The value to test.
 *
 * @example
 * import { isNever } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isNever(null), false)
 * assert.deepStrictEqual(isNever(undefined), false)
 * assert.deepStrictEqual(isNever({}), false)
 * assert.deepStrictEqual(isNever([]), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isNever = _ => false;
/**
 * A guard that always succeeds.
 *
 * @param _ - The value to test.
 *
 * @example
 * import { isUnknown } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isUnknown(null), true)
 * assert.deepStrictEqual(isUnknown(undefined), true)
 *
 * assert.deepStrictEqual(isUnknown({}), true)
 * assert.deepStrictEqual(isUnknown([]), true)
 *
 * @category guards
 * @since 1.0.0
 */
const isUnknown = _ => true;
/**
 * Tests if a value is an `object`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isObject } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isObject({}), true)
 * assert.deepStrictEqual(isObject([]), true)
 *
 * assert.deepStrictEqual(isObject(null), false)
 * assert.deepStrictEqual(isObject(undefined), false)
 *
 * @category guards
 * @since 1.0.0
 */
const Predicate_isObject = input => typeof input === "object" && input != null || Predicate_isFunction(input);
/**
 * Tests if a value is an `object` with a property `_tag` that matches the given tag.
 *
 * @param input - The value to test.
 * @param tag - The tag to test for.
 *
 * @example
 * import { isTagged } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isTagged(1, "a"), false)
 * assert.deepStrictEqual(isTagged(null, "a"), false)
 * assert.deepStrictEqual(isTagged({}, "a"), false)
 * assert.deepStrictEqual(isTagged({ a: "a" }, "a"), false)
 * assert.deepStrictEqual(isTagged({ _tag: "a" }, "a"), true)
 * assert.deepStrictEqual(isTagged("a")({ _tag: "a" }), true)
 *
 * @category guards
 * @since 1.0.0
 */
const isTagged = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, tag) => Predicate_isObject(self) && "_tag" in self && self["_tag"] === tag)));
/**
 * A guard that succeeds when the input is `null` or `undefined`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isNullable } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isNullable(null), true)
 * assert.deepStrictEqual(isNullable(undefined), true)
 *
 * assert.deepStrictEqual(isNullable({}), false)
 * assert.deepStrictEqual(isNullable([]), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isNullable = input => input === null || input === undefined;
/**
 * A guard that succeeds when the input is not `null` or `undefined`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isNotNullable } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isNotNullable({}), true)
 * assert.deepStrictEqual(isNotNullable([]), true)
 *
 * assert.deepStrictEqual(isNotNullable(null), false)
 * assert.deepStrictEqual(isNotNullable(undefined), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isNotNullable = input => input !== null && input !== undefined;
/**
 * A guard that succeeds when the input is an `Error`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isError } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isError(new Error()), true)
 *
 * assert.deepStrictEqual(isError(null), false)
 * assert.deepStrictEqual(isError({}), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isError = input => input instanceof Error;
/**
 * A guard that succeeds when the input is a `Date`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isDate } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isDate(new Date()), true)
 *
 * assert.deepStrictEqual(isDate(null), false)
 * assert.deepStrictEqual(isDate({}), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isDate = input => input instanceof Date;
/**
 * A guard that succeeds when the input is an `Iterable`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isIterable } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isIterable([]), true)
 * assert.deepStrictEqual(isIterable(new Set()), true)
 *
 * assert.deepStrictEqual(isIterable(null), false)
 * assert.deepStrictEqual(isIterable({}), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isIterable = input => Predicate_isObject(input) && Symbol.iterator in input;
/**
 * A guard that succeeds when the input is a record.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isRecord } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isRecord({}), true)
 * assert.deepStrictEqual(isRecord({ a: 1 }), true)
 *
 * assert.deepStrictEqual(isRecord([]), false)
 * assert.deepStrictEqual(isRecord([1, 2, 3]), false)
 * assert.deepStrictEqual(isRecord(null), false)
 * assert.deepStrictEqual(isRecord(undefined), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isRecord = input => Predicate_isObject(input) && !Array.isArray(input);
/**
 * A guard that succeeds when the input is a readonly record.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isReadonlyRecord } from "@effect/data/Predicate"
 *
 * assert.deepStrictEqual(isReadonlyRecord({}), true)
 * assert.deepStrictEqual(isReadonlyRecord({ a: 1 }), true)
 *
 * assert.deepStrictEqual(isReadonlyRecord([]), false)
 * assert.deepStrictEqual(isReadonlyRecord([1, 2, 3]), false)
 * assert.deepStrictEqual(isReadonlyRecord(null), false)
 * assert.deepStrictEqual(isReadonlyRecord(undefined), false)
 *
 * @category guards
 * @since 1.0.0
 */
const isReadonlyRecord = (/* unused pure expression or super */ null && (isRecord));
/**
 * @since 1.0.0
 */
const Predicate_compose = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (ab, bc) => a => ab(a) && bc(a))));
/**
 * @category combining
 * @since 1.0.0
 */
const product = (self, that) => ([a, b]) => self(a) && that(b);
/**
 * @category combining
 * @since 1.0.0
 */
const Predicate_all = collection => {
  return as => {
    let collectionIndex = 0;
    for (const p of collection) {
      if (collectionIndex >= as.length) {
        break;
      }
      if (p(as[collectionIndex]) === false) {
        return false;
      }
      collectionIndex++;
    }
    return true;
  };
};
/**
 * @category combining
 * @since 1.0.0
 */
const productMany = (self, collection) => {
  const rest = Predicate_all(collection);
  return ([head, ...tail]) => self(head) === false ? false : rest(tail);
};
/**
 * Similar to `Promise.all` but operates on `Predicate`s.
 *
 * ```
 * [Predicate<A>, Predicate<B>, ...] -> Predicate<[A, B, ...]>
 * ```
 *
 * @since 1.0.0
 */
const tuple = (...elements) => Predicate_all(elements);
/**
 * @since 1.0.0
 */
const struct = fields => {
  const keys = Object.keys(fields);
  return a => {
    for (const key of keys) {
      if (!fields[key](a[key])) {
        return false;
      }
    }
    return true;
  };
};
/**
 * Negates the result of a given predicate.
 *
 * @param self - A predicate.
 *
 * @example
 * import * as P from "@effect/data/Predicate"
 * import * as N from "@effect/data/Number"
 *
 * const isPositive = P.not(N.lessThan(0))
 *
 * assert.deepStrictEqual(isPositive(-1), false)
 * assert.deepStrictEqual(isPositive(0), true)
 * assert.deepStrictEqual(isPositive(1), true)
 *
 * @category combinators
 * @since 1.0.0
 */
const not = self => a => !self(a);
/**
 * Combines two predicates into a new predicate that returns `true` if at least one of the predicates returns `true`.
 *
 * @param self - A predicate.
 * @param that - A predicate.
 *
 * @example
 * import * as P from "@effect/data/Predicate"
 * import * as N from "@effect/data/Number"
 *
 * const nonZero = P.or(N.lessThan(0), N.greaterThan(0))
 *
 * assert.deepStrictEqual(nonZero(-1), true)
 * assert.deepStrictEqual(nonZero(0), false)
 * assert.deepStrictEqual(nonZero(1), true)
 *
 * @category combinators
 * @since 1.0.0
 */
const or = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => a => self(a) || that(a))));
/**
 * Combines two predicates into a new predicate that returns `true` if both of the predicates returns `true`.
 *
 * @param self - A predicate.
 * @param that - A predicate.
 *
 * @example
 * import * as P from "@effect/data/Predicate"
 *
 * const minLength = (n: number) => (s: string) => s.length >= n
 * const maxLength = (n: number) => (s: string) => s.length <= n
 *
 * const length = (n: number) => P.and(minLength(n), maxLength(n))
 *
 * assert.deepStrictEqual(length(2)("aa"), true)
 * assert.deepStrictEqual(length(2)("a"), false)
 * assert.deepStrictEqual(length(2)("aaa"), false)
 *
 * @category combinators
 * @since 1.0.0
 */
const and = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => a => self(a) && that(a))));
/**
 * @category combinators
 * @since 1.0.0
 */
const xor = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => a => self(a) !== that(a))));
/**
 * @category combinators
 * @since 1.0.0
 */
const eqv = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => a => self(a) === that(a))));
/**
 * @category combinators
 * @since 1.0.0
 */
const implies = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => a => self(a) ? that(a) : true)));
/**
 * @category combinators
 * @since 1.0.0
 */
const nor = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => a => !(self(a) || that(a)))));
/**
 * @category combinators
 * @since 1.0.0
 */
const nand = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => a => !(self(a) && that(a)))));
/**
 * @category elements
 * @since 1.0.0
 */
const every = collection => a => {
  for (const p of collection) {
    if (!p(a)) {
      return false;
    }
  }
  return true;
};
/**
 * @category elements
 * @since 1.0.0
 */
const some = collection => a => {
  for (const p of collection) {
    if (p(a)) {
      return true;
    }
  }
  return false;
};
//# sourceMappingURL=Predicate.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/DeterministicRandom.mjs
/*
 * Copyright 2014 Thom Chiovoloni, released under the MIT license.
 *
 * A random number generator based on the basic implementation of the PCG algorithm,
 * as described here: http://www.pcg-random.org/
 *
 * Adapted for TypeScript from Thom's original code at https://github.com/thomcc/pcg-random
 *
 * forked from https://github.com/frptools
 *
 * @since 1.0.0
 */

const defaultIncHi = 0x14057b7e;
const defaultIncLo = 0xf767814f;
const MUL_HI = 0x5851f42d >>> 0;
const MUL_LO = 0x4c957f2d >>> 0;
const BIT_53 = 9007199254740992.0;
const BIT_27 = 134217728.0;
/**
 * PCG is a family of simple fast space-efficient statistically good algorithms
 * for random number generation. Unlike many general-purpose RNGs, they are also
 * hard to predict.
 *
 * @category model
 * @since 1.0.0
 */
class PCGRandom {
  constructor(seedHi, seedLo, incHi, incLo) {
    if (isNullable(seedLo) && isNullable(seedHi)) {
      seedLo = Math.random() * 0xffffffff >>> 0;
      seedHi = 0;
    } else if (isNullable(seedLo)) {
      seedLo = seedHi;
      seedHi = 0;
    }
    if (isNullable(incLo) && isNullable(incHi)) {
      incLo = this._state ? this._state[3] : defaultIncLo;
      incHi = this._state ? this._state[2] : defaultIncHi;
    } else if (isNullable(incLo)) {
      incLo = incHi;
      incHi = 0;
    }
    this._state = new Int32Array([0, 0, incHi >>> 0, ((incLo || 0) | 1) >>> 0]);
    this._next();
    add64(this._state, this._state[0], this._state[1], seedHi >>> 0, seedLo >>> 0);
    this._next();
    return this;
  }
  /**
   * Returns a copy of the internal state of this random number generator as a
   * JavaScript Array.
   *
   * @category getters
   * @since 1.0.0
   */
  getState() {
    return [this._state[0], this._state[1], this._state[2], this._state[3]];
  }
  /**
   * Restore state previously retrieved using `getState()`.
   *
   * @since 1.0.0
   */
  setState(state) {
    this._state[0] = state[0];
    this._state[1] = state[1];
    this._state[2] = state[2];
    this._state[3] = state[3] | 1;
  }
  /**
   * Get a uniformly distributed 32 bit integer between [0, max).
   *
   * @category getter
   * @since 1.0.0
   */
  integer(max) {
    if (!max) {
      return this._next();
    }
    max = max >>> 0;
    if ((max & max - 1) === 0) {
      return this._next() & max - 1; // fast path for power of 2
    }

    let num = 0;
    const skew = (-max >>> 0) % max >>> 0;
    for (num = this._next(); num < skew; num = this._next()) {
      // this loop will rarely execute more than twice,
      // and is intentionally empty
    }
    return num % max;
  }
  /**
   * Get a uniformly distributed IEEE-754 double between 0.0 and 1.0, with
   * 53 bits of precision (every bit of the mantissa is randomized).
   *
   * @category getters
   * @since 1.0.0
   */
  number() {
    const hi = (this._next() & 0x03ffffff) * 1.0;
    const lo = (this._next() & 0x07ffffff) * 1.0;
    return (hi * BIT_27 + lo) / BIT_53;
  }
  /** @internal */
  _next() {
    // save current state (what we'll use for this number)
    const oldHi = this._state[0] >>> 0;
    const oldLo = this._state[1] >>> 0;
    // churn LCG.
    mul64(this._state, oldHi, oldLo, MUL_HI, MUL_LO);
    add64(this._state, this._state[0], this._state[1], this._state[2], this._state[3]);
    // get least sig. 32 bits of ((oldstate >> 18) ^ oldstate) >> 27
    let xsHi = oldHi >>> 18;
    let xsLo = (oldLo >>> 18 | oldHi << 14) >>> 0;
    xsHi = (xsHi ^ oldHi) >>> 0;
    xsLo = (xsLo ^ oldLo) >>> 0;
    const xorshifted = (xsLo >>> 27 | xsHi << 5) >>> 0;
    // rotate xorshifted right a random amount, based on the most sig. 5 bits
    // bits of the old state.
    const rot = oldHi >>> 27;
    const rot2 = (-rot >>> 0 & 31) >>> 0;
    return (xorshifted >>> rot | xorshifted << rot2) >>> 0;
  }
}
function mul64(out, aHi, aLo, bHi, bLo) {
  let c1 = (aLo >>> 16) * (bLo & 0xffff) >>> 0;
  let c0 = (aLo & 0xffff) * (bLo >>> 16) >>> 0;
  let lo = (aLo & 0xffff) * (bLo & 0xffff) >>> 0;
  let hi = (aLo >>> 16) * (bLo >>> 16) + ((c0 >>> 16) + (c1 >>> 16)) >>> 0;
  c0 = c0 << 16 >>> 0;
  lo = lo + c0 >>> 0;
  if (lo >>> 0 < c0 >>> 0) {
    hi = hi + 1 >>> 0;
  }
  c1 = c1 << 16 >>> 0;
  lo = lo + c1 >>> 0;
  if (lo >>> 0 < c1 >>> 0) {
    hi = hi + 1 >>> 0;
  }
  hi = hi + Math.imul(aLo, bHi) >>> 0;
  hi = hi + Math.imul(aHi, bLo) >>> 0;
  out[0] = hi;
  out[1] = lo;
}
// add two 64 bit numbers (given in parts), and store the result in `out`.
function add64(out, aHi, aLo, bHi, bLo) {
  let hi = aHi + bHi >>> 0;
  const lo = aLo + bLo >>> 0;
  if (lo >>> 0 < aLo >>> 0) {
    hi = hi + 1 | 0;
  }
  out[0] = hi;
  out[1] = lo;
}
//# sourceMappingURL=DeterministicRandom.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Global.mjs
/**
 * @since 1.0.0
 */
const globalStoreId = /*#__PURE__*/Symbol.for("@effect/data/Global/globalStoreId");
if (!(globalStoreId in globalThis)) {
  ;
  globalThis[globalStoreId] = /*#__PURE__*/new Map();
}
const globalStore = globalThis[globalStoreId];
/**
 * @since 1.0.0
 */
const globalValue = (id, compute) => {
  if (!globalStore.has(id)) {
    globalStore.set(id, compute());
  }
  return globalStore.get(id);
};
//# sourceMappingURL=Global.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Hash.mjs
/**
 * @since 1.0.0
 */


/** @internal */
const randomHashCache = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/data/Hash/randomHashCache"), () => new WeakMap());
/** @internal */
const pcgr = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/data/Hash/pcgr"), () => new PCGRandom());
/**
 * @since 1.0.0
 * @category symbols
 */
const symbol = /*#__PURE__*/Symbol.for("@effect/data/Hash");
/**
 * @since 1.0.0
 * @category hashing
 */
const Hash_hash = self => {
  switch (typeof self) {
    case "number":
      {
        return number(self);
      }
    case "bigint":
      {
        return string(self.toString(10));
      }
    case "boolean":
      {
        return string(String(self));
      }
    case "symbol":
      {
        return string(String(self));
      }
    case "string":
      {
        return string(self);
      }
    case "undefined":
      {
        return string("undefined");
      }
    case "function":
    case "object":
      {
        if (self === null) {
          return string("null");
        }
        if (isHash(self)) {
          return self[symbol]();
        } else {
          return random(self);
        }
      }
    default:
      {
        throw new Error("Bug in Equal.hash");
      }
  }
};
/**
 * @since 1.0.0
 * @category hashing
 */
const random = self => {
  if (!randomHashCache.has(self)) {
    randomHashCache.set(self, number(pcgr.integer(Number.MAX_SAFE_INTEGER)));
  }
  return randomHashCache.get(self);
};
/**
 * @since 1.0.0
 * @category hashing
 */
const combine = b => self => self * 53 ^ b;
/**
 * @since 1.0.0
 * @category hashing
 */
const optimize = n => n & 0xbfffffff | n >>> 1 & 0x40000000;
/**
 * @since 1.0.0
 * @category guards
 */
const isHash = u => typeof u === "object" && u !== null && symbol in u;
/**
 * @since 1.0.0
 * @category hashing
 */
const number = n => {
  if (n !== n || n === Infinity) {
    return 0;
  }
  let h = n | 0;
  if (h !== n) {
    h ^= n * 0xffffffff;
  }
  while (n > 0xffffffff) {
    h ^= n /= 0xffffffff;
  }
  return optimize(n);
};
/**
 * @since 1.0.0
 * @category hashing
 */
const string = str => {
  let h = 5381,
    i = str.length;
  while (i) {
    h = h * 33 ^ str.charCodeAt(--i);
  }
  return optimize(h);
};
/**
 * @since 1.0.0
 * @category hashing
 */
const structureKeys = (o, keys) => {
  let h = 12289;
  for (let i = 0; i < keys.length; i++) {
    h ^= combine(Hash_hash(o[keys[i]]))(string(keys[i]));
  }
  return optimize(h);
};
/**
 * @since 1.0.0
 * @category hashing
 */
const structure = o => structureKeys(o, Object.keys(o));
/**
 * @since 1.0.0
 * @category hashing
 */
const array = arr => {
  let h = 6151;
  for (let i = 0; i < arr.length; i++) {
    h = combine(Hash_hash(arr[i]))(h);
  }
  return optimize(h);
};
//# sourceMappingURL=Hash.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Equal.mjs

/**
 * @since 1.0.0
 * @category symbols
 */
const Equal_symbol = /*#__PURE__*/Symbol.for("@effect/data/Equal");
function equals() {
  if (arguments.length === 1) {
    return self => compareBoth(self, arguments[0]);
  }
  return compareBoth(arguments[0], arguments[1]);
}
function compareBoth(self, that) {
  if (self === that) {
    return true;
  }
  const selfType = typeof self;
  if (selfType !== typeof that) {
    return false;
  }
  if ((selfType === "object" || selfType === "function") && self !== null && that !== null) {
    if (isEqual(self) && isEqual(that)) {
      return Hash_hash(self) === Hash_hash(that) && self[Equal_symbol](that);
    }
  }
  return false;
}
/**
 * @since 1.0.0
 * @category guards
 */
const isEqual = u => typeof u === "object" && u !== null && Equal_symbol in u;
/**
 * @since 1.0.0
 * @category instances
 */
const equivalence = () => (self, that) => Hash_hash(self) === Hash_hash(that) && equals(self, that);
//# sourceMappingURL=Equal.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Data.mjs
/**
 * @since 1.0.0
 */


const protoArr = /*#__PURE__*/(/* unused pure expression or super */ null && ((() => {
  const proto = {
    [Hash.symbol]() {
      return Hash.array(this);
    },
    [Equal.symbol](that) {
      if (Array.isArray(that) && this.length === that.length) {
        return this.every((v, i) => Equal.equals(v, that[i]));
      } else {
        return false;
      }
    }
  };
  return Object.setPrototypeOf(proto, Array.prototype);
})()));
const protoStruct = /*#__PURE__*/(() => {
  const proto = {
    [symbol]() {
      return structure(this);
    },
    [Equal_symbol](that) {
      const selfKeys = Object.keys(this);
      const thatKeys = Object.keys(that);
      if (selfKeys.length !== thatKeys.length) {
        return false;
      }
      for (const key of selfKeys) {
        if (!(key in that && equals(this[key], that[key]))) {
          return false;
        }
      }
      return true;
    }
  };
  return Object.setPrototypeOf(proto, Object.prototype);
})();
/**
 * @category constructors
 * @since 1.0.0
 */
const Data_struct = as => unsafeStruct(Object.assign({}, as));
/**
 * @category constructors
 * @since 1.0.0
 */
const unsafeStruct = as => Object.setPrototypeOf(as, protoStruct);
/**
 * @category constructors
 * @since 1.0.0
 */
const Data_tuple = (...as) => unsafeArray(as);
/**
 * @category constructors
 * @since 1.0.0
 */
const Data_array = as => unsafeArray(as.slice(0));
/**
 * @category constructors
 * @since 1.0.0
 */
const unsafeArray = as => Object.setPrototypeOf(as, protoArr);
const _case = () => args => args === undefined ? Data_struct({}) : Data_struct(args);

/**
 * Provides a tagged constructor for the specified `Case`.
 *
 * @since 1.0.0
 * @category constructors
 */
const tagged = tag =>
// @ts-expect-error
args => args === undefined ? Data_struct({
  _tag: tag
}) : Data_struct({
  ...args,
  _tag: tag
});
/**
 * Provides a Tagged constructor for a Case Class.
 *
 * @since 1.0.0
 * @category constructors
 */
const TaggedClass = tag => {
  class Base extends Class {
    constructor() {
      super(...arguments);
      this._tag = tag;
    }
  }
  return Base;
};
/**
 * Provides a constructor for a Case Class.
 *
 * @since 1.0.0
 * @category constructors
 */
const Class = /*#__PURE__*/(() => {
  class Base {
    constructor(args) {
      if (args) {
        Object.assign(this, args);
      }
    }
    [symbol]() {
      return structure(this);
    }
    [Equal_symbol](that) {
      const selfKeys = Object.keys(this);
      const thatKeys = Object.keys(that);
      if (selfKeys.length !== thatKeys.length) {
        return false;
      }
      for (const key of selfKeys) {
        if (!(key in that && equals(this[key], that[key]))) {
          return false;
        }
      }
      return true;
    }
  }
  return Base;
})();
/**
 * Create a constructor for a tagged union of `Data` structs.
 *
 * You can also pass a `TaggedEnum.WithGenerics` if you want to add generics to
 * the constructor.
 *
 * @example
 * import * as Data from "@effect/data/Data"
 *
 * const HttpError = Data.taggedEnum<
 *   | Data.Data<{ _tag: "BadRequest"; status: 400; message: string }>
 *   | Data.Data<{ _tag: "NotFound"; status: 404; message: string }>
 * >()
 *
 * const notFound = HttpError("NotFound")({ status: 404, message: "Not Found" })
 *
 * @example
 * import * as Data from "@effect/data/Data"
 *
 * type MyResult<E, A> = Data.TaggedEnum<{
 *   Failure: { error: E }
 *   Success: { value: A }
 * }>
 * interface MyResultDefinition extends Data.TaggedEnum.WithGenerics<2> {
 *   readonly taggedEnum: MyResult<this["A"], this["B"]>
 * }
 * const MyResult = Data.taggedEnum<MyResultDefinition>()
 *
 * const success = MyResult("Success")({ value: 1 })
 *
 * @category constructors
 * @since 1.0.0
 */
const taggedEnum = () => tagged;
//# sourceMappingURL=Data.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Equivalence.mjs
/**
 * This module provides an implementation of the `Equivalence` type class, which defines a binary relation
 * that is reflexive, symmetric, and transitive. In other words, it defines a notion of equivalence between values of a certain type.
 * These properties are also known in mathematics as an "equivalence relation".
 *
 * @since 1.0.0
 */

/**
 * @category constructors
 * @since 1.0.0
 */
const make = isEquivalent => (self, that) => self === that || isEquivalent(self, that);
const isStrictEquivalent = (x, y) => x === y;
/**
 * Return an `Equivalence` that uses strict equality (===) to compare values.
 *
 * @since 1.0.0
 * @category constructors
 */
const strict = () => isStrictEquivalent;
/**
 * @category instances
 * @since 1.0.0
 */
const Equivalence_string = /*#__PURE__*/(/* unused pure expression or super */ null && (strict()));
/**
 * @category instances
 * @since 1.0.0
 */
const Equivalence_number = /*#__PURE__*/strict();
/**
 * @category instances
 * @since 1.0.0
 */
const Equivalence_boolean = /*#__PURE__*/strict();
/**
 * @category instances
 * @since 1.0.0
 */
const bigint = /*#__PURE__*/(/* unused pure expression or super */ null && (strict()));
/**
 * @category instances
 * @since 1.0.0
 */
const Equivalence_symbol = /*#__PURE__*/(/* unused pure expression or super */ null && (strict()));
/**
 * @category combining
 * @since 1.0.0
 */
const Equivalence_combine = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => make((x, y) => self(x, y) && that(x, y)))));
/**
 * @category combining
 * @since 1.0.0
 */
const combineMany = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, collection) => make((x, y) => {
  if (!self(x, y)) {
    return false;
  }
  for (const equivalence of collection) {
    if (!equivalence(x, y)) {
      return false;
    }
  }
  return true;
}))));
const isAlwaysEquivalent = (_x, _y) => true;
/**
 * @category combining
 * @since 1.0.0
 */
const combineAll = collection => combineMany(isAlwaysEquivalent, collection);
/**
 * @category combinators
 * @since 1.0.0
 */
const Equivalence_mapInput = /*#__PURE__*/Function_dual(2, (self, f) => make((x, y) => self(f(x), f(y))));
/**
 * @category instances
 * @since 1.0.0
 */
const Equivalence_Date = /*#__PURE__*/(/* unused pure expression or super */ null && (Equivalence_mapInput(Equivalence_number, date => date.getTime())));
/**
 * @category combining
 * @since 1.0.0
 */
const Equivalence_product = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => make(([xa, xb], [ya, yb]) => self(xa, ya) && that(xb, yb)))));
/**
 * @category combining
 * @since 1.0.0
 */
const Equivalence_all = collection => {
  return make((x, y) => {
    const len = Math.min(x.length, y.length);
    let collectionLength = 0;
    for (const equivalence of collection) {
      if (collectionLength >= len) {
        break;
      }
      if (!equivalence(x[collectionLength], y[collectionLength])) {
        return false;
      }
      collectionLength++;
    }
    return true;
  });
};
/**
 * @category combining
 * @since 1.0.0
 */
const Equivalence_productMany = (self, collection) => {
  const equivalence = Equivalence_all(collection);
  return make((x, y) => !self(x[0], y[0]) ? false : equivalence(x.slice(1), y.slice(1)));
};
/**
 * Similar to `Promise.all` but operates on `Equivalence`s.
 *
 * ```
 * [Equivalence<A>, Equivalence<B>, ...] -> Equivalence<[A, B, ...]>
 * ```
 *
 * Given a tuple of `Equivalence`s returns a new `Equivalence` that compares values of a tuple
 * by applying each `Equivalence` to the corresponding element of the tuple.
 *
 * @category combinators
 * @since 1.0.0
 */
const Equivalence_tuple = (...elements) => Equivalence_all(elements);
/**
 * Creates a new `Equivalence` for an array of values based on a given `Equivalence` for the elements of the array.
 *
 * @category combinators
 * @since 1.0.0
 */
const Equivalence_array = item => make((self, that) => {
  if (self.length !== that.length) {
    return false;
  }
  for (let i = 0; i < self.length; i++) {
    const isEq = item(self[i], that[i]);
    if (!isEq) {
      return false;
    }
  }
  return true;
});
/**
 * Given a struct of `Equivalence`s returns a new `Equivalence` that compares values of a struct
 * by applying each `Equivalence` to the corresponding property of the struct.
 *
 * @category combinators
 * @since 1.0.0
 */
const Equivalence_struct = fields => {
  const keys = Object.keys(fields);
  return make((self, that) => {
    for (const key of keys) {
      if (!fields[key](self[key], that[key])) {
        return false;
      }
    }
    return true;
  });
};
//# sourceMappingURL=Equivalence.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/Effect.mjs
/** @internal */
const EffectTypeId = /*#__PURE__*/Symbol.for("@effect/io/Effect");
/** @internal */
const effectVariance = {
  _R: _ => _,
  _E: _ => _,
  _A: _ => _
};
//# sourceMappingURL=Effect.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Pipeable.mjs
/**
 * @since 1.0.0
 */
/**
 * @since 1.0.0
 */
const Pipeable_pipeArguments = (self, args) => {
  switch (args.length) {
    case 1:
      return args[0](self);
    case 2:
      return args[1](args[0](self));
    case 3:
      return args[2](args[1](args[0](self)));
    case 4:
      return args[3](args[2](args[1](args[0](self))));
    case 5:
      return args[4](args[3](args[2](args[1](args[0](self)))));
    case 6:
      return args[5](args[4](args[3](args[2](args[1](args[0](self))))));
    case 7:
      return args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))));
    case 8:
      return args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self))))))));
    case 9:
      return args[8](args[7](args[6](args[5](args[4](args[3](args[2](args[1](args[0](self)))))))));
    default:
      {
        let ret = self;
        for (let i = 0, len = args.length; i < len; i++) {
          ret = args[i](ret);
        }
        return ret;
      }
  }
};
//# sourceMappingURL=Pipeable.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/Option.mjs
/**
 * @since 1.0.0
 */
var _a, _b;




const TypeId = /*#__PURE__*/Symbol.for("@effect/data/Option");
/** @internal */
class Some {
  [(_a = EffectTypeId, Equal_symbol)](that) {
    return isOption(that) && isSome(that) && equals(that.i0, this.i0);
  }
  [symbol]() {
    return Hash_hash(this.i0);
  }
  toString() {
    return `Some(${String(this.i0)})`;
  }
  toJSON() {
    return {
      _tag: this._tag,
      value: this.i0
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  get [TypeId]() {
    return {
      _A: _ => _
    };
  }
  get value() {
    return this.i0;
  }
  constructor(i0) {
    this.i0 = i0;
    this._tag = "Some";
    this._id = TypeId;
    this.i1 = undefined;
    this.i2 = undefined;
    this[_a] = effectVariance;
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
class None {
  constructor() {
    this._tag = "None";
    this._id = TypeId;
    this.i0 = undefined;
    this.i1 = undefined;
    this.i2 = undefined;
    this[_b] = effectVariance;
  }
  [(_b = EffectTypeId, Equal_symbol)](that) {
    return isOption(that) && isNone(that);
  }
  [symbol]() {
    return Hash_hash(this._tag);
  }
  toString() {
    return `None()`;
  }
  toJSON() {
    return {
      _tag: this._tag
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  get [TypeId]() {
    return {
      _A: _ => _
    };
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
const isOption = input => typeof input === "object" && input != null && "_tag" in input && (input["_tag"] === "None" || input["_tag"] === "Some") && isEqual(input);
/** @internal */
const isNone = fa => fa._tag === "None";
/** @internal */
const isSome = fa => fa._tag === "Some";
/** @internal */
const none = /*#__PURE__*/new None();
/** @internal */
const Option_some = a => new Some(a);
//# sourceMappingURL=Option.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/Either.mjs
/**
 * @since 1.0.0
 */
var Either_a, Either_b;






const Either_TypeId = /*#__PURE__*/Symbol.for("@effect/data/Either");
/** @internal */
class Right {
  [(Either_a = EffectTypeId, Equal_symbol)](that) {
    return isEither(that) && isRight(that) && equals(that.i0, this.i0);
  }
  [symbol]() {
    return Hash_hash(this.i0);
  }
  get right() {
    return this.i0;
  }
  constructor(i0) {
    this.i0 = i0;
    this._tag = "Right";
    this._id = Either_TypeId;
    this.i1 = undefined;
    this.i2 = undefined;
    this[Either_a] = effectVariance;
  }
  get [Either_TypeId]() {
    return {
      _E: _ => _,
      _A: _ => _
    };
  }
  toString() {
    return `right(${String(this.i0)})`;
  }
  toJSON() {
    return {
      _tag: this._tag,
      right: this.i0
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
class Left {
  [(Either_b = EffectTypeId, Equal_symbol)](that) {
    return isEither(that) && isLeft(that) && equals(that.i0, this.i0);
  }
  [symbol]() {
    return Hash_hash(this.i0);
  }
  get [Either_TypeId]() {
    return {
      _E: _ => _,
      _A: _ => _
    };
  }
  get left() {
    return this.i0;
  }
  constructor(i0) {
    this.i0 = i0;
    this._tag = "Left";
    this._id = Either_TypeId;
    this.i1 = undefined;
    this.i2 = undefined;
    this[Either_b] = effectVariance;
  }
  toString() {
    return `left(${String(this.i0)})`;
  }
  toJSON() {
    return {
      _tag: this._tag,
      left: this.i0
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
const isEither = input => typeof input === "object" && input != null && "_tag" in input && (input["_tag"] === "Left" || input["_tag"] === "Right") && isEqual(input);
/** @internal */
const isLeft = ma => ma._tag === "Left";
/** @internal */
const isRight = ma => ma._tag === "Right";
/** @internal */
const left = e => new Left(e);
/** @internal */
const right = a => new Right(a);
/** @internal */
const getLeft = self => isRight(self) ? none : Option_some(self.left);
/** @internal */
const getRight = self => isLeft(self) ? none : Option_some(self.right);
/** @internal */
const fromOption = /*#__PURE__*/Function_dual(2, (self, onNone) => isNone(self) ? left(onNone()) : right(self.value));
//# sourceMappingURL=Either.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Order.mjs
/**
 * @since 1.0.0
 */

/**
 * @category constructors
 * @since 1.0.0
 */
const Order_make = compare => (self, that) => self === that ? 0 : compare(self, that);
/**
 * @category instances
 * @since 1.0.0
 */
const Order_string = /*#__PURE__*/(/* unused pure expression or super */ null && (Order_make((self, that) => self < that ? -1 : 1)));
/**
 * @category instances
 * @since 1.0.0
 */
const Order_number = /*#__PURE__*/Order_make((self, that) => self < that ? -1 : 1);
/**
 * @category instances
 * @since 1.0.0
 */
const Order_boolean = /*#__PURE__*/Order_make((self, that) => self < that ? -1 : 1);
/**
 * @category instances
 * @since 1.0.0
 */
const Order_bigint = /*#__PURE__*/(/* unused pure expression or super */ null && (Order_make((self, that) => self < that ? -1 : 1)));
/**
 * @since 1.0.0
 */
const reverse = O => Order_make((self, that) => O(that, self));
/**
 * @category combining
 * @since 1.0.0
 */
const Order_combine = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => Order_make((a1, a2) => {
  const out = self(a1, a2);
  if (out !== 0) {
    return out;
  }
  return that(a1, a2);
}))));
/**
 * @category combining
 * @since 1.0.0
 */
const Order_combineMany = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, collection) => Order_make((a1, a2) => {
  let out = self(a1, a2);
  if (out !== 0) {
    return out;
  }
  for (const O of collection) {
    out = O(a1, a2);
    if (out !== 0) {
      return out;
    }
  }
  return out;
}))));
/**
 * @since 1.0.0
 */
const empty = () => Order_make(() => 0);
/**
 * @category combining
 * @since 1.0.0
 */
const Order_combineAll = collection => Order_combineMany(empty(), collection);
/**
 * @category combinators
 * @since 1.0.0
 */
const Order_mapInput = /*#__PURE__*/Function_dual(2, (self, f) => Order_make((b1, b2) => self(f(b1), f(b2))));
/**
 * @category instances
 * @since 1.0.0
 */
const Order_Date = /*#__PURE__*/(/* unused pure expression or super */ null && (Order_mapInput(Order_number, date => date.getTime())));
/**
 * @category combining
 * @since 1.0.0
 */
const Order_product = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => Order_make(([xa, xb], [ya, yb]) => {
  const o = self(xa, ya);
  return o !== 0 ? o : that(xb, yb);
}))));
/**
 * @category combining
 * @since 1.0.0
 */
const Order_all = collection => {
  return Order_make((x, y) => {
    const len = Math.min(x.length, y.length);
    let collectionLength = 0;
    for (const O of collection) {
      if (collectionLength >= len) {
        break;
      }
      const o = O(x[collectionLength], y[collectionLength]);
      if (o !== 0) {
        return o;
      }
      collectionLength++;
    }
    return 0;
  });
};
/**
 * @category combining
 * @since 1.0.0
 */
const Order_productMany = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, collection) => {
  const O = Order_all(collection);
  return Order_make((x, y) => {
    const o = self(x[0], y[0]);
    return o !== 0 ? o : O(x.slice(1), y.slice(1));
  });
})));
/**
 * Similar to `Promise.all` but operates on `Order`s.
 *
 * ```
 * [Order<A>, Order<B>, ...] -> Order<[A, B, ...]>
 * ```
 *
 * This function creates and returns a new `Order` for a tuple of values based on the given `Order`s for each element in the tuple.
 * The returned `Order` compares two tuples of the same type by applying the corresponding `Order` to each element in the tuple.
 * It is useful when you need to compare two tuples of the same type and you have a specific way of comparing each element
 * of the tuple.
 *
 * @category combinators
 * @since 1.0.0
 */
const Order_tuple = (...elements) => Order_all(elements);
/**
 * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.
 * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.
 * If all elements are equal, the arrays are then compared based on their length.
 * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.
 *
 * @category combinators
 * @since 1.0.0
 */
const Order_array = O => Order_make((self, that) => {
  const aLen = self.length;
  const bLen = that.length;
  const len = Math.min(aLen, bLen);
  for (let i = 0; i < len; i++) {
    const o = O(self[i], that[i]);
    if (o !== 0) {
      return o;
    }
  }
  return Order_number(aLen, bLen);
});
/**
 * This function creates and returns a new `Order` for a struct of values based on the given `Order`s
 * for each property in the struct.
 *
 * @category combinators
 * @since 1.0.0
 */
const Order_struct = fields => {
  const keys = Object.keys(fields);
  return Order_make((self, that) => {
    for (const key of keys) {
      const o = fields[key](self[key], that[key]);
      if (o !== 0) {
        return o;
      }
    }
    return 0;
  });
};
/**
 * Test whether one value is _strictly less than_ another.
 *
 * @since 1.0.0
 */
const lessThan = O => dual(2, (self, that) => O(self, that) === -1);
/**
 * Test whether one value is _strictly greater than_ another.
 *
 * @since 1.0.0
 */
const greaterThan = O => Function_dual(2, (self, that) => O(self, that) === 1);
/**
 * Test whether one value is _non-strictly less than_ another.
 *
 * @since 1.0.0
 */
const lessThanOrEqualTo = O => dual(2, (self, that) => O(self, that) !== 1);
/**
 * Test whether one value is _non-strictly greater than_ another.
 *
 * @since 1.0.0
 */
const greaterThanOrEqualTo = O => dual(2, (self, that) => O(self, that) !== -1);
/**
 * Take the minimum of two values. If they are considered equal, the first argument is chosen.
 *
 * @since 1.0.0
 */
const min = O => dual(2, (self, that) => self === that || O(self, that) < 1 ? self : that);
/**
 * Take the maximum of two values. If they are considered equal, the first argument is chosen.
 *
 * @since 1.0.0
 */
const max = O => Function_dual(2, (self, that) => self === that || O(self, that) > -1 ? self : that);
/**
 * Clamp a value between a minimum and a maximum.
 *
 * @since 1.0.0
 */
const clamp = O => dual(3, (self, minimum, maximum) => min(O)(maximum, max(O)(minimum, self)));
/**
 * Test whether a value is between a minimum and a maximum (inclusive).
 *
 * @since 1.0.0
 */
const between = O => dual(3, (self, minimum, maximum) => !lessThan(O)(self, minimum) && !greaterThan(O)(self, maximum));
//# sourceMappingURL=Order.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Number.mjs
/**
 * This module provides utility functions and type class instances for working with the `number` type in TypeScript.
 * It includes functions for basic arithmetic operations, as well as type class instances for
 * `Equivalence`, `Order`, `Semigroup`, and `Monoid`.
 *
 * @since 1.0.0
 */




/**
 * Tests if a value is a `number`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isNumber } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(isNumber(2), true)
 * assert.deepStrictEqual(isNumber("2"), false)
 *
 * @category guards
 * @since 1.0.0
 */
const Number_isNumber = Predicate_isNumber;
/**
 * Provides an addition operation on `number`s.
 *
 * @param self - The first operand.
 * @param that - The second operand.
 *
 * @example
 * import { sum } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(sum(2, 3), 5)
 *
 * @category math
 * @since 1.0.0
 */
const sum = /*#__PURE__*/Function_dual(2, (self, that) => self + that);
/**
 * Provides a multiplication operation on `number`s.
 *
 * @param self - The first operand.
 * @param that - The second operand.
 *
 * @example
 * import { multiply } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(multiply(2, 3), 6)
 *
 * @category math
 * @since 1.0.0
 */
const multiply = /*#__PURE__*/Function_dual(2, (self, that) => self * that);
/**
 * Provides a subtraction operation on `number`s.
 *
 * @param self - The first operand.
 * @param that - The second operand.
 *
 * @example
 * import { subtract } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(subtract(2, 3), -1)
 *
 * @category math
 * @since 1.0.0
 */
const subtract = /*#__PURE__*/Function_dual(2, (self, that) => self - that);
/**
 * Provides a division operation on `number`s.
 *
 * @param self - The dividend operand.
 * @param that - The divisor operand.
 *
 * @example
 * import { divide } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(divide(6, 3), 2)
 *
 * @category math
 * @since 1.0.0
 */
const divide = /*#__PURE__*/Function_dual(2, (self, that) => self / that);
/**
 * Returns the result of adding `1` to a given number.
 *
 * @param n - A `number` to be incremented.
 *
 * @example
 * import { increment } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(increment(2), 3)
 *
 * @category math
 * @since 1.0.0
 */
const increment = n => n + 1;
/**
 * Decrements a number by `1`.
 *
 * @param n - A `number` to be decremented.
 *
 * @example
 * import { decrement } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(decrement(3), 2)
 *
 * @category math
 * @since 1.0.0
 */
const decrement = n => n - 1;
/**
 * @category instances
 * @since 1.0.0
 */
const Number_Equivalence = Equivalence_number;
/**
 * @category instances
 * @since 1.0.0
 */
const Number_Order = Order_number;
/**
 * Returns `true` if the first argument is less than the second, otherwise `false`.
 *
 * @param self - The first argument.
 * @param that - The second argument.
 *
 * @example
 * import { lessThan } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(lessThan(2, 3), true)
 * assert.deepStrictEqual(lessThan(3, 3), false)
 * assert.deepStrictEqual(lessThan(4, 3), false)
 *
 * @category predicates
 * @since 1.0.0
 */
const Number_lessThan = /*#__PURE__*/(/* unused pure expression or super */ null && (order.lessThan(Number_Order)));
/**
 * Returns a function that checks if a given `number` is less than or equal to the provided one.
 *
 * @param self - The first `number` to compare with.
 * @param that - The second `number` to compare with.
 *
 * @example
 * import { lessThanOrEqualTo } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(lessThanOrEqualTo(2, 3), true)
 * assert.deepStrictEqual(lessThanOrEqualTo(3, 3), true)
 * assert.deepStrictEqual(lessThanOrEqualTo(4, 3), false)
 *
 * @category predicates
 * @since 1.0.0
 */
const Number_lessThanOrEqualTo = /*#__PURE__*/(/* unused pure expression or super */ null && (order.lessThanOrEqualTo(Number_Order)));
/**
 * Returns `true` if the first argument is greater than the second, otherwise `false`.
 *
 * @param self - The first argument.
 * @param that - The second argument.
 *
 * @example
 * import { greaterThan } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(greaterThan(2, 3), false)
 * assert.deepStrictEqual(greaterThan(3, 3), false)
 * assert.deepStrictEqual(greaterThan(4, 3), true)
 *
 * @category predicates
 * @since 1.0.0
 */
const Number_greaterThan = /*#__PURE__*/(/* unused pure expression or super */ null && (order.greaterThan(Number_Order)));
/**
 * Returns a function that checks if a given `number` is greater than or equal to the provided one.
 *
 * @param self - The first `number` to compare with.
 * @param that - The second `number` to compare with.
 *
 * @example
 * import { greaterThanOrEqualTo } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(greaterThanOrEqualTo(2, 3), false)
 * assert.deepStrictEqual(greaterThanOrEqualTo(3, 3), true)
 * assert.deepStrictEqual(greaterThanOrEqualTo(4, 3), true)
 *
 * @category predicates
 * @since 1.0.0
 */
const Number_greaterThanOrEqualTo = /*#__PURE__*/(/* unused pure expression or super */ null && (order.greaterThanOrEqualTo(Number_Order)));
/**
 * Checks if a `number` is between a `minimum` and `maximum` value (inclusive).
 *
 * @param self - The `number` to check.
 * @param minimum - The `minimum` value to check.
 * @param maximum - The `maximum` value to check.
 *
 * @example
 * import { between } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(between(0, 5)(3), true)
 * assert.deepStrictEqual(between(0, 5)(-1), false)
 * assert.deepStrictEqual(between(0, 5)(6), false)
 *
 * @category predicates
 * @since 1.0.0
 */
const Number_between = /*#__PURE__*/(/* unused pure expression or super */ null && (order.between(Number_Order)));
/**
 * Restricts the given `number` to be within the range specified by the `minimum` and `maximum` values.
 *
 * - If the `number` is less than the `minimum` value, the function returns the `minimum` value.
 * - If the `number` is greater than the `maximum` value, the function returns the `maximum` value.
 * - Otherwise, it returns the original `number`.
 *
 * @param self - The `number` to be clamped.
 * @param minimum - The lower end of the range.
 * @param maximum - The upper end of the range.
 *
 * @example
 * import { clamp } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(clamp(0, 5)(3), 3)
 * assert.deepStrictEqual(clamp(0, 5)(-1), 0)
 * assert.deepStrictEqual(clamp(0, 5)(6), 5)
 *
 * @since 1.0.0
 */
const Number_clamp = /*#__PURE__*/(/* unused pure expression or super */ null && (order.clamp(Number_Order)));
/**
 * Returns the minimum between two `number`s.
 *
 * @param self - The first `number`.
 * @param that - The second `number`.
 *
 * @example
 * import { min } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(min(2, 3), 2)
 *
 * @since 1.0.0
 */
const Number_min = /*#__PURE__*/(/* unused pure expression or super */ null && (order.min(Number_Order)));
/**
 * Returns the maximum between two `number`s.
 *
 * @param self - The first `number`.
 * @param that - The second `number`.
 *
 * @example
 * import { max } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(max(2, 3), 3)
 *
 * @since 1.0.0
 */
const Number_max = /*#__PURE__*/(/* unused pure expression or super */ null && (order.max(Number_Order)));
/**
 * Determines the sign of a given `number`.
 *
 * @param n - The `number` to determine the sign of.
 *
 * @example
 * import { sign } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(sign(-5), -1)
 * assert.deepStrictEqual(sign(0), 0)
 * assert.deepStrictEqual(sign(5), 1)
 *
 * @category math
 * @since 1.0.0
 */
const sign = n => Number_Order(n, 0);
/**
 * Takes an `Iterable` of `number`s and returns their sum as a single `number`.
 *
 * @param collection - The collection of `number`s to sum.
 *
 * @example
 * import { sumAll } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(sumAll([2, 3, 4]), 9)
 *
 * @category math
 * @since 1.0.0
 */
const sumAll = collection => {
  let out = 0;
  for (const n of collection) {
    out += n;
  }
  return out;
};
/**
 * Takes an `Iterable` of `number`s and returns their multiplication as a single `number`.
 *
 * @param collection - The collection of `number`s to multiply.
 *
 * @example
 * import { multiplyAll } from '@effect/data/Number'
 *
 * assert.deepStrictEqual(multiplyAll([2, 3, 4]), 24)
 *
 * @category math
 * @since 1.0.0
 */
const multiplyAll = collection => {
  let out = 1;
  for (const n of collection) {
    if (n === 0) {
      return 0;
    }
    out *= n;
  }
  return out;
};
/**
 * Returns the remainder left over when one operand is divided by a second operand.
 *
 * It always takes the sign of the dividend.
 *
 * @param self - The dividend.
 * @param divisor - The divisor.
 *
 * @example
 * import { remainder } from "@effect/data/Number"
 *
 * assert.deepStrictEqual(remainder(2, 2), 0)
 * assert.deepStrictEqual(remainder(3, 2), 1)
 * assert.deepStrictEqual(remainder(-4, 2), -0)
 *
 * @category math
 * @since 1.0.0
 */
const remainder = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, divisor) => {
  // https://stackoverflow.com/questions/3966484/why-does-modulus-operator-return-fractional-number-in-javascript/31711034#31711034
  const selfDecCount = (self.toString().split(".")[1] || "").length;
  const divisorDecCount = (divisor.toString().split(".")[1] || "").length;
  const decCount = selfDecCount > divisorDecCount ? selfDecCount : divisorDecCount;
  const selfInt = parseInt(self.toFixed(decCount).replace(".", ""));
  const divisorInt = parseInt(divisor.toFixed(decCount).replace(".", ""));
  return selfInt % divisorInt / Math.pow(10, decCount);
})));
//# sourceMappingURL=Number.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Option.mjs









/**
 * @category symbols
 * @since 1.0.0
 */
const Option_TypeId = /*#__PURE__*/Symbol.for("@effect/data/Option");
/**
 * Creates a new `Option` that represents the absence of a value.
 *
 * @category constructors
 * @since 1.0.0
 */
const Option_none = () => none;
/**
 * Creates a new `Option` that wraps the given value.
 *
 * @param value - The value to wrap.
 *
 * @category constructors
 * @since 1.0.0
 */
const mjs_Option_some = Option_some;
/**
 * Tests if a value is a `Option`.
 *
 * @param input - The value to check.
 *
 * @example
 * import { some, none, isOption } from '@effect/data/Option'
 *
 * assert.deepStrictEqual(isOption(some(1)), true)
 * assert.deepStrictEqual(isOption(none()), true)
 * assert.deepStrictEqual(isOption({}), false)
 *
 * @category guards
 * @since 1.0.0
 */
const Option_isOption = input => Predicate_isObject(input) && "_id" in input && input["_id"] === Option_TypeId;
/**
 * Determine if a `Option` is a `None`.
 *
 * @param self - The `Option` to check.
 *
 * @example
 * import { some, none, isNone } from '@effect/data/Option'
 *
 * assert.deepStrictEqual(isNone(some(1)), false)
 * assert.deepStrictEqual(isNone(none()), true)
 *
 * @category guards
 * @since 1.0.0
 */
const Option_isNone = isNone;
/**
 * Determine if a `Option` is a `Some`.
 *
 * @param self - The `Option` to check.
 *
 * @example
 * import { some, none, isSome } from '@effect/data/Option'
 *
 * assert.deepStrictEqual(isSome(some(1)), true)
 * assert.deepStrictEqual(isSome(none()), false)
 *
 * @category guards
 * @since 1.0.0
 */
const Option_isSome = isSome;
/**
 * Matches the given `Option` and returns either the provided `onNone` value or the result of the provided `onSome`
 * function when passed the `Option`'s value.
 *
 * @param self - The `Option` to match
 * @param onNone - The value to be returned if the `Option` is `None`
 * @param onSome - The function to be called if the `Option` is `Some`, it will be passed the `Option`'s value and its result will be returned
 *
 * @example
 * import { some, none, match } from '@effect/data/Option'
 * import { pipe } from "@effect/data/Function"
 *
 * assert.deepStrictEqual(
 *   pipe(some(1), match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),
 *   'a some containing 1'
 * )
 *
 * assert.deepStrictEqual(
 *   pipe(none(), match({ onNone: () => 'a none', onSome: (a) => `a some containing ${a}` })),
 *   'a none'
 * )
 *
 * @category pattern matching
 * @since 1.0.0
 */
const match = /*#__PURE__*/Function_dual(2, (self, {
  onNone,
  onSome
}) => Option_isNone(self) ? onNone() : onSome(self.value));
/**
 * Returns a type guard from a `Option` returning function.
 * This function ensures that a type guard definition is type-safe.
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * const parsePositive = (n: number): O.Option<number> =>
 *   n > 0 ? O.some(n) : O.none()
 *
 * const isPositive = O.toRefinement(parsePositive)
 *
 * assert.deepStrictEqual(isPositive(1), true)
 * assert.deepStrictEqual(isPositive(-1), false)
 *
 * @category conversions
 * @since 1.0.0
 */
const toRefinement = f => a => Option_isSome(f(a));
/**
 * Converts an `Iterable` of values into an `Option`. Returns the first value of the `Iterable` wrapped in a `Some`
 * if the `Iterable` is not empty, otherwise returns `None`.
 *
 * @param collection - The `Iterable` to be converted to an `Option`.
 *
 * @example
 * import { fromIterable, some, none } from '@effect/data/Option'
 *
 * assert.deepStrictEqual(fromIterable([1, 2, 3]), some(1))
 * assert.deepStrictEqual(fromIterable([]), none())
 *
 * @category conversions
 * @since 1.0.0
 */
const fromIterable = collection => {
  for (const a of collection) {
    return mjs_Option_some(a);
  }
  return Option_none();
};
/**
 * Converts a `Either` to an `Option` discarding the error.
 *
 * Alias of {@link fromEither}.
 *
 * @example
 * import * as O from "@effect/data/Option"
 * import * as E from "@effect/data/Either"
 *
 * assert.deepStrictEqual(O.getRight(E.right('ok')), O.some('ok'))
 * assert.deepStrictEqual(O.getRight(E.left('err')), O.none())
 *
 * @category conversions
 * @since 1.0.0
 */
const Option_getRight = getRight;
/**
 * Converts a `Either` to an `Option` discarding the value.
 *
 * @example
 * import * as O from "@effect/data/Option"
 * import * as E from "@effect/data/Either"
 *
 * assert.deepStrictEqual(O.getLeft(E.right("ok")), O.none())
 * assert.deepStrictEqual(O.getLeft(E.left("a")), O.some("a"))
 *
 * @category conversions
 * @since 1.0.0
 */
const Option_getLeft = getLeft;
/**
 * Returns the value of the `Option` if it is `Some`, otherwise returns `onNone`
 *
 * @param self - The `Option` to get the value of.
 * @param onNone - Function that returns the default value to return if the `Option` is `None`.
 *
 * @example
 * import { some, none, getOrElse } from '@effect/data/Option'
 * import { pipe } from "@effect/data/Function"
 *
 * assert.deepStrictEqual(pipe(some(1), getOrElse(() => 0)), 1)
 * assert.deepStrictEqual(pipe(none(), getOrElse(() => 0)), 0)
 *
 * @category getters
 * @since 1.0.0
 */
const getOrElse = /*#__PURE__*/Function_dual(2, (self, onNone) => Option_isNone(self) ? onNone() : self.value);
/**
 * Returns the provided `Option` `that` if `self` is `None`, otherwise returns `self`.
 *
 * @param self - The first `Option` to be checked.
 * @param that - The `Option` to return if `self` is `None`.
 *
 * @example
 * import * as O from "@effect/data/Option"
 * import { pipe } from "@effect/data/Function"
 *
 * assert.deepStrictEqual(
 *   pipe(
 *     O.none(),
 *     O.orElse(() => O.none())
 *   ),
 *   O.none()
 * )
 * assert.deepStrictEqual(
 *   pipe(
 *     O.some('a'),
 *     O.orElse(() => O.none())
 *   ),
 *   O.some('a')
 * )
 * assert.deepStrictEqual(
 *   pipe(
 *     O.none(),
 *     O.orElse(() => O.some('b'))
 *   ),
 *   O.some('b')
 * )
 * assert.deepStrictEqual(
 *   pipe(
 *     O.some('a'),
 *     O.orElse(() => O.some('b'))
 *   ),
 *   O.some('a')
 * )
 *
 * @category error handling
 * @since 1.0.0
 */
const orElse = /*#__PURE__*/Function_dual(2, (self, that) => Option_isNone(self) ? that() : self);
/**
 * Similar to `orElse`, but instead of returning a simple union, it returns an `Either` object,
 * which contains information about which of the two `Option`s has been chosen.
 *
 * This is useful when it's important to know whether the value was retrieved from the first `Option` or the second option.
 *
 * @param self - The first `Option` to be checked.
 * @param that - The second `Option` to be considered if the first `Option` is `None`.
 *
 * @category error handling
 * @since 1.0.0
 */
const orElseEither = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => Option_isNone(self) ? map(that(), either.right) : map(self, either.left))));
/**
 * Given an `Iterable` collection of `Option`s, returns the first `Some` found in the collection.
 *
 * @param collection - An iterable collection of `Option` to be searched.
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * assert.deepStrictEqual(O.firstSomeOf([O.none(), O.some(1), O.some(2)]), O.some(1))
 *
 * @category error handling
 * @since 1.0.0
 */
const firstSomeOf = collection => {
  let out = Option_none();
  for (out of collection) {
    if (Option_isSome(out)) {
      return out;
    }
  }
  return out;
};
/**
 * Constructs a new `Option` from a nullable type. If the value is `null` or `undefined`, returns `None`, otherwise
 * returns the value wrapped in a `Some`.
 *
 * @param nullableValue - The nullable value to be converted to an `Option`.
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * assert.deepStrictEqual(O.fromNullable(undefined), O.none())
 * assert.deepStrictEqual(O.fromNullable(null), O.none())
 * assert.deepStrictEqual(O.fromNullable(1), O.some(1))
 *
 * @category conversions
 * @since 1.0.0
 */
const fromNullable = nullableValue => nullableValue == null ? Option_none() : mjs_Option_some(nullableValue);
/**
 * This API is useful for lifting a function that returns `null` or `undefined` into the `Option` context.
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * const parse = (s: string): number | undefined => {
 *   const n = parseFloat(s)
 *   return isNaN(n) ? undefined : n
 * }
 *
 * const parseOption = O.liftNullable(parse)
 *
 * assert.deepStrictEqual(parseOption('1'), O.some(1))
 * assert.deepStrictEqual(parseOption('not a number'), O.none())
 *
 * @category conversions
 * @since 1.0.0
 */
const liftNullable = f => (...a) => fromNullable(f(...a));
/**
 * Returns the value of the `Option` if it is a `Some`, otherwise returns `null`.
 *
 * @param self - The `Option` to extract the value from.
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * assert.deepStrictEqual(O.getOrNull(O.some(1)), 1)
 * assert.deepStrictEqual(O.getOrNull(O.none()), null)
 *
 * @category getters
 * @since 1.0.0
 */
const getOrNull = /*#__PURE__*/(/* unused pure expression or super */ null && (getOrElse(constNull)));
/**
 * Returns the value of the `Option` if it is a `Some`, otherwise returns `undefined`.
 *
 * @param self - The `Option` to extract the value from.
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * assert.deepStrictEqual(O.getOrUndefined(O.some(1)), 1)
 * assert.deepStrictEqual(O.getOrUndefined(O.none()), undefined)
 *
 * @category getters
 * @since 1.0.0
 */
const getOrUndefined = /*#__PURE__*/getOrElse(Function_constUndefined);
/**
 * A utility function that lifts a function that throws exceptions into a function that returns an `Option`.
 *
 * This function is useful for any function that might throw an exception, allowing the developer to handle
 * the exception in a more functional way.
 *
 * @param f - the function that can throw exceptions.
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * const parse = O.liftThrowable(JSON.parse)
 *
 * assert.deepStrictEqual(parse("1"), O.some(1))
 * assert.deepStrictEqual(parse(""), O.none())
 *
 * @category conversions
 * @since 1.0.0
 */
const liftThrowable = f => (...a) => {
  try {
    return mjs_Option_some(f(...a));
  } catch (e) {
    return Option_none();
  }
};
/**
 * Extracts the value of an `Option` or throws if the `Option` is `None`.
 *
 * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.
 *
 * @param self - The `Option` to extract the value from.
 * @param onNone - A function that will be called if the `Option` is `None`. It returns the error to be thrown.
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * assert.deepStrictEqual(
 *   O.getOrThrowWith(O.some(1), () => new Error('Unexpected None')),
 *   1
 * )
 * assert.throws(() => O.getOrThrowWith(O.none(), () => new Error('Unexpected None')))
 *
 * @category conversions
 * @since 1.0.0
 */
const getOrThrowWith = /*#__PURE__*/Function_dual(2, (self, onNone) => {
  if (Option_isSome(self)) {
    return self.value;
  }
  throw onNone();
});
/**
 * Extracts the value of an `Option` or throws if the `Option` is `None`.
 *
 * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.
 *
 * @param self - The `Option` to extract the value from.
 * @throws `Error("getOrThrow called on a None")`
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * assert.deepStrictEqual(O.getOrThrow(O.some(1)), 1)
 * assert.throws(() => O.getOrThrow(O.none()))
 *
 * @category conversions
 * @since 1.0.0
 */
const getOrThrow = /*#__PURE__*/getOrThrowWith(() => new Error("getOrThrow called on a None"));
/**
 * Maps the `Some` side of an `Option` value to a new `Option` value.
 *
 * @param self - An `Option` to map
 * @param f - The function to map over the value of the `Option`
 *
 * @category transforming
 * @since 1.0.0
 */
const map = /*#__PURE__*/Function_dual(2, (self, f) => Option_isNone(self) ? Option_none() : mjs_Option_some(f(self.value)));
/**
 * Maps the `Some` value of this `Option` to the specified constant value.
 *
 * @category transforming
 * @since 1.0.0
 */
const as = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, b) => map(self, () => b))));
/**
 * Maps the `Some` value of this `Option` to the `void` constant value.
 *
 * This is useful when the value of the `Option` is not needed, but the presence or absence of the value is important.
 *
 * @category transforming
 * @since 1.0.0
 */
const asUnit = /*#__PURE__*/(/* unused pure expression or super */ null && (as(undefined)));
/**
 * @since 1.0.0
 */
const unit = /*#__PURE__*/(/* unused pure expression or super */ null && (mjs_Option_some(undefined)));
/**
 * Applies a function to the value of an `Option` and flattens the result, if the input is `Some`.
 *
 * @category transforming
 * @since 1.0.0
 */
const flatMap = /*#__PURE__*/Function_dual(2, (self, f) => Option_isNone(self) ? Option_none() : f(self.value));
/**
 * This is `flatMap` + `fromNullable`, useful when working with optional values.
 *
 * @example
 * import { some, none, flatMapNullable } from '@effect/data/Option'
 * import { pipe } from "@effect/data/Function"
 *
 * interface Employee {
 *   company?: {
 *     address?: {
 *       street?: {
 *         name?: string
 *       }
 *     }
 *   }
 * }
 *
 * const employee1: Employee = { company: { address: { street: { name: 'high street' } } } }
 *
 * assert.deepStrictEqual(
 *   pipe(
 *     some(employee1),
 *     flatMapNullable(employee => employee.company?.address?.street?.name),
 *   ),
 *   some('high street')
 * )
 *
 * const employee2: Employee = { company: { address: { street: {} } } }
 *
 * assert.deepStrictEqual(
 *   pipe(
 *     some(employee2),
 *     flatMapNullable(employee => employee.company?.address?.street?.name),
 *   ),
 *   none()
 * )
 *
 * @category transforming
 * @since 1.0.0
 */
const flatMapNullable = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => Option_isNone(self) ? Option_none() : fromNullable(f(self.value)))));
/**
 * @category transforming
 * @since 1.0.0
 */
const flatten = /*#__PURE__*/flatMap(Function_identity);
/**
 * @category transforming
 * @since 1.0.0
 */
const zipRight = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => flatMap(self, () => that))));
/**
 * @category transforming
 * @since 1.0.0
 */
const composeK = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (afb, bfc) => a => flatMap(afb(a), bfc))));
/**
 * Sequences the specified `that` `Option` but ignores its value.
 *
 * It is useful when we want to chain multiple operations, but only care about the result of `self`.
 *
 * @param that - The `Option` that will be ignored in the chain and discarded
 * @param self - The `Option` we care about
 *
 * @category transforming
 * @since 1.0.0
 */
const zipLeft = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => tap(self, () => that))));
/**
 * Applies the provided function `f` to the value of the `Option` if it is `Some` and returns the original `Option`
 * unless `f` returns `None`, in which case it returns `None`.
 *
 * This function is useful for performing additional computations on the value of the input `Option` without affecting its value.
 *
 * @param f - Function to apply to the value of the `Option` if it is `Some`
 * @param self - The `Option` to apply the function to
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * const getInteger = (n: number) => Number.isInteger(n) ? O.some(n) : O.none()
 *
 * assert.deepStrictEqual(O.tap(O.none(), getInteger), O.none())
 * assert.deepStrictEqual(O.tap(O.some(1), getInteger), O.some(1))
 * assert.deepStrictEqual(O.tap(O.some(1.14), getInteger), O.none())
 *
 * @category transforming
 * @since 1.0.0
 */
const tap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => flatMap(self, a => map(f(a), () => a)))));
/**
 * @category combining
 * @since 1.0.0
 */
const Option_product = (self, that) => Option_isSome(self) && Option_isSome(that) ? mjs_Option_some([self.value, that.value]) : Option_none();
/**
 * @category combining
 * @since 1.0.0
 */
const Option_productMany = (self, collection) => {
  if (Option_isNone(self)) {
    return Option_none();
  }
  const out = [self.value];
  for (const o of collection) {
    if (Option_isNone(o)) {
      return Option_none();
    }
    out.push(o.value);
  }
  return mjs_Option_some(out);
};
/**
 * Takes a structure of `Option`s and returns an `Option` of values with the same structure.
 *
 * - If a tuple is supplied, then the returned `Option` will contain a tuple with the same length.
 * - If a struct is supplied, then the returned `Option` will contain a struct with the same keys.
 * - If an iterable is supplied, then the returned `Option` will contain an array.
 *
 * @param fields - the struct of `Option`s to be sequenced.
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * assert.deepStrictEqual(O.all([O.some(1), O.some(2)]), O.some([1, 2]))
 * assert.deepStrictEqual(O.all({ a: O.some(1), b: O.some("hello") }), O.some({ a: 1, b: "hello" }))
 * assert.deepStrictEqual(O.all({ a: O.some(1), b: O.none() }), O.none())
 *
 * @category combining
 * @since 1.0.0
 */
// @ts-expect-error
const Option_all = input => {
  if (Symbol.iterator in input) {
    const out = [];
    for (const o of input) {
      if (Option_isNone(o)) {
        return Option_none();
      }
      out.push(o.value);
    }
    return mjs_Option_some(out);
  }
  const out = {};
  for (const key of Object.keys(input)) {
    const o = input[key];
    if (Option_isNone(o)) {
      return Option_none();
    }
    out[key] = o.value;
  }
  return mjs_Option_some(out);
};
/**
 * Zips two `Option` values together using a provided function, returning a new `Option` of the result.
 *
 * @param self - The left-hand side of the zip operation
 * @param that - The right-hand side of the zip operation
 * @param f - The function used to combine the values of the two `Option`s
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * type Complex = [number, number]
 *
 * const complex = (real: number, imaginary: number): Complex => [real, imaginary]
 *
 * assert.deepStrictEqual(O.zipWith(O.none(), O.none(), complex), O.none())
 * assert.deepStrictEqual(O.zipWith(O.some(1), O.none(), complex), O.none())
 * assert.deepStrictEqual(O.zipWith(O.none(), O.some(1), complex), O.none())
 * assert.deepStrictEqual(O.zipWith(O.some(1), O.some(2), complex), O.some([1, 2]))
 *
 * assert.deepStrictEqual(O.zipWith(O.some(1), complex)(O.some(2)), O.some([2, 1]))
 *
 * @category combining
 * @since 1.0.0
 */
const zipWith = /*#__PURE__*/Function_dual(3, (self, that, f) => map(Option_product(self, that), ([a, b]) => f(a, b)));
/**
 * @category combining
 * @since 1.0.0
 */
const ap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => zipWith(self, that, (f, a) => f(a)))));
/**
 * Reduces an `Iterable` of `Option<A>` to a single value of type `B`, elements that are `None` are ignored.
 *
 * @param self - The Iterable of `Option<A>` to be reduced.
 * @param b - The initial value of the accumulator.
 * @param f - The reducing function that takes the current accumulator value and the unwrapped value of an `Option<A>`.
 *
 * @example
 * import { some, none, reduceCompact } from '@effect/data/Option'
 * import { pipe } from "@effect/data/Function"
 *
 * const iterable = [some(1), none(), some(2), none()]
 * assert.deepStrictEqual(pipe(iterable, reduceCompact(0, (b, a) => b + a)), 3)
 *
 * @category folding
 * @since 1.0.0
 */
const reduceCompact = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, b, f) => {
  let out = b;
  for (const oa of self) {
    if (Option_isSome(oa)) {
      out = f(out, oa.value);
    }
  }
  return out;
})));
/**
 * Transforms an `Option` into an `Array`.
 * If the input is `None`, an empty array is returned.
 * If the input is `Some`, the value is wrapped in an array.
 *
 * @param self - The `Option` to convert to an array.
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * assert.deepStrictEqual(O.toArray(O.some(1)), [1])
 * assert.deepStrictEqual(O.toArray(O.none()), [])
 *
 * @category conversions
 * @since 1.0.0
 */
const toArray = self => Option_isNone(self) ? [] : [self.value];
/**
 * @category filtering
 * @since 1.0.0
 */
const partitionMap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  if (Option_isNone(self)) {
    return [Option_none(), Option_none()];
  }
  const e = f(self.value);
  return either.isLeft(e) ? [mjs_Option_some(e.left), Option_none()] : [Option_none(), mjs_Option_some(e.right)];
})));
/**
 * Maps over the value of an `Option` and filters out `None`s.
 *
 * Useful when in addition to filtering you also want to change the type of the `Option`.
 *
 * @param self - The `Option` to map over.
 * @param f - A function to apply to the value of the `Option`.
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * const evenNumber = (n: number) => n % 2 === 0 ? O.some(n) : O.none()
 *
 * assert.deepStrictEqual(O.filterMap(O.none(), evenNumber), O.none())
 * assert.deepStrictEqual(O.filterMap(O.some(3), evenNumber), O.none())
 * assert.deepStrictEqual(O.filterMap(O.some(2), evenNumber), O.some(2))
 *
 * @category filtering
 * @since 1.0.0
 */
const filterMap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => Option_isNone(self) ? Option_none() : f(self.value))));
/**
 * Filters an `Option` using a predicate. If the predicate is not satisfied or the `Option` is `None` returns `None`.
 *
 * If you need to change the type of the `Option` in addition to filtering, see `filterMap`.
 *
 * @param predicate - A predicate function to apply to the `Option` value.
 * @param fb - The `Option` to filter.
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * // predicate
 * const isEven = (n: number) => n % 2 === 0
 *
 * assert.deepStrictEqual(O.filter(O.none(), isEven), O.none())
 * assert.deepStrictEqual(O.filter(O.some(3), isEven), O.none())
 * assert.deepStrictEqual(O.filter(O.some(2), isEven), O.some(2))
 *
 * // refinement
 * const isNumber = (v: unknown): v is number => typeof v === "number"
 *
 * assert.deepStrictEqual(O.filter(O.none(), isNumber), O.none())
 * assert.deepStrictEqual(O.filter(O.some('hello'), isNumber), O.none())
 * assert.deepStrictEqual(O.filter(O.some(2), isNumber), O.some(2))
 *
 * @category filtering
 * @since 1.0.0
 */
const filter = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => filterMap(self, b => predicate(b) ? option.some(b) : option.none))));
/**
 * @example
 * import { none, some, getEquivalence } from '@effect/data/Option'
 * import * as N from '@effect/data/Number'
 *
 * const isEquivalent = getEquivalence(N.Equivalence)
 * assert.deepStrictEqual(isEquivalent(none(), none()), true)
 * assert.deepStrictEqual(isEquivalent(none(), some(1)), false)
 * assert.deepStrictEqual(isEquivalent(some(1), none()), false)
 * assert.deepStrictEqual(isEquivalent(some(1), some(2)), false)
 * assert.deepStrictEqual(isEquivalent(some(1), some(1)), true)
 *
 * @category equivalence
 * @since 1.0.0
 */
const getEquivalence = isEquivalent => Equivalence.make((x, y) => x === y || (Option_isNone(x) ? Option_isNone(y) : Option_isNone(y) ? false : isEquivalent(x.value, y.value)));
/**
 * The `Order` instance allows `Option` values to be compared with
 * `compare`, whenever there is an `Order` instance for
 * the type the `Option` contains.
 *
 * `None` is considered to be less than any `Some` value.
 *
 * @example
 * import { none, some, getOrder } from '@effect/data/Option'
 * import * as N from '@effect/data/Number'
 * import { pipe } from "@effect/data/Function"
 *
 * const O = getOrder(N.Order)
 * assert.deepStrictEqual(O(none(), none()), 0)
 * assert.deepStrictEqual(O(none(), some(1)), -1)
 * assert.deepStrictEqual(O(some(1), none()), 1)
 * assert.deepStrictEqual(O(some(1), some(2)), -1)
 * assert.deepStrictEqual(O(some(1), some(1)), 0)
 *
 * @category sorting
 * @since 1.0.0
 */
const getOrder = O => order.make((self, that) => Option_isSome(self) ? Option_isSome(that) ? O(self.value, that.value) : 1 : -1);
/**
 * Lifts a binary function into `Option`.
 *
 * @param f - The function to lift.
 *
 * @category lifting
 * @since 1.0.0
 */
const lift2 = f => Function_dual(2, (self, that) => zipWith(self, that, f));
/**
 * Transforms a `Predicate` function into a `Some` of the input value if the predicate returns `true` or `None`
 * if the predicate returns `false`.
 *
 * @param predicate - A `Predicate` function that takes in a value of type `A` and returns a boolean.
 *
 * @example
 * import * as O from "@effect/data/Option"
 *
 * const getOption = O.liftPredicate((n: number) => n >= 0)
 *
 * assert.deepStrictEqual(getOption(-1), O.none())
 * assert.deepStrictEqual(getOption(1), O.some(1))
 *
 * @category lifting
 * @since 1.0.0
 */
const liftPredicate = predicate => b => predicate(b) ? mjs_Option_some(b) : Option_none();
/**
 * Returns a function that checks if a `Option` contains a given value using a provided `isEquivalent` function.
 *
 * @param equivalent - An `Equivalence` instance to compare values of the `Option`.
 * @param self - The `Option` to apply the comparison to.
 * @param a - The value to compare against the `Option`.
 *
 * @example
 * import { some, none, containsWith } from '@effect/data/Option'
 * import { Equivalence } from '@effect/data/Number'
 * import { pipe } from "@effect/data/Function"
 *
 * assert.deepStrictEqual(pipe(some(2), containsWith(Equivalence)(2)), true)
 * assert.deepStrictEqual(pipe(some(1), containsWith(Equivalence)(2)), false)
 * assert.deepStrictEqual(pipe(none(), containsWith(Equivalence)(2)), false)
 *
 * @category elements
 * @since 1.0.0
 */
const containsWith = isEquivalent => Function_dual(2, (self, a) => Option_isNone(self) ? false : isEquivalent(self.value, a));
const _equivalence = /*#__PURE__*/equivalence();
/**
 * Returns a function that checks if an `Option` contains a given value using the default `Equivalence`.
 *
 * @category elements
 * @since 1.0.0
 */
const contains = /*#__PURE__*/containsWith(_equivalence);
/**
 * Check if a value in an `Option` type meets a certain predicate.
 *
 * @param self - The `Option` to check.
 * @param predicate - The condition to check.
 *
 * @example
 * import { some, none, exists } from '@effect/data/Option'
 * import { pipe } from "@effect/data/Function"
 *
 * const isEven = (n: number) => n % 2 === 0
 *
 * assert.deepStrictEqual(pipe(some(2), exists(isEven)), true)
 * assert.deepStrictEqual(pipe(some(1), exists(isEven)), false)
 * assert.deepStrictEqual(pipe(none(), exists(isEven)), false)
 *
 * @since 1.0.0
 */
const exists = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => Option_isNone(self) ? false : predicate(self.value))));
// -------------------------------------------------------------------------------------
// math
// -------------------------------------------------------------------------------------
/**
 * @category math
 * @since 1.0.0
 */
const Option_sum = /*#__PURE__*/lift2(sum);
/**
 * @category math
 * @since 1.0.0
 */
const Option_multiply = /*#__PURE__*/lift2(multiply);
/**
 * @category math
 * @since 1.0.0
 */
const Option_subtract = /*#__PURE__*/lift2(subtract);
/**
 * @category math
 * @since 1.0.0
 */
const Option_divide = /*#__PURE__*/lift2(divide);
/**
 * Sum all numbers in an iterable of `Option<number>` ignoring the `None` values.
 *
 * @param self - The iterable of `Option<number>` to be summed.
 *
 * @example
 * import { sumCompact, some, none } from '@effect/data/Option'
 *
 * const iterable = [some(2), none(), some(3), none()]
 * assert.deepStrictEqual(sumCompact(iterable), 5)
 *
 * @category math
 * @since 1.0.0
 */
const sumCompact = self => {
  let out = 0;
  for (const oa of self) {
    if (Option_isSome(oa)) {
      out += oa.value;
    }
  }
  return out;
};
/**
 * Multiply all numbers in an iterable of `Option<number>` ignoring the `None` values.
 *
 * @param self - The iterable of `Option<number>` to be multiplied.
 *
 * @example
 * import { multiplyCompact, some, none } from '@effect/data/Option'
 *
 * const iterable = [some(2), none(), some(3), none()]
 * assert.deepStrictEqual(multiplyCompact(iterable), 6)
 *
 * @category math
 * @since 1.0.0
 */
const multiplyCompact = self => {
  let out = 1;
  for (const oa of self) {
    if (Option_isSome(oa)) {
      const a = oa.value;
      if (a === 0) {
        return 0;
      }
      out *= a;
    }
  }
  return out;
};
// -------------------------------------------------------------------------------------
// do notation
// -------------------------------------------------------------------------------------
/**
 * @category do notation
 * @since 1.0.0
 */
const bindTo = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, name) => map(self, a => ({
  [name]: a
})))));
const let_ = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, name, f) => map(self, a => Object.assign({}, a, {
  [name]: f(a)
})))));

/**
 * @category do notation
 * @since 1.0.0
 */
const bind = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, name, f) => flatMap(self, a => map(f(a), b => Object.assign({}, a, {
  [name]: b
}))))));
/**
 * @category do notation
 * @since 1.0.0
 */
const Do = /*#__PURE__*/mjs_Option_some({});
const adapter = /*#__PURE__*/(/* unused pure expression or super */ null && (Gen.adapter()));
/**
 * @category generators
 * @since 1.0.0
 */
const gen = f => {
  const iterator = f(adapter);
  let state = iterator.next();
  if (state.done) {
    return mjs_Option_some(void 0);
  } else {
    let current = state.value.value;
    if (Option_isNone(current)) {
      return current;
    }
    while (!state.done) {
      state = iterator.next(current.value);
      if (!state.done) {
        current = state.value.value;
        if (Option_isNone(current)) {
          return current;
        }
      }
    }
    return mjs_Option_some(state.value);
  }
};
//# sourceMappingURL=Option.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/ReadonlyArray.mjs
/**
 * @since 1.0.0
 */
/** @internal */
const isNonEmptyArray = self => self.length > 0;
//# sourceMappingURL=ReadonlyArray.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/ReadonlyRecord.mjs
/**
 * This module provides utility functions for working with records in TypeScript.
 *
 * @since 1.0.0
 */



// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * Creates a new, empty record.
 *
 * @category constructors
 * @since 1.0.0
 */
const ReadonlyRecord_empty = () => ({});
// -------------------------------------------------------------------------------------
// guards
// -------------------------------------------------------------------------------------
/**
 * Determine if a `Record` is empty.
 *
 * @param self - `Record` to test for emptiness.
 *
 * @example
 * import { isEmptyRecord } from "@effect/data/ReadonlyRecord"
 *
 * assert.deepStrictEqual(isEmptyRecord({}), true);
 * assert.deepStrictEqual(isEmptyRecord({ a: 3 }), false);
 *
 * @category guards
 * @since 1.0.0
 */
const isEmptyRecord = self => {
  for (const k in self) {
    if (has(self, k)) {
      return false;
    }
  }
  return true;
};
/**
 * Determine if a `ReadonlyRecord` is empty.
 *
 * @param self - `ReadonlyRecord` to test for emptiness.
 *
 * @example
 * import { isEmptyReadonlyRecord } from "@effect/data/ReadonlyRecord"
 *
 * assert.deepStrictEqual(isEmptyReadonlyRecord({}), true);
 * assert.deepStrictEqual(isEmptyReadonlyRecord({ a: 3 }), false);
 *
 * @category guards
 * @since 1.0.0
 */
const isEmptyReadonlyRecord = (/* unused pure expression or super */ null && (isEmptyRecord));
// -------------------------------------------------------------------------------------
// conversions
// -------------------------------------------------------------------------------------
/**
 * Takes an iterable and a projection function and returns a record.
 * The projection function maps each value of the iterable to a tuple of a key and a value, which is then added to the resulting record.
 *
 * @param self - An iterable of values to be mapped to a record.
 * @param f - A projection function that maps values of the iterable to a tuple of a key and a value.
 *
 * @example
 * import { fromIterable } from '@effect/data/ReadonlyRecord'
 *
 * const input = [1, 2, 3, 4]
 *
 * assert.deepStrictEqual(
 *   fromIterable(input, a => [String(a), a * 2]),
 *   { '1': 2, '2': 4, '3': 6, '4': 8 }
 * )
 *
 * @category conversions
 * @since 1.0.0
 */
const ReadonlyRecord_fromIterable = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const out = {};
  for (const a of self) {
    const [k, b] = f(a);
    out[k] = b;
  }
  return out;
})));
/**
 * Builds a record from an iterable of key-value pairs.
 *
 * If there are conflicting keys when using `fromEntries`, the last occurrence of the key/value pair will overwrite the
 * previous ones. So the resulting record will only have the value of the last occurrence of each key.
 *
 * @param self - The iterable of key-value pairs.
 *
 * @example
 * import { fromEntries } from '@effect/data/ReadonlyRecord'
 *
 * const input: Array<[string, number]> = [["a", 1], ["b", 2]]
 *
 * assert.deepStrictEqual(fromEntries(input), { a: 1, b: 2 })
 *
 * @category conversions
 * @since 1.0.0
 */
const fromEntries = /*#__PURE__*/(/* unused pure expression or super */ null && (ReadonlyRecord_fromIterable(identity)));
/**
 * Transforms the values of a `ReadonlyRecord` into an `Array` with a custom mapping function.
 *
 * @param self - The `ReadonlyRecord` to transform.
 * @param f - The custom mapping function to apply to each key/value of the `ReadonlyRecord`.
 *
 * @example
 * import { collect } from "@effect/data/ReadonlyRecord"
 *
 * const x = { a: 1, b: 2, c: 3 }
 * assert.deepStrictEqual(collect(x, (key, n) => [key, n]), [["a", 1], ["b", 2], ["c", 3]])
 *
 * @category conversions
 * @since 1.0.0
 */
const collect = /*#__PURE__*/Function_dual(2, (self, f) => {
  const out = [];
  for (const key of Object.keys(self)) {
    out.push(f(key, self[key]));
  }
  return out;
});
/**
 * Takes a record and returns an array of tuples containing its keys and values.
 *
 * @param self - The record to transform.
 *
 * @example
 * import { toEntries } from "@effect/data/ReadonlyRecord"
 *
 * const x = { a: 1, b: 2, c: 3 }
 * assert.deepStrictEqual(toEntries(x), [["a", 1], ["b", 2], ["c", 3]])
 *
 * @category conversions
 * @since 1.0.0
 */
const toEntries = /*#__PURE__*/collect((key, value) => [key, value]);
/**
 * Takes a record and returns an array of tuples containing its keys and values.
 *
 * Alias of {@link toEntries}.
 *
 * @param self - The record to transform.
 *
 * @example
 * import { toArray } from "@effect/data/ReadonlyRecord"
 *
 * const x = { a: 1, b: 2, c: 3 }
 * assert.deepStrictEqual(toArray(x), [["a", 1], ["b", 2], ["c", 3]])
 *
 * @category conversions
 * @since 1.0.0
 */
const ReadonlyRecord_toArray = (/* unused pure expression or super */ null && (toEntries));
// -------------------------------------------------------------------------------------
// utils
// -------------------------------------------------------------------------------------
/**
 * Returns the number of key/value pairs in a `ReadonlyRecord`.
 *
 * @param self - A `ReadonlyRecord` to calculate the number of key/value pairs in.
 *
 * @example
 * import { size } from "@effect/data/ReadonlyRecord";
 *
 * assert.deepStrictEqual(size({ a: "a", b: 1, c: true }), 3);
 *
 * @since 1.0.0
 */
const size = self => Object.keys(self).length;
/**
 * Check if a given `key` exists in a `ReadonlyRecord`.
 *
 * @param self - the `ReadonlyRecord` to look in.
 * @param key - the key to look for in the `ReadonlyRecord`.
 *
 * @example
 * import { has } from '@effect/data/ReadonlyRecord'
 *
 * assert.deepStrictEqual(has({ a: 1, b: 2 }, "a"), true);
 * assert.deepStrictEqual(has({ a: 1, b: 2 }, "c"), false);
 *
 * @since 1.0.0
 */
const has = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, key) => Object.prototype.hasOwnProperty.call(self, key))));
/**
 * Retrieve a value at a particular key from a `ReadonlyRecord`, returning it wrapped in an `Option`.
 *
 * @param self - The `ReadonlyRecord` to retrieve value from.
 * @param key - Key to retrieve from `ReadonlyRecord`.
 *
 * @example
 * import { get } from "@effect/data/ReadonlyRecord"
 * import { some, none } from "@effect/data/Option"
 *
 * const person = { name: "John Doe", age: 35 }
 *
 * assert.deepStrictEqual(get(person, "name"), some("John Doe"))
 * assert.deepStrictEqual(get(person, "email"), none())
 *
 * @since 1.0.0
 */
const get = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, key) => has(self, key) ? O.some(self[key]) : O.none())));
/**
 * Apply a function to the element at the specified key, creating a new record,
 * or return `None` if the key doesn't exist.
 *
 * @param self - The `ReadonlyRecord` to be updated.
 * @param key - The key of the element to modify.
 * @param f - The function to apply to the element.
 *
 * @example
 * import { modifyOption } from "@effect/data/ReadonlyRecord"
 * import { some, none } from "@effect/data/Option"
 *
 * const f = (x: number) => x * 2
 *
 * assert.deepStrictEqual(
 *  modifyOption({ a: 3 }, 'a', f),
 *  some({ a: 6 })
 * )
 * assert.deepStrictEqual(
 *  modifyOption({ a: 3 }, 'b', f),
 *  none()
 * )
 *
 * @since 1.0.0
 */
const modifyOption = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, key, f) => {
  if (!has(self, key)) {
    return O.none();
  }
  const out = {
    ...self
  };
  out[key] = f(self[key]);
  return O.some(out);
})));
/**
 * Replaces a value in the record with the new value passed as parameter.
 *
 * @param self - The `ReadonlyRecord` to be updated.
 * @param key - The key to search for in the record.
 * @param b - The new value to replace the existing value with.
 *
 * @example
 * import { replaceOption } from "@effect/data/ReadonlyRecord"
 * import { some, none } from "@effect/data/Option"
 *
 * assert.deepStrictEqual(
 *   replaceOption({ a: 1, b: 2, c: 3 }, 'a', 10),
 *   some({ a: 10, b: 2, c: 3 })
 * )
 * assert.deepStrictEqual(replaceOption({}, 'a', 10), none())
 *
 * @since 1.0.0
 */
const replaceOption = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, key, b) => modifyOption(self, key, () => b))));
/**
 * Removes a key from a `ReadonlyRecord` and returns a new `Record`
 *
 * @param self - the `ReadonlyRecord` to remove the key from.
 * @param key - the key to remove from the `ReadonlyRecord`.
 *
 * @example
 * import { remove } from '@effect/data/ReadonlyRecord'
 *
 * assert.deepStrictEqual(remove({ a: 1, b: 2 }, "a"), { b: 2 })
 *
 * @since 1.0.0
 */
const remove = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, key) => {
  const out = {
    ...self
  };
  delete out[key];
  return out;
})));
/**
 * Retrieves the value of the property with the given `key` from a `ReadonlyRecord` and returns an `Option`
 * of a tuple with the value and the `ReadonlyRecord` with the removed property.
 * If the key is not present, returns `O.none`.
 *
 * @param self - The input `ReadonlyRecord`.
 * @param key - The key of the property to retrieve.
 *
 * @example
 * import { pop } from '@effect/data/ReadonlyRecord'
 * import { some, none } from '@effect/data/Option'
 *
 * assert.deepStrictEqual(pop({ a: 1, b: 2 }, "a"), some([1, { b: 2 }]))
 * assert.deepStrictEqual(pop({ a: 1, b: 2 }, "c"), none())
 *
 * @category record
 * @since 1.0.0
 */
const pop = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, key) => has(self, key) ? O.some([self[key], remove(self, key)]) : O.none())));
/**
 * Maps a `ReadonlyRecord` into another `Record` by applying a transformation function to each of its values.
 *
 * @param self - The `ReadonlyRecord` to be mapped.
 * @param f - A transformation function that will be applied to each of the values in the `ReadonlyRecord`.
 *
 * @example
 * import { map } from "@effect/data/ReadonlyRecord"
 *
 * const f = (n: number) => `-${n}`
 *
 * assert.deepStrictEqual(map({ a: 3, b: 5 }, f), { a: "-3", b: "-5" })
 *
 * const g = (n: number, key: string) => `${key.toUpperCase()}-${n}`
 *
 * assert.deepStrictEqual(map({ a: 3, b: 5 }, g), { a: "A-3", b: "B-5" })
 *
 * @since 1.0.0
 */
const ReadonlyRecord_map = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const out = {};
  for (const key of Object.keys(self)) {
    out[key] = f(self[key], key);
  }
  return out;
})));
/**
 * Transforms a `ReadonlyRecord` into a `Record` by applying the function `f` to each key and value in the original `ReadonlyRecord`.
 * If the function returns `Some`, the key-value pair is included in the output `Record`.
 *
 * @param self - The input `ReadonlyRecord`.
 * @param f - The transformation function.
 *
 * @example
 * import { filterMap } from '@effect/data/ReadonlyRecord'
 * import { some, none } from '@effect/data/Option'
 *
 * const x = { a: 1, b: 2, c: 3 }
 * const f = (a: number, key: string) => a > 2 ? some(a * 2) : none()
 * assert.deepStrictEqual(filterMap(x, f), { c: 6 })
 *
 * @since 1.0.0
 */
const ReadonlyRecord_filterMap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const out = {};
  for (const key of Object.keys(self)) {
    const o = f(self[key], key);
    if (O.isSome(o)) {
      out[key] = o.value;
    }
  }
  return out;
})));
/**
 * Selects properties from a record whose values match the given predicate.
 *
 * @param self - The `ReadonlyRecord` to filter.
 * @param predicate - A function that returns a `boolean` value to determine if the entry should be included in the new record.
 *
 * @example
 * import { filter } from '@effect/data/ReadonlyRecord'
 *
 * const x = { a: 1, b: 2, c: 3, d: 4 }
 * assert.deepStrictEqual(filter(x, (n) => n > 2), { c: 3, d: 4 })
 *
 * @category filtering
 * @since 1.0.0
 */
const ReadonlyRecord_filter = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => {
  const out = {};
  for (const key of Object.keys(self)) {
    if (predicate(self[key], key)) {
      out[key] = self[key];
    }
  }
  return out;
})));
/**
 * Given a `ReadonlyRecord` with `Option` values, returns a `Record` with only the `Some` values, with the same keys.
 *
 * @param self - A `ReadonlyRecord` with `Option` values.
 *
 * @example
 * import { compact } from '@effect/data/ReadonlyRecord'
 * import { some, none } from '@effect/data/Option'
 *
 * assert.deepStrictEqual(
 *   compact({ a: some(1), b: none(), c: some(2) }),
 *   { a: 1, c: 2 }
 * )
 *
 * @category filtering
 * @since 1.0.0
 */
const compact = /*#__PURE__*/(/* unused pure expression or super */ null && (ReadonlyRecord_filterMap(identity)));
/**
 * Partitions the elements of a `ReadonlyRecord` into two groups: those that match a predicate, and those that don't.
 *
 * @param self - The `ReadonlyRecord` to partition.
 * @param f - The predicate function to apply to each element.
 *
 * @example
 * import { partitionMap } from '@effect/data/ReadonlyRecord'
 * import { left, right } from '@effect/data/Either'
 *
 * const x = { a: 1, b: 2, c: 3 }
 * const f = (n: number) => (n % 2 === 0 ? right(n) : left(n))
 * assert.deepStrictEqual(partitionMap(x, f), [{ a: 1, c: 3 }, { b: 2}])
 *
 * @category filtering
 * @since 1.0.0
 */
const ReadonlyRecord_partitionMap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const left = {};
  const right = {};
  for (const key of Object.keys(self)) {
    const e = f(self[key], key);
    if (E.isLeft(e)) {
      left[key] = e.left;
    } else {
      right[key] = e.right;
    }
  }
  return [left, right];
})));
/**
 * Partitions a `ReadonlyRecord` of `Either` values into two separate records,
 * one with the `Left` values and one with the `Right` values.
 *
 * @param self - the `ReadonlyRecord` to partition.
 *
 * @example
 * import { separate } from '@effect/data/ReadonlyRecord'
 * import { left, right } from '@effect/data/Either'
 *
 * assert.deepStrictEqual(
 *   separate({ a: left("e"), b: right(1) }),
 *   [{ a: "e" }, { b: 1 }]
 * )
 *
 * @category filtering
 * @since 1.0.0
 */
const separate = /*#__PURE__*/(/* unused pure expression or super */ null && (ReadonlyRecord_partitionMap(identity)));
/**
 * Partitions a `ReadonlyRecord` into two separate `Record`s based on the result of a predicate function.
 *
 * @param self - The input `ReadonlyRecord` to partition.
 * @param predicate - The partitioning function to determine the partitioning of each value of the `ReadonlyRecord`.
 *
 * @example
 * import { partition } from '@effect/data/ReadonlyRecord'
 *
 * assert.deepStrictEqual(
 *   partition({ a: 1, b: 3 }, (n) => n > 2),
 *   [{ a: 1 }, { b: 3 }]
 * )
 *
 * @category filtering
 * @since 1.0.0
 */
const partition = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => {
  const left = {};
  const right = {};
  for (const key of Object.keys(self)) {
    if (predicate(self[key], key)) {
      right[key] = self[key];
    } else {
      left[key] = self[key];
    }
  }
  return [left, right];
})));
//# sourceMappingURL=ReadonlyRecord.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/ReadonlyArray.mjs
/**
 * This module provides utility functions for working with arrays in TypeScript.
 *
 * @since 1.0.0
 */








/**
 * Builds a `NonEmptyArray` from an non-empty collection of elements.
 *
 * @category constructors
 * @since 1.0.0
 */
const ReadonlyArray_make = (...elements) => elements;
/**
 * Return a `NonEmptyArray` of length `n` with element `i` initialized with `f(i)`.
 *
 * **Note**. `n` is normalized to an integer >= 1.
 *
 * @example
 * import { makeBy } from '@effect/data/ReadonlyArray'
 *
 * assert.deepStrictEqual(makeBy(5, n => n * 2), [0, 2, 4, 6, 8])
 *
 * @category constructors
 * @since 1.0.0
 */
const makeBy = (n, f) => {
  const max = Math.max(1, Math.floor(n));
  const out = [f(0)];
  for (let i = 1; i < max; i++) {
    out.push(f(i));
  }
  return out;
};
/**
 * Return a `NonEmptyArray` containing a range of integers, including both endpoints.
 *
 * @example
 * import { range } from '@effect/data/ReadonlyArray'
 *
 * assert.deepStrictEqual(range(1, 3), [1, 2, 3])
 *
 * @category constructors
 * @since 1.0.0
 */
const range = (start, end) => start <= end ? makeBy(end - start + 1, i => start + i) : [start];
/**
 * Return a `NonEmptyArray` containing a value repeated the specified number of times.
 *
 * **Note**. `n` is normalized to an integer >= 1.
 *
 * @example
 * import { replicate } from '@effect/data/ReadonlyArray'
 *
 * assert.deepStrictEqual(replicate("a", 3), ["a", "a", "a"])
 *
 * @category constructors
 * @since 1.0.0
 */
const replicate = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (a, n) => makeBy(n, () => a))));
/**
 * @category conversions
 * @since 1.0.0
 */
const ReadonlyArray_fromIterable = collection => Array.isArray(collection) ? collection : Array.from(collection);
/**
 * Takes a record and returns an array of tuples containing its keys and values.
 *
 * @param self - The record to transform.
 *
 * @example
 * import { fromRecord } from "@effect/data/ReadonlyArray"
 *
 * const x = { a: 1, b: 2, c: 3 }
 * assert.deepStrictEqual(fromRecord(x), [["a", 1], ["b", 2], ["c", 3]])
 *
 * @category conversions
 * @since 1.0.0
 */
const fromRecord = toEntries;
/**
 * @category conversions
 * @since 1.0.0
 */
const ReadonlyArray_fromOption = toArray;
/**
 * @category pattern matching
 * @since 1.0.0
 */
const ReadonlyArray_match = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, {
  onEmpty,
  onNonEmpty
}) => isNonEmptyReadonlyArray(self) ? onNonEmpty(self) : onEmpty())));
/**
 * @category pattern matching
 * @since 1.0.0
 */
const matchLeft = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, {
  onEmpty,
  onNonEmpty
}) => isNonEmptyReadonlyArray(self) ? onNonEmpty(headNonEmpty(self), tailNonEmpty(self)) : onEmpty())));
/**
 * @category pattern matching
 * @since 1.0.0
 */
const matchRight = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, {
  onEmpty,
  onNonEmpty
}) => isNonEmptyReadonlyArray(self) ? onNonEmpty(initNonEmpty(self), lastNonEmpty(self)) : onEmpty())));
/**
 * Prepend an element to the front of an `Iterable`, creating a new `NonEmptyArray`.
 *
 * @category concatenating
 * @since 1.0.0
 */
const prepend = /*#__PURE__*/Function_dual(2, (self, head) => [head, ...self]);
/**
 * @category concatenating
 * @since 1.0.0
 */
const prependAll = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => ReadonlyArray_fromIterable(that).concat(ReadonlyArray_fromIterable(self)))));
/**
 * @category concatenating
 * @since 1.0.0
 */
const prependAllNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => prependAll(self, that))));
/**
 * Append an element to the end of an `Iterable`, creating a new `NonEmptyArray`.
 *
 * @category concatenating
 * @since 1.0.0
 */
const append = /*#__PURE__*/Function_dual(2, (self, last) => [...self, last]);
/**
 * @category concatenating
 * @since 1.0.0
 */
const appendAll = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => ReadonlyArray_fromIterable(self).concat(ReadonlyArray_fromIterable(that)))));
/**
 * @category concatenating
 * @since 1.0.0
 */
const appendAllNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => appendAll(self, that))));
/**
 * Reduce an `Iterable` from the left, keeping all intermediate results instead of only the final result.
 *
 * @category folding
 * @since 1.0.0
 */
const scan = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, b, f) => {
  const out = [b];
  let i = 0;
  for (const a of self) {
    out[i + 1] = f(out[i], a);
    i++;
  }
  return out;
})));
/**
 * Reduce an `Iterable` from the right, keeping all intermediate results instead of only the final result.
 *
 * @category folding
 * @since 1.0.0
 */
const scanRight = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, b, f) => {
  const input = ReadonlyArray_fromIterable(self);
  const out = new Array(input.length + 1);
  out[input.length] = b;
  for (let i = input.length - 1; i >= 0; i--) {
    out[i] = f(out[i + 1], input[i]);
  }
  return out;
})));
/**
 * Determine if an `Array` is empty narrowing down the type to `[]`.
 *
 * @param self - The `Array` to check.
 *
 * @example
 * import { isEmptyArray } from "@effect/data/ReadonlyArray"
 *
 * assert.deepStrictEqual(isEmptyArray([]), true);
 * assert.deepStrictEqual(isEmptyArray([1, 2, 3]), false);
 *
 * @category guards
 * @since 1.0.0
 */
const isEmptyArray = self => self.length === 0;
/**
 * Determine if a `ReadonlyArray` is empty narrowing down the type to `readonly []`.
 *
 * @param self - The `ReadonlyArray` to check.
 *
 * @example
 * import { isEmptyReadonlyArray } from "@effect/data/ReadonlyArray"
 *
 * assert.deepStrictEqual(isEmptyReadonlyArray([]), true);
 * assert.deepStrictEqual(isEmptyReadonlyArray([1, 2, 3]), false);
 *
 * @category guards
 * @since 1.0.0
 */
const isEmptyReadonlyArray = isEmptyArray;
/**
 * Determine if an `Array` is non empty narrowing down the type to `NonEmptyArray`.
 *
 * An `Array` is considered to be a `NonEmptyArray` if it contains at least one element.
 *
 * @param self - The `Array` to check.
 *
 * @example
 * import { isNonEmptyArray } from "@effect/data/ReadonlyArray"
 *
 * assert.deepStrictEqual(isNonEmptyArray([]), false);
 * assert.deepStrictEqual(isNonEmptyArray([1, 2, 3]), true);
 *
 * @category guards
 * @since 1.0.0
 */
const ReadonlyArray_isNonEmptyArray = isNonEmptyArray;
/**
 * Determine if a `ReadonlyArray` is non empty narrowing down the type to `NonEmptyReadonlyArray`.
 *
 * A `ReadonlyArray` is considered to be a `NonEmptyReadonlyArray` if it contains at least one element.
 *
 * @param self - The `ReadonlyArray` to check.
 *
 * @example
 * import { isNonEmptyReadonlyArray } from "@effect/data/ReadonlyArray"
 *
 * assert.deepStrictEqual(isNonEmptyReadonlyArray([]), false);
 * assert.deepStrictEqual(isNonEmptyReadonlyArray([1, 2, 3]), true);
 *
 * @category guards
 * @since 1.0.0
 */
const isNonEmptyReadonlyArray = isNonEmptyArray;
/**
 * Return the number of elements in a `ReadonlyArray`.
 *
 * @category getters
 * @since 1.0.0
 */
const ReadonlyArray_length = self => self.length;
const isOutOfBound = (i, as) => i < 0 || i >= as.length;
const ReadonlyArray_clamp = (i, as) => Math.floor(Math.min(Math.max(0, i), as.length));
/**
 * This function provides a safe way to read a value at a particular index from a `ReadonlyArray`.
 *
 * @category getters
 * @since 1.0.0
 */
const ReadonlyArray_get = /*#__PURE__*/Function_dual(2, (self, index) => {
  const i = Math.floor(index);
  return isOutOfBound(i, self) ? Option_none() : mjs_Option_some(self[i]);
});
/**
 * Gets an element unsafely, will throw on out of bounds.
 *
 * @since 1.0.0
 * @category unsafe
 */
const unsafeGet = /*#__PURE__*/Function_dual(2, (self, index) => {
  const i = Math.floor(index);
  if (isOutOfBound(i, self)) {
    throw new Error(`Index ${i} out of bounds`);
  }
  return self[i];
});
/**
 * Return a tuple containing the first element, and a new `Array` of the remaining elements, if any.
 *
 * @category getters
 * @since 1.0.0
 */
const unprepend = self => [headNonEmpty(self), tailNonEmpty(self)];
/**
 * Return a tuple containing a copy of the `NonEmptyReadonlyArray` without its last element, and that last element.
 *
 * @category getters
 * @since 1.0.0
 */
const unappend = self => [initNonEmpty(self), lastNonEmpty(self)];
/**
 * Get the first element of a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.
 *
 * @category getters
 * @since 1.0.0
 */
const head = /*#__PURE__*/ReadonlyArray_get(0);
/**
 * @category getters
 * @since 1.0.0
 */
const headNonEmpty = /*#__PURE__*/unsafeGet(0);
/**
 * Get the last element in a `ReadonlyArray`, or `None` if the `ReadonlyArray` is empty.
 *
 * @category getters
 * @since 1.0.0
 */
const last = self => isNonEmptyReadonlyArray(self) ? mjs_Option_some(lastNonEmpty(self)) : Option_none();
/**
 * @category getters
 * @since 1.0.0
 */
const lastNonEmpty = self => self[self.length - 1];
/**
 * Get all but the first element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.
 *
 * @category getters
 * @since 1.0.0
 */
const tail = self => {
  const input = ReadonlyArray_fromIterable(self);
  return isNonEmptyReadonlyArray(input) ? O.some(tailNonEmpty(input)) : O.none();
};
/**
 * @category getters
 * @since 1.0.0
 */
const tailNonEmpty = self => self.slice(1);
/**
 * Get all but the last element of an `Iterable`, creating a new `Array`, or `None` if the `Iterable` is empty.
 *
 * @category getters
 * @since 1.0.0
 */
const init = self => {
  const input = ReadonlyArray_fromIterable(self);
  return isNonEmptyReadonlyArray(input) ? O.some(initNonEmpty(input)) : O.none();
};
/**
 * Get all but the last element of a non empty array, creating a new array.
 *
 * @category getters
 * @since 1.0.0
 */
const initNonEmpty = self => self.slice(0, -1);
/**
 * Keep only a max number of elements from the start of an `Iterable`, creating a new `Array`.
 *
 * **Note**. `n` is normalized to a non negative integer.
 *
 * @category getters
 * @since 1.0.0
 */
const take = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => {
  const input = ReadonlyArray_fromIterable(self);
  return input.slice(0, ReadonlyArray_clamp(n, input));
})));
/**
 * Keep only a max number of elements from the end of an `Iterable`, creating a new `Array`.
 *
 * **Note**. `n` is normalized to a non negative integer.
 *
 * @category getters
 * @since 1.0.0
 */
const takeRight = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => {
  const input = ReadonlyArray_fromIterable(self);
  const i = ReadonlyArray_clamp(n, input);
  return i === 0 ? [] : input.slice(-i);
})));
/**
 * Calculate the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.
 *
 * @category getters
 * @since 1.0.0
 */
const takeWhile = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => {
  const out = [];
  for (const a of self) {
    if (!predicate(a)) {
      break;
    }
    out.push(a);
  }
  return out;
})));
const spanIndex = (self, predicate) => {
  let i = 0;
  for (const a of self) {
    if (!predicate(a)) {
      break;
    }
    i++;
  }
  return i;
};
/**
 * Split an `Iterable` into two parts:
 *
 * 1. the longest initial subarray for which all elements satisfy the specified predicate
 * 2. the remaining elements
 *
 * @category filtering
 * @since 1.0.0
 */
const span = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => splitAt(self, spanIndex(self, predicate)))));
/**
 * Drop a max number of elements from the start of an `Iterable`, creating a new `Array`.
 *
 * **Note**. `n` is normalized to a non negative integer.
 *
 * @category getters
 * @since 1.0.0
 */
const drop = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => {
  const input = ReadonlyArray_fromIterable(self);
  return input.slice(ReadonlyArray_clamp(n, input), input.length);
})));
/**
 * Drop a max number of elements from the end of an `Iterable`, creating a new `Array`.
 *
 * **Note**. `n` is normalized to a non negative integer.
 *
 * @category getters
 * @since 1.0.0
 */
const dropRight = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => {
  const input = ReadonlyArray_fromIterable(self);
  return input.slice(0, input.length - ReadonlyArray_clamp(n, input));
})));
/**
 * Remove the longest initial subarray for which all element satisfy the specified predicate, creating a new `Array`.
 *
 * @category getters
 * @since 1.0.0
 */
const dropWhile = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => ReadonlyArray_fromIterable(self).slice(spanIndex(self, predicate)))));
/**
 * Return the first index for which a predicate holds.
 *
 * @category elements
 * @since 1.0.0
 */
const findFirstIndex = /*#__PURE__*/Function_dual(2, (self, predicate) => {
  let i = 0;
  for (const a of self) {
    if (predicate(a)) {
      return mjs_Option_some(i);
    }
    i++;
  }
  return Option_none();
});
/**
 * Return the last index for which a predicate holds.
 *
 * @category elements
 * @since 1.0.0
 */
const findLastIndex = /*#__PURE__*/Function_dual(2, (self, predicate) => {
  const input = ReadonlyArray_fromIterable(self);
  for (let i = input.length - 1; i >= 0; i--) {
    if (predicate(input[i])) {
      return mjs_Option_some(i);
    }
  }
  return Option_none();
});
/**
 * Returns the first element that satisfies the specified
 * predicate, or `None` if no such element exists.
 *
 * @category elements
 * @since 1.0.0
 */
const findFirst = /*#__PURE__*/Function_dual(2, (self, predicate) => {
  const input = ReadonlyArray_fromIterable(self);
  for (let i = 0; i < input.length; i++) {
    if (predicate(input[i])) {
      return mjs_Option_some(input[i]);
    }
  }
  return Option_none();
});
/**
 * Find the last element for which a predicate holds.
 *
 * @category elements
 * @since 1.0.0
 */
const findLast = /*#__PURE__*/Function_dual(2, (self, predicate) => {
  const input = ReadonlyArray_fromIterable(self);
  for (let i = input.length - 1; i >= 0; i--) {
    if (predicate(input[i])) {
      return mjs_Option_some(input[i]);
    }
  }
  return Option_none();
});
/**
 * Insert an element at the specified index, creating a new `NonEmptyArray`,
 * or return `None` if the index is out of bounds.
 *
 * @since 1.0.0
 */
const insertAt = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, i, b) => {
  const out = Array.from(self);
  //             v--- `= self.length` is ok, it means inserting in last position
  if (i < 0 || i > out.length) {
    return O.none();
  }
  out.splice(i, 0, b);
  return O.some(out);
})));
/**
 * Change the element at the specified index, creating a new `Array`,
 * or return a copy of the input if the index is out of bounds.
 *
 * @since 1.0.0
 */
const replace = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, i, b) => modify(self, i, () => b))));
/**
 * @since 1.0.0
 */
const ReadonlyArray_replaceOption = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, i, b) => ReadonlyArray_modifyOption(self, i, () => b))));
/**
 * Apply a function to the element at the specified index, creating a new `Array`,
 * or return a copy of the input if the index is out of bounds.
 *
 * @since 1.0.0
 */
const modify = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, i, f) => O.getOrElse(ReadonlyArray_modifyOption(self, i, f), () => Array.from(self)))));
/**
 * Apply a function to the element at the specified index, creating a new `Array`,
 * or return `None` if the index is out of bounds.
 *
 * @since 1.0.0
 */
const ReadonlyArray_modifyOption = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, i, f) => {
  const out = Array.from(self);
  if (isOutOfBound(i, out)) {
    return O.none();
  }
  const next = f(out[i]);
  // @ts-expect-error
  out[i] = next;
  return O.some(out);
})));
/**
 * Delete the element at the specified index, creating a new `Array`,
 * or return a copy of the input if the index is out of bounds.
 *
 * @since 1.0.0
 */
const ReadonlyArray_remove = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, i) => {
  const out = Array.from(self);
  if (isOutOfBound(i, out)) {
    return out;
  }
  out.splice(i, 1);
  return out;
})));
/**
 * Reverse an `Iterable`, creating a new `Array`.
 *
 * @category elements
 * @since 1.0.0
 */
const ReadonlyArray_reverse = self => Array.from(self).reverse();
/**
 * @category elements
 * @since 1.0.0
 */
const reverseNonEmpty = self => [lastNonEmpty(self), ...self.slice(0, -1).reverse()];
/**
 * Sort the elements of an `Iterable` in increasing order, creating a new `Array`.
 *
 * @category sorting
 * @since 1.0.0
 */
const sort = /*#__PURE__*/Function_dual(2, (self, O) => {
  const out = Array.from(self);
  out.sort(O);
  return out;
});
/**
 * @since 1.0.0
 * @category elements
 */
const sortWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, f, order) => sort(self, Order.mapInput(order, f)))));
/**
 * Sort the elements of a `NonEmptyReadonlyArray` in increasing order, creating a new `NonEmptyArray`.
 *
 * @category sorting
 * @since 1.0.0
 */
const sortNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, O) => sort(O)(self))));
/**
 * Sort the elements of an `Iterable` in increasing order, where elements are compared
 * using first `orders[0]`, then `orders[1]`, etc...
 *
 * @category sorting
 * @since 1.0.0
 */
const sortBy = (...orders) => self => {
  const input = ReadonlyArray_fromIterable(self);
  return isNonEmptyReadonlyArray(input) ? sortByNonEmpty(...orders)(input) : [];
};
/**
 * @category sorting
 * @since 1.0.0
 */
const sortByNonEmpty = (...orders) => sortNonEmpty(Order.combineAll(orders));
/**
 * Takes two `Iterable`s and returns an `Array` of corresponding pairs.
 * If one input `Iterable` is short, excess elements of the
 * longer `Iterable` are discarded.
 *
 * @since 1.0.0
 */
const zip = /*#__PURE__*/Function_dual(2, (self, that) => ReadonlyArray_zipWith(self, that, (a, b) => [a, b]));
/**
 * Apply a function to pairs of elements at the same index in two `Iterable`s, collecting the results in a new `Array`. If one
 * input `Iterable` is short, excess elements of the longer `Iterable` are discarded.
 *
 * @since 1.0.0
 */
const ReadonlyArray_zipWith = /*#__PURE__*/Function_dual(3, (self, that, f) => {
  const as = ReadonlyArray_fromIterable(self);
  const bs = ReadonlyArray_fromIterable(that);
  return isNonEmptyReadonlyArray(as) && isNonEmptyReadonlyArray(bs) ? zipNonEmptyWith(bs, f)(as) : [];
});
/**
 * @since 1.0.0
 */
const zipNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => zipNonEmptyWith(self, that, (a, b) => [a, b]))));
/**
 * @since 1.0.0
 */
const zipNonEmptyWith = /*#__PURE__*/Function_dual(3, (self, that, f) => {
  const cs = [f(headNonEmpty(self), headNonEmpty(that))];
  const len = Math.min(self.length, that.length);
  for (let i = 1; i < len; i++) {
    cs[i] = f(self[i], that[i]);
  }
  return cs;
});
/**
 * This function is the inverse of `zip`. Takes an `Iterable` of pairs and return two corresponding `Array`s.
 *
 * @since 1.0.0
 */
const unzip = self => {
  const input = ReadonlyArray_fromIterable(self);
  return isNonEmptyReadonlyArray(input) ? unzipNonEmpty(input) : [[], []];
};
/**
 * @since 1.0.0
 */
const unzipNonEmpty = self => {
  const fa = [self[0][0]];
  const fb = [self[0][1]];
  for (let i = 1; i < self.length; i++) {
    fa[i] = self[i][0];
    fb[i] = self[i][1];
  }
  return [fa, fb];
};
/**
 * Places an element in between members of an `Iterable`
 *
 * @since 1.0.0
 */
const intersperse = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, middle) => {
  const input = ReadonlyArray_fromIterable(self);
  return isNonEmptyReadonlyArray(input) ? intersperseNonEmpty(input, middle) : [];
})));
/**
 * Places an element in between members of a `NonEmptyReadonlyArray`
 *
 * @since 1.0.0
 */
const intersperseNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, middle) => {
  const out = [headNonEmpty(self)];
  const tail = tailNonEmpty(self);
  for (let i = 0; i < tail.length; i++) {
    if (i < tail.length) {
      out.push(middle);
    }
    out.push(tail[i]);
  }
  return out;
})));
/**
 * Apply a function to the head, creating a new `NonEmptyReadonlyArray`.
 *
 * @since 1.0.0
 */
const modifyNonEmptyHead = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => [f(headNonEmpty(self)), ...tailNonEmpty(self)])));
/**
 * Change the head, creating a new `NonEmptyReadonlyArray`.
 *
 * @since 1.0.0
 */
const setNonEmptyHead = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, b) => modifyNonEmptyHead(self, () => b))));
/**
 * Apply a function to the last element, creating a new `NonEmptyReadonlyArray`.
 *
 * @since 1.0.0
 */
const modifyNonEmptyLast = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => append(initNonEmpty(self), f(lastNonEmpty(self))))));
/**
 * Change the last element, creating a new `NonEmptyReadonlyArray`.
 *
 * @since 1.0.0
 */
const setNonEmptyLast = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, b) => modifyNonEmptyLast(self, () => b))));
/**
 * Rotate an `Iterable` by `n` steps.
 *
 * @since 1.0.0
 */
const rotate = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => {
  const input = ReadonlyArray_fromIterable(self);
  return isNonEmptyReadonlyArray(input) ? rotateNonEmpty(input, n) : [];
})));
/**
 * Rotate a `NonEmptyReadonlyArray` by `n` steps.
 *
 * @since 1.0.0
 */
const rotateNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => {
  const len = self.length;
  const m = Math.round(n) % len;
  if (isOutOfBound(Math.abs(m), self) || m === 0) {
    return copy(self);
  }
  if (m < 0) {
    const [f, s] = splitNonEmptyAt(self, -m);
    return appendAllNonEmpty(s, f);
  } else {
    return rotateNonEmpty(self, m - len);
  }
})));
/**
 * Returns a function that checks if a `ReadonlyArray` contains a given value using a provided `isEquivalent` function.
 *
 * @category elements
 * @since 1.0.0
 */
const ReadonlyArray_containsWith = isEquivalent => Function_dual(2, (self, a) => {
  for (const i of self) {
    if (isEquivalent(a, i)) {
      return true;
    }
  }
  return false;
});
const ReadonlyArray_equivalence = /*#__PURE__*/equivalence();
/**
 * Returns a function that checks if a `ReadonlyArray` contains a given value using the default `Equivalence`.
 *
 * @category elements
 * @since 1.0.0
 */
const ReadonlyArray_contains = /*#__PURE__*/ReadonlyArray_containsWith(ReadonlyArray_equivalence);
/**
 * Remove duplicates from a `NonEmptyReadonlyArray`, keeping the first occurrence of an element using the provided `isEquivalent` function.
 *
 * @since 1.0.0
 */
const dedupeNonEmptyWith = /*#__PURE__*/Function_dual(2, (self, isEquivalent) => {
  const out = [headNonEmpty(self)];
  const rest = tailNonEmpty(self);
  for (const a of rest) {
    if (out.every(o => !isEquivalent(a, o))) {
      out.push(a);
    }
  }
  return out;
});
/**
 * Remove duplicates from a `NonEmptyReadonlyArray`, keeping the first occurrence of an element.
 *
 * @since 1.0.0
 */
const dedupeNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (dedupeNonEmptyWith( /*#__PURE__*/Equal.equivalence())));
/**
 * A useful recursion pattern for processing an `Iterable` to produce a new `Array`, often used for "chopping" up the input
 * `Iterable`. Typically chop is called with some function that will consume an initial prefix of the `Iterable` and produce a
 * value and the rest of the `Array`.
 *
 * @since 1.0.0
 */
const chop = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const input = ReadonlyArray_fromIterable(self);
  return isNonEmptyReadonlyArray(input) ? chopNonEmpty(input, f) : [];
})));
/**
 * A useful recursion pattern for processing a `NonEmptyReadonlyArray` to produce a new `NonEmptyReadonlyArray`, often used for "chopping" up the input
 * `NonEmptyReadonlyArray`. Typically `chop` is called with some function that will consume an initial prefix of the `NonEmptyReadonlyArray` and produce a
 * value and the tail of the `NonEmptyReadonlyArray`.
 *
 * @since 1.0.0
 */
const chopNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const [b, rest] = f(self);
  const out = [b];
  let next = rest;
  while (readonlyArray.isNonEmptyArray(next)) {
    const [b, rest] = f(next);
    out.push(b);
    next = rest;
  }
  return out;
})));
/**
 * Splits an `Iterable` into two pieces, the first piece has max `n` elements.
 *
 * @category getters
 * @since 1.0.0
 */
const splitAt = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => {
  const input = Array.from(self);
  return n >= 1 && isNonEmptyReadonlyArray(input) ? splitNonEmptyAt(input, n) : isEmptyReadonlyArray(input) ? [input, []] : [[], input];
})));
/**
 * @since 1.0.0
 */
const copy = self => self.slice();
/**
 * Splits a `NonEmptyReadonlyArray` into two pieces, the first piece has max `n` elements.
 *
 * @category getters
 * @since 1.0.0
 */
const splitNonEmptyAt = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => {
  const m = Math.max(1, n);
  return m >= self.length ? [copy(self), []] : [prepend(self.slice(1, m), headNonEmpty(self)), self.slice(m)];
})));
/**
 * Splits an `Iterable` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of
 * the `Iterable`. Note that `chunksOf(n)([])` is `[]`, not `[[]]`. This is intentional, and is consistent with a recursive
 * definition of `chunksOf`; it satisfies the property that
 *
 * ```ts
 * chunksOf(n)(xs).concat(chunksOf(n)(ys)) == chunksOf(n)(xs.concat(ys)))
 * ```
 *
 * whenever `n` evenly divides the length of `self`.
 *
 * @category getters
 * @since 1.0.0
 */
const chunksOf = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => {
  const input = ReadonlyArray_fromIterable(self);
  return isNonEmptyReadonlyArray(input) ? chunksOfNonEmpty(input, n) : [];
})));
/**
 * Splits a `NonEmptyReadonlyArray` into length-`n` pieces. The last piece will be shorter if `n` does not evenly divide the length of
 * the `NonEmptyReadonlyArray`.
 *
 * @category getters
 * @since 1.0.0
 */
const chunksOfNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => chopNonEmpty(self, splitNonEmptyAt(n)))));
/**
 * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s using the provided `isEquivalent` function.
 *
 * @category grouping
 * @since 1.0.0
 */
const groupWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, isEquivalent) => chopNonEmpty(self, as => {
  const h = headNonEmpty(as);
  const out = [h];
  let i = 1;
  for (; i < as.length; i++) {
    const a = as[i];
    if (isEquivalent(a, h)) {
      out.push(a);
    } else {
      break;
    }
  }
  return [out, as.slice(i)];
}))));
/**
 * Group equal, consecutive elements of a `NonEmptyReadonlyArray` into `NonEmptyArray`s.
 *
 * @category grouping
 * @since 1.0.0
 */
const group = /*#__PURE__*/(/* unused pure expression or super */ null && (groupWith( /*#__PURE__*/Equal.equivalence())));
/**
 * Splits an `Iterable` into sub-non-empty-arrays stored in an object, based on the result of calling a `string`-returning
 * function on each element, and grouping the results according to values returned
 *
 * @category grouping
 * @since 1.0.0
 */
const groupBy = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const out = {};
  for (const a of self) {
    const k = f(a);
    if (Object.prototype.hasOwnProperty.call(out, k)) {
      out[k].push(a);
    } else {
      out[k] = [a];
    }
  }
  return out;
})));
/**
 * @since 1.0.0
 */
const unionWith = isEquivalent => dual(2, (self, that) => {
  const a = ReadonlyArray_fromIterable(self);
  const b = ReadonlyArray_fromIterable(that);
  return isNonEmptyReadonlyArray(a) && isNonEmptyReadonlyArray(b) ? unionNonEmptyWith(isEquivalent)(a, b) : isNonEmptyReadonlyArray(a) ? a : b;
});
/**
 * @since 1.0.0
 */
const union = /*#__PURE__*/(/* unused pure expression or super */ null && (unionWith(ReadonlyArray_equivalence)));
/**
 * @since 1.0.0
 */
const unionNonEmptyWith = isEquivalent => {
  const dedupe = dedupeNonEmptyWith(isEquivalent);
  return dual(2, (self, that) => dedupe(appendAllNonEmpty(self, that)));
};
/**
 * @since 1.0.0
 */
const unionNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (unionNonEmptyWith(ReadonlyArray_equivalence)));
/**
 * Creates an `Array` of unique values that are included in all given `Iterable`s using the provided `isEquivalent` function.
 * The order and references of result values are determined by the first `Iterable`.
 *
 * @since 1.0.0
 */
const intersectionWith = isEquivalent => {
  const has = ReadonlyArray_containsWith(isEquivalent);
  return dual(2, (self, that) => ReadonlyArray_fromIterable(self).filter(a => has(that, a)));
};
/**
 * Creates an `Array` of unique values that are included in all given `Iterable`s.
 * The order and references of result values are determined by the first `Iterable`.
 *
 * @since 1.0.0
 */
const intersection = /*#__PURE__*/(/* unused pure expression or super */ null && (intersectionWith(ReadonlyArray_equivalence)));
/**
 * Creates a `Array` of values not included in the other given `Iterable` using the provided `isEquivalent` function.
 * The order and references of result values are determined by the first `Iterable`.
 *
 * @since 1.0.0
 */
const differenceWith = isEquivalent => {
  const has = ReadonlyArray_containsWith(isEquivalent);
  return dual(2, (self, that) => ReadonlyArray_fromIterable(self).filter(a => !has(that, a)));
};
/**
 * Creates a `Array` of values not included in the other given `Iterable` using the provided `isEquivalent` function.
 * The order and references of result values are determined by the first `Iterable`.
 *
 * @since 1.0.0
 */
const difference = /*#__PURE__*/(/* unused pure expression or super */ null && (differenceWith(ReadonlyArray_equivalence)));
/**
 * @category constructors
 * @since 1.0.0
 */
const ReadonlyArray_empty = () => [];
/**
 * Constructs a new `NonEmptyArray<A>` from the specified value.
 *
 * @category constructors
 * @since 1.0.0
 */
const of = a => [a];
/**
 * @category mapping
 * @since 1.0.0
 */
const ReadonlyArray_map = /*#__PURE__*/Function_dual(2, (self, f) => self.map(f));
/**
 * @category mapping
 * @since 1.0.0
 */
const mapNonEmpty = ReadonlyArray_map;
/**
 * @category sequencing
 * @since 1.0.0
 */
const ReadonlyArray_flatMap = /*#__PURE__*/Function_dual(2, (self, f) => {
  if (isEmptyReadonlyArray(self)) {
    return [];
  }
  const out = [];
  for (let i = 0; i < self.length; i++) {
    out.push(...f(self[i], i));
  }
  return out;
});
/**
 * @category sequencing
 * @since 1.0.0
 */
const flatMapNonEmpty = (/* unused pure expression or super */ null && (ReadonlyArray_flatMap));
/**
 * @category sequencing
 * @since 1.0.0
 */
const ReadonlyArray_flatten = /*#__PURE__*/ReadonlyArray_flatMap(Function_identity);
/**
 * @category sequencing
 * @since 1.0.0
 */
const flattenNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (flatMapNonEmpty(identity)));
/**
 * @category filtering
 * @since 1.0.0
 */
const ReadonlyArray_filterMap = /*#__PURE__*/Function_dual(2, (self, f) => {
  const as = ReadonlyArray_fromIterable(self);
  const out = [];
  for (let i = 0; i < as.length; i++) {
    const o = f(as[i], i);
    if (Option_isSome(o)) {
      out.push(o.value);
    }
  }
  return out;
});
/**
 * Transforms all elements of the `readonlyArray` for as long as the specified function returns some value
 *
 * @category filtering
 * @since 1.0.0
 */
const filterMapWhile = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const out = [];
  for (const a of self) {
    const b = f(a);
    if (O.isSome(b)) {
      out.push(b.value);
    } else {
      break;
    }
  }
  return out;
})));
/**
 * @category filtering
 * @since 1.0.0
 */
const ReadonlyArray_partitionMap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const left = [];
  const right = [];
  const as = ReadonlyArray_fromIterable(self);
  for (let i = 0; i < as.length; i++) {
    const e = f(as[i], i);
    if (E.isLeft(e)) {
      left.push(e.left);
    } else {
      right.push(e.right);
    }
  }
  return [left, right];
})));
/**
 * @category filtering
 * @since 1.0.0
 */
const ReadonlyArray_compact = /*#__PURE__*/ReadonlyArray_filterMap(Function_identity);
/**
 * @category filtering
 * @since 1.0.0
 */
const ReadonlyArray_filter = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => {
  const as = ReadonlyArray_fromIterable(self);
  const out = [];
  for (let i = 0; i < as.length; i++) {
    if (predicate(as[i], i)) {
      out.push(as[i]);
    }
  }
  return out;
})));
/**
 * @category filtering
 * @since 1.0.0
 */
const ReadonlyArray_partition = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => {
  const left = [];
  const right = [];
  const as = ReadonlyArray_fromIterable(self);
  for (let i = 0; i < as.length; i++) {
    if (predicate(as[i], i)) {
      right.push(as[i]);
    } else {
      left.push(as[i]);
    }
  }
  return [left, right];
})));
/**
 * @category filtering
 * @since 1.0.0
 */
const ReadonlyArray_separate = /*#__PURE__*/(/* unused pure expression or super */ null && (ReadonlyArray_partitionMap(identity)));
/**
 * @category folding
 * @since 1.0.0
 */
const reduce = /*#__PURE__*/Function_dual(3, (self, b, f) => ReadonlyArray_fromIterable(self).reduce((b, a, i) => f(b, a, i), b));
/**
 * @category folding
 * @since 1.0.0
 */
const reduceRight = /*#__PURE__*/Function_dual(3, (self, b, f) => ReadonlyArray_fromIterable(self).reduceRight((b, a, i) => f(b, a, i), b));
/**
 * @category lifting
 * @since 1.0.0
 */
const ReadonlyArray_liftPredicate = predicate => b => predicate(b) ? [b] : [];
/**
 * @category lifting
 * @since 1.0.0
 */
const liftOption = f => (...a) => ReadonlyArray_fromOption(f(...a));
/**
 * @category conversions
 * @since 1.0.0
 */
const ReadonlyArray_fromNullable = a => a == null ? ReadonlyArray_empty() : [a];
/**
 * @category lifting
 * @since 1.0.0
 */
const ReadonlyArray_liftNullable = f => (...a) => ReadonlyArray_fromNullable(f(...a));
/**
 * @category combining
 * @since 1.0.0
 */
const ReadonlyArray_flatMapNullable = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => isNonEmptyReadonlyArray(self) ? ReadonlyArray_fromNullable(f(headNonEmpty(self))) : ReadonlyArray_empty())));
/**
 * @category lifting
 * @since 1.0.0
 */
const liftEither = f => (...a) => {
  const e = f(...a);
  return E.isLeft(e) ? [] : [e.right];
};
/**
 * Check if a predicate holds true for every `ReadonlyArray` element.
 *
 * @category elements
 * @since 1.0.0
 */
const ReadonlyArray_every = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, refinement) => self.every(refinement))));
/**
 * Check if a predicate holds true for some `ReadonlyArray` element.
 *
 * @category elements
 * @since 1.0.0
 */
const ReadonlyArray_some = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => self.some(predicate))));
/**
 * @since 1.0.0
 */
const extend = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => self.map((_, i, as) => f(as.slice(i))))));
/**
 * @since 1.0.0
 */
const ReadonlyArray_min = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, O) => self.reduce(Order.min(O)))));
/**
 * @since 1.0.0
 */
const ReadonlyArray_max = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, O) => self.reduce(Order.max(O)))));
/**
 * @category constructors
 * @since 1.0.0
 */
const unfold = (b, f) => {
  const out = [];
  let next = b;
  let o;
  while (Option_isSome(o = f(next))) {
    const [a, b] = o.value;
    out.push(a);
    next = b;
  }
  return out;
};
/**
 * This function creates and returns a new `Order` for an array of values based on a given `Order` for the elements of the array.
 * The returned `Order` compares two arrays by applying the given `Order` to each element in the arrays.
 * If all elements are equal, the arrays are then compared based on their length.
 * It is useful when you need to compare two arrays of the same type and you have a specific way of comparing each element of the array.
 *
 * @category instances
 * @since 1.0.0
 */
const ReadonlyArray_getOrder = Order_array;
/**
 * @category instances
 * @since 1.0.0
 */
const ReadonlyArray_getEquivalence = Equivalence_array;
/**
 * Iterate over the `Iterable` applying `f`.
 *
 * @since 1.0.0
 */
const forEach = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => ReadonlyArray_fromIterable(self).forEach((a, i) => f(a, i)))));
/**
 * Remove duplicates from am `Iterable` using the provided `isEquivalent` function, keeping the first occurrence of an element.
 *
 * @since 1.0.0
 */
const dedupeWith = /*#__PURE__*/Function_dual(2, (self, isEquivalent) => {
  const input = ReadonlyArray_fromIterable(self);
  return isNonEmptyReadonlyArray(input) ? dedupeNonEmptyWith(isEquivalent)(input) : [];
});
/**
 * Remove duplicates from am `Iterable`, keeping the first occurrence of an element.
 *
 * @since 1.0.0
 */
const dedupe = /*#__PURE__*/dedupeWith( /*#__PURE__*/equivalence());
/**
 * Deduplicates adjacent elements that are identical using the provided `isEquivalent` function.
 *
 * @since 1.0.0
 */
const dedupeAdjacentWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, isEquivalent) => {
  const out = [];
  let lastA = O.none();
  for (const a of self) {
    if (O.isNone(lastA) || !isEquivalent(a, lastA.value)) {
      out.push(a);
      lastA = O.some(a);
    }
  }
  return out;
})));
/**
 * Deduplicates adjacent elements that are identical.
 *
 * @since 1.0.0
 */
const dedupeAdjacent = /*#__PURE__*/(/* unused pure expression or super */ null && (dedupeAdjacentWith( /*#__PURE__*/Equal.equivalence())));
/**
 * Joins the elements together with "sep" in the middle.
 *
 * @since 1.0.0
 * @category folding
 */
const join = /*#__PURE__*/Function_dual(2, (self, sep) => ReadonlyArray_fromIterable(self).join(sep));
/**
 * Statefully maps over the chunk, producing new elements of type `B`.
 *
 * @since 1.0.0
 * @category folding
 */
const mapAccum = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, s, f) => {
  let s1 = s;
  const out = [];
  for (const a of self) {
    const r = f(s1, a);
    s1 = r[0];
    out.push(r[1]);
  }
  return [s1, out];
})));
/**
 * Zips this chunk crosswise with the specified chunk using the specified combiner.
 *
 * @since 1.0.0
 * @category elements
 */
const cartesianWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, that, f) => ReadonlyArray_flatMap(self, a => ReadonlyArray_map(that, b => f(a, b))))));
/**
 * Zips this chunk crosswise with the specified chunk.
 *
 * @since 1.0.0
 * @category elements
 */
const cartesian = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => cartesianWith(self, that, (a, b) => [a, b]))));
//# sourceMappingURL=ReadonlyArray.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Chunk.mjs









const Chunk_TypeId = /*#__PURE__*/Symbol.for("@effect/data/Chunk");
function Chunk_copy(src, srcPos, dest, destPos, len) {
  for (let i = srcPos; i < Math.min(src.length, srcPos + len); i++) {
    dest[destPos + i - srcPos] = src[i];
  }
  return dest;
}
const emptyArray = [];
/**
 * Compares the two chunks of equal length using the specified function
 *
 * @category equivalence
 * @since 1.0.0
 */
const Chunk_getEquivalence = isEquivalent => make((self, that) => toReadonlyArray(self).every((value, i) => isEquivalent(value, Chunk_unsafeGet(that, i))));
const Chunk_equivalence = /*#__PURE__*/Chunk_getEquivalence(equals);
class ChunkImpl {
  constructor(backing) {
    this.backing = backing;
    this._id = Chunk_TypeId;
    switch (backing._tag) {
      case "IEmpty":
        {
          this.length = 0;
          this.depth = 0;
          this.left = this;
          this.right = this;
          break;
        }
      case "IConcat":
        {
          this.length = backing.left.length + backing.right.length;
          this.depth = 1 + Math.max(backing.left.depth, backing.right.depth);
          this.left = backing.left;
          this.right = backing.right;
          break;
        }
      case "IArray":
        {
          this.length = backing.array.length;
          this.depth = 0;
          this.left = _empty;
          this.right = _empty;
          break;
        }
      case "ISingleton":
        {
          this.length = 1;
          this.depth = 0;
          this.left = _empty;
          this.right = _empty;
          break;
        }
      case "ISlice":
        {
          this.length = backing.length;
          this.depth = backing.chunk.depth + 1;
          this.left = _empty;
          this.right = _empty;
          break;
        }
    }
  }
  toString() {
    return `Chunk(${toReadonlyArray(this).map(String).join(", ")})`;
  }
  toJSON() {
    return {
      _tag: "Chunk",
      values: toReadonlyArray(this)
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  [Equal_symbol](that) {
    return isChunk(that) && Chunk_equivalence(this, that);
  }
  [symbol]() {
    return array(toReadonlyArray(this));
  }
  [Symbol.iterator]() {
    switch (this.backing._tag) {
      case "IArray":
        {
          return this.backing.array[Symbol.iterator]();
        }
      case "IEmpty":
        {
          return emptyArray[Symbol.iterator]();
        }
      default:
        {
          return toReadonlyArray(this)[Symbol.iterator]();
        }
    }
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/**
 * Checks if `u` is a `Chunk<unknown>`
 *
 * @category constructors
 * @since 1.0.0
 */
const isChunk = u => Predicate_isObject(u) && "_id" in u && u["_id"] === Chunk_TypeId;
const _empty = /*#__PURE__*/new ChunkImpl({
  _tag: "IEmpty"
});
/**
 * @category constructors
 * @since 1.0.0
 */
const Chunk_empty = () => _empty;
/**
 * Builds a `NonEmptyChunk` from an non-empty collection of elements.
 *
 * @category constructors
 * @since 1.0.0
 */
const Chunk_make = (...as) => as.length === 1 ? Chunk_of(as[0]) : unsafeFromNonEmptyArray(as);
/**
 * Builds a `NonEmptyChunk` from a single element.
 *
 * @category constructors
 * @since 1.0.0
 */
const Chunk_of = a => new ChunkImpl({
  _tag: "ISingleton",
  a
});
/**
 * Converts from an `Iterable<A>`
 *
 * @category conversions
 * @since 1.0.0
 */
const Chunk_fromIterable = self => isChunk(self) ? self : new ChunkImpl({
  _tag: "IArray",
  array: ReadonlyArray_fromIterable(self)
});
const copyToArray = (self, array, initial) => {
  switch (self.backing._tag) {
    case "IArray":
      {
        Chunk_copy(self.backing.array, 0, array, initial, self.length);
        break;
      }
    case "IConcat":
      {
        copyToArray(self.left, array, initial);
        copyToArray(self.right, array, initial + self.left.length);
        break;
      }
    case "ISingleton":
      {
        array[initial] = self.backing.a;
        break;
      }
    case "ISlice":
      {
        let i = 0;
        let j = initial;
        while (i < self.length) {
          array[j] = Chunk_unsafeGet(self, i);
          i += 1;
          j += 1;
        }
        break;
      }
  }
};
/**
 * Converts the specified `Chunk` to a `ReadonlyArray`.
 *
 * @category conversions
 * @since 1.0.0
 */
const toReadonlyArray = self => {
  switch (self.backing._tag) {
    case "IEmpty":
      {
        return emptyArray;
      }
    case "IArray":
      {
        return self.backing.array;
      }
    default:
      {
        const arr = new Array(self.length);
        copyToArray(self, arr, 0);
        self.backing = {
          _tag: "IArray",
          array: arr
        };
        self.left = _empty;
        self.right = _empty;
        self.depth = 0;
        return arr;
      }
  }
};
/**
 * @since 1.0.0
 * @category elements
 */
const Chunk_reverse = self => {
  switch (self.backing._tag) {
    case "IEmpty":
    case "ISingleton":
      return self;
    case "IArray":
      {
        return new ChunkImpl({
          _tag: "IArray",
          array: ReadonlyArray_reverse(self.backing.array)
        });
      }
    case "IConcat":
      {
        return new ChunkImpl({
          _tag: "IConcat",
          left: Chunk_reverse(self.backing.right),
          right: Chunk_reverse(self.backing.left)
        });
      }
    case "ISlice":
      return unsafeFromArray(ReadonlyArray_reverse(toReadonlyArray(self)));
  }
};
/**
 * This function provides a safe way to read a value at a particular index from a `Chunk`.
 *
 * @category elements
 * @since 1.0.0
 */
const Chunk_get = /*#__PURE__*/Function_dual(2, (self, index) => index < 0 || index >= self.length ? Option_none() : mjs_Option_some(Chunk_unsafeGet(self, index)));
/**
 * Wraps an array into a chunk without copying, unsafe on mutable arrays
 *
 * @since 1.0.0
 * @category unsafe
 */
const unsafeFromArray = self => new ChunkImpl({
  _tag: "IArray",
  array: self
});
/**
 * Wraps an array into a chunk without copying, unsafe on mutable arrays
 *
 * @since 1.0.0
 * @category unsafe
 */
const unsafeFromNonEmptyArray = self => unsafeFromArray(self);
/**
 * Gets an element unsafely, will throw on out of bounds
 *
 * @since 1.0.0
 * @category unsafe
 */
const Chunk_unsafeGet = /*#__PURE__*/Function_dual(2, (self, index) => {
  switch (self.backing._tag) {
    case "IEmpty":
      {
        throw new Error(`Index out of bounds`);
      }
    case "ISingleton":
      {
        if (index !== 0) {
          throw new Error(`Index out of bounds`);
        }
        return self.backing.a;
      }
    case "IArray":
      {
        if (index >= self.length || index < 0) {
          throw new Error(`Index out of bounds`);
        }
        return self.backing.array[index];
      }
    case "IConcat":
      {
        return index < self.left.length ? Chunk_unsafeGet(self.left, index) : Chunk_unsafeGet(self.right, index - self.left.length);
      }
    case "ISlice":
      {
        return Chunk_unsafeGet(self.backing.chunk, index + self.backing.offset);
      }
  }
});
/**
 * Appends the specified element to the end of the `Chunk`.
 *
 * @category concatenating
 * @since 1.0.0
 */
const Chunk_append = /*#__PURE__*/Function_dual(2, (self, a) => Chunk_appendAllNonEmpty(self, Chunk_of(a)));
/**
 * Prepend an element to the front of a `Chunk`, creating a new `NonEmptyChunk`.
 *
 * @category concatenating
 * @since 1.0.0
 */
const Chunk_prepend = /*#__PURE__*/Function_dual(2, (self, elem) => Chunk_appendAllNonEmpty(Chunk_of(elem), self));
/**
 * Takes the first up to `n` elements from the chunk
 *
 * @since 1.0.0
 */
const Chunk_take = /*#__PURE__*/Function_dual(2, (self, n) => {
  if (n <= 0) {
    return _empty;
  } else if (n >= self.length) {
    return self;
  } else {
    switch (self.backing._tag) {
      case "ISlice":
        {
          return new ChunkImpl({
            _tag: "ISlice",
            chunk: self.backing.chunk,
            length: n,
            offset: self.backing.offset
          });
        }
      case "IConcat":
        {
          if (n > self.left.length) {
            return new ChunkImpl({
              _tag: "IConcat",
              left: self.left,
              right: Chunk_take(self.right, n - self.left.length)
            });
          }
          return Chunk_take(self.left, n);
        }
      default:
        {
          return new ChunkImpl({
            _tag: "ISlice",
            chunk: self,
            offset: 0,
            length: n
          });
        }
    }
  }
});
/**
 * Drops the first up to `n` elements from the chunk
 *
 * @since 1.0.0
 */
const Chunk_drop = /*#__PURE__*/Function_dual(2, (self, n) => {
  if (n <= 0) {
    return self;
  } else if (n >= self.length) {
    return _empty;
  } else {
    switch (self.backing._tag) {
      case "ISlice":
        {
          return new ChunkImpl({
            _tag: "ISlice",
            chunk: self.backing.chunk,
            offset: self.backing.offset + n,
            length: self.backing.length - n
          });
        }
      case "IConcat":
        {
          if (n > self.left.length) {
            return Chunk_drop(self.right, n - self.left.length);
          }
          return new ChunkImpl({
            _tag: "IConcat",
            left: Chunk_drop(self.left, n),
            right: self.right
          });
        }
      default:
        {
          return new ChunkImpl({
            _tag: "ISlice",
            chunk: self,
            offset: n,
            length: self.length - n
          });
        }
    }
  }
});
/**
 * Drops the last `n` elements.
 *
 * @since 1.0.0
 */
const Chunk_dropRight = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => Chunk_take(self, Math.max(0, self.length - n)))));
/**
 * Drops all elements so long as the predicate returns true.
 *
 * @since 1.0.0
 */
const Chunk_dropWhile = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const arr = toReadonlyArray(self);
  const len = arr.length;
  let i = 0;
  while (i < len && f(arr[i])) {
    i++;
  }
  return Chunk_drop(self, i);
})));
/**
 * @category concatenating
 * @since 1.0.0
 */
const Chunk_prependAll = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => Chunk_appendAll(that, self))));
/**
 * @category concatenating
 * @since 1.0.0
 */
const Chunk_prependAllNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => Chunk_prependAll(self, that))));
/**
 * Concatenates the two chunks
 *
 * @category concatenating
 * @since 1.0.0
 */
const Chunk_appendAll = /*#__PURE__*/Function_dual(2, (self, that) => {
  if (self.backing._tag === "IEmpty") {
    return that;
  }
  if (that.backing._tag === "IEmpty") {
    return self;
  }
  const diff = that.depth - self.depth;
  if (Math.abs(diff) <= 1) {
    return new ChunkImpl({
      _tag: "IConcat",
      left: self,
      right: that
    });
  } else if (diff < -1) {
    if (self.left.depth >= self.right.depth) {
      const nr = Chunk_appendAll(self.right, that);
      return new ChunkImpl({
        _tag: "IConcat",
        left: self.left,
        right: nr
      });
    } else {
      const nrr = Chunk_appendAll(self.right.right, that);
      if (nrr.depth === self.depth - 3) {
        const nr = new ChunkImpl({
          _tag: "IConcat",
          left: self.right.left,
          right: nrr
        });
        return new ChunkImpl({
          _tag: "IConcat",
          left: self.left,
          right: nr
        });
      } else {
        const nl = new ChunkImpl({
          _tag: "IConcat",
          left: self.left,
          right: self.right.left
        });
        return new ChunkImpl({
          _tag: "IConcat",
          left: nl,
          right: nrr
        });
      }
    }
  } else {
    if (that.right.depth >= that.left.depth) {
      const nl = Chunk_appendAll(self, that.left);
      return new ChunkImpl({
        _tag: "IConcat",
        left: nl,
        right: that.right
      });
    } else {
      const nll = Chunk_appendAll(self, that.left.left);
      if (nll.depth === that.depth - 3) {
        const nl = new ChunkImpl({
          _tag: "IConcat",
          left: nll,
          right: that.left.right
        });
        return new ChunkImpl({
          _tag: "IConcat",
          left: nl,
          right: that.right
        });
      } else {
        const nr = new ChunkImpl({
          _tag: "IConcat",
          left: that.left.right,
          right: that.right
        });
        return new ChunkImpl({
          _tag: "IConcat",
          left: nll,
          right: nr
        });
      }
    }
  }
});
/**
 * @category concatenating
 * @since 1.0.0
 */
const Chunk_appendAllNonEmpty = /*#__PURE__*/Function_dual(2, (self, that) => Chunk_appendAll(self, that));
/**
 * Returns a filtered and mapped subset of the elements.
 *
 * @since 1.0.0
 * @category filtering
 */
const Chunk_filterMap = /*#__PURE__*/Function_dual(2, (self, f) => unsafeFromArray(ReadonlyArray_filterMap(self, f)));
/**
 * Returns a filtered and mapped subset of the elements.
 *
 * @since 1.0.0
 * @category filtering
 */
const Chunk_filter = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => unsafeFromArray(RA.filterMap(self, O.liftPredicate(predicate))))));
/**
 * Transforms all elements of the chunk for as long as the specified function returns some value
 *
 * @since 1.0.0
 * @category filtering
 */
const Chunk_filterMapWhile = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => unsafeFromArray(RA.filterMapWhile(self, f)))));
/**
 * Filter out optional values
 *
 * @since 1.0.0
 * @category filtering
 */
const Chunk_compact = self => Chunk_filterMap(self, identity);
/**
 * Returns a chunk with the elements mapped by the specified function.
 *
 * @since 1.0.0
 * @category sequencing
 */
const Chunk_flatMap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  if (self.backing._tag === "ISingleton") {
    return f(self.backing.a, 0);
  }
  let out = _empty;
  let i = 0;
  for (const k of self) {
    out = Chunk_appendAll(out, f(k, i++));
  }
  return out;
})));
/**
 * @category sequencing
 * @since 1.0.0
 */
const Chunk_flatMapNonEmpty = (/* unused pure expression or super */ null && (Chunk_flatMap));
/**
 * Applies the specified function to each element of the `List`.
 *
 * @since 1.0.0
 * @category combinators
 */
const Chunk_forEach = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => toReadonlyArray(self).forEach(f))));
/**
 * Flattens a chunk of chunks into a single chunk by concatenating all chunks.
 *
 * @since 1.0.0
 * @category sequencing
 */
const Chunk_flatten = /*#__PURE__*/(/* unused pure expression or super */ null && (Chunk_flatMap(identity)));
/**
 * @category sequencing
 * @since 1.0.0
 */
const Chunk_flattenNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (Chunk_flatMapNonEmpty(identity)));
/**
 * Groups elements in chunks of up to `n` elements.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_chunksOf = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => {
  const gr = [];
  let current = [];
  toReadonlyArray(self).forEach(a => {
    current.push(a);
    if (current.length >= n) {
      gr.push(unsafeFromArray(current));
      current = [];
    }
  });
  if (current.length > 0) {
    gr.push(unsafeFromArray(current));
  }
  return unsafeFromArray(gr);
})));
/**
 * Creates a Chunk of unique values that are included in all given Chunks.
 *
 * The order and references of result values are determined by the Chunk.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_intersection = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => unsafeFromArray(RA.intersection(toReadonlyArray(self), toReadonlyArray(that))))));
/**
 * Determines if the chunk is empty.
 *
 * @since 1.0.0
 * @category elements
 */
const isEmpty = self => self.length === 0;
/**
 * Determines if the chunk is not empty.
 *
 * @since 1.0.0
 * @category elements
 */
const isNonEmpty = self => self.length > 0;
/**
 * Returns the first element of this chunk if it exists.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_head = /*#__PURE__*/Chunk_get(0);
/**
 * Returns the first element of this chunk.
 *
 * @since 1.0.0
 * @category unsafe
 */
const unsafeHead = self => Chunk_unsafeGet(self, 0);
/**
 * Returns the first element of this non empty chunk.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_headNonEmpty = unsafeHead;
/**
 * Returns the last element of this chunk if it exists.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_last = self => Chunk_get(self, self.length - 1);
/**
 * Returns the last element of this chunk.
 *
 * @since 1.0.0
 * @category unsafe
 */
const unsafeLast = self => Chunk_unsafeGet(self, self.length - 1);
/**
 * Returns an effect whose success is mapped by the specified f function.
 *
 * @since 1.0.0
 * @category mapping
 */
const Chunk_map = /*#__PURE__*/Function_dual(2, (self, f) => self.backing._tag === "ISingleton" ? Chunk_of(f(self.backing.a, 0)) : unsafeFromArray(ReadonlyArray_map((a, i) => f(a, i))(toReadonlyArray(self))));
/**
 * Statefully maps over the chunk, producing new elements of type `B`.
 *
 * @since 1.0.0
 * @category folding
 */
const Chunk_mapAccum = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, s, f) => {
  const [s1, as] = RA.mapAccum(self, s, f);
  return [s1, unsafeFromArray(as)];
})));
/**
 * Separate elements based on a predicate that also exposes the index of the element.
 *
 * @category filtering
 * @since 1.0.0
 */
const Chunk_partition = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => (([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)])(RA.partition(toReadonlyArray(self), predicate)))));
/**
 * Partitions the elements of this chunk into two chunks using f.
 *
 * @category filtering
 * @since 1.0.0
 */
const Chunk_partitionMap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => (([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)])(RA.partitionMap(toReadonlyArray(self), f)))));
/**
 * Partitions the elements of this chunk into two chunks.
 *
 * @category filtering
 * @since 1.0.0
 */
const Chunk_separate = self => (([l, r]) => [unsafeFromArray(l), unsafeFromArray(r)])(RA.separate(toReadonlyArray(self)));
/**
 * Retireves the size of the chunk
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_size = self => self.length;
/**
 * Sort the elements of a Chunk in increasing order, creating a new Chunk.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_sort = /*#__PURE__*/Function_dual(2, (self, O) => unsafeFromArray(sort(toReadonlyArray(self), O)));
/**
 * @since 1.0.0
 * @category elements
 */
const Chunk_sortWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, f, order) => Chunk_sort(self, Order.mapInput(order, f)))));
/**
 *  Returns two splits of this chunk at the specified index.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_splitAt = /*#__PURE__*/Function_dual(2, (self, n) => [Chunk_take(self, n), Chunk_drop(self, n)]);
/**
 * Splits this chunk into `n` equally sized chunks.
 *
 * @since 1.0.0
 * @category elements
 */
const split = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => Chunk_chunksOf(self, Math.ceil(self.length / Math.floor(n))))));
/**
 * Splits this chunk on the first element that matches this predicate.
 *
 * @category elements
 * @since 1.0.0
 */
const splitWhere = /*#__PURE__*/Function_dual(2, (self, predicate) => {
  let i = 0;
  for (const a of toReadonlyArray(self)) {
    if (predicate(a)) {
      break;
    } else {
      i++;
    }
  }
  return Chunk_splitAt(self, i);
});
/**
 * Returns every elements after the first.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_tail = self => self.length > 0 ? O.some(Chunk_drop(self, 1)) : O.none();
/**
 * Returns every elements after the first.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_tailNonEmpty = self => Chunk_drop(self, 1);
/**
 * Takes the last `n` elements.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_takeRight = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => Chunk_drop(self, self.length - n))));
/**
 * Takes all elements so long as the predicate returns true.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_takeWhile = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => {
  const res = [];
  for (const a of toReadonlyArray(self)) {
    if (predicate(a)) {
      res.push(a);
    } else {
      break;
    }
  }
  return unsafeFromArray(res);
})));
/**
 * Creates a Chunks of unique values, in order, from all given Chunks.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_union = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => unsafeFromArray(RA.union(toReadonlyArray(self), toReadonlyArray(that))))));
/**
 * Remove duplicates from an array, keeping the first occurrence of an element.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_dedupe = self => unsafeFromArray(dedupe(toReadonlyArray(self)));
/**
 * Deduplicates adjacent elements that are identical.
 *
 * @since 1.0.0
 * @category filtering
 */
const Chunk_dedupeAdjacent = self => unsafeFromArray(RA.dedupeAdjacent(self));
/**
 * Takes a `Chunk` of pairs and return two corresponding `Chunk`s.
 *
 * Note: The function is reverse of `zip`.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_unzip = self => {
  const [left, right] = RA.unzip(self);
  return [unsafeFromArray(left), unsafeFromArray(right)];
};
/**
 * Zips this chunk pointwise with the specified chunk using the specified combiner.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_zipWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, that, f) => unsafeFromArray(RA.zipWith(self, that, f)))));
/**
 * Zips this chunk pointwise with the specified chunk.
 *
 * @since 1.0.0
 * @category elements
 */
const Chunk_zip = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => Chunk_zipWith(self, that, (a, b) => [a, b]))));
/**
 * Delete the element at the specified index, creating a new `Chunk`,
 * or returning the input if the index is out of bounds.
 *
 * @since 1.0.0
 */
const Chunk_remove = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, i) => unsafeFromArray(RA.remove(toReadonlyArray(self), i)))));
/**
 * @since 1.0.0
 */
const Chunk_modifyOption = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, i, f) => O.map(RA.modifyOption(toReadonlyArray(self), i, f), unsafeFromArray))));
/**
 * Apply a function to the element at the specified index, creating a new `Chunk`,
 * or returning the input if the index is out of bounds.
 *
 * @since 1.0.0
 */
const Chunk_modify = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, i, f) => O.getOrElse(Chunk_modifyOption(self, i, f), () => self))));
/**
 * Change the element at the specified index, creating a new `Chunk`,
 * or returning the input if the index is out of bounds.
 *
 * @since 1.0.0
 */
const Chunk_replace = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, i, b) => Chunk_modify(self, i, () => b))));
/**
 * @since 1.0.0
 */
const Chunk_replaceOption = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, i, b) => Chunk_modifyOption(self, i, () => b))));
/**
 * Return a Chunk of length n with element i initialized with f(i).
 *
 * **Note**. `n` is normalized to an integer >= 1.
 *
 * @category constructors
 * @since 1.0.0
 */
const Chunk_makeBy = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (n, f) => Chunk_fromIterable(RA.makeBy(n, f)))));
/**
 * Create a non empty `Chunk` containing a range of integers, including both endpoints.
 *
 * @category constructors
 * @since 1.0.0
 */
const Chunk_range = (start, end) => start <= end ? Chunk_makeBy(end - start + 1, i => start + i) : Chunk_of(start);
// -------------------------------------------------------------------------------------
// re-exports from ReadonlyArray
// -------------------------------------------------------------------------------------
/**
 * Returns a function that checks if a `Chunk` contains a given value using the default `Equivalence`.
 *
 * @category elements
 * @since 1.0.0
 */
const Chunk_contains = ReadonlyArray_contains;
/**
 * Returns a function that checks if a `Chunk` contains a given value using a provided `isEquivalent` function.
 *
 * @category elements
 * @since 1.0.0
 */
const Chunk_containsWith = ReadonlyArray_containsWith;
/**
 * Returns the first element that satisfies the specified
 * predicate, or `None` if no such element exists.
 *
 * @category elements
 * @since 1.0.0
 */
const Chunk_findFirst = findFirst;
/**
 * Return the first index for which a predicate holds.
 *
 * @category elements
 * @since 1.0.0
 */
const Chunk_findFirstIndex = findFirstIndex;
/**
 * Find the last element for which a predicate holds.
 *
 * @category elements
 * @since 1.0.0
 */
const Chunk_findLast = findLast;
/**
 * Return the last index for which a predicate holds.
 *
 * @category elements
 * @since 1.0.0
 */
const Chunk_findLastIndex = findLastIndex;
/**
 * Check if a predicate holds true for every `Chunk` element.
 *
 * @category elements
 * @since 1.0.0
 */
const Chunk_every = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, refinement) => RA.fromIterable(self).every(refinement))));
/**
 * Check if a predicate holds true for some `Chunk` element.
 *
 * @category elements
 * @since 1.0.0
 */
const Chunk_some = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => RA.fromIterable(self).some(predicate))));
/**
 * Joins the elements together with "sep" in the middle.
 *
 * @category folding
 * @since 1.0.0
 */
const Chunk_join = join;
/**
 * @category folding
 * @since 1.0.0
 */
const Chunk_reduce = reduce;
/**
 * @category folding
 * @since 1.0.0
 */
const Chunk_reduceRight = reduceRight;
//# sourceMappingURL=Chunk.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Either.mjs
/**
 * @since 1.0.0
 */





/**
 * @category symbols
 * @since 1.0.0
 */
const mjs_Either_TypeId = /*#__PURE__*/(/* unused pure expression or super */ null && (Symbol.for("@effect/data/Either")));
/**
 * Constructs a new `Either` holding a `Right` value. This usually represents a successful value due to the right bias
 * of this structure.
 *
 * @category constructors
 * @since 1.0.0
 */
const Either_right = right;
/**
 * Constructs a new `Either` holding a `Left` value. This usually represents a failure, due to the right-bias of this
 * structure.
 *
 * @category constructors
 * @since 1.0.0
 */
const Either_left = left;
/**
 * Takes a lazy default and a nullable value, if the value is not nully (`null` or `undefined`), turn it into a `Right`, if the value is nully use
 * the provided default as a `Left`.
 *
 * @example
 * import * as Either from '@effect/data/Either'
 *
 * assert.deepStrictEqual(Either.fromNullable(1, () => 'fallback'), Either.right(1))
 * assert.deepStrictEqual(Either.fromNullable(null, () => 'fallback'), Either.left('fallback'))
 *
 * @category constructors
 * @since 1.0.0
 */
const Either_fromNullable = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, onNullable) => self == null ? Either_left(onNullable(self)) : Either_right(self))));
/**
 * @example
 * import * as Either from '@effect/data/Either'
 * import * as Option from '@effect/data/Option'
 *
 * assert.deepStrictEqual(Either.fromOption(Option.some(1), () => 'error'), Either.right(1))
 * assert.deepStrictEqual(Either.fromOption(Option.none(), () => 'error'), Either.left('error'))
 *
 * @category constructors
 * @since 1.0.0
 */
const Either_fromOption = fromOption;
const try_ = evaluate => {
  if (isFunction(evaluate)) {
    try {
      return Either_right(evaluate());
    } catch (e) {
      return Either_left(e);
    }
  } else {
    try {
      return Either_right(evaluate.try());
    } catch (e) {
      return Either_left(evaluate.catch(e));
    }
  }
};

/**
 * Tests if a value is a `Either`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isEither, left, right } from '@effect/data/Either'
 *
 * assert.deepStrictEqual(isEither(right(1)), true)
 * assert.deepStrictEqual(isEither(left("a")), true)
 * assert.deepStrictEqual(isEither({ right: 1 }), false)
 *
 * @category guards
 * @since 1.0.0
 */
const Either_isEither = input => isObject(input) && "_id" in input && input["_id"] === mjs_Either_TypeId;
/**
 * Determine if a `Either` is a `Left`.
 *
 * @param self - The `Either` to check.
 *
 * @example
 * import { isLeft, left, right } from '@effect/data/Either'
 *
 * assert.deepStrictEqual(isLeft(right(1)), false)
 * assert.deepStrictEqual(isLeft(left("a")), true)
 *
 * @category guards
 * @since 1.0.0
 */
const Either_isLeft = isLeft;
/**
 * Determine if a `Either` is a `Right`.
 *
 * @param self - The `Either` to check.
 *
 * @example
 * import { isRight, left, right } from '@effect/data/Either'
 *
 * assert.deepStrictEqual(isRight(right(1)), true)
 * assert.deepStrictEqual(isRight(left("a")), false)
 *
 * @category guards
 * @since 1.0.0
 */
const Either_isRight = isRight;
/**
 * Converts a `Either` to an `Option` discarding the `Left`.
 *
 * Alias of {@link toOption}.
 *
 * @example
 * import * as O from '@effect/data/Option'
 * import * as E from '@effect/data/Either'
 *
 * assert.deepStrictEqual(E.getRight(E.right('ok')), O.some('ok'))
 * assert.deepStrictEqual(E.getRight(E.left('err')), O.none())
 *
 * @category getters
 * @since 1.0.0
 */
const Either_getRight = getRight;
/**
 * Converts a `Either` to an `Option` discarding the value.
 *
 * @example
 * import * as O from '@effect/data/Option'
 * import * as E from '@effect/data/Either'
 *
 * assert.deepStrictEqual(E.getLeft(E.right('ok')), O.none())
 * assert.deepStrictEqual(E.getLeft(E.left('err')), O.some('err'))
 *
 * @category getters
 * @since 1.0.0
 */
const Either_getLeft = getLeft;
/**
 * @category equivalence
 * @since 1.0.0
 */
const Either_getEquivalence = (EE, EA) => Equivalence.make((x, y) => x === y || (Either_isLeft(x) ? Either_isLeft(y) && EE(x.left, y.left) : Either_isRight(y) && EA(x.right, y.right)));
/**
 * @category mapping
 * @since 1.0.0
 */
const mapBoth = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, {
  onLeft,
  onRight
}) => Either_isLeft(self) ? Either_left(onLeft(self.left)) : Either_right(onRight(self.right)))));
/**
 * Maps the `Left` side of an `Either` value to a new `Either` value.
 *
 * @param self - The input `Either` value to map.
 * @param f - A transformation function to apply to the `Left` value of the input `Either`.
 *
 * @since 1.0.0
 */
const mapLeft = /*#__PURE__*/Function_dual(2, (self, f) => Either_isLeft(self) ? Either_left(f(self.left)) : Either_right(self.right));
/**
 * Maps the `Right` side of an `Either` value to a new `Either` value.
 *
 * @param self - An `Either` to map
 * @param f - The function to map over the value of the `Either`
 *
 * @category mapping
 * @since 1.0.0
 */
const mapRight = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => Either_isRight(self) ? Either_right(f(self.right)) : Either_left(self.left))));
/**
 * Takes two functions and an `Either` value, if the value is a `Left` the inner value is applied to the `onLeft function,
 * if the value is a `Right` the inner value is applied to the `onRight` function.
 *
 * @example
 * import * as E from '@effect/data/Either'
 * import { pipe } from '@effect/data/Function'
 *
 * const onLeft  = (strings: ReadonlyArray<string>): string => `strings: ${strings.join(', ')}`
 *
 * const onRight = (value: number): string => `Ok: ${value}`
 *
 * assert.deepStrictEqual(pipe(E.right(1), E.match({ onLeft, onRight })), 'Ok: 1')
 * assert.deepStrictEqual(
 *   pipe(E.left(['string 1', 'string 2']), E.match({ onLeft, onRight })),
 *   'strings: string 1, string 2'
 * )
 *
 * @category pattern matching
 * @since 1.0.0
 */
const Either_match = /*#__PURE__*/Function_dual(2, (self, {
  onLeft,
  onRight
}) => Either_isLeft(self) ? onLeft(self.left) : onRight(self.right));
/**
 * @category getters
 * @since 1.0.0
 */
const merge = /*#__PURE__*/Either_match({
  onLeft: Function_identity,
  onRight: Function_identity
});
/**
 * Returns the wrapped value if it's a `Right` or a default value if is a `Left`.
 *
 * @example
 * import * as Either from '@effect/data/Either'
 *
 * assert.deepStrictEqual(Either.getOrElse(Either.right(1), (error) => error + "!"), 1)
 * assert.deepStrictEqual(Either.getOrElse(Either.left("not a number"), (error) => error + "!"), "not a number!")
 *
 * @category getters
 * @since 1.0.0
 */
const Either_getOrElse = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, onLeft) => Either_isLeft(self) ? onLeft(self.left) : self.right)));
/**
 * @example
 * import * as Either from '@effect/data/Either'
 *
 * assert.deepStrictEqual(Either.getOrNull(Either.right(1)), 1)
 * assert.deepStrictEqual(Either.getOrNull(Either.left("a")), null)
 *
 * @category getters
 * @since 1.0.0
 */
const Either_getOrNull = /*#__PURE__*/(/* unused pure expression or super */ null && (Either_getOrElse(constNull)));
/**
 * @example
 * import * as Either from '@effect/data/Either'
 *
 * assert.deepStrictEqual(Either.getOrUndefined(Either.right(1)), 1)
 * assert.deepStrictEqual(Either.getOrUndefined(Either.left("a")), undefined)
 *
 * @category getters
 * @since 1.0.0
 */
const Either_getOrUndefined = /*#__PURE__*/(/* unused pure expression or super */ null && (Either_getOrElse(constUndefined)));
/**
 * Extracts the value of an `Either` or throws if the `Either` is `Left`.
 *
 * If a default error is sufficient for your use case and you don't need to configure the thrown error, see {@link getOrThrow}.
 *
 * @param self - The `Either` to extract the value from.
 * @param onLeft - A function that will be called if the `Either` is `Left`. It returns the error to be thrown.
 *
 * @example
 * import * as E from "@effect/data/Either"
 *
 * assert.deepStrictEqual(
 *   E.getOrThrowWith(E.right(1), () => new Error('Unexpected Left')),
 *   1
 * )
 * assert.throws(() => E.getOrThrowWith(E.left("error"), () => new Error('Unexpected Left')))
 *
 * @category getters
 * @since 1.0.0
 */
const Either_getOrThrowWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, onLeft) => {
  if (Either_isRight(self)) {
    return self.right;
  }
  throw onLeft(self.left);
})));
/**
 * Extracts the value of an `Either` or throws if the `Either` is `Left`.
 *
 * The thrown error is a default error. To configure the error thrown, see  {@link getOrThrowWith}.
 *
 * @param self - The `Either` to extract the value from.
 * @throws `Error("getOrThrow called on a Left")`
 *
 * @example
 * import * as E from "@effect/data/Either"
 *
 * assert.deepStrictEqual(E.getOrThrow(E.right(1)), 1)
 * assert.throws(() => E.getOrThrow(E.left("error")))
 *
 * @category getters
 * @since 1.0.0
 */
const Either_getOrThrow = /*#__PURE__*/(/* unused pure expression or super */ null && (Either_getOrThrowWith(() => new Error("getOrThrow called on a Left"))));
/**
 * @category combining
 * @since 1.0.0
 */
const Either_flatMap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => Either_isLeft(self) ? Either_left(self.left) : f(self.right))));
/**
 * Takes a structure of `Option`s and returns an `Option` of values with the same structure.
 *
 * - If a tuple is supplied, then the returned `Option` will contain a tuple with the same length.
 * - If a struct is supplied, then the returned `Option` will contain a struct with the same keys.
 * - If an iterable is supplied, then the returned `Option` will contain an array.
 *
 * @param fields - the struct of `Option`s to be sequenced.
 *
 * @example
 * import * as Either from "@effect/data/Either"
 *
 * assert.deepStrictEqual(Either.all([Either.right(1), Either.right(2)]), Either.right([1, 2]))
 * assert.deepStrictEqual(Either.all({ a: Either.right(1), b: Either.right("hello") }), Either.right({ a: 1, b: "hello" }))
 * assert.deepStrictEqual(Either.all({ a: Either.right(1), b: Either.left("error") }), Either.left("error"))
 *
 * @category combining
 * @since 1.0.0
 */
// @ts-expect-error
const Either_all = input => {
  if (Symbol.iterator in input) {
    const out = [];
    for (const e of input) {
      if (Either_isLeft(e)) {
        return e;
      }
      out.push(e.right);
    }
    return Either_right(out);
  }
  const out = {};
  for (const key of Object.keys(input)) {
    const e = input[key];
    if (Either_isLeft(e)) {
      return e;
    }
    out[key] = e.right;
  }
  return Either_right(out);
};
/**
 * @since 1.0.0
 */
const Either_reverse = self => Either_isLeft(self) ? Either_right(self.left) : Either_left(self.right);
const Either_adapter = /*#__PURE__*/(/* unused pure expression or super */ null && (Gen.adapter()));
/**
 * @category generators
 * @since 1.0.0
 */
const Either_gen = f => {
  const iterator = f(Either_adapter);
  let state = iterator.next();
  if (state.done) {
    return Either_right(void 0);
  } else {
    let current = state.value.value;
    if (Either_isLeft(current)) {
      return current;
    }
    while (!state.done) {
      state = iterator.next(current.right);
      if (!state.done) {
        current = state.value.value;
        if (Either_isLeft(current)) {
          return current;
        }
      }
    }
    return Either_right(state.value);
  }
};
//# sourceMappingURL=Either.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/Context.mjs
var Context_a;







/** @internal */
const TagTypeId = /*#__PURE__*/Symbol.for("@effect/data/Context/Tag");
/** @internal */
class TagImpl {
  [(Context_a = EffectTypeId, Equal_symbol)](that) {
    return this === that;
  }
  [symbol]() {
    return random(this);
  }
  get [TagTypeId]() {
    return {
      _S: _ => _,
      _I: _ => _
    };
  }
  constructor(identifier) {
    this._tag = "Tag";
    this.i0 = undefined;
    this.i1 = undefined;
    this.i2 = undefined;
    this[Context_a] = effectVariance;
    const limit = Error.stackTraceLimit;
    Error.stackTraceLimit = 3;
    this.creationError = new Error();
    Error.stackTraceLimit = limit;
    if (typeof identifier !== "undefined") {
      this.i0 = identifier;
      return globalValue(identifier, () => this);
    }
  }
  get stack() {
    return this.creationError.stack;
  }
  toString() {
    return JSON.stringify(this);
  }
  toJSON() {
    return {
      _tag: "Tag",
      identifier: this.i0,
      stack: this.stack
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
  of(self) {
    return self;
  }
  context(self) {
    return Context_make(this, self);
  }
}
/** @internal */
const ContextTypeId = /*#__PURE__*/Symbol.for("@effect/data/Context");
/** @internal */
class ContextImpl {
  [Equal_symbol](that) {
    if (isContext(that)) {
      if (this.unsafeMap.size === that.unsafeMap.size) {
        for (const k of this.unsafeMap.keys()) {
          if (!that.unsafeMap.has(k) || !equals(this.unsafeMap.get(k), that.unsafeMap.get(k))) {
            return false;
          }
        }
        return true;
      }
    }
    return false;
  }
  [symbol]() {
    return number(this.unsafeMap.size);
  }
  constructor(unsafeMap) {
    this.unsafeMap = unsafeMap;
    this._id = ContextTypeId;
    this._S = _ => _;
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
const serviceNotFoundError = tag => {
  const error = new Error(`Service not found${tag.i0 ? `: ${String(tag.i0)}` : ""}`);
  if (tag.stack) {
    const lines = tag.stack.split("\n");
    if (lines.length > 2) {
      const afterAt = lines[3].match(/at (.*)/);
      if (afterAt) {
        error.message = error.message + ` (defined at ${afterAt[1]})`;
      }
    }
  }
  if (error.stack) {
    const lines = error.stack.split("\n");
    lines.splice(1, 3);
    error.stack = lines.join("\n");
  }
  return error;
};
/** @internal */
const isContext = u => typeof u === "object" && u !== null && "_id" in u && u["_id"] === ContextTypeId;
/** @internal */
const isTag = u => typeof u === "object" && u !== null && TagTypeId in u;
/** @internal */
const Context_empty = () => new ContextImpl(new Map());
/** @internal */
const Context_make = (tag, service) => new ContextImpl(new Map([[tag, service]]));
/** @internal */
const add = /*#__PURE__*/Function_dual(3, (self, tag, service) => {
  const map = new Map(self.unsafeMap);
  map.set(tag, service);
  return new ContextImpl(map);
});
/** @internal */
const Context_unsafeGet = /*#__PURE__*/Function_dual(2, (self, tag) => {
  if (!self.unsafeMap.has(tag)) {
    throw serviceNotFoundError(tag);
  }
  return self.unsafeMap.get(tag);
});
/** @internal */
const Context_get = Context_unsafeGet;
/** @internal */
const getOption = /*#__PURE__*/Function_dual(2, (self, tag) => {
  if (!self.unsafeMap.has(tag)) {
    return Option_none();
  }
  return mjs_Option_some(self.unsafeMap.get(tag));
});
/** @internal */
const Context_merge = /*#__PURE__*/Function_dual(2, (self, that) => {
  const map = new Map(self.unsafeMap);
  for (const [tag, s] of that.unsafeMap) {
    map.set(tag, s);
  }
  return new ContextImpl(map);
});
/** @internal */
const pick = (...tags) => self => {
  const tagSet = new Set(tags);
  const newEnv = new Map();
  for (const [tag, s] of self.unsafeMap.entries()) {
    if (tagSet.has(tag)) {
      newEnv.set(tag, s);
    }
  }
  return new ContextImpl(newEnv);
};
/** @internal */
const omit = (...tags) => self => {
  const newEnv = new Map(self.unsafeMap);
  for (const tag of tags) {
    newEnv.delete(tag);
  }
  return new ContextImpl(newEnv);
};
//# sourceMappingURL=Context.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Context.mjs

const Context_TagTypeId = TagTypeId;
/**
 * Creates a new `Tag` instance with an optional key parameter.
 *
 * Specifying the `key` will make the `Tag` global, meaning two tags with the same
 * key will map to the same instance.
 *
 * Note: this is useful for cases where live reload can happen and it is
 * desireable to preserve the instance across reloads.
 *
 * @param key - An optional key that makes the `Tag` global.
 *
 * @example
 * import * as Context from "@effect/data/Context"
 *
 * assert.strictEqual(Context.Tag() === Context.Tag(), false)
 * assert.strictEqual(Context.Tag("PORT") === Context.Tag("PORT"), true)
 *
 * @since 1.0.0
 * @category constructors
 */
const Tag = key => new TagImpl(key);
const Context_TypeId = ContextTypeId;
/**
 * Checks if the provided argument is a `Context`.
 *
 * @param input - The value to be checked if it is a `Context`.
 *
 * @example
 * import * as Context from "@effect/data/Context"
 *
 * assert.strictEqual(Context.isContext(Context.empty()), true)
 *
 * @since 1.0.0
 * @category guards
 */
const Context_isContext = isContext;
/**
 * Checks if the provided argument is a `Tag`.
 *
 * @param input - The value to be checked if it is a `Tag`.
 *
 * @example
 * import * as Context from "@effect/data/Context"
 *
 * assert.strictEqual(Context.isTag(Context.Tag()), true)
 *
 * @since 1.0.0
 * @category guards
 */
const Context_isTag = isTag;
/**
 * Returns an empty `Context`.
 *
 * @example
 * import * as Context from "@effect/data/Context"
 *
 * assert.strictEqual(Context.isContext(Context.empty()), true)
 *
 * @since 1.0.0
 * @category constructors
 */
const mjs_Context_empty = Context_empty;
/**
 * Creates a new `Context` with a single service associated to the tag.
 *
 * @example
 * import * as Context from "@effect/data/Context"
 *
 * const Port = Context.Tag<{ PORT: number }>()
 *
 * const Services = Context.make(Port, { PORT: 8080 })
 *
 * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })
 *
 * @since 1.0.0
 * @category constructors
 */
const mjs_Context_make = Context_make;
/**
 * Adds a service to a given `Context`.
 *
 * @example
 * import * as Context from "@effect/data/Context"
 * import { pipe } from "@effect/data/Function"
 *
 * const Port = Context.Tag<{ PORT: number }>()
 * const Timeout = Context.Tag<{ TIMEOUT: number }>()
 *
 * const someContext = Context.make(Port, { PORT: 8080 })
 *
 * const Services = pipe(
 *   someContext,
 *   Context.add(Timeout, { TIMEOUT: 5000 })
 * )
 *
 * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })
 * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })
 *
 * @since 1.0.0
 */
const Context_add = add;
/**
 * Get a service from the context that corresponds to the given tag.
 *
 * @param self - The `Context` to search for the service.
 * @param tag - The `Tag` of the service to retrieve.
 *
 * @example
 * import * as Context from "@effect/data/Context"
 * import { pipe } from "@effect/data/Function"
 *
 * const Port = Context.Tag<{ PORT: number }>()
 * const Timeout = Context.Tag<{ TIMEOUT: number }>()
 *
 * const Services = pipe(
 *   Context.make(Port, { PORT: 8080 }),
 *   Context.add(Timeout, { TIMEOUT: 5000 })
 * )
 *
 * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })
 *
 * @since 1.0.0
 * @category getters
 */
const mjs_Context_get = Context_get;
/**
 * Get a service from the context that corresponds to the given tag.
 * This function is unsafe because if the tag is not present in the context, a runtime error will be thrown.
 *
 * For a safer version see {@link getOption}.
 *
 * @param self - The `Context` to search for the service.
 * @param tag - The `Tag` of the service to retrieve.
 *
 * @example
 * import * as Context from "@effect/data/Context"
 *
 * const Port = Context.Tag<{ PORT: number }>()
 * const Timeout = Context.Tag<{ TIMEOUT: number }>()
 *
 * const Services = Context.make(Port, { PORT: 8080 })
 *
 * assert.deepStrictEqual(Context.unsafeGet(Services, Port), { PORT: 8080 })
 * assert.throws(() => Context.unsafeGet(Services, Timeout))
 *
 * @since 1.0.0
 * @category unsafe
 */
const mjs_Context_unsafeGet = Context_unsafeGet;
/**
 * Get the value associated with the specified tag from the context wrapped in an `Option` object. If the tag is not
 * found, the `Option` object will be `None`.
 *
 * @param self - The `Context` to search for the service.
 * @param tag - The `Tag` of the service to retrieve.
 *
 * @example
 * import * as Context from "@effect/data/Context"
 * import * as O from "@effect/data/Option"
 *
 * const Port = Context.Tag<{ PORT: number }>()
 * const Timeout = Context.Tag<{ TIMEOUT: number }>()
 *
 * const Services = Context.make(Port, { PORT: 8080 })
 *
 * assert.deepStrictEqual(Context.getOption(Services, Port), O.some({ PORT: 8080 }))
 * assert.deepStrictEqual(Context.getOption(Services, Timeout), O.none())
 *
 * @since 1.0.0
 * @category getters
 */
const Context_getOption = getOption;
/**
 * Merges two `Context`s, returning a new `Context` containing the services of both.
 *
 * @param self - The first `Context` to merge.
 * @param that - The second `Context` to merge.
 *
 * @example
 * import * as Context from "@effect/data/Context"
 *
 * const Port = Context.Tag<{ PORT: number }>()
 * const Timeout = Context.Tag<{ TIMEOUT: number }>()
 *
 * const firstContext = Context.make(Port, { PORT: 8080 })
 * const secondContext = Context.make(Timeout, { TIMEOUT: 5000 })
 *
 * const Services = Context.merge(firstContext, secondContext)
 *
 * assert.deepStrictEqual(Context.get(Services, Port), { PORT: 8080 })
 * assert.deepStrictEqual(Context.get(Services, Timeout), { TIMEOUT: 5000 })
 *
 * @since 1.0.0
 */
const mjs_Context_merge = Context_merge;
/**
 * Returns a new `Context` that contains only the specified services.
 *
 * @param self - The `Context` to prune services from.
 * @param tags - The list of `Tag`s to be included in the new `Context`.
 *
 * @example
 * import * as Context from "@effect/data/Context"
 * import { pipe } from "@effect/data/Function"
 * import * as O from "@effect/data/Option"
 *
 * const Port = Context.Tag<{ PORT: number }>()
 * const Timeout = Context.Tag<{ TIMEOUT: number }>()
 *
 * const someContext = pipe(
 *   Context.make(Port, { PORT: 8080 }),
 *   Context.add(Timeout, { TIMEOUT: 5000 })
 * )
 *
 * const Services = pipe(someContext, Context.pick(Port))
 *
 * assert.deepStrictEqual(Context.getOption(Services, Port), O.some({ PORT: 8080 }))
 * assert.deepStrictEqual(Context.getOption(Services, Timeout), O.none())
 *
 * @since 1.0.0
 */
const Context_pick = pick;
/**
 * @since 1.0.0
 */
const Context_omit = omit;
//# sourceMappingURL=Context.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/Differ/ChunkPatch.mjs




/** @internal */
const ChunkPatchTypeId = /*#__PURE__*/Symbol.for("@effect/data/Differ/ChunkPatch");
function variance(a) {
  return a;
}
class Empty {
  constructor() {
    this._tag = "Empty";
    this._Value = variance;
    this._Patch = variance;
    this._id = ChunkPatchTypeId;
  }
  [symbol]() {
    return string(`ChunkPatch(Empty)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id;
  }
}
class AndThen {
  constructor(first, second) {
    this.first = first;
    this.second = second;
    this._tag = "AndThen";
    this._Value = variance;
    this._Patch = variance;
    this._id = ChunkPatchTypeId;
  }
  [symbol]() {
    return string(`ChunkPatch(AndThen)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.first, that.first) && equals(this.second, that.second);
  }
}
class Append {
  constructor(values) {
    this.values = values;
    this._tag = "Append";
    this._Value = variance;
    this._Patch = variance;
    this._id = ChunkPatchTypeId;
  }
  [symbol]() {
    return string(`ChunkPatch(Append)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.values, that.values);
  }
}
class Slice {
  constructor(from, until) {
    this.from = from;
    this.until = until;
    this._tag = "Slice";
    this._Value = variance;
    this._Patch = variance;
    this._id = ChunkPatchTypeId;
  }
  [symbol]() {
    return string(`ChunkPatch(Slice)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.from, that.from) && equals(this.until, that.until);
  }
}
class Update {
  constructor(index, patch) {
    this.index = index;
    this.patch = patch;
    this._tag = "Update";
    this._Value = variance;
    this._Patch = variance;
    this._id = ChunkPatchTypeId;
  }
  [symbol]() {
    return string(`ChunkPatch(AndThen)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.index, that.index) && equals(this.patch, that.patch);
  }
}
/** @internal */
const ChunkPatch_empty = () => new Empty();
/** @internal */
const diff = options => {
  let i = 0;
  let patch = ChunkPatch_empty();
  while (i < options.oldValue.length && i < options.newValue.length) {
    const oldElement = Chunk_unsafeGet(i)(options.oldValue);
    const newElement = Chunk_unsafeGet(i)(options.newValue);
    const valuePatch = options.differ.diff(oldElement, newElement);
    if (!equals(valuePatch, options.differ.empty)) {
      patch = ChunkPatch_combine(new Update(i, valuePatch))(patch);
    }
    i = i + 1;
  }
  if (i < options.oldValue.length) {
    patch = ChunkPatch_combine(new Slice(0, i))(patch);
  }
  if (i < options.newValue.length) {
    patch = ChunkPatch_combine(new Append(Chunk_drop(i)(options.newValue)))(patch);
  }
  return patch;
};
/** @internal */
const ChunkPatch_combine = /*#__PURE__*/Function_dual(2, (self, that) => new AndThen(self, that));
/** @internal */
const patch = /*#__PURE__*/Function_dual(3, (self, oldValue, differ) => {
  let chunk = oldValue;
  let patches = Chunk_of(self);
  while (isNonEmpty(patches)) {
    const head = Chunk_headNonEmpty(patches);
    const tail = Chunk_tailNonEmpty(patches);
    switch (head._tag) {
      case "Empty":
        {
          patches = tail;
          break;
        }
      case "AndThen":
        {
          patches = Chunk_prepend(head.first)(Chunk_prepend(head.second)(tail));
          break;
        }
      case "Append":
        {
          chunk = Chunk_appendAll(head.values)(chunk);
          patches = tail;
          break;
        }
      case "Slice":
        {
          const array = toReadonlyArray(chunk);
          chunk = unsafeFromArray(array.slice(head.from, head.until));
          patches = tail;
          break;
        }
      case "Update":
        {
          const array = toReadonlyArray(chunk);
          array[head.index] = differ.patch(head.patch, array[head.index]);
          chunk = unsafeFromArray(array);
          patches = tail;
          break;
        }
    }
  }
  return chunk;
});
//# sourceMappingURL=ChunkPatch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Differ/ChunkPatch.mjs
/**
 * @since 1.0.0
 */

const ChunkPatch_TypeId = ChunkPatchTypeId;
/**
 * Constructs an empty chunk patch.
 *
 * @since 1.0.0
 * @category constructors
 */
const Differ_ChunkPatch_empty = ChunkPatch_empty;
/**
 * Constructs a chunk patch from a new and old chunk of values and a differ
 * for the values.
 *
 * @since 1.0.0
 * @category constructors
 */
const ChunkPatch_diff = diff;
/**
 * Combines two chunk patches to produce a new chunk patch that describes
 * applying their changes sequentially.
 *
 * @since 1.0.0
 */
const Differ_ChunkPatch_combine = ChunkPatch_combine;
/**
 * Applies a chunk patch to a chunk of values to produce a new chunk of
 * values which represents the original chunk of values updated with the
 * changes described by this patch.
 *
 * @since 1.0.0
 * @category destructors
 */
const ChunkPatch_patch = patch;
//# sourceMappingURL=ChunkPatch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/Differ/ContextPatch.mjs





/** @internal */
const ContextPatchTypeId = /*#__PURE__*/Symbol.for("@effect/data/Differ/ContextPatch");
function ContextPatch_variance(a) {
  return a;
}
/** @internal */
class ContextPatch_Empty {
  constructor() {
    this._tag = "Empty";
    this._Input = ContextPatch_variance;
    this._Output = ContextPatch_variance;
    this._id = ContextPatchTypeId;
  }
  [symbol]() {
    return string(`ContextPatch(Empty)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id;
  }
}
/** @internal */
class ContextPatch_AndThen {
  constructor(first, second) {
    this.first = first;
    this.second = second;
    this._tag = "AndThen";
    this._id = ContextPatchTypeId;
    this._Input = ContextPatch_variance;
    this._Output = ContextPatch_variance;
  }
  [symbol]() {
    return string(`ContextPatch(AndThen)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.first, that.first) && equals(this.second, that.second);
  }
}
/** @internal */
class AddService {
  constructor(tag, service) {
    this.tag = tag;
    this.service = service;
    this._tag = "AddService";
    this._id = ContextPatchTypeId;
    this._Input = ContextPatch_variance;
    this._Output = ContextPatch_variance;
  }
  [symbol]() {
    return string(`ContextPatch(AddService)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.tag, that.tag) && equals(this.service, that.service);
  }
}
/** @internal */
class RemoveService {
  constructor(tag) {
    this.tag = tag;
    this._tag = "RemoveService";
    this._id = ContextPatchTypeId;
    this._Input = ContextPatch_variance;
    this._Output = ContextPatch_variance;
  }
  [symbol]() {
    return string(`ContextPatch(RemoveService)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.tag, that.tag);
  }
}
/** @internal */
class UpdateService {
  constructor(tag, update) {
    this.tag = tag;
    this.update = update;
    this._tag = "UpdateService";
    this._id = ContextPatchTypeId;
    this._Input = ContextPatch_variance;
    this._Output = ContextPatch_variance;
  }
  [symbol]() {
    return string(`ContextPatch(AndThen)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.tag, that.tag) && equals(this.update, that.update);
  }
}
/** @internal */
const ContextPatch_empty = () => new ContextPatch_Empty();
/** @internal */
const ContextPatch_diff = (oldValue, newValue) => {
  const missingServices = new Map(oldValue.unsafeMap);
  let patch = ContextPatch_empty();
  for (const [tag, newService] of newValue.unsafeMap.entries()) {
    if (missingServices.has(tag)) {
      const old = missingServices.get(tag);
      missingServices.delete(tag);
      if (!equals(old, newService)) {
        patch = ContextPatch_combine(new UpdateService(tag, () => newService))(patch);
      }
    } else {
      missingServices.delete(tag);
      patch = ContextPatch_combine(new AddService(tag, newService))(patch);
    }
  }
  for (const [tag] of missingServices.entries()) {
    patch = ContextPatch_combine(new RemoveService(tag))(patch);
  }
  return patch;
};
/** @internal */
const ContextPatch_combine = /*#__PURE__*/Function_dual(2, (self, that) => new ContextPatch_AndThen(self, that));
/** @internal */
const ContextPatch_patch = /*#__PURE__*/Function_dual(2, (self, context) => {
  let wasServiceUpdated = false;
  let patches = Chunk_of(self);
  const updatedContext = new Map(context.unsafeMap);
  while (isNonEmpty(patches)) {
    const head = Chunk_headNonEmpty(patches);
    const tail = Chunk_tailNonEmpty(patches);
    switch (head._tag) {
      case "Empty":
        {
          patches = tail;
          break;
        }
      case "AddService":
        {
          updatedContext.set(head.tag, head.service);
          patches = tail;
          break;
        }
      case "AndThen":
        {
          patches = Chunk_prepend(Chunk_prepend(tail, head.second), head.first);
          break;
        }
      case "RemoveService":
        {
          updatedContext.delete(head.tag);
          patches = tail;
          break;
        }
      case "UpdateService":
        {
          updatedContext.set(head.tag, head.update(updatedContext.get(head.tag)));
          wasServiceUpdated = true;
          patches = tail;
          break;
        }
    }
  }
  if (!wasServiceUpdated) {
    return new ContextImpl(updatedContext);
  }
  const map = new Map();
  for (const [tag] of context.unsafeMap) {
    if (updatedContext.has(tag)) {
      map.set(tag, updatedContext.get(tag));
      updatedContext.delete(tag);
    }
  }
  for (const [tag, s] of updatedContext) {
    map.set(tag, s);
  }
  return new ContextImpl(map);
});
//# sourceMappingURL=ContextPatch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Differ/ContextPatch.mjs
/**
 * @since 1.0.0
 */

const ContextPatch_TypeId = ContextPatchTypeId;
/**
 * An empty patch which returns the environment unchanged.
 *
 * @since 1.0.0
 * @category constructors
 */
const Differ_ContextPatch_empty = ContextPatch_empty;
/**
 * @since 1.0.0
 * @category constructors
 */
const Differ_ContextPatch_diff = ContextPatch_diff;
/**
 * Combines two patches to produce a new patch that describes applying the
 * updates from this patch and then the updates from the specified patch.
 *
 * @since 1.0.0
 */
const Differ_ContextPatch_combine = ContextPatch_combine;
/**
 * Applies a `Patch` to the specified `Context` to produce a new patched
 * `Context`.
 *
 * @since 1.0.0
 * @category destructors
 */
const Differ_ContextPatch_patch = ContextPatch_patch;
//# sourceMappingURL=ContextPatch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/HashMap/config.mjs
/** @internal */
const SIZE = 5;
/** @internal */
const BUCKET_SIZE = /*#__PURE__*/Math.pow(2, SIZE);
/** @internal */
const MASK = BUCKET_SIZE - 1;
/** @internal */
const MAX_INDEX_NODE = BUCKET_SIZE / 2;
/** @internal */
const MIN_ARRAY_NODE = BUCKET_SIZE / 4;
//# sourceMappingURL=config.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/HashMap/bitwise.mjs

/**
 * Hamming weight.
 *
 * Taken from: http://jsperf.com/hamming-weight
 *
 * @internal
 */
function popcount(x) {
  x -= x >> 1 & 0x55555555;
  x = (x & 0x33333333) + (x >> 2 & 0x33333333);
  x = x + (x >> 4) & 0x0f0f0f0f;
  x += x >> 8;
  x += x >> 16;
  return x & 0x7f;
}
/** @internal */
function hashFragment(shift, h) {
  return h >>> shift & MASK;
}
/** @internal */
function toBitmap(x) {
  return 1 << x;
}
/** @internal */
function fromBitmap(bitmap, bit) {
  return popcount(bitmap & bit - 1);
}
//# sourceMappingURL=bitwise.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/HashMap/array.mjs
/** @internal */
function arrayUpdate(mutate, at, v, arr) {
  let out = arr;
  if (!mutate) {
    const len = arr.length;
    out = new Array(len);
    for (let i = 0; i < len; ++i) out[i] = arr[i];
  }
  out[at] = v;
  return out;
}
/** @internal */
function arraySpliceOut(mutate, at, arr) {
  const newLen = arr.length - 1;
  let i = 0;
  let g = 0;
  let out = arr;
  if (mutate) {
    i = g = at;
  } else {
    out = new Array(newLen);
    while (i < at) out[g++] = arr[i++];
  }
  ;
  ++i;
  while (i <= newLen) out[g++] = arr[i++];
  if (mutate) {
    out.length = newLen;
  }
  return out;
}
/** @internal */
function arraySpliceIn(mutate, at, v, arr) {
  const len = arr.length;
  if (mutate) {
    let i = len;
    while (i >= at) arr[i--] = arr[i];
    arr[at] = v;
    return arr;
  }
  let i = 0,
    g = 0;
  const out = new Array(len + 1);
  while (i < at) out[g++] = arr[i++];
  out[at] = v;
  while (i < len) out[++g] = arr[i++];
  return out;
}
//# sourceMappingURL=array.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/Stack.mjs
/** @internal */
class Stack {
  constructor(value, previous) {
    this.value = value;
    this.previous = previous;
  }
}
//# sourceMappingURL=Stack.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/HashMap/node.mjs






/** @internal */
class EmptyNode {
  constructor() {
    this._tag = "EmptyNode";
  }
  modify(edit, _shift, f, hash, key, size) {
    const v = f(Option_none());
    if (Option_isNone(v)) return new EmptyNode();
    ++size.value;
    return new LeafNode(edit, hash, key, v);
  }
}
/** @internal */
function isEmptyNode(a) {
  return a instanceof EmptyNode;
}
/** @internal */
function isLeafNode(node) {
  return isEmptyNode(node) || node._tag === "LeafNode" || node._tag === "CollisionNode";
}
/** @internal */
function canEditNode(node, edit) {
  return isEmptyNode(node) ? false : edit === node.edit;
}
/** @internal */
class LeafNode {
  constructor(edit, hash, key, value) {
    this.edit = edit;
    this.hash = hash;
    this.key = key;
    this.value = value;
    this._tag = "LeafNode";
  }
  modify(edit, shift, f, hash, key, size) {
    if (equals(key, this.key)) {
      const v = f(this.value);
      if (v === this.value) return this;else if (Option_isNone(v)) {
        ;
        --size.value;
        return new EmptyNode();
      }
      if (canEditNode(this, edit)) {
        this.value = v;
        return this;
      }
      return new LeafNode(edit, hash, key, v);
    }
    const v = f(Option_none());
    if (Option_isNone(v)) return this;
    ++size.value;
    return mergeLeaves(edit, shift, this.hash, this, hash, new LeafNode(edit, hash, key, v));
  }
}
/** @internal */
class CollisionNode {
  constructor(edit, hash, children) {
    this.edit = edit;
    this.hash = hash;
    this.children = children;
    this._tag = "CollisionNode";
  }
  modify(edit, shift, f, hash, key, size) {
    if (hash === this.hash) {
      const canEdit = canEditNode(this, edit);
      const list = this.updateCollisionList(canEdit, edit, this.hash, this.children, f, key, size);
      if (list === this.children) return this;
      return list.length > 1 ? new CollisionNode(edit, this.hash, list) : list[0]; // collapse single element collision list
    }

    const v = f(Option_none());
    if (Option_isNone(v)) return this;
    ++size.value;
    return mergeLeaves(edit, shift, this.hash, this, hash, new LeafNode(edit, hash, key, v));
  }
  updateCollisionList(mutate, edit, hash, list, f, key, size) {
    const len = list.length;
    for (let i = 0; i < len; ++i) {
      const child = list[i];
      if ("key" in child && equals(key, child.key)) {
        const value = child.value;
        const newValue = f(value);
        if (newValue === value) return list;
        if (Option_isNone(newValue)) {
          ;
          --size.value;
          return arraySpliceOut(mutate, i, list);
        }
        return arrayUpdate(mutate, i, new LeafNode(edit, hash, key, newValue), list);
      }
    }
    const newValue = f(Option_none());
    if (Option_isNone(newValue)) return list;
    ++size.value;
    return arrayUpdate(mutate, len, new LeafNode(edit, hash, key, newValue), list);
  }
}
/** @internal */
class IndexedNode {
  constructor(edit, mask, children) {
    this.edit = edit;
    this.mask = mask;
    this.children = children;
    this._tag = "IndexedNode";
  }
  modify(edit, shift, f, hash, key, size) {
    const mask = this.mask;
    const children = this.children;
    const frag = hashFragment(shift, hash);
    const bit = toBitmap(frag);
    const indx = fromBitmap(mask, bit);
    const exists = mask & bit;
    const canEdit = canEditNode(this, edit);
    if (!exists) {
      const _newChild = new EmptyNode().modify(edit, shift + SIZE, f, hash, key, size);
      if (!_newChild) return this;
      return children.length >= MAX_INDEX_NODE ? expand(edit, frag, _newChild, mask, children) : new IndexedNode(edit, mask | bit, arraySpliceIn(canEdit, indx, _newChild, children));
    }
    const current = children[indx];
    const child = current.modify(edit, shift + SIZE, f, hash, key, size);
    if (current === child) return this;
    let bitmap = mask;
    let newChildren;
    if (isEmptyNode(child)) {
      // remove
      bitmap &= ~bit;
      if (!bitmap) return new EmptyNode();
      if (children.length <= 2 && isLeafNode(children[indx ^ 1])) {
        return children[indx ^ 1]; // collapse
      }

      newChildren = arraySpliceOut(canEdit, indx, children);
    } else {
      // modify
      newChildren = arrayUpdate(canEdit, indx, child, children);
    }
    if (canEdit) {
      this.mask = bitmap;
      this.children = newChildren;
      return this;
    }
    return new IndexedNode(edit, bitmap, newChildren);
  }
}
/** @internal */
class ArrayNode {
  constructor(edit, size, children) {
    this.edit = edit;
    this.size = size;
    this.children = children;
    this._tag = "ArrayNode";
  }
  modify(edit, shift, f, hash, key, size) {
    let count = this.size;
    const children = this.children;
    const frag = hashFragment(shift, hash);
    const child = children[frag];
    const newChild = (child || new EmptyNode()).modify(edit, shift + SIZE, f, hash, key, size);
    if (child === newChild) return this;
    const canEdit = canEditNode(this, edit);
    let newChildren;
    if (isEmptyNode(child) && !isEmptyNode(newChild)) {
      // add
      ;
      ++count;
      newChildren = arrayUpdate(canEdit, frag, newChild, children);
    } else if (!isEmptyNode(child) && isEmptyNode(newChild)) {
      // remove
      ;
      --count;
      if (count <= MIN_ARRAY_NODE) {
        return pack(edit, count, frag, children);
      }
      newChildren = arrayUpdate(canEdit, frag, new EmptyNode(), children);
    } else {
      // modify
      newChildren = arrayUpdate(canEdit, frag, newChild, children);
    }
    if (canEdit) {
      this.size = count;
      this.children = newChildren;
      return this;
    }
    return new ArrayNode(edit, count, newChildren);
  }
}
function pack(edit, count, removed, elements) {
  const children = new Array(count - 1);
  let g = 0;
  let bitmap = 0;
  for (let i = 0, len = elements.length; i < len; ++i) {
    if (i !== removed) {
      const elem = elements[i];
      if (elem && !isEmptyNode(elem)) {
        children[g++] = elem;
        bitmap |= 1 << i;
      }
    }
  }
  return new IndexedNode(edit, bitmap, children);
}
function expand(edit, frag, child, bitmap, subNodes) {
  const arr = [];
  let bit = bitmap;
  let count = 0;
  for (let i = 0; bit; ++i) {
    if (bit & 1) arr[i] = subNodes[count++];
    bit >>>= 1;
  }
  arr[frag] = child;
  return new ArrayNode(edit, count + 1, arr);
}
function mergeLeavesInner(edit, shift, h1, n1, h2, n2) {
  if (h1 === h2) return new CollisionNode(edit, h1, [n2, n1]);
  const subH1 = hashFragment(shift, h1);
  const subH2 = hashFragment(shift, h2);
  if (subH1 === subH2) {
    return child => new IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), [child]);
  } else {
    const children = subH1 < subH2 ? [n1, n2] : [n2, n1];
    return new IndexedNode(edit, toBitmap(subH1) | toBitmap(subH2), children);
  }
}
function mergeLeaves(edit, shift, h1, n1, h2, n2) {
  let stack = undefined;
  let currentShift = shift;
  // eslint-disable-next-line no-constant-condition
  while (true) {
    const res = mergeLeavesInner(edit, currentShift, h1, n1, h2, n2);
    if (typeof res === "function") {
      stack = new Stack(res, stack);
      currentShift = currentShift + SIZE;
    } else {
      let final = res;
      while (stack != null) {
        final = stack.value(final);
        stack = stack.previous;
      }
      return final;
    }
  }
}
//# sourceMappingURL=node.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/HashMap.mjs










/** @internal */
const HashMapTypeId = /*#__PURE__*/Symbol.for("@effect/data/HashMap");
/** @internal */
class HashMapImpl {
  constructor(_editable, _edit, _root, _size) {
    this._editable = _editable;
    this._edit = _edit;
    this._root = _root;
    this._size = _size;
    this._id = HashMapTypeId;
  }
  [Symbol.iterator]() {
    return new HashMapIterator(this, (k, v) => [k, v]);
  }
  [symbol]() {
    let hash = Hash_hash("HashMap");
    for (const item of this) {
      hash ^= combine(Hash_hash(item[0]))(Hash_hash(item[1]));
    }
    return hash;
  }
  [Equal_symbol](that) {
    if (isHashMap(that)) {
      if (that._size !== this._size) {
        return false;
      }
      for (const item of this) {
        const elem = getHash(item[0], Hash_hash(item[0]))(that);
        if (Option_isNone(elem)) {
          return false;
        } else {
          if (!equals(item[1], elem.value)) {
            return false;
          }
        }
      }
      return true;
    }
    return false;
  }
  toString() {
    return `HashMap(${Array.from(this).map(([k, v]) => `[${String(k)}, ${String(v)}]`).join(", ")})`;
  }
  toJSON() {
    return {
      _tag: "HashMap",
      values: Array.from(this)
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
class HashMapIterator {
  constructor(map, f) {
    this.map = map;
    this.f = f;
    this.v = visitLazy(this.map._root, this.f, undefined);
  }
  next() {
    if (Option_isNone(this.v)) {
      return {
        done: true,
        value: undefined
      };
    }
    const v0 = this.v.value;
    this.v = applyCont(v0.cont);
    return {
      done: false,
      value: v0.value
    };
  }
  [Symbol.iterator]() {
    return new HashMapIterator(this.map, this.f);
  }
}
const applyCont = cont => cont ? visitLazyChildren(cont[0], cont[1], cont[2], cont[3], cont[4]) : Option_none();
const visitLazy = (node, f, cont = undefined) => {
  switch (node._tag) {
    case "LeafNode":
      {
        if (Option_isSome(node.value)) {
          return mjs_Option_some({
            value: f(node.key, node.value.value),
            cont
          });
        }
        return applyCont(cont);
      }
    case "CollisionNode":
    case "ArrayNode":
    case "IndexedNode":
      {
        const children = node.children;
        return visitLazyChildren(children.length, children, 0, f, cont);
      }
    default:
      {
        return applyCont(cont);
      }
  }
};
const visitLazyChildren = (len, children, i, f, cont) => {
  while (i < len) {
    const child = children[i++];
    if (child && !isEmptyNode(child)) {
      return visitLazy(child, f, [len, children, i, f, cont]);
    }
  }
  return applyCont(cont);
};
/** @internal */
const HashMap_empty = () => new HashMapImpl(false, 0, new EmptyNode(), 0);
/** @internal */
const HashMap_make = (...entries) => HashMap_fromIterable(entries);
/** @internal */
const HashMap_fromIterable = entries => {
  const map = beginMutation(HashMap_empty());
  for (const entry of entries) {
    set(entry[0], entry[1])(map);
  }
  return endMutation(map);
};
/** @internal */
const isHashMap = u => Predicate_isObject(u) && "_id" in u && u["_id"] === HashMapTypeId;
/** @internal */
const HashMap_isEmpty = self => self && isEmptyNode(self._root);
/** @internal */
const HashMap_get = /*#__PURE__*/Function_dual(2, (self, key) => getHash(self, key, Hash_hash(key)));
/** @internal */
const getHash = /*#__PURE__*/Function_dual(3, (self, key, hash) => {
  let node = self._root;
  let shift = 0;
  // eslint-disable-next-line no-constant-condition
  while (true) {
    switch (node._tag) {
      case "LeafNode":
        {
          return equals(key, node.key) ? node.value : Option_none();
        }
      case "CollisionNode":
        {
          if (hash === node.hash) {
            const children = node.children;
            for (let i = 0, len = children.length; i < len; ++i) {
              const child = children[i];
              if ("key" in child && equals(key, child.key)) {
                return child.value;
              }
            }
          }
          return Option_none();
        }
      case "IndexedNode":
        {
          const frag = hashFragment(shift, hash);
          const bit = toBitmap(frag);
          if (node.mask & bit) {
            node = node.children[fromBitmap(node.mask, bit)];
            shift += SIZE;
            break;
          }
          return Option_none();
        }
      case "ArrayNode":
        {
          node = node.children[hashFragment(shift, hash)];
          if (node) {
            shift += SIZE;
            break;
          }
          return Option_none();
        }
      default:
        return Option_none();
    }
  }
});
/** @internal */
const HashMap_unsafeGet = /*#__PURE__*/Function_dual(2, (self, key) => {
  const element = getHash(self, key, Hash_hash(key));
  if (Option_isNone(element)) {
    throw new Error("Error: Expected map to contain key");
  }
  return element.value;
});
/** @internal */
const HashMap_has = /*#__PURE__*/Function_dual(2, (self, key) => Option_isSome(getHash(self, key, Hash_hash(key))));
/** @internal */
const hasHash = /*#__PURE__*/Function_dual(3, (self, key, hash) => Option_isSome(getHash(self, key, hash)));
/** @internal */
const set = /*#__PURE__*/Function_dual(3, (self, key, value) => modifyAt(self, key, () => mjs_Option_some(value)));
/** @internal */
const setTree = /*#__PURE__*/Function_dual(3, (self, newRoot, newSize) => {
  if (self._editable) {
    ;
    self._root = newRoot;
    self._size = newSize;
    return self;
  }
  return newRoot === self._root ? self : new HashMapImpl(self._editable, self._edit, newRoot, newSize);
});
/** @internal */
const keys = self => new HashMapIterator(self, key => key);
/** @internal */
const values = self => new HashMapIterator(self, (_, value) => value);
/** @internal */
const HashMap_size = self => self._size;
/** @internal */
const beginMutation = self => new HashMapImpl(true, self._edit + 1, self._root, self._size);
/** @internal */
const endMutation = self => {
  ;
  self._editable = false;
  return self;
};
/** @internal */
const mutate = /*#__PURE__*/Function_dual(2, (self, f) => {
  const transient = beginMutation(self);
  f(transient);
  return endMutation(transient);
});
/** @internal */
const modifyAt = /*#__PURE__*/Function_dual(3, (self, key, f) => modifyHash(self, key, Hash_hash(key), f));
/** @internal */
const modifyHash = /*#__PURE__*/Function_dual(4, (self, key, hash, f) => {
  const size = {
    value: self._size
  };
  const newRoot = self._root.modify(self._editable ? self._edit : NaN, 0, f, hash, key, size);
  return setTree(newRoot, size.value)(self);
});
/** @internal */
const HashMap_modify = /*#__PURE__*/Function_dual(3, (self, key, f) => modifyAt(self, key, map(f)));
/** @internal */
const HashMap_union = /*#__PURE__*/Function_dual(2, (self, that) => {
  const result = beginMutation(self);
  HashMap_forEach(that, (v, k) => set(result, k, v));
  return endMutation(result);
});
/** @internal */
const HashMap_remove = /*#__PURE__*/Function_dual(2, (self, key) => modifyAt(self, key, Option_none));
/** @internal */
const removeMany = /*#__PURE__*/Function_dual(2, (self, keys) => mutate(self, map => {
  for (const key of keys) {
    HashMap_remove(key)(map);
  }
}));
/**
 * Maps over the entries of the `HashMap` using the specified function.
 *
 * @since 1.0.0
 * @category mapping
 */
const HashMap_map = /*#__PURE__*/Function_dual(2, (self, f) => HashMap_reduce(self, HashMap_empty(), (map, value, key) => set(map, key, f(value, key))));
/** @internal */
const HashMap_flatMap = /*#__PURE__*/Function_dual(2, (self, f) => HashMap_reduce(self, HashMap_empty(), (zero, value, key) => mutate(zero, map => HashMap_forEach(f(value, key), (value, key) => set(map, key, value)))));
/** @internal */
const HashMap_forEach = /*#__PURE__*/Function_dual(2, (self, f) => HashMap_reduce(self, void 0, (_, value, key) => f(value, key)));
/** @internal */
const HashMap_reduce = /*#__PURE__*/Function_dual(3, (self, zero, f) => {
  const root = self._root;
  if (root._tag === "LeafNode") {
    return Option_isSome(root.value) ? f(zero, root.value.value, root.key) : zero;
  }
  if (root._tag === "EmptyNode") {
    return zero;
  }
  const toVisit = [root.children];
  let children;
  while (children = toVisit.pop()) {
    for (let i = 0, len = children.length; i < len;) {
      const child = children[i++];
      if (child && !isEmptyNode(child)) {
        if (child._tag === "LeafNode") {
          if (Option_isSome(child.value)) {
            zero = f(zero, child.value.value, child.key);
          }
        } else {
          toVisit.push(child.children);
        }
      }
    }
  }
  return zero;
});
/** @internal */
const HashMap_filter = /*#__PURE__*/Function_dual(2, (self, f) => mutate(HashMap_empty(), map => {
  for (const [k, a] of self) {
    if (f(a, k)) {
      set(map, k, a);
    }
  }
}));
/** @internal */
const HashMap_compact = self => HashMap_filterMap(self, Function_identity);
/** @internal */
const HashMap_filterMap = /*#__PURE__*/Function_dual(2, (self, f) => mutate(HashMap_empty(), map => {
  for (const [k, a] of self) {
    const option = f(a, k);
    if (Option_isSome(option)) {
      set(map, k, option.value);
    }
  }
}));
/** @internal */
const HashMap_findFirst = /*#__PURE__*/Function_dual(2, (self, predicate) => {
  for (const ka of self) {
    if (predicate(ka[0], ka[1])) {
      return mjs_Option_some(ka);
    }
  }
  return Option_none();
});
//# sourceMappingURL=HashMap.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/HashSet.mjs






/** @internal */
const HashSetTypeId = /*#__PURE__*/Symbol.for("@effect/data/HashSet");
/** @internal */
class HashSetImpl {
  constructor(_keyMap) {
    this._keyMap = _keyMap;
    this._id = HashSetTypeId;
  }
  [Symbol.iterator]() {
    return keys(this._keyMap);
  }
  [symbol]() {
    return combine(Hash_hash(this._keyMap))(Hash_hash("HashSet"));
  }
  [Equal_symbol](that) {
    if (isHashSet(that)) {
      return HashMap_size(this._keyMap) === HashMap_size(that._keyMap) && equals(this._keyMap, that._keyMap);
    }
    return false;
  }
  toString() {
    return `HashSet(${Array.from(this).map(String).join(", ")})`;
  }
  toJSON() {
    return {
      _tag: "HashSet",
      values: Array.from(this)
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
const isHashSet = u => Predicate_isObject(u) && "_id" in u && u["_id"] === HashSetTypeId;
/** @internal */
const HashSet_empty = () => new HashSetImpl(HashMap_empty());
/** @internal */
const HashSet_fromIterable = elements => {
  const set = HashSet_beginMutation(HashSet_empty());
  for (const value of elements) {
    HashSet_add(set, value);
  }
  return HashSet_endMutation(set);
};
/** @internal */
const HashSet_make = (...elements) => {
  const set = HashSet_beginMutation(HashSet_empty());
  for (const value of elements) {
    HashSet_add(set, value);
  }
  return HashSet_endMutation(set);
};
/** @internal */
const HashSet_has = /*#__PURE__*/Function_dual(2, (self, value) => HashMap_has(self._keyMap, value));
/** @internal */
const HashSet_some = /*#__PURE__*/Function_dual(2, (self, f) => {
  let found = false;
  for (const value of self) {
    found = f(value);
    if (found) {
      break;
    }
  }
  return found;
});
/** @internal */
const HashSet_every = /*#__PURE__*/Function_dual(2, (self, refinement) => !HashSet_some(self, a => !refinement(a)));
/** @internal */
const isSubset = /*#__PURE__*/Function_dual(2, (self, that) => HashSet_every(self, value => HashSet_has(that, value)));
/** @internal */
const HashSet_values = self => keys(self._keyMap);
/** @internal */
const HashSet_size = self => HashMap_size(self._keyMap);
/** @internal */
const HashSet_beginMutation = self => new HashSetImpl(beginMutation(self._keyMap));
/** @internal */
const HashSet_endMutation = self => {
  ;
  self._keyMap._editable = false;
  return self;
};
/** @internal */
const HashSet_mutate = /*#__PURE__*/Function_dual(2, (self, f) => {
  const transient = HashSet_beginMutation(self);
  f(transient);
  return HashSet_endMutation(transient);
});
/** @internal */
const HashSet_add = /*#__PURE__*/Function_dual(2, (self, value) => self._keyMap._editable ? (set(value, true)(self._keyMap), self) : new HashSetImpl(set(value, true)(self._keyMap)));
/** @internal */
const HashSet_remove = /*#__PURE__*/Function_dual(2, (self, value) => self._keyMap._editable ? (HashMap_remove(value)(self._keyMap), self) : new HashSetImpl(HashMap_remove(value)(self._keyMap)));
/** @internal */
const HashSet_difference = /*#__PURE__*/Function_dual(2, (self, that) => HashSet_mutate(self, set => {
  for (const value of that) {
    HashSet_remove(set, value);
  }
}));
/** @internal */
const HashSet_intersection = /*#__PURE__*/Function_dual(2, (self, that) => HashSet_mutate(HashSet_empty(), set => {
  for (const value of that) {
    if (HashSet_has(value)(self)) {
      HashSet_add(value)(set);
    }
  }
}));
/** @internal */
const HashSet_union = /*#__PURE__*/Function_dual(2, (self, that) => HashSet_mutate(HashSet_empty(), set => {
  HashSet_forEach(self, value => HashSet_add(set, value));
  for (const value of that) {
    HashSet_add(set, value);
  }
}));
/** @internal */
const toggle = /*#__PURE__*/Function_dual(2, (self, value) => HashSet_has(self, value) ? HashSet_remove(self, value) : HashSet_add(self, value));
/** @internal */
const HashSet_map = /*#__PURE__*/Function_dual(2, (self, f) => HashSet_mutate(HashSet_empty(), set => {
  HashSet_forEach(self, a => {
    const b = f(a);
    if (!HashSet_has(set, b)) {
      HashSet_add(set, b);
    }
  });
}));
/** @internal */
const HashSet_flatMap = /*#__PURE__*/Function_dual(2, (self, f) => HashSet_mutate(HashSet_empty(), set => {
  HashSet_forEach(self, a => {
    for (const b of f(a)) {
      if (!HashSet_has(set, b)) {
        HashSet_add(set, b);
      }
    }
  });
}));
/** @internal */
const HashSet_forEach = /*#__PURE__*/Function_dual(2, (self, f) => HashMap_forEach(self._keyMap, (_, k) => f(k)));
/** @internal */
const HashSet_reduce = /*#__PURE__*/Function_dual(3, (self, zero, f) => HashMap_reduce(self._keyMap, zero, (z, _, a) => f(z, a)));
/** @internal */
const HashSet_filter = /*#__PURE__*/Function_dual(2, (self, f) => {
  return HashSet_mutate(HashSet_empty(), set => {
    const iterator = HashSet_values(self);
    let next;
    while (!(next = iterator.next()).done) {
      const value = next.value;
      if (f(value)) {
        HashSet_add(set, value);
      }
    }
  });
});
/** @internal */
const HashSet_partition = /*#__PURE__*/Function_dual(2, (self, f) => {
  const iterator = HashSet_values(self);
  let next;
  const right = HashSet_beginMutation(HashSet_empty());
  const left = HashSet_beginMutation(HashSet_empty());
  while (!(next = iterator.next()).done) {
    const value = next.value;
    if (f(value)) {
      HashSet_add(right, value);
    } else {
      HashSet_add(left, value);
    }
  }
  return [HashSet_endMutation(left), HashSet_endMutation(right)];
});
//# sourceMappingURL=HashSet.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/HashMap/keySet.mjs

/** @internal */
function keySet(self) {
  return new HashSetImpl(self);
}
//# sourceMappingURL=keySet.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/HashMap.mjs
/**
 * @since 1.0.0
 */


const HashMap_TypeId = HashMapTypeId;
/**
 * @since 1.0.0
 * @category refinements
 */
const HashMap_isHashMap = isHashMap;
/**
 * Creates a new `HashMap`.
 *
 * @since 1.0.0
 * @category constructors
 */
const mjs_HashMap_empty = HashMap_empty;
/**
 * Constructs a new `HashMap` from an array of key/value pairs.
 *
 * @since 1.0.0
 * @category constructors
 */
const mjs_HashMap_make = HashMap_make;
/**
 * Constructs a new `HashMap` from an iterable of key/value pairs.
 *
 * @since 1.0.0
 * @category constructors
 */
const mjs_HashMap_fromIterable = HashMap_fromIterable;
/**
 * Checks if the `HashMap` contains any entries.
 *
 * @since 1.0.0
 * @category elements
 */
const mjs_HashMap_isEmpty = HashMap_isEmpty;
/**
 * Safely lookup the value for the specified key in the `HashMap` using the
 * internal hashing function.
 *
 * @since 1.0.0
 * @category elements
 */
const mjs_HashMap_get = HashMap_get;
/**
 * Lookup the value for the specified key in the `HashMap` using a custom hash.
 *
 * @since 1.0.0
 * @category elements
 */
const HashMap_getHash = getHash;
/**
 * Unsafely lookup the value for the specified key in the `HashMap` using the
 * internal hashing function.
 *
 * @since 1.0.0
 * @category unsafe
 */
const mjs_HashMap_unsafeGet = HashMap_unsafeGet;
/**
 * Checks if the specified key has an entry in the `HashMap`.
 *
 * @since 1.0.0
 * @category elements
 */
const mjs_HashMap_has = HashMap_has;
/**
 * Checks if the specified key has an entry in the `HashMap` using a custom
 * hash.
 *
 * @since 1.0.0
 * @category elements
 */
const HashMap_hasHash = hasHash;
/**
 * Sets the specified key to the specified value using the internal hashing
 * function.
 *
 * @since 1.0.0
 */
const HashMap_set = set;
/**
 * Returns an `IterableIterator` of the keys within the `HashMap`.
 *
 * @since 1.0.0
 * @category getters
 */
const HashMap_keys = keys;
/**
 * Returns a `HashSet` of keys within the `HashMap`.
 *
 * @since 1.0.0
 * @category getter
 */
const HashMap_keySet = keySet;
/**
 * Returns an `IterableIterator` of the values within the `HashMap`.
 *
 * @since 1.0.0
 * @category getters
 */
const HashMap_values = values;
/**
 * Returns the number of entries within the `HashMap`.
 *
 * @since 1.0.0
 * @category getters
 */
const mjs_HashMap_size = HashMap_size;
/**
 * Marks the `HashMap` as mutable.
 *
 * @since 1.0.0
 */
const HashMap_beginMutation = beginMutation;
/**
 * Marks the `HashMap` as immutable.
 *
 * @since 1.0.0
 */
const HashMap_endMutation = endMutation;
/**
 * Mutates the `HashMap` within the context of the provided function.
 *
 * @since 1.0.0
 */
const HashMap_mutate = mutate;
/**
 * Set or remove the specified key in the `HashMap` using the specified
 * update function. The value of the specified key will be computed using the
 * provided hash.
 *
 * The update function will be invoked with the current value of the key if it
 * exists, or `None` if no such value exists.
 *
 * @since 1.0.0
 */
const HashMap_modifyAt = modifyAt;
/**
 * Alter the value of the specified key in the `HashMap` using the specified
 * update function. The value of the specified key will be computed using the
 * provided hash.
 *
 * The update function will be invoked with the current value of the key if it
 * exists, or `None` if no such value exists.
 *
 * This function will always either update or insert a value into the `HashMap`.
 *
 * @since 1.0.0
 */
const HashMap_modifyHash = modifyHash;
/**
 * Updates the value of the specified key within the `HashMap` if it exists.
 *
 * @since 1.0.0
 */
const mjs_HashMap_modify = HashMap_modify;
/**
 * Performs a union of this `HashMap` and that `HashMap`.
 *
 * @since 1.0.0
 */
const mjs_HashMap_union = HashMap_union;
/**
 * Remove the entry for the specified key in the `HashMap` using the internal
 * hashing function.
 *
 * @since 1.0.0
 */
const mjs_HashMap_remove = HashMap_remove;
/**
 * Removes all entries in the `HashMap` which have the specified keys.
 *
 * @since 1.0.0
 */
const HashMap_removeMany = removeMany;
/**
 * Maps over the entries of the `HashMap` using the specified function.
 *
 * @since 1.0.0
 * @category mapping
 */
const mjs_HashMap_map = HashMap_map;
/**
 * Chains over the entries of the `HashMap` using the specified function.
 *
 * **NOTE**: the hash and equal of both maps have to be the same.
 *
 * @since 1.0.0
 * @category sequencing
 */
const mjs_HashMap_flatMap = HashMap_flatMap;
/**
 * Applies the specified function to the entries of the `HashMap`.
 *
 * @since 1.0.0
 * @category traversing
 */
const mjs_HashMap_forEach = HashMap_forEach;
/**
 * Reduces the specified state over the entries of the `HashMap`.
 *
 * @since 1.0.0
 * @category folding
 */
const mjs_HashMap_reduce = HashMap_reduce;
/**
 * Filters entries out of a `HashMap` using the specified predicate.
 *
 * @since 1.0.0
 * @category filtering
 */
const mjs_HashMap_filter = HashMap_filter;
/**
 * Filters out `None` values from a `HashMap` of `Options`s.
 *
 * @since 1.0.0
 * @category filtering
 */
const mjs_HashMap_compact = HashMap_compact;
/**
 * Maps over the entries of the `HashMap` using the specified partial function
 * and filters out `None` values.
 *
 * @since 1.0.0
 * @category filtering
 */
const mjs_HashMap_filterMap = HashMap_filterMap;
/**
 * Returns the first element that satisfies the specified
 * predicate, or `None` if no such element exists.
 *
 * @category elements
 * @since 1.0.0
 */
const mjs_HashMap_findFirst = HashMap_findFirst;
//# sourceMappingURL=HashMap.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/Differ/HashMapPatch.mjs





/** @internal */
const HashMapPatchTypeId = /*#__PURE__*/Symbol.for("@effect/data/Differ/HashMapPatch");
function HashMapPatch_variance(a) {
  return a;
}
class HashMapPatch_Empty {
  constructor() {
    this._tag = "Empty";
    this._Key = HashMapPatch_variance;
    this._Value = HashMapPatch_variance;
    this._Patch = HashMapPatch_variance;
    this._id = HashMapPatchTypeId;
  }
  [symbol]() {
    return string(`HashMapPatch(Empty)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id;
  }
}
class HashMapPatch_AndThen {
  constructor(first, second) {
    this.first = first;
    this.second = second;
    this._tag = "AndThen";
    this._Key = HashMapPatch_variance;
    this._Value = HashMapPatch_variance;
    this._Patch = HashMapPatch_variance;
    this._id = HashMapPatchTypeId;
  }
  [symbol]() {
    return string(`HashMapPatch(AndThen)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.first, that.first) && equals(this.second, that.second);
  }
}
class Add {
  constructor(key, value) {
    this.key = key;
    this.value = value;
    this._tag = "Add";
    this._Key = HashMapPatch_variance;
    this._Value = HashMapPatch_variance;
    this._Patch = HashMapPatch_variance;
    this._id = HashMapPatchTypeId;
  }
  [symbol]() {
    return string(`HashMapPatch(Add)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.key, that.key) && equals(this.value, that.value);
  }
}
class Remove {
  constructor(key) {
    this.key = key;
    this._tag = "Remove";
    this._Key = HashMapPatch_variance;
    this._Value = HashMapPatch_variance;
    this._Patch = HashMapPatch_variance;
    this._id = HashMapPatchTypeId;
  }
  [symbol]() {
    return string(`HashMapPatch(Remove)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.key, that.key);
  }
}
class HashMapPatch_Update {
  constructor(key, patch) {
    this.key = key;
    this.patch = patch;
    this._tag = "Update";
    this._Key = HashMapPatch_variance;
    this._Value = HashMapPatch_variance;
    this._Patch = HashMapPatch_variance;
    this._id = HashMapPatchTypeId;
  }
  [symbol]() {
    return string(`HashMapPatch(Update)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.key, that.key) && equals(this.patch, that.patch);
  }
}
/** @internal */
const HashMapPatch_empty = () => new HashMapPatch_Empty();
/** @internal */
const HashMapPatch_diff = options => {
  const [removed, patch] = mjs_HashMap_reduce([options.oldValue, HashMapPatch_empty()], ([map, patch], newValue, key) => {
    const option = mjs_HashMap_get(key)(map);
    switch (option._tag) {
      case "Some":
        {
          const valuePatch = options.differ.diff(option.value, newValue);
          if (equals(valuePatch, options.differ.empty)) {
            return [mjs_HashMap_remove(key)(map), patch];
          }
          return [mjs_HashMap_remove(key)(map), HashMapPatch_combine(new HashMapPatch_Update(key, valuePatch))(patch)];
        }
      case "None":
        {
          return [map, HashMapPatch_combine(new Add(key, newValue))(patch)];
        }
    }
  })(options.newValue);
  return mjs_HashMap_reduce(patch, (patch, _, key) => HashMapPatch_combine(new Remove(key))(patch))(removed);
};
/** @internal */
const HashMapPatch_combine = /*#__PURE__*/Function_dual(2, (self, that) => new HashMapPatch_AndThen(self, that));
/** @internal */
const HashMapPatch_patch = /*#__PURE__*/Function_dual(3, (self, oldValue, differ) => {
  let map = oldValue;
  let patches = Chunk_of(self);
  while (isNonEmpty(patches)) {
    const head = Chunk_headNonEmpty(patches);
    const tail = Chunk_tailNonEmpty(patches);
    switch (head._tag) {
      case "Empty":
        {
          patches = tail;
          break;
        }
      case "AndThen":
        {
          patches = Chunk_prepend(head.first)(Chunk_prepend(head.second)(tail));
          break;
        }
      case "Add":
        {
          map = HashMap_set(head.key, head.value)(map);
          patches = tail;
          break;
        }
      case "Remove":
        {
          map = mjs_HashMap_remove(head.key)(map);
          patches = tail;
          break;
        }
      case "Update":
        {
          const option = mjs_HashMap_get(head.key)(map);
          if (option._tag === "Some") {
            map = HashMap_set(head.key, differ.patch(head.patch, option.value))(map);
          }
          patches = tail;
          break;
        }
    }
  }
  return map;
});
//# sourceMappingURL=HashMapPatch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Differ/HashMapPatch.mjs
/**
 * @since 1.0.0
 */

const HashMapPatch_TypeId = HashMapPatchTypeId;
/**
 * Constructs an empty map patch.
 *
 * @since 1.0.0
 * @category constructors
 */
const Differ_HashMapPatch_empty = HashMapPatch_empty;
/**
 * Constructs a map patch from a new and old map of keys and values and a
 * differ for the values.
 *
 * @since 1.0.0
 * @category constructors
 */
const Differ_HashMapPatch_diff = HashMapPatch_diff;
/**
 * Combines two map patches to produce a new map patch that describes
 * applying their changes sequentially.
 *
 * @since 1.0.0
 */
const Differ_HashMapPatch_combine = HashMapPatch_combine;
/**
 * Applies a map patch to a map of keys and values to produce a new map of
 * keys and values values which represents the original map of keys and
 * values updated with the changes described by this patch.
 *
 * @since 1.0.0
 * @category destructors
 */
const Differ_HashMapPatch_patch = HashMapPatch_patch;
//# sourceMappingURL=HashMapPatch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/HashSet.mjs
/**
 * @since 1.0.0
 */

const HashSet_TypeId = HashSetTypeId;
/**
 * @since 1.0.0
 * @category refinements
 */
const HashSet_isHashSet = isHashSet;
/**
 * Creates an empty `HashSet`.
 *
 * @since 1.0.0
 * @category constructors
 */
const mjs_HashSet_empty = HashSet_empty;
/**
 * Construct a new `HashSet` from a `Collection` of values
 *
 * @since 1.0.0
 * @category constructors
 */
const mjs_HashSet_fromIterable = HashSet_fromIterable;
/**
 * Construct a new `HashSet` from a variable number of values.
 *
 * @since 1.0.0
 * @category constructors
 */
const mjs_HashSet_make = HashSet_make;
/**
 * Checks if the specified value exists in the `HashSet`.
 *
 * @since 1.0.0
 * @category elements
 */
const mjs_HashSet_has = HashSet_has;
/**
 * Check if a predicate holds true for some `HashSet` element.
 *
 * @since 1.0.0
 * @category elements
 */
const mjs_HashSet_some = HashSet_some;
/**
 * Check if a predicate holds true for every `HashSet` element.
 *
 * @since 1.0.0
 * @category elements
 */
const mjs_HashSet_every = HashSet_every;
/**
 * Returns `true` if and only if every element in the this `HashSet` is an
 * element of the second set,
 *
 * **NOTE**: the hash and equal of both sets must be the same.
 *
 * @since 1.0.0
 * @category elements
 */
const HashSet_isSubset = isSubset;
/**
 * Returns an `IterableIterator` of the values in the `HashSet`.
 *
 * @since 1.0.0
 * @category getters
 */
const mjs_HashSet_values = HashSet_values;
/**
 * Calculates the number of values in the `HashSet`.
 *
 * @since 1.0.0
 * @category getters
 */
const mjs_HashSet_size = HashSet_size;
/**
 * Marks the `HashSet` as mutable.
 *
 * @since 1.0.0
 */
const mjs_HashSet_beginMutation = HashSet_beginMutation;
/**
 * Marks the `HashSet` as immutable.
 *
 * @since 1.0.0
 */
const mjs_HashSet_endMutation = HashSet_endMutation;
/**
 * Mutates the `HashSet` within the context of the provided function.
 *
 * @since 1.0.0
 */
const mjs_HashSet_mutate = HashSet_mutate;
/**
 * Adds a value to the `HashSet`.
 *
 * @since 1.0.0
 */
const mjs_HashSet_add = HashSet_add;
/**
 * Removes a value from the `HashSet`.
 *
 * @since 1.0.0
 */
const mjs_HashSet_remove = HashSet_remove;
/**
 * Computes the set difference between this `HashSet` and the specified
 * `Iterable<A>`.
 *
 * **NOTE**: the hash and equal of the values in both the set and the iterable
 * must be the same.
 *
 * @since 1.0.0
 */
const mjs_HashSet_difference = HashSet_difference;
/**
 * Returns a `HashSet` of values which are present in both this set and that
 * `Iterable<A>`.
 *
 * **NOTE**: the hash and equal of the values in both the set and the iterable
 * must be the same.
 *
 * @since 1.0.0
 */
const mjs_HashSet_intersection = HashSet_intersection;
/**
 * Computes the set union `(`self` + `that`)` between this `HashSet` and the
 * specified `Iterable<A>`.
 *
 * **NOTE**: the hash and equal of the values in both the set and the iterable
 * must be the same.
 *
 * @since 1.0.0
 */
const mjs_HashSet_union = HashSet_union;
/**
 * Checks if a value is present in the `HashSet`. If it is present, the value
 * will be removed from the `HashSet`, otherwise the value will be added to the
 * `HashSet`.
 *
 * @since 1.0.0
 */
const HashSet_toggle = toggle;
/**
 * Maps over the values of the `HashSet` using the specified function.
 *
 * @since 1.0.0
 * @category mapping
 */
const mjs_HashSet_map = HashSet_map;
/**
 * Chains over the values of the `HashSet` using the specified function.
 *
 * @since 1.0.0
 * @category sequencing
 */
const mjs_HashSet_flatMap = HashSet_flatMap;
/**
 * Applies the specified function to the values of the `HashSet`.
 *
 * @since 1.0.0
 * @category traversing
 */
const mjs_HashSet_forEach = HashSet_forEach;
/**
 * Reduces the specified state over the values of the `HashSet`.
 *
 * @since 1.0.0
 * @category folding
 */
const mjs_HashSet_reduce = HashSet_reduce;
/**
 * Filters values out of a `HashSet` using the specified predicate.
 *
 * @since 1.0.0
 * @category filtering
 */
const mjs_HashSet_filter = HashSet_filter;
/**
 * Partition the values of a `HashSet` using the specified predicate.
 *
 * If a value matches the predicate, it will be placed into the `HashSet` on the
 * right side of the resulting `Tuple`, otherwise the value will be placed into
 * the left side.
 *
 * @since 1.0.0
 * @category partitioning
 */
const mjs_HashSet_partition = HashSet_partition;
//# sourceMappingURL=HashSet.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/Differ/HashSetPatch.mjs





/** @internal */
const HashSetPatchTypeId = /*#__PURE__*/Symbol.for("@effect/data/Differ/HashSetPatch");
function HashSetPatch_variance(a) {
  return a;
}
class HashSetPatch_Empty {
  constructor() {
    this._tag = "Empty";
    this._Value = HashSetPatch_variance;
    this._id = HashSetPatchTypeId;
  }
  [symbol]() {
    return string(`HashSetPatch(Empty)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id;
  }
}
class HashSetPatch_AndThen {
  constructor(first, second) {
    this.first = first;
    this.second = second;
    this._tag = "AndThen";
    this._Value = HashSetPatch_variance;
    this._id = HashSetPatchTypeId;
  }
  [symbol]() {
    return string(`HashSetPatch(AndThen)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.first, that.first) && equals(this.second, that.second);
  }
}
class HashSetPatch_Add {
  constructor(value) {
    this.value = value;
    this._tag = "Add";
    this._Value = HashSetPatch_variance;
    this._id = HashSetPatchTypeId;
  }
  [symbol]() {
    return string(`HashSetPatch(Add)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.value, that.value);
  }
}
class HashSetPatch_Remove {
  constructor(value) {
    this.value = value;
    this._tag = "Remove";
    this._Value = HashSetPatch_variance;
    this._id = HashSetPatchTypeId;
  }
  [symbol]() {
    return string(`HashSetPatch(Remove)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.value, that.value);
  }
}
/** @internal */
const HashSetPatch_empty = () => new HashSetPatch_Empty();
/** @internal */
const HashSetPatch_diff = (oldValue, newValue) => {
  const [removed, patch] = mjs_HashSet_reduce([oldValue, HashSetPatch_empty()], ([set, patch], value) => {
    if (mjs_HashSet_has(value)(set)) {
      return [mjs_HashSet_remove(value)(set), patch];
    }
    return [set, HashSetPatch_combine(new HashSetPatch_Add(value))(patch)];
  })(newValue);
  return mjs_HashSet_reduce(patch, (patch, value) => HashSetPatch_combine(new HashSetPatch_Remove(value))(patch))(removed);
};
/** @internal */
const HashSetPatch_combine = /*#__PURE__*/Function_dual(2, (self, that) => new HashSetPatch_AndThen(self, that));
/** @internal */
const HashSetPatch_patch = /*#__PURE__*/Function_dual(2, (self, oldValue) => {
  let set = oldValue;
  let patches = Chunk_of(self);
  while (isNonEmpty(patches)) {
    const head = Chunk_headNonEmpty(patches);
    const tail = Chunk_tailNonEmpty(patches);
    switch (head._tag) {
      case "Empty":
        {
          patches = tail;
          break;
        }
      case "AndThen":
        {
          patches = Chunk_prepend(head.first)(Chunk_prepend(head.second)(tail));
          break;
        }
      case "Add":
        {
          set = mjs_HashSet_add(head.value)(set);
          patches = tail;
          break;
        }
      case "Remove":
        {
          set = mjs_HashSet_remove(head.value)(set);
          patches = tail;
        }
    }
  }
  return set;
});
//# sourceMappingURL=HashSetPatch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Differ/HashSetPatch.mjs
/**
 * @since 1.0.0
 */

const HashSetPatch_TypeId = HashSetPatchTypeId;
/**
 * Constructs an empty set patch.
 *
 * @since 1.0.0
 * @category constructors
 */
const Differ_HashSetPatch_empty = HashSetPatch_empty;
/**
 * Constructs a set patch from a new set of values.
 *
 * @since 1.0.0
 * @category constructors
 */
const Differ_HashSetPatch_diff = HashSetPatch_diff;
/**
 * Combines two set patches to produce a new set patch that describes
 * applying their changes sequentially.
 *
 * @since 1.0.0
 */
const Differ_HashSetPatch_combine = HashSetPatch_combine;
/**
 * Applies a set patch to a set of values to produce a new set of values
 * which represents the original set of values updated with the changes
 * described by this patch.
 *
 * @since 1.0.0
 * @category destructors
 */
const Differ_HashSetPatch_patch = HashSetPatch_patch;
//# sourceMappingURL=HashSetPatch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/Differ/OrPatch.mjs





/** @internal */
const OrPatchTypeId = /*#__PURE__*/Symbol.for("@effect/data/Differ/OrPatch");
function OrPatch_variance(a) {
  return a;
}
/** @internal */
class OrPatch_Empty {
  constructor() {
    this._tag = "Empty";
    this._Value = OrPatch_variance;
    this._Value2 = OrPatch_variance;
    this._Patch = OrPatch_variance;
    this._Patch2 = OrPatch_variance;
    this._id = OrPatchTypeId;
  }
  [symbol]() {
    return string(`OrPatch(Empty)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id;
  }
}
/** @internal */
class OrPatch_AndThen {
  constructor(first, second) {
    this.first = first;
    this.second = second;
    this._tag = "AndThen";
    this._Value = OrPatch_variance;
    this._Value2 = OrPatch_variance;
    this._Patch = OrPatch_variance;
    this._Patch2 = OrPatch_variance;
    this._id = OrPatchTypeId;
  }
  [symbol]() {
    return string(`OrPatch(AndThen)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.first, that.first) && equals(this.second, that.second);
  }
}
/** @internal */
class SetLeft {
  constructor(value) {
    this.value = value;
    this._tag = "SetLeft";
    this._Value = OrPatch_variance;
    this._Value2 = OrPatch_variance;
    this._Patch = OrPatch_variance;
    this._Patch2 = OrPatch_variance;
    this._id = OrPatchTypeId;
  }
  [symbol]() {
    return string(`OrPatch(SetLeft)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.value, that.value);
  }
}
/** @internal */
class SetRight {
  constructor(value) {
    this.value = value;
    this._tag = "SetRight";
    this._Value = OrPatch_variance;
    this._Value2 = OrPatch_variance;
    this._Patch = OrPatch_variance;
    this._Patch2 = OrPatch_variance;
    this._id = OrPatchTypeId;
  }
  [symbol]() {
    return string(`OrPatch(SetRight)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.value, that.value);
  }
}
/** @internal */
class UpdateLeft {
  constructor(patch) {
    this.patch = patch;
    this._tag = "UpdateLeft";
    this._Value = OrPatch_variance;
    this._Value2 = OrPatch_variance;
    this._Patch = OrPatch_variance;
    this._Patch2 = OrPatch_variance;
    this._id = OrPatchTypeId;
  }
  [symbol]() {
    return string(`OrPatch(UpdateLeft)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.patch, that.patch);
  }
}
/** @internal */
class UpdateRight {
  constructor(patch) {
    this.patch = patch;
    this._tag = "UpdateRight";
    this._Value = OrPatch_variance;
    this._Value2 = OrPatch_variance;
    this._Patch = OrPatch_variance;
    this._Patch2 = OrPatch_variance;
    this._id = OrPatchTypeId;
  }
  [symbol]() {
    return string(`OrPatch(UpdateRight)`);
  }
  [Equal_symbol](that) {
    return typeof that === "object" && that !== null && "_id" in that && that["_id"] === this._id && "_tag" in that && that["_tag"] === this._id && equals(this.patch, that.patch);
  }
}
/** @internal */
const OrPatch_empty = () => new OrPatch_Empty();
/** @internal */
const OrPatch_diff = options => {
  switch (options.oldValue._tag) {
    case "Left":
      {
        switch (options.newValue._tag) {
          case "Left":
            {
              const valuePatch = options.left.diff(options.oldValue.left, options.newValue.left);
              if (equals(valuePatch, options.left.empty)) {
                return new OrPatch_Empty();
              }
              return new UpdateLeft(valuePatch);
            }
          case "Right":
            {
              return new SetRight(options.newValue.right);
            }
        }
      }
    case "Right":
      {
        switch (options.newValue._tag) {
          case "Left":
            {
              return new SetLeft(options.newValue.left);
            }
          case "Right":
            {
              const valuePatch = options.right.diff(options.oldValue.right, options.newValue.right);
              if (equals(valuePatch, options.right.empty)) {
                return new OrPatch_Empty();
              }
              return new UpdateRight(valuePatch);
            }
        }
      }
  }
};
/** @internal */
const OrPatch_combine = /*#__PURE__*/Function_dual(2, (self, that) => new OrPatch_AndThen(self, that));
/** @internal */
const OrPatch_patch = /*#__PURE__*/Function_dual(2, (self, {
  left,
  oldValue,
  right
}) => {
  let patches = Chunk_of(self);
  let result = oldValue;
  while (isNonEmpty(patches)) {
    const head = Chunk_headNonEmpty(patches);
    const tail = Chunk_tailNonEmpty(patches);
    switch (head._tag) {
      case "Empty":
        {
          patches = tail;
          break;
        }
      case "AndThen":
        {
          patches = Chunk_prepend(head.first)(Chunk_prepend(head.second)(tail));
          break;
        }
      case "UpdateLeft":
        {
          if (result._tag === "Left") {
            result = Either_left(left.patch(head.patch, result.left));
          }
          patches = tail;
          break;
        }
      case "UpdateRight":
        {
          if (result._tag === "Right") {
            result = Either_right(right.patch(head.patch, result.right));
          }
          patches = tail;
          break;
        }
      case "SetLeft":
        {
          result = Either_left(head.value);
          patches = tail;
          break;
        }
      case "SetRight":
        {
          result = Either_right(head.value);
          patches = tail;
          break;
        }
    }
  }
  return result;
});
//# sourceMappingURL=OrPatch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Differ/OrPatch.mjs
/**
 * @since 1.0.0
 */

const OrPatch_TypeId = OrPatchTypeId;
/**
 * Constructs an empty `OrPatch`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Differ_OrPatch_empty = OrPatch_empty;
/**
 * Constructs an `OrPatch` from a new and old value and a differ for the
 * values.
 *
 * @since 1.0.0
 * @category constructors
 */
const Differ_OrPatch_diff = OrPatch_diff;
/**
 * Combines two or patches to produce a new or patch that describes applying
 * their changes sequentially.
 *
 * @since 1.0.0
 */
const Differ_OrPatch_combine = OrPatch_combine;
/**
 * Applies an `OrPatch` to a value to produce a new value which represents
 * the original value updated with the changes described by this patch.
 *
 * @since 1.0.0
 * @category destructors
 */
const Differ_OrPatch_patch = OrPatch_patch;
//# sourceMappingURL=OrPatch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/internal/Differ.mjs








/** @internal */
const DifferTypeId = /*#__PURE__*/Symbol.for("@effect/data/Differ");
/** @internal */
class DifferImpl {
  constructor(params) {
    this._id = DifferTypeId;
    this._P = Function_identity;
    this._V = Function_identity;
    this.empty = params.empty;
    this.diff = params.diff;
    this.combine = params.combine;
    this.patch = params.patch;
  }
}
/** @internal */
const Differ_make = params => new DifferImpl(params);
/** @internal */
const environment = () => Differ_make({
  empty: Differ_ContextPatch_empty(),
  combine: (first, second) => Differ_ContextPatch_combine(second)(first),
  diff: (oldValue, newValue) => Differ_ContextPatch_diff(oldValue, newValue),
  patch: (patch, oldValue) => Differ_ContextPatch_patch(oldValue)(patch)
});
/** @internal */
const chunk = differ => Differ_make({
  empty: Differ_ChunkPatch_empty(),
  combine: (first, second) => Differ_ChunkPatch_combine(second)(first),
  diff: (oldValue, newValue) => ChunkPatch_diff({
    oldValue,
    newValue,
    differ
  }),
  patch: (patch, oldValue) => ChunkPatch_patch(oldValue, differ)(patch)
});
/** @internal */
const hashMap = differ => Differ_make({
  empty: Differ_HashMapPatch_empty(),
  combine: (first, second) => Differ_HashMapPatch_combine(second)(first),
  diff: (oldValue, newValue) => Differ_HashMapPatch_diff({
    oldValue,
    newValue,
    differ
  }),
  patch: (patch, oldValue) => Differ_HashMapPatch_patch(oldValue, differ)(patch)
});
/** @internal */
const hashSet = () => Differ_make({
  empty: Differ_HashSetPatch_empty(),
  combine: (first, second) => Differ_HashSetPatch_combine(second)(first),
  diff: (oldValue, newValue) => Differ_HashSetPatch_diff(oldValue, newValue),
  patch: (patch, oldValue) => Differ_HashSetPatch_patch(oldValue)(patch)
});
/** @internal */
const Differ_orElseEither = /*#__PURE__*/Function_dual(2, (self, that) => Differ_make({
  empty: Differ_OrPatch_empty(),
  combine: (first, second) => Differ_OrPatch_combine(first, second),
  diff: (oldValue, newValue) => Differ_OrPatch_diff({
    oldValue,
    newValue,
    left: self,
    right: that
  }),
  patch: (patch, oldValue) => Differ_OrPatch_patch(patch, {
    oldValue,
    left: self,
    right: that
  })
}));
/** @internal */
const transform = /*#__PURE__*/Function_dual(2, (self, {
  toNew,
  toOld
}) => Differ_make({
  empty: self.empty,
  combine: (first, second) => self.combine(first, second),
  diff: (oldValue, newValue) => self.diff(toOld(oldValue), toOld(newValue)),
  patch: (patch, oldValue) => toNew(self.patch(patch, toOld(oldValue)))
}));
/** @internal */
const update = () => updateWith((_, a) => a);
/** @internal */
const updateWith = f => Differ_make({
  empty: Function_identity,
  combine: (first, second) => {
    if (first === Function_identity) {
      return second;
    }
    if (second === Function_identity) {
      return first;
    }
    return a => second(first(a));
  },
  diff: (oldValue, newValue) => {
    if (equals(oldValue, newValue)) {
      return Function_identity;
    }
    return constant(newValue);
  },
  patch: (patch, oldValue) => f(oldValue, patch(oldValue))
});
/** @internal */
const Differ_zip = /*#__PURE__*/Function_dual(2, (self, that) => Differ_make({
  empty: [self.empty, that.empty],
  combine: (first, second) => [self.combine(first[0], second[0]), that.combine(first[1], second[1])],
  diff: (oldValue, newValue) => [self.diff(oldValue[0], newValue[0]), that.diff(oldValue[1], newValue[1])],
  patch: (patch, oldValue) => [self.patch(patch[0], oldValue[0]), that.patch(patch[1], oldValue[1])]
}));
//# sourceMappingURL=Differ.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Differ.mjs


const Differ_TypeId = DifferTypeId;
/**
 * An empty patch that describes no changes.
 *
 * @since 1.0.0
 * @category patch
 */
const Differ_empty = self => self.empty;
/**
 * @since 1.0.0
 * @category patch
 */
const Differ_diff = /*#__PURE__*/Function_dual(3, (self, oldValue, newValue) => self.diff(oldValue, newValue));
/**
 * Combines two patches to produce a new patch that describes the updates of
 * the first patch and then the updates of the second patch. The combine
 * operation should be associative. In addition, if the combine operation is
 * commutative then joining multiple fibers concurrently will result in
 * deterministic `FiberRef` values.
 *
 * @since 1.0.0
 * @category patch
 */
const Differ_combine = /*#__PURE__*/Function_dual(3, (self, first, second) => self.combine(first, second));
/**
 * Applies a patch to an old value to produce a new value that is equal to the
 * old value with the updates described by the patch.
 *
 * @since 1.0.0
 * @category patch
 */
const Differ_patch = /*#__PURE__*/Function_dual(3, (self, patch, oldValue) => self.patch(patch, oldValue));
/**
 * Constructs a new `Differ`.
 *
 * @since 1.0.0
 * @category constructors
 */
const mjs_Differ_make = Differ_make;
/**
 * Constructs a differ that knows how to diff `Env` values.
 *
 * @since 1.0.0
 * @category constructors
 */
const Differ_environment = environment;
/**
 * Constructs a differ that knows how to diff a `Chunk` of values given a
 * differ that knows how to diff the values.
 *
 * @since 1.0.0
 * @category constructors
 */
const Differ_chunk = chunk;
/**
 * Constructs a differ that knows how to diff a `HashMap` of keys and values given
 * a differ that knows how to diff the values.
 *
 * @since 1.0.0
 * @category constructors
 */
const Differ_hashMap = hashMap;
/**
 * Constructs a differ that knows how to diff a `HashSet` of values.
 *
 * @since 1.0.0
 * @category constructors
 */
const Differ_hashSet = hashSet;
/**
 * Combines this differ and the specified differ to produce a differ that
 * knows how to diff the sum of their values.
 *
 * @since 1.0.0
 */
const mjs_Differ_orElseEither = Differ_orElseEither;
/**
 * Transforms the type of values that this differ knows how to differ using
 * the specified functions that map the new and old value types to each other.
 *
 * @since 1.0.0
 */
const Differ_transform = transform;
/**
 * Constructs a differ that just diffs two values by returning a function that
 * sets the value to the new value. This differ does not support combining
 * multiple updates to the value compositionally and should only be used when
 * there is no compositional way to update them.
 *
 * @since 1.0.0
 */
const Differ_update = update;
/**
 * A variant of `update` that allows specifying the function that will be used
 * to combine old values with new values.
 *
 * @since 1.0.0
 */
const Differ_updateWith = updateWith;
/**
 * Combines this differ and the specified differ to produce a new differ that
 * knows how to diff the product of their values.
 *
 * @since 1.0.0
 */
const mjs_Differ_zip = Differ_zip;
//# sourceMappingURL=Differ.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/List.mjs
/**
 * A data type for immutable linked lists representing ordered collections of elements of type `A`.
 *
 * This data type is optimal for last-in-first-out (LIFO), stack-like access patterns. If you need another access pattern, for example, random access or FIFO, consider using a collection more suited to this than `List`.
 *
 * **Performance**
 *
 * - Time: `List` has `O(1)` prepend and head/tail access. Most other operations are `O(n)` on the number of elements in the list. This includes the index-based lookup of elements, `length`, `append` and `reverse`.
 * - Space: `List` implements structural sharing of the tail list. This means that many operations are either zero- or constant-memory cost.
 *
 * @since 1.0.0
 */
/**
 * This file is ported from
 *
 * Scala (https://www.scala-lang.org)
 *
 * Copyright EPFL and Lightbend, Inc.
 *
 * Licensed under Apache License 2.0
 * (http://www.apache.org/licenses/LICENSE-2.0).
 */










/**
 * @since 1.0.0
 * @category symbol
 */
const List_TypeId = /*#__PURE__*/Symbol.for("@effect/data/List");
/**
 * Converts the specified `List` to a `ReadonlyArray`.
 *
 * @category conversions
 * @since 1.0.0
 */
const List_toReadonlyArray = self => Array.from(self);
/**
 * @category equivalence
 * @since 1.0.0
 */
const List_getEquivalence = isEquivalent => Equivalence_mapInput(ReadonlyArray_getEquivalence(isEquivalent), List_toReadonlyArray);
const List_equivalence = /*#__PURE__*/List_getEquivalence(equals);
class ConsImpl {
  constructor(head, tail) {
    this.head = head;
    this.tail = tail;
    this._tag = "Cons";
    this._id = List_TypeId;
  }
  toString() {
    return `List.Cons(${List_toReadonlyArray(this).map(String).join(", ")})`;
  }
  toJSON() {
    return {
      _tag: "List.Cons",
      values: List_toReadonlyArray(this)
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  [Equal_symbol](that) {
    return isList(that) && this._tag === that._tag && List_equivalence(this, that);
  }
  [symbol]() {
    return array(List_toReadonlyArray(this));
  }
  [Symbol.iterator]() {
    let done = false;
    // eslint-disable-next-line @typescript-eslint/no-this-alias
    let self = this;
    return {
      next() {
        if (done) {
          return this.return();
        }
        if (self._tag === "Nil") {
          done = true;
          return this.return();
        }
        const value = self.head;
        self = self.tail;
        return {
          done,
          value
        };
      },
      return(value) {
        if (!done) {
          done = true;
        }
        return {
          done: true,
          value
        };
      }
    };
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
class NilImpl {
  constructor() {
    this._tag = "Nil";
    this._id = List_TypeId;
  }
  toString() {
    return `List.Nil`;
  }
  toJSON() {
    return {
      _tag: "List.Nil"
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  [symbol]() {
    return array(List_toReadonlyArray(this));
  }
  [Equal_symbol](that) {
    return isList(that) && this._tag === that._tag;
  }
  [Symbol.iterator]() {
    return {
      next() {
        return {
          done: true,
          value: undefined
        };
      }
    };
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/**
 * Returns `true` if the specified value is a `List`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const isList = u => Predicate_isObject(u) && "_id" in u && u["_id"] === List_TypeId;
/**
 * Returns `true` if the specified value is a `List.Nil<A>`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const isNil = self => self._tag === "Nil";
/**
 * Returns `true` if the specified value is a `List.Cons<A>`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const isCons = self => self._tag === "Cons";
/**
 * Returns the number of elements contained in the specified `List`
 *
 * @since 1.0.0
 * @category getters
 */
const List_size = self => {
  let these = self;
  let len = 0;
  while (!isNil(these)) {
    len += 1;
    these = these.tail;
  }
  return len;
};
const _Nil = /*#__PURE__*/new NilImpl();
/**
 * Constructs a new empty `List<A>`.
 *
 * @since 1.0.0
 * @category constructors
 */
const nil = () => _Nil;
/**
 * Constructs a new `List.Cons<A>` from the specified `head` and `tail` values.
 *
 * @since 1.0.0
 * @category constructors
 */
const cons = (head, tail) => new ConsImpl(head, tail);
/**
 * Constructs a new empty `List<A>`.
 *
 * Alias of {@link nil}.
 *
 * @since 1.0.0
 * @category constructors
 */
const List_empty = nil;
/**
 * Constructs a new `List<A>` from the specified value.
 *
 * @since 1.0.0
 * @category constructors
 */
const List_of = value => new ConsImpl(value, _Nil);
/**
 * Constructs a new `List<A>` from the specified `Iterable<A>`.
 *
 * @since 1.0.0
 * @category constructors
 */
const List_fromIterable = prefix => {
  const iterator = prefix[Symbol.iterator]();
  let next;
  if ((next = iterator.next()) && !next.done) {
    const result = new ConsImpl(next.value, _Nil);
    let curr = result;
    while ((next = iterator.next()) && !next.done) {
      const temp = new ConsImpl(next.value, _Nil);
      curr.tail = temp;
      curr = temp;
    }
    return result;
  } else {
    return _Nil;
  }
};
/**
 * Constructs a new `List<A>` from the specified values.
 *
 * @since 1.0.0
 * @category constructors
 */
const List_make = (...elements) => List_fromIterable(elements);
/**
 * Appends the specified element to the end of the `List`, creating a new `Cons`.
 *
 * @category concatenating
 * @since 1.0.0
 */
const List_append = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, element) => List_appendAllNonEmpty(self, List_of(element)))));
/**
 * Concatentates the specified lists together.
 *
 * @category concatenating
 * @since 1.0.0
 */
const List_appendAll = /*#__PURE__*/Function_dual(2, (self, that) => List_prependAll(that, self));
/**
 * @category concatenating
 * @since 1.0.0
 */
const List_appendAllNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => List_appendAll(self, that))));
/**
 * Prepends the specified element to the beginning of the list.
 *
 * @category concatenating
 * @since 1.0.0
 */
const List_prepend = /*#__PURE__*/Function_dual(2, (self, element) => cons(element, self));
/**
 * Prepends the specified prefix list to the beginning of the specified list.
 *
 * @category concatenating
 * @since 1.0.0
 */
const List_prependAll = /*#__PURE__*/Function_dual(2, (self, prefix) => {
  if (isNil(self)) {
    return prefix;
  } else if (isNil(prefix)) {
    return self;
  } else {
    const result = new ConsImpl(prefix.head, self);
    let curr = result;
    let that = prefix.tail;
    while (!isNil(that)) {
      const temp = new ConsImpl(that.head, self);
      curr.tail = temp;
      curr = temp;
      that = that.tail;
    }
    return result;
  }
});
/**
 * @category concatenating
 * @since 1.0.0
 */
const List_prependAllNonEmpty = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => List_prependAll(self, that))));
/**
 * Prepends the specified prefix list (in reverse order) to the beginning of the
 * specified list.
 *
 * @category concatenating
 * @since 1.0.0
 */
const prependAllReversed = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, prefix) => {
  let out = self;
  let pres = prefix;
  while (isCons(pres)) {
    out = new ConsImpl(pres.head, out);
    pres = pres.tail;
  }
  return out;
})));
/**
 * Drops the first `n` elements from the specified list.
 *
 * @since 1.0.0
 * @category combinators
 */
const List_drop = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => {
  if (n <= 0) {
    return self;
  }
  if (n >= List_size(self)) {
    return _Nil;
  }
  let these = self;
  let i = 0;
  while (!isNil(these) && i < n) {
    these = these.tail;
    i += 1;
  }
  return these;
})));
/**
 * Check if a predicate holds true for every `List` element.
 *
 * @since 1.0.0
 * @category elements
 */
const List_every = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, refinement) => {
  for (const a of self) {
    if (!refinement(a)) {
      return false;
    }
  }
  return true;
})));
/**
 * Check if a predicate holds true for some `List` element.
 *
 * @since 1.0.0
 * @category elements
 */
const List_some = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => {
  let these = self;
  while (!isNil(these)) {
    if (predicate(these.head)) {
      return true;
    }
    these = these.tail;
  }
  return false;
})));
/**
 * Filters a list using the specified predicate.
 *
 * @since 1.0.0
 * @category combinators
 */
const List_filter = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => noneIn(self, predicate, false))));
// everything seen so far is not included
const noneIn = (self, predicate, isFlipped) => {
  /* eslint-disable no-constant-condition */
  while (true) {
    if (isNil(self)) {
      return _Nil;
    } else {
      if (predicate(self.head) !== isFlipped) {
        return allIn(self, self.tail, predicate, isFlipped);
      } else {
        self = self.tail;
      }
    }
  }
};
// everything from 'start' is included, if everything from this point is in we can return the origin
// start otherwise if we discover an element that is out we must create a new partial list.
const allIn = (start, remaining, predicate, isFlipped) => {
  /* eslint-disable no-constant-condition */
  while (true) {
    if (isNil(remaining)) {
      return start;
    } else {
      if (predicate(remaining.head) !== isFlipped) {
        remaining = remaining.tail;
      } else {
        return partialFill(start, remaining, predicate, isFlipped);
      }
    }
  }
};
// we have seen elements that should be included then one that should be excluded, start building
const partialFill = (origStart, firstMiss, predicate, isFlipped) => {
  const newHead = new ConsImpl(List_unsafeHead(origStart), _Nil);
  let toProcess = unsafeTail(origStart);
  let currentLast = newHead;
  // we know that all elements are :: until at least firstMiss.tail
  while (!(toProcess === firstMiss)) {
    const newElem = new ConsImpl(List_unsafeHead(toProcess), _Nil);
    currentLast.tail = newElem;
    currentLast = unsafeCoerce(newElem);
    toProcess = unsafeCoerce(toProcess.tail);
  }
  // at this point newHead points to a list which is a duplicate of all the 'in' elements up to the first miss.
  // currentLast is the last element in that list.
  // now we are going to try and share as much of the tail as we can, only moving elements across when we have to.
  let next = firstMiss.tail;
  let nextToCopy = unsafeCoerce(next); // the next element we would need to copy to our list if we cant share.
  while (!isNil(next)) {
    // generally recommended is next.isNonEmpty but this incurs an extra method call.
    const head = List_unsafeHead(next);
    if (predicate(head) !== isFlipped) {
      next = next.tail;
    } else {
      // its not a match - do we have outstanding elements?
      while (!(nextToCopy === next)) {
        const newElem = new ConsImpl(List_unsafeHead(nextToCopy), _Nil);
        currentLast.tail = newElem;
        currentLast = newElem;
        nextToCopy = unsafeCoerce(nextToCopy.tail);
      }
      nextToCopy = unsafeCoerce(next.tail);
      next = next.tail;
    }
  }
  // we have remaining elements - they are unchanged attach them to the end
  if (!isNil(nextToCopy)) {
    currentLast.tail = nextToCopy;
  }
  return newHead;
};
/**
 * Filters and maps a list using the specified partial function. The resulting
 * list may be smaller than the input list due to the possibility of the partial
 * function not being defined for some elements.
 *
 * @since 1.0.0
 * @category combinators
 */
const List_filterMap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const bs = [];
  for (const a of self) {
    const oa = f(a);
    if (Option.isSome(oa)) {
      bs.push(oa.value);
    }
  }
  return List_fromIterable(bs);
})));
/**
 * Removes all `None` values from the specified list.
 *
 * @since 1.0.0
 * @category combinators
 */
const List_compact = self => List_filterMap(self, identity);
/**
 * Returns the first element that satisfies the specified
 * predicate, or `None` if no such element exists.
 *
 * @category elements
 * @since 1.0.0
 */
const List_findFirst = /*#__PURE__*/Function_dual(2, (self, predicate) => {
  let these = self;
  while (!isNil(these)) {
    if (predicate(these.head)) {
      return mjs_Option_some(these.head);
    }
    these = these.tail;
  }
  return Option_none();
});
/**
 * Flat maps a list using the specified function.
 *
 * @since 1.0.0
 * @category sequencing
 */
const List_flatMap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  let rest = self;
  let head = undefined;
  let tail = undefined;
  while (!isNil(rest)) {
    let bs = f(rest.head);
    while (!isNil(bs)) {
      const next = new ConsImpl(bs.head, _Nil);
      if (tail === undefined) {
        head = next;
      } else {
        tail.tail = next;
      }
      tail = next;
      bs = bs.tail;
    }
    rest = rest.tail;
  }
  if (head === undefined) {
    return _Nil;
  }
  return head;
})));
/**
 * @category sequencing
 * @since 1.0.0
 */
const List_flatMapNonEmpty = (/* unused pure expression or super */ null && (List_flatMap));
/**
 * Applies the specified function to each element of the `List`.
 *
 * @since 1.0.0
 * @category combinators
 */
const List_forEach = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  let these = self;
  while (!isNil(these)) {
    f(these.head);
    these = these.tail;
  }
})));
/**
 * Returns the first element of the specified list, or `None` if the list is
 * empty.
 *
 * @since 1.0.0
 * @category getters
 */
const List_head = self => isNil(self) ? Option_none() : mjs_Option_some(self.head);
/**
 * Returns the last element of the specified list, or `None` if the list is
 * empty.
 *
 * @since 1.0.0
 * @category getters
 */
const List_last = self => isNil(self) ? Option.none() : Option.some(List_unsafeLast(self));
/**
 * Applies the specified mapping function to each element of the list.
 *
 * @since 1.0.0
 * @category combinators
 */
const List_map = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  if (isNil(self)) {
    return self;
  } else {
    const head = new ConsImpl(f(self.head), _Nil);
    let nextHead = head;
    let rest = self.tail;
    while (!isNil(rest)) {
      const next = new ConsImpl(f(rest.head), _Nil);
      nextHead.tail = next;
      nextHead = next;
      rest = rest.tail;
    }
    return head;
  }
})));
/**
 * Partition a list into two lists, where the first list contains all elements
 * that did not satisfy the specified predicate, and the second list contains
 * all elements that did satisfy the specified predicate.
 *
 * @since 1.0.0
 * @category combinators
 */
const List_partition = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, predicate) => {
  const left = [];
  const right = [];
  for (const a of self) {
    if (predicate(a)) {
      right.push(a);
    } else {
      left.push(a);
    }
  }
  return [List_fromIterable(left), List_fromIterable(right)];
})));
/**
 * Partition a list into two lists, where the first list contains all elements
 * for which the specified function returned a `Left`, and the second list
 * contains all elements for which the specified function returned a `Right`.
 *
 * @since 1.0.0
 * @category combinators
 */
const List_partitionMap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const left = [];
  const right = [];
  for (const a of self) {
    const e = f(a);
    if (Either.isLeft(e)) {
      left.push(e.left);
    } else {
      right.push(e.right);
    }
  }
  return [List_fromIterable(left), List_fromIterable(right)];
})));
/**
 * Folds over the elements of the list using the specified function, using the
 * specified initial value.
 *
 * @since 1.0.0
 * @category folding
 */
const List_reduce = /*#__PURE__*/Function_dual(3, (self, zero, f) => {
  let acc = zero;
  let these = self;
  while (!isNil(these)) {
    acc = f(acc, these.head);
    these = these.tail;
  }
  return acc;
});
/**
 * Folds over the elements of the list using the specified function, beginning
 * with the last element of the list, using the specified initial value.
 *
 * @since 1.0.0
 * @category folding
 */
const List_reduceRight = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, zero, f) => {
  let acc = zero;
  let these = List_reverse(self);
  while (!isNil(these)) {
    acc = f(acc, these.head);
    these = these.tail;
  }
  return acc;
})));
/**
 * Returns a new list with the elements of the specified list in reverse order.
 *
 * @since 1.0.0
 * @category elements
 */
const List_reverse = self => {
  let result = List_empty();
  let these = self;
  while (!isNil(these)) {
    result = List_prepend(result, these.head);
    these = these.tail;
  }
  return result;
};
/**
 * Splits the specified list into two lists at the specified index.
 *
 * @since 1.0.0
 * @category combinators
 */
const List_splitAt = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => [List_take(self, n), List_drop(self, n)])));
/**
 * Returns the tail of the specified list, or `None` if the list is empty.
 *
 * @since 1.0.0
 * @category getters
 */
const List_tail = self => isNil(self) ? Option.none() : Option.some(self.tail);
/**
 * Takes the specified number of elements from the beginning of the specified
 * list.
 *
 * @since 1.0.0
 * @category combinators
 */
const List_take = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, n) => {
  if (n <= 0) {
    return _Nil;
  }
  if (n >= List_size(self)) {
    return self;
  }
  let these = List_make(List_unsafeHead(self));
  let current = unsafeTail(self);
  for (let i = 1; i < n; i++) {
    these = new ConsImpl(List_unsafeHead(current), these);
    current = unsafeTail(current);
  }
  return List_reverse(these);
})));
/**
 * Converts the specified `List` to a `Chunk`.
 *
 * @since 1.0.0
 * @category conversions
 */
const toChunk = self => Chunk.fromIterable(self);
/**
 * Unsafely returns the first element of the specified `List`.
 *
 * @since 1.0.0
 * @category unsafe
 */
const List_unsafeHead = self => {
  if (isNil(self)) {
    throw new Error("Expected List to be non-empty");
  }
  return self.head;
};
/**
 * Unsafely returns the last element of the specified `List`.
 *
 * @since 1.0.0
 * @category unsafe
 */
const List_unsafeLast = self => {
  if (isNil(self)) {
    throw new Error("Expected List to be non-empty");
  }
  let these = self;
  let scout = self.tail;
  while (!isNil(scout)) {
    these = scout;
    scout = scout.tail;
  }
  return these.head;
};
/**
 * Unsafely returns the tail of the specified `List`.
 *
 * @since 1.0.0
 * @category unsafe
 */
const unsafeTail = self => {
  if (isNil(self)) {
    throw new Error("Expected List to be non-empty");
  }
  return self.tail;
};
//# sourceMappingURL=List.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/MutableRef.mjs
/**
 * @since 1.0.0
 */



const MutableRef_TypeId = /*#__PURE__*/Symbol.for("@effect/data/MutableRef");
class MutableRefImpl {
  constructor(current) {
    this.current = current;
    this._T = _ => _;
    this._id = MutableRef_TypeId;
  }
  toString() {
    return `MutableRef(${String(this.current)})`;
  }
  toJSON() {
    return {
      _tag: "MutableRef",
      current: this.current
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/**
 * @since 1.0.0
 * @category constructors
 */
const MutableRef_make = value => new MutableRefImpl(value);
/**
 * @since 1.0.0
 * @category general
 */
const compareAndSet = /*#__PURE__*/Function_dual(3, (self, oldValue, newValue) => {
  if (equals(oldValue, self.current)) {
    self.current = newValue;
    return true;
  }
  return false;
});
/**
 * @since 1.0.0
 * @category numeric
 */
const MutableRef_decrement = self => MutableRef_update(self, n => n - 1);
/**
 * @since 1.0.0
 * @category numeric
 */
const decrementAndGet = self => updateAndGet(self, n => n - 1);
/**
 * @since 1.0.0
 * @category general
 */
const MutableRef_get = self => self.current;
/**
 * @since 1.0.0
 * @category numeric
 */
const getAndDecrement = self => getAndUpdate(self, n => n - 1);
/**
 * @since 1.0.0
 * @category numeric
 */
const getAndIncrement = self => getAndUpdate(self, n => n + 1);
/**
 * @since 1.0.0
 * @category general
 */
const getAndSet = /*#__PURE__*/(/* unused pure expression or super */ null && (Dual.dual(2, (self, value) => {
  const ret = self.current;
  self.current = value;
  return ret;
})));
/**
 * @since 1.0.0
 * @category general
 */
const getAndUpdate = /*#__PURE__*/(/* unused pure expression or super */ null && (Dual.dual(2, (self, f) => getAndSet(self, f(MutableRef_get(self))))));
/**
 * @since 1.0.0
 * @category numeric
 */
const MutableRef_increment = self => MutableRef_update(self, n => n + 1);
/**
 * @since 1.0.0
 * @category numeric
 */
const incrementAndGet = self => updateAndGet(self, n => n + 1);
/**
 * @since 1.0.0
 * @category general
 */
const MutableRef_set = /*#__PURE__*/Function_dual(2, (self, value) => {
  self.current = value;
  return self;
});
/**
 * @since 1.0.0
 * @category general
 */
const setAndGet = /*#__PURE__*/Function_dual(2, (self, value) => {
  self.current = value;
  return self.current;
});
/**
 * @since 1.0.0
 * @category general
 */
const MutableRef_update = /*#__PURE__*/Function_dual(2, (self, f) => MutableRef_set(self, f(MutableRef_get(self))));
/**
 * @since 1.0.0
 * @category general
 */
const updateAndGet = /*#__PURE__*/Function_dual(2, (self, f) => setAndGet(self, f(MutableRef_get(self))));
/**
 * @since 1.0.0
 * @category boolean
 */
const MutableRef_toggle = self => MutableRef_update(self, _ => !_);
//# sourceMappingURL=MutableRef.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/fiberId.mjs
var fiberId_a, fiberId_b, _c;







/** @internal */
const FiberIdSymbolKey = "@effect/io/Fiber/Id";
/** @internal */
const FiberIdTypeId = /*#__PURE__*/Symbol.for(FiberIdSymbolKey);
/** @internal */
const OP_NONE = "None";
/** @internal */
const OP_RUNTIME = "Runtime";
/** @internal */
const OP_COMPOSITE = "Composite";
/** @internal */
class fiberId_None {
  constructor() {
    this[fiberId_a] = FiberIdTypeId;
    this._tag = OP_NONE;
  }
  [(fiberId_a = FiberIdTypeId, symbol)]() {
    return combine(Hash_hash(this._tag))(Hash_hash(FiberIdSymbolKey));
  }
  [Equal_symbol](that) {
    return isFiberId(that) && that._tag === OP_NONE;
  }
}
/** @internal */
class Runtime {
  constructor(id, startTimeMillis) {
    this.id = id;
    this.startTimeMillis = startTimeMillis;
    this[fiberId_b] = FiberIdTypeId;
    this._tag = OP_RUNTIME;
  }
  [(fiberId_b = FiberIdTypeId, symbol)]() {
    return combine(Hash_hash(this.startTimeMillis))(combine(Hash_hash(this.id))(combine(Hash_hash(this._tag))(Hash_hash(FiberIdSymbolKey))));
  }
  [Equal_symbol](that) {
    return isFiberId(that) && that._tag === OP_RUNTIME && this.id === that.id && this.startTimeMillis === that.startTimeMillis;
  }
}
/** @internal */
class Composite {
  constructor(left, right) {
    this.left = left;
    this.right = right;
    this[_c] = FiberIdTypeId;
    this._tag = OP_COMPOSITE;
  }
  [(_c = FiberIdTypeId, symbol)]() {
    return combine(Hash_hash(this.right))(combine(Hash_hash(this.left))(combine(Hash_hash(this._tag))(Hash_hash(FiberIdSymbolKey))));
  }
  [Equal_symbol](that) {
    return isFiberId(that) && that._tag === OP_COMPOSITE && equals(this.left, that.left) && equals(this.right, that.right);
  }
}
/** @internal */
const fiberId_none = /*#__PURE__*/new fiberId_None();
/** @internal */
const fiberId_runtime = (id, startTimeMillis) => {
  return new Runtime(id, startTimeMillis);
};
/** @internal */
const composite = (left, right) => {
  return new Composite(left, right);
};
/** @internal */
const isFiberId = self => {
  return typeof self === "object" && self != null && FiberIdTypeId in self;
};
/** @internal */
const fiberId_isNone = self => {
  return self._tag === OP_NONE || mjs_HashSet_every(id => fiberId_isNone(id))(toSet(self));
};
/** @internal */
const isRuntime = self => {
  return self._tag === OP_RUNTIME;
};
/** @internal */
const isComposite = self => {
  return self._tag === OP_COMPOSITE;
};
/** @internal */
const fiberId_combine = /*#__PURE__*/Function_dual(2, (self, that) => {
  if (self._tag === OP_NONE) {
    return that;
  }
  if (that._tag === OP_NONE) {
    return self;
  }
  return new Composite(self, that);
});
/** @internal */
const fiberId_combineAll = fiberIds => {
  return mjs_HashSet_reduce(fiberId_none, (a, b) => fiberId_combine(b)(a))(fiberIds);
};
/** @internal */
const fiberId_getOrElse = /*#__PURE__*/Function_dual(2, (self, that) => fiberId_isNone(self) ? that : self);
/** @internal */
const ids = self => {
  switch (self._tag) {
    case OP_NONE:
      {
        return mjs_HashSet_empty();
      }
    case OP_RUNTIME:
      {
        return mjs_HashSet_make(self.id);
      }
    case OP_COMPOSITE:
      {
        return mjs_HashSet_union(ids(self.right))(ids(self.left));
      }
  }
};
const _fiberCounter = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/Fiber/Id/_fiberCounter"), () => MutableRef_make(0));
/** @internal */
const fiberId_make = (id, startTimeSeconds) => {
  return new Runtime(id, startTimeSeconds);
};
/** @internal */
const threadName = self => {
  const identifiers = Array.from(ids(self)).map(n => `#${n}`).join(",");
  return identifiers;
};
/** @internal */
const toOption = self => {
  const fiberIds = toSet(self);
  if (mjs_HashSet_size(fiberIds) === 0) {
    return Option_none();
  }
  let first = true;
  let acc;
  for (const fiberId of fiberIds) {
    if (first) {
      acc = fiberId;
      first = false;
    } else {
      // @ts-expect-error
      acc = fiberId_combine(fiberId)(acc);
    }
  }
  // @ts-expect-error
  return mjs_Option_some(acc);
};
/** @internal */
const toSet = self => {
  switch (self._tag) {
    case OP_NONE:
      {
        return mjs_HashSet_empty();
      }
    case OP_RUNTIME:
      {
        return mjs_HashSet_make(self);
      }
    case OP_COMPOSITE:
      {
        return mjs_HashSet_union(toSet(self.right))(toSet(self.left));
      }
  }
};
/** @internal */
const unsafeMake = () => {
  const id = MutableRef_get(_fiberCounter);
  MutableRef_set(id + 1)(_fiberCounter);
  return new Runtime(id, new Date().getTime());
};
//# sourceMappingURL=fiberId.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Fiber/Id.mjs

/**
 * @since 1.0.0
 * @category symbols
 */
const Id_FiberIdTypeId = FiberIdTypeId;
/**
 * @since 1.0.0
 * @category constructors
 */
const Id_none = fiberId_none;
/**
 * @since 1.0.0
 * @category constructors
 */
const Id_runtime = fiberId_runtime;
/**
 * @since 1.0.0
 * @category constructors
 */
const Id_composite = composite;
/**
 * Returns `true` if the specified unknown value is a `FiberId`, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Id_isFiberId = isFiberId;
/**
 * Returns `true` if the `FiberId` is a `None`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Id_isNone = fiberId_isNone;
/**
 * Returns `true` if the `FiberId` is a `Runtime`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Id_isRuntime = isRuntime;
/**
 * Returns `true` if the `FiberId` is a `Composite`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Id_isComposite = isComposite;
/**
 * Combine two `FiberId`s.
 *
 * @since 1.0.0
 * @category constructors
 */
const Id_combine = fiberId_combine;
/**
 * Combines a set of `FiberId`s into a single `FiberId`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Id_combineAll = fiberId_combineAll;
/**
 * Returns this `FiberId` if it is not `None`, otherwise returns that `FiberId`.
 *
 * @since 1.0.0
 * @category utils
 */
const Id_getOrElse = fiberId_getOrElse;
/**
 * Get the set of identifiers for this `FiberId`.
 *
 * @since 1.0.0
 * @category destructors
 */
const Id_ids = ids;
/**
 * Creates a new `FiberId`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Id_make = fiberId_make;
/**
 * Creates a string representing the name of the current thread of execution
 * represented by the specified `FiberId`.
 *
 * @since 1.0.0
 * @category destructors
 */
const Id_threadName = threadName;
/**
 * Convert a `FiberId` into an `Option<FiberId>`.
 *
 * @since 1.0.0
 * @category destructors
 */
const Id_toOption = toOption;
/**
 * Convert a `FiberId` into a `HashSet<FiberId>`.
 *
 * @since 1.0.0
 * @category destructors
 */
const Id_toSet = toSet;
/**
 * Unsafely creates a new `FiberId`.
 *
 * @since 1.0.0
 * @category unsafe
 */
const Id_unsafeMake = unsafeMake;
//# sourceMappingURL=Id.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/opCodes/cause.mjs
/** @internal */
const OP_DIE = "Die";
/** @internal */
const OP_EMPTY = "Empty";
/** @internal */
const OP_FAIL = "Fail";
/** @internal */
const OP_INTERRUPT = "Interrupt";
/** @internal */
const OP_ANNOTATED = "Annotated";
/** @internal */
const OP_PARALLEL = "Parallel";
/** @internal */
const OP_SEQUENTIAL = "Sequential";
//# sourceMappingURL=cause.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/cause.mjs












// -----------------------------------------------------------------------------
// Models
// -----------------------------------------------------------------------------
/** @internal */
const CauseSymbolKey = "@effect/io/Cause";
/** @internal */
const CauseTypeId = /*#__PURE__*/Symbol.for(CauseSymbolKey);
/** @internal */
const cause_variance = {
  _E: _ => _
};
/** @internal */
const proto = {
  [CauseTypeId]: cause_variance,
  [symbol]() {
    return combine(Hash_hash(flattenCause(this)))(Hash_hash(CauseSymbolKey));
  },
  [Equal_symbol](that) {
    return isCause(that) && causeEquals(this, that);
  },
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  },
  toJSON() {
    return {
      _tag: "Cause",
      errors: prettyErrors(this)
    };
  },
  toString() {
    return cause_pretty(this);
  },
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
};
// -----------------------------------------------------------------------------
// Constructors
// -----------------------------------------------------------------------------
/** @internal */
const cause_empty = /*#__PURE__*/(() => {
  const o = /*#__PURE__*/Object.create(proto);
  o._tag = OP_EMPTY;
  return o;
})();
/** @internal */
const fail = error => {
  const o = Object.create(proto);
  o._tag = OP_FAIL;
  o.error = error;
  return o;
};
/** @internal */
const die = defect => {
  const o = Object.create(proto);
  o._tag = OP_DIE;
  o.defect = defect;
  return o;
};
/** @internal */
const interrupt = fiberId => {
  const o = Object.create(proto);
  o._tag = OP_INTERRUPT;
  o.fiberId = fiberId;
  return o;
};
/** @internal */
const annotated = (cause, annotation) => {
  const o = Object.create(proto);
  o._tag = OP_ANNOTATED;
  o.cause = cause;
  o.annotation = annotation;
  return o;
};
/** @internal */
const parallel = (left, right) => {
  const o = Object.create(proto);
  o._tag = OP_PARALLEL;
  o.left = left;
  o.right = right;
  return o;
};
/** @internal */
const sequential = (left, right) => {
  const o = Object.create(proto);
  o._tag = OP_SEQUENTIAL;
  o.left = left;
  o.right = right;
  return o;
};
// -----------------------------------------------------------------------------
// Refinements
// -----------------------------------------------------------------------------
/** @internal */
const isCause = u => typeof u === "object" && u != null && CauseTypeId in u;
/** @internal */
const isEmptyType = self => self._tag === OP_EMPTY;
/** @internal */
const isFailType = self => self._tag === OP_FAIL;
/** @internal */
const isDieType = self => self._tag === OP_DIE;
/** @internal */
const isInterruptType = self => self._tag === OP_INTERRUPT;
/** @internal */
const isAnnotatedType = self => self._tag === OP_ANNOTATED;
/** @internal */
const isSequentialType = self => self._tag === OP_SEQUENTIAL;
/** @internal */
const isParallelType = self => self._tag === OP_PARALLEL;
// -----------------------------------------------------------------------------
// Getters
// -----------------------------------------------------------------------------
/** @internal */
const cause_size = self => reduceWithContext(self, void 0, SizeCauseReducer);
/** @internal */
const cause_isEmpty = self => {
  if (self._tag === OP_EMPTY) {
    return true;
  }
  return cause_reduce(self, true, (acc, cause) => {
    switch (cause._tag) {
      case OP_EMPTY:
        {
          return mjs_Option_some(acc);
        }
      case OP_DIE:
      case OP_FAIL:
      case OP_INTERRUPT:
        {
          return mjs_Option_some(false);
        }
      default:
        {
          return Option_none();
        }
    }
  });
};
/** @internal */
const isFailure = self => Option_isSome(failureOption(self));
/** @internal */
const isDie = self => Option_isSome(dieOption(self));
/** @internal */
const isInterrupted = self => Option_isSome(interruptOption(self));
/** @internal */
const isInterruptedOnly = self => reduceWithContext(undefined, IsInterruptedOnlyCauseReducer)(self);
/** @internal */
const cause_failures = self => Chunk_reverse(cause_reduce(self, Chunk_empty(), (list, cause) => cause._tag === OP_FAIL ? mjs_Option_some(Chunk_prepend(cause.error)(list)) : Option_none()));
/** @internal */
const cause_defects = self => Chunk_reverse(cause_reduce(self, Chunk_empty(), (list, cause) => cause._tag === OP_DIE ? mjs_Option_some(Chunk_prepend(cause.defect)(list)) : Option_none()));
/** @internal */
const interruptors = self => cause_reduce(self, mjs_HashSet_empty(), (set, cause) => cause._tag === OP_INTERRUPT ? mjs_Option_some(mjs_HashSet_add(cause.fiberId)(set)) : Option_none());
/** @internal */
const failureOption = self => find(self, cause => cause._tag === OP_FAIL ? mjs_Option_some(cause.error) : Option_none());
/** @internal */
const failureOrCause = self => {
  const option = failureOption(self);
  switch (option._tag) {
    case "None":
      {
        // no `E` inside this `Cause`, so it can be safely cast to `never`
        return Either_right(self);
      }
    case "Some":
      {
        return Either_left(option.value);
      }
  }
};
/** @internal */
const dieOption = self => find(self, cause => cause._tag === OP_DIE ? mjs_Option_some(cause.defect) : Option_none());
/** @internal */
const flipCauseOption = self => cause_match(self, {
  onEmpty: mjs_Option_some(cause_empty),
  onFail: failureOption => map(fail)(failureOption),
  onDie: defect => mjs_Option_some(die(defect)),
  onInterrupt: fiberId => mjs_Option_some(interrupt(fiberId)),
  onAnnotated: (causeOption, annotation) => map(cause => annotated(cause, annotation))(causeOption),
  onSequential: (left, right) => {
    if (Option_isSome(left) && Option_isSome(right)) {
      return mjs_Option_some(sequential(left.value, right.value));
    }
    if (Option_isNone(left) && Option_isSome(right)) {
      return mjs_Option_some(right.value);
    }
    if (Option_isSome(left) && Option_isNone(right)) {
      return mjs_Option_some(left.value);
    }
    return Option_none();
  },
  onParallel: (left, right) => {
    if (Option_isSome(left) && Option_isSome(right)) {
      return mjs_Option_some(parallel(left.value, right.value));
    }
    if (Option_isNone(left) && Option_isSome(right)) {
      return mjs_Option_some(right.value);
    }
    if (Option_isSome(left) && Option_isNone(right)) {
      return mjs_Option_some(left.value);
    }
    return Option_none();
  }
});
/** @internal */
const interruptOption = self => find(self, cause => cause._tag === OP_INTERRUPT ? mjs_Option_some(cause.fiberId) : Option_none());
/** @internal */
const keepDefects = self => cause_match(self, {
  onEmpty: Option_none(),
  onFail: () => Option_none(),
  onDie: defect => mjs_Option_some(die(defect)),
  onInterrupt: () => Option_none(),
  onAnnotated: (option, annotation) => map(cause => annotated(cause, annotation))(option),
  onSequential: (left, right) => {
    if (Option_isSome(left) && Option_isSome(right)) {
      return mjs_Option_some(sequential(left.value, right.value));
    }
    if (Option_isSome(left) && Option_isNone(right)) {
      return mjs_Option_some(left.value);
    }
    if (Option_isNone(left) && Option_isSome(right)) {
      return mjs_Option_some(right.value);
    }
    return Option_none();
  },
  onParallel: (left, right) => {
    if (Option_isSome(left) && Option_isSome(right)) {
      return mjs_Option_some(parallel(left.value, right.value));
    }
    if (Option_isSome(left) && Option_isNone(right)) {
      return mjs_Option_some(left.value);
    }
    if (Option_isNone(left) && Option_isSome(right)) {
      return mjs_Option_some(right.value);
    }
    return Option_none();
  }
});
/** @internal */
const keepDefectsAndElectFailures = self => cause_match(self, {
  onEmpty: Option_none(),
  onFail: failure => mjs_Option_some(die(failure)),
  onDie: defect => mjs_Option_some(die(defect)),
  onInterrupt: () => Option_none(),
  onAnnotated: (option, annotation) => map(cause => annotated(cause, annotation))(option),
  onSequential: (left, right) => {
    if (Option_isSome(left) && Option_isSome(right)) {
      return mjs_Option_some(sequential(left.value, right.value));
    }
    if (Option_isSome(left) && Option_isNone(right)) {
      return mjs_Option_some(left.value);
    }
    if (Option_isNone(left) && Option_isSome(right)) {
      return mjs_Option_some(right.value);
    }
    return Option_none();
  },
  onParallel: (left, right) => {
    if (Option_isSome(left) && Option_isSome(right)) {
      return mjs_Option_some(parallel(left.value, right.value));
    }
    if (Option_isSome(left) && Option_isNone(right)) {
      return mjs_Option_some(left.value);
    }
    if (Option_isNone(left) && Option_isSome(right)) {
      return mjs_Option_some(right.value);
    }
    return Option_none();
  }
});
/** @internal */
const linearize = self => cause_match(self, {
  onEmpty: mjs_HashSet_empty(),
  onFail: error => mjs_HashSet_make(fail(error)),
  onDie: defect => mjs_HashSet_make(die(defect)),
  onInterrupt: fiberId => mjs_HashSet_make(interrupt(fiberId)),
  onAnnotated: (set, annotation) => mjs_HashSet_map(cause => annotated(cause, annotation))(set),
  onSequential: (leftSet, rightSet) => mjs_HashSet_flatMap(leftCause => mjs_HashSet_map(rightCause => sequential(leftCause, rightCause))(rightSet))(leftSet),
  onParallel: (leftSet, rightSet) => mjs_HashSet_flatMap(leftCause => mjs_HashSet_map(rightCause => parallel(leftCause, rightCause))(rightSet))(leftSet)
});
/** @internal */
const stripFailures = self => cause_match(self, {
  onEmpty: cause_empty,
  onFail: () => cause_empty,
  onDie: defect => die(defect),
  onInterrupt: fiberId => interrupt(fiberId),
  onAnnotated: (cause, annotation) => isEmptyType(cause) ? cause : annotated(cause, annotation),
  onSequential: sequential,
  onParallel: parallel
});
/** @internal */
const electFailures = self => cause_match(self, {
  onEmpty: cause_empty,
  onFail: failure => die(failure),
  onDie: defect => die(defect),
  onInterrupt: fiberId => interrupt(fiberId),
  onAnnotated: (cause, annotation) => isEmptyType(cause) ? cause : annotated(cause, annotation),
  onSequential: (left, right) => sequential(left, right),
  onParallel: (left, right) => parallel(left, right)
});
/** @internal */
const stripSomeDefects = /*#__PURE__*/Function_dual(2, (self, pf) => cause_match(self, {
  onEmpty: mjs_Option_some(cause_empty),
  onFail: error => mjs_Option_some(fail(error)),
  onDie: defect => {
    const option = pf(defect);
    return Option_isSome(option) ? Option_none() : mjs_Option_some(die(defect));
  },
  onInterrupt: fiberId => mjs_Option_some(interrupt(fiberId)),
  onAnnotated: (option, annotation) => map(cause => annotated(cause, annotation))(option),
  onSequential: (left, right) => {
    if (Option_isSome(left) && Option_isSome(right)) {
      return mjs_Option_some(sequential(left.value, right.value));
    }
    if (Option_isSome(left) && Option_isNone(right)) {
      return mjs_Option_some(left.value);
    }
    if (Option_isNone(left) && Option_isSome(right)) {
      return mjs_Option_some(right.value);
    }
    return Option_none();
  },
  onParallel: (left, right) => {
    if (Option_isSome(left) && Option_isSome(right)) {
      return mjs_Option_some(parallel(left.value, right.value));
    }
    if (Option_isSome(left) && Option_isNone(right)) {
      return mjs_Option_some(left.value);
    }
    if (Option_isNone(left) && Option_isSome(right)) {
      return mjs_Option_some(right.value);
    }
    return Option_none();
  }
}));
// -----------------------------------------------------------------------------
// Mapping
// -----------------------------------------------------------------------------
/** @internal */
const cause_as = /*#__PURE__*/Function_dual(2, (self, error) => cause_map(self, () => error));
/** @internal */
const cause_map = /*#__PURE__*/Function_dual(2, (self, f) => cause_flatMap(self, e => fail(f(e))));
// -----------------------------------------------------------------------------
// Sequencing
// -----------------------------------------------------------------------------
/** @internal */
const cause_flatMap = /*#__PURE__*/Function_dual(2, (self, f) => cause_match(self, {
  onEmpty: cause_empty,
  onFail: error => f(error),
  onDie: defect => die(defect),
  onInterrupt: fiberId => interrupt(fiberId),
  onAnnotated: (cause, annotation) => annotated(cause, annotation),
  onSequential: (left, right) => sequential(left, right),
  onParallel: (left, right) => parallel(left, right)
}));
/** @internal */
const cause_flatten = self => cause_flatMap(self, Function_identity);
// -----------------------------------------------------------------------------
// Equality
// -----------------------------------------------------------------------------
/** @internal */
const cause_contains = /*#__PURE__*/Function_dual(2, (self, that) => {
  if (that._tag === OP_EMPTY || self === that) {
    return true;
  }
  return cause_reduce(self, false, (accumulator, cause) => {
    return mjs_Option_some(accumulator || causeEquals(cause, that));
  });
});
/** @internal */
const causeEquals = (left, right) => {
  let leftStack = Chunk_of(left);
  let rightStack = Chunk_of(right);
  while (isNonEmpty(leftStack) && isNonEmpty(rightStack)) {
    const [leftParallel, leftSequential] = cause_reduce([mjs_HashSet_empty(), Chunk_empty()], ([parallel, sequential], cause) => {
      const [par, seq] = evaluateCause(cause);
      return mjs_Option_some([mjs_HashSet_union(par)(parallel), Chunk_appendAll(seq)(sequential)]);
    })(Chunk_headNonEmpty(leftStack));
    const [rightParallel, rightSequential] = cause_reduce([mjs_HashSet_empty(), Chunk_empty()], ([parallel, sequential], cause) => {
      const [par, seq] = evaluateCause(cause);
      return mjs_Option_some([mjs_HashSet_union(par)(parallel), Chunk_appendAll(seq)(sequential)]);
    })(Chunk_headNonEmpty(rightStack));
    if (!equals(leftParallel, rightParallel)) {
      return false;
    }
    leftStack = leftSequential;
    rightStack = rightSequential;
  }
  return true;
};
// -----------------------------------------------------------------------------
// Flattening
// -----------------------------------------------------------------------------
/**
 * Flattens a cause to a sequence of sets of causes, where each set represents
 * causes that fail in parallel and sequential sets represent causes that fail
 * after each other.
 *
 * @internal
 */
const flattenCause = cause => {
  return flattenCauseLoop(Chunk_of(cause), Chunk_empty());
};
/** @internal */
const flattenCauseLoop = (causes, flattened) => {
  // eslint-disable-next-line no-constant-condition
  while (1) {
    const [parallel, sequential] = reduce([mjs_HashSet_empty(), Chunk_empty()], ([parallel, sequential], cause) => {
      const [par, seq] = evaluateCause(cause);
      return [mjs_HashSet_union(par)(parallel), Chunk_appendAll(seq)(sequential)];
    })(causes);
    const updated = mjs_HashSet_size(parallel) > 0 ? Chunk_prepend(parallel)(flattened) : flattened;
    if (isEmpty(sequential)) {
      return Chunk_reverse(updated);
    }
    causes = sequential;
    flattened = updated;
  }
  throw new Error("BUG: Cause.flattenCauseLoop - please report an issue at https://github.com/Effect-TS/io/issues");
};
// -----------------------------------------------------------------------------
// Squashing
// -----------------------------------------------------------------------------
/** @internal */
const squash = self => {
  return squashWith(Function_identity)(self);
};
/** @internal */
const squashWith = /*#__PURE__*/Function_dual(2, (self, f) => {
  const option = map(f)(failureOption(self));
  switch (option._tag) {
    case "None":
      {
        return match({
          onNone: () => {
            const interrupts = Array.from(interruptors(self)).flatMap(fiberId => Array.from(Id_ids(fiberId)).map(id => `#${id}`));
            return InterruptedException(interrupts ? `Interrupted by fibers: ${interrupts.join(", ")}` : void 0);
          },
          onSome: Function_identity
        })(Chunk_head(cause_defects(self)));
      }
    case "Some":
      {
        return option.value;
      }
  }
});
// -----------------------------------------------------------------------------
// Finding
// -----------------------------------------------------------------------------
/** @internal */
const find = /*#__PURE__*/Function_dual(2, (self, pf) => {
  const stack = [self];
  while (stack.length > 0) {
    const item = stack.pop();
    const option = pf(item);
    switch (option._tag) {
      case "None":
        {
          switch (item._tag) {
            case OP_SEQUENTIAL:
            case OP_PARALLEL:
              {
                stack.push(item.right);
                stack.push(item.left);
                break;
              }
            case OP_ANNOTATED:
              {
                stack.push(item.cause);
                break;
              }
          }
          break;
        }
      case "Some":
        {
          return option;
        }
    }
  }
  return Option_none();
});
// -----------------------------------------------------------------------------
// Filtering
// -----------------------------------------------------------------------------
/** @internal */
const cause_filter = /*#__PURE__*/Function_dual(2, (self, predicate) => reduceWithContext(self, void 0, FilterCauseReducer(predicate)));
// -----------------------------------------------------------------------------
// Evaluation
// -----------------------------------------------------------------------------
/**
 * Takes one step in evaluating a cause, returning a set of causes that fail
 * in parallel and a list of causes that fail sequentially after those causes.
 *
 * @internal
 */
const evaluateCause = self => {
  let cause = self;
  const stack = [];
  let _parallel = mjs_HashSet_empty();
  let _sequential = Chunk_empty();
  while (cause !== undefined) {
    switch (cause._tag) {
      case OP_EMPTY:
        {
          if (stack.length === 0) {
            return [_parallel, _sequential];
          }
          cause = stack.pop();
          break;
        }
      case OP_FAIL:
        {
          if (stack.length === 0) {
            return [mjs_HashSet_add(cause.error)(_parallel), _sequential];
          }
          _parallel = mjs_HashSet_add(cause.error)(_parallel);
          cause = stack.pop();
          break;
        }
      case OP_DIE:
        {
          if (stack.length === 0) {
            return [mjs_HashSet_add(cause.defect)(_parallel), _sequential];
          }
          _parallel = mjs_HashSet_add(cause.defect)(_parallel);
          cause = stack.pop();
          break;
        }
      case OP_INTERRUPT:
        {
          if (stack.length === 0) {
            return [mjs_HashSet_add(cause.fiberId)(_parallel), _sequential];
          }
          _parallel = mjs_HashSet_add(cause.fiberId)(_parallel);
          cause = stack.pop();
          break;
        }
      case OP_ANNOTATED:
        {
          cause = cause.cause;
          break;
        }
      case OP_SEQUENTIAL:
        {
          switch (cause.left._tag) {
            case OP_EMPTY:
              {
                cause = cause.right;
                break;
              }
            case OP_SEQUENTIAL:
              {
                cause = sequential(cause.left.left, sequential(cause.left.right, cause.right));
                break;
              }
            case OP_PARALLEL:
              {
                cause = parallel(sequential(cause.left.left, cause.right), sequential(cause.left.right, cause.right));
                break;
              }
            case OP_ANNOTATED:
              {
                cause = sequential(cause.left.cause, cause.right);
                break;
              }
            default:
              {
                _sequential = Chunk_prepend(cause.right)(_sequential);
                cause = cause.left;
                break;
              }
          }
          break;
        }
      case OP_PARALLEL:
        {
          stack.push(cause.right);
          cause = cause.left;
          break;
        }
    }
  }
  throw new Error("BUG: Cause.evaluateCauseLoop - please report an issue at https://github.com/Effect-TS/io/issues");
};
// -----------------------------------------------------------------------------
// Reducing
// -----------------------------------------------------------------------------
/** @internal */
const SizeCauseReducer = {
  emptyCase: () => 0,
  failCase: () => 1,
  dieCase: () => 1,
  interruptCase: () => 1,
  annotatedCase: (_, value) => value,
  sequentialCase: (_, left, right) => left + right,
  parallelCase: (_, left, right) => left + right
};
/** @internal */
const IsInterruptedOnlyCauseReducer = {
  emptyCase: Function_constTrue,
  failCase: constFalse,
  dieCase: constFalse,
  interruptCase: Function_constTrue,
  annotatedCase: (_, value) => value,
  sequentialCase: (_, left, right) => left && right,
  parallelCase: (_, left, right) => left && right
};
/** @internal */
const FilterCauseReducer = predicate => ({
  emptyCase: () => cause_empty,
  failCase: (_, error) => fail(error),
  dieCase: (_, defect) => die(defect),
  interruptCase: (_, fiberId) => interrupt(fiberId),
  annotatedCase: (_, cause, annotation) => annotated(cause, annotation),
  sequentialCase: (_, left, right) => {
    if (predicate(left)) {
      if (predicate(right)) {
        return sequential(left, right);
      }
      return left;
    }
    if (predicate(right)) {
      return right;
    }
    return cause_empty;
  },
  parallelCase: (_, left, right) => {
    if (predicate(left)) {
      if (predicate(right)) {
        return parallel(left, right);
      }
      return left;
    }
    if (predicate(right)) {
      return right;
    }
    return cause_empty;
  }
});
const OP_SEQUENTIAL_CASE = "SequentialCase";
const OP_PARALLEL_CASE = "ParallelCase";
const OP_ANNOTATED_CASE = "AnnotatedCase";
/** @internal */
const cause_match = /*#__PURE__*/Function_dual(2, (self, {
  onAnnotated,
  onDie,
  onEmpty,
  onFail,
  onInterrupt,
  onParallel,
  onSequential
}) => {
  return reduceWithContext(self, void 0, {
    emptyCase: () => onEmpty,
    failCase: (_, error) => onFail(error),
    dieCase: (_, defect) => onDie(defect),
    interruptCase: (_, fiberId) => onInterrupt(fiberId),
    annotatedCase: (_, value, annotation) => onAnnotated(value, annotation),
    sequentialCase: (_, left, right) => onSequential(left, right),
    parallelCase: (_, left, right) => onParallel(left, right)
  });
});
/** @internal */
const cause_reduce = /*#__PURE__*/Function_dual(3, (self, zero, pf) => {
  let accumulator = zero;
  let cause = self;
  const causes = [];
  while (cause !== undefined) {
    const option = pf(accumulator, cause);
    accumulator = Option_isSome(option) ? option.value : accumulator;
    switch (cause._tag) {
      case OP_SEQUENTIAL:
        {
          causes.push(cause.right);
          cause = cause.left;
          break;
        }
      case OP_PARALLEL:
        {
          causes.push(cause.right);
          cause = cause.left;
          break;
        }
      case OP_ANNOTATED:
        {
          cause = cause.cause;
          break;
        }
      default:
        {
          cause = undefined;
          break;
        }
    }
    if (cause === undefined && causes.length > 0) {
      cause = causes.pop();
    }
  }
  return accumulator;
});
/** @internal */
const reduceWithContext = /*#__PURE__*/Function_dual(3, (self, context, reducer) => {
  const input = [self];
  const output = [];
  while (input.length > 0) {
    const cause = input.pop();
    switch (cause._tag) {
      case OP_EMPTY:
        {
          output.push(Either_right(reducer.emptyCase(context)));
          break;
        }
      case OP_FAIL:
        {
          output.push(Either_right(reducer.failCase(context, cause.error)));
          break;
        }
      case OP_DIE:
        {
          output.push(Either_right(reducer.dieCase(context, cause.defect)));
          break;
        }
      case OP_INTERRUPT:
        {
          output.push(Either_right(reducer.interruptCase(context, cause.fiberId)));
          break;
        }
      case OP_ANNOTATED:
        {
          input.push(cause.cause);
          output.push(Either_left({
            _tag: OP_ANNOTATED_CASE,
            annotation: cause.annotation
          }));
          break;
        }
      case OP_SEQUENTIAL:
        {
          input.push(cause.right);
          input.push(cause.left);
          output.push(Either_left({
            _tag: OP_SEQUENTIAL_CASE
          }));
          break;
        }
      case OP_PARALLEL:
        {
          input.push(cause.right);
          input.push(cause.left);
          output.push(Either_left({
            _tag: OP_PARALLEL_CASE
          }));
          break;
        }
    }
  }
  const accumulator = [];
  while (output.length > 0) {
    const either = output.pop();
    switch (either._tag) {
      case "Left":
        {
          switch (either.left._tag) {
            case OP_SEQUENTIAL_CASE:
              {
                const left = accumulator.pop();
                const right = accumulator.pop();
                const value = reducer.sequentialCase(context, left, right);
                accumulator.push(value);
                break;
              }
            case OP_PARALLEL_CASE:
              {
                const left = accumulator.pop();
                const right = accumulator.pop();
                const value = reducer.parallelCase(context, left, right);
                accumulator.push(value);
                break;
              }
            case OP_ANNOTATED_CASE:
              {
                const cause = accumulator.pop();
                const value = reducer.annotatedCase(context, cause, either.left.annotation);
                accumulator.push(value);
                break;
              }
          }
          break;
        }
      case "Right":
        {
          accumulator.push(either.right);
          break;
        }
    }
  }
  if (accumulator.length === 0) {
    throw new Error("BUG: Cause.reduceWithContext - please report an issue at https://github.com/Effect-TS/io/issues");
  }
  return accumulator.pop();
});
// -----------------------------------------------------------------------------
// Errors
// -----------------------------------------------------------------------------
const makeException = (proto, tag) => {
  const _tag = {
    value: tag,
    enumerable: true
  };
  const protoWithToString = {
    ...proto,
    toString() {
      return `${this._tag}: ${this.message}`;
    }
  };
  return message => Object.create(protoWithToString, {
    _tag,
    message: {
      value: message,
      enumerable: true
    }
  });
};
/** @internal */
const RuntimeExceptionTypeId = /*#__PURE__*/Symbol.for("@effect/io/Cause/errors/RuntimeException");
/** @internal */
const RuntimeException = /*#__PURE__*/makeException({
  [RuntimeExceptionTypeId]: RuntimeExceptionTypeId
}, "RuntimeException");
/** @internal */
const isRuntimeException = u => {
  return typeof u === "object" && u != null && RuntimeExceptionTypeId in u;
};
/** @internal */
const InterruptedExceptionTypeId = /*#__PURE__*/Symbol.for("@effect/io/Cause/errors/InterruptedException");
/** @internal */
const InterruptedException = /*#__PURE__*/makeException({
  [InterruptedExceptionTypeId]: InterruptedExceptionTypeId
}, "InterruptedException");
/** @internal */
const isInterruptedException = u => {
  return typeof u === "object" && u != null && InterruptedExceptionTypeId in u;
};
/** @internal */
const IllegalArgumentExceptionTypeId = /*#__PURE__*/Symbol.for("@effect/io/Cause/errors/IllegalArgument");
/** @internal */
const IllegalArgumentException = /*#__PURE__*/makeException({
  [IllegalArgumentExceptionTypeId]: IllegalArgumentExceptionTypeId
}, "IllegalArgumentException");
/** @internal */
const isIllegalArgumentException = u => {
  return typeof u === "object" && u != null && IllegalArgumentExceptionTypeId in u;
};
/** @internal */
const NoSuchElementExceptionTypeId = /*#__PURE__*/Symbol.for("@effect/io/Cause/errors/NoSuchElement");
/** @internal */
const NoSuchElementException = /*#__PURE__*/makeException({
  [NoSuchElementExceptionTypeId]: NoSuchElementExceptionTypeId
}, "NoSuchElementException");
/** @internal */
const isNoSuchElementException = u => {
  return typeof u === "object" && u != null && NoSuchElementExceptionTypeId in u;
};
/** @internal */
const InvalidHubCapacityExceptionTypeId = /*#__PURE__*/Symbol.for("@effect/io/Cause/errors/InvalidHubCapacityException");
/** @internal */
const InvalidHubCapacityException = /*#__PURE__*/makeException({
  [InvalidHubCapacityExceptionTypeId]: InvalidHubCapacityExceptionTypeId
}, "InvalidHubCapacityException");
/** @internal */
const isInvalidCapacityError = u => {
  return typeof u === "object" && u != null && InvalidHubCapacityExceptionTypeId in u;
};
// -----------------------------------------------------------------------------
// Stack Annotations
// -----------------------------------------------------------------------------
/** @internal */
const SpanAnnotationTypeId = /*#__PURE__*/Symbol.for("@effect/io/Cause/SpanAnnotation");
/** @internal */
const isSpanAnnotation = u => typeof u === "object" && u !== null && SpanAnnotationTypeId in u;
/** @internal */
const makeSpanAnnotation = span => ({
  _tag: "SpanAnnotation",
  [SpanAnnotationTypeId]: SpanAnnotationTypeId,
  span
});
/** @internal */
const globalErrorSeq = /*#__PURE__*/MutableRef_make(0);
/** @internal */
const UnAnnotateCauseReducer = () => ({
  emptyCase: () => cause_empty,
  failCase: (_, error) => fail(error),
  dieCase: (_, defect) => die(defect),
  interruptCase: (_, fiberId) => interrupt(fiberId),
  annotatedCase: (_, cause, __) => cause,
  sequentialCase: (_, left, right) => sequential(left, right),
  parallelCase: (_, left, right) => parallel(left, right)
});
/** @internal */
const unannotate = self => reduceWithContext(self, void 0, UnAnnotateCauseReducer());
// -----------------------------------------------------------------------------
// Pretty Printing
// -----------------------------------------------------------------------------
/** @internal */
const renderToString = u => {
  if (typeof u === "object" && u != null && "toString" in u && typeof u["toString"] === "function" && u["toString"] !== Object.prototype.toString) {
    return u["toString"]();
  }
  if (typeof u === "string") {
    return `Error: ${u}`;
  }
  if (typeof u === "object" && u !== null) {
    if ("message" in u && typeof u["message"] === "string") {
      const raw = JSON.parse(JSON.stringify(u));
      const keys = new Set(Object.keys(raw));
      keys.delete("name");
      keys.delete("message");
      keys.delete("_tag");
      if (keys.size === 0) {
        return `${"name" in u && typeof u.name === "string" ? u.name : "Error"}${"_tag" in u && typeof u["_tag"] === "string" ? `(${u._tag})` : ``}: ${u.message}`;
      }
    }
  }
  return `Error: ${JSON.stringify(u)}`;
};
/** @internal */
const defaultErrorToLines = error => {
  if (error instanceof Error) {
    return [renderToString(error), error.stack?.split("\n").filter(_ => !_.startsWith("Error")).join("\n")];
  }
  return [renderToString(error), void 0];
};
class RenderError {
  constructor(message, stack, span) {
    this.message = message;
    this.stack = stack;
    this.span = span;
  }
}
const filterStack = stack => {
  const lines = stack.split("\n");
  const out = [];
  for (let i = 0; i < lines.length; i++) {
    if (lines[i].includes("EffectPrimitive") || lines[i].includes("Generator.next") || lines[i].includes("FiberRuntime")) {
      return out.join("\n");
    } else {
      out.push(lines[i]);
    }
  }
  return out.join("\n");
};
/** @internal */
const cause_pretty = cause => {
  if (isInterruptedOnly(cause)) {
    return "All fibers interrupted without errors.";
  }
  const final = prettyErrors(cause).map(e => {
    let message = e.message;
    if (e.stack) {
      message += `\r\n${filterStack(e.stack)}`;
    }
    if (e.span) {
      let current = e.span;
      let i = 0;
      while (current && current._tag === "Span" && i < 10) {
        message += `\r\n    at ${current.name}`;
        current = getOrUndefined(current.parent);
        i++;
      }
    }
    return message;
  }).join("\r\n\r\n");
  if (!final.includes("\r\n")) {
    return final;
  }
  return `\r\n${final}\r\n`;
};
/** @internal */
const prettyErrors = cause => reduceWithContext(cause, void 0, {
  emptyCase: () => [],
  dieCase: (_, err) => {
    const rendered = defaultErrorToLines(err);
    return [{
      message: rendered[0],
      stack: rendered[1],
      span: undefined
    }];
  },
  failCase: (_, err) => {
    const rendered = defaultErrorToLines(err);
    return [{
      message: rendered[0],
      stack: rendered[1],
      span: undefined
    }];
  },
  interruptCase: () => [],
  parallelCase: (_, l, r) => [...l, ...r],
  sequentialCase: (_, l, r) => [...l, ...r],
  annotatedCase: (_, v, annotation) => isSpanAnnotation(annotation) ? v.map(error => ({
    ...error,
    span: error.span ?? annotation.span
  })) : v
});
//# sourceMappingURL=cause.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Cause.mjs

/**
 * @since 1.0.0
 * @category symbols
 */
const Cause_CauseTypeId = CauseTypeId;
/**
 * @since 1.0.0
 * @category symbols
 */
const Cause_RuntimeExceptionTypeId = RuntimeExceptionTypeId;
/**
 * @since 1.0.0
 * @category symbols
 */
const Cause_InterruptedExceptionTypeId = InterruptedExceptionTypeId;
/**
 * @since 1.0.0
 * @category symbols
 */
const Cause_IllegalArgumentExceptionTypeId = IllegalArgumentExceptionTypeId;
/**
 * @since 1.0.0
 * @category symbols
 */
const Cause_NoSuchElementExceptionTypeId = NoSuchElementExceptionTypeId;
/**
 * @since 1.0.0
 * @category symbols
 */
const Cause_InvalidHubCapacityExceptionTypeId = InvalidHubCapacityExceptionTypeId;
/**
 * @since 1.0.0
 * @category symbols
 */
const Cause_SpanAnnotationTypeId = SpanAnnotationTypeId;
/**
 * @since 1.0.0
 * @category stack
 */
const Cause_globalErrorSeq = globalErrorSeq;
/**
 * Constructs a new `Empty` cause.
 *
 * @since 1.0.0
 * @category constructors
 */
const Cause_empty = cause_empty;
/**
 * Constructs a new `Fail` cause from the specified `error`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Cause_fail = fail;
/**
 * Constructs a new `Die` cause from the specified `defect`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Cause_die = die;
/**
 * Constructs a new `Interrupt` cause from the specified `fiberId`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Cause_interrupt = interrupt;
/**
 * Constructs a new `Annotated` cause from the specified `annotation`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Cause_annotated = annotated;
/**
 * Constructs a new `Parallel` cause from the specified `left` and `right`
 * causes.
 *
 * @since 1.0.0
 * @category constructors
 */
const Cause_parallel = parallel;
/**
 * Constructs a new `Sequential` cause from the specified pecified `left` and
 * `right` causes.
 *
 * @since 1.0.0
 * @category constructors
 */
const Cause_sequential = sequential;
/**
 * Returns `true` if the specified value is a `Cause`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Cause_isCause = isCause;
/**
 * Returns `true` if the specified `Cause` is an `Empty` type, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Cause_isEmptyType = isEmptyType;
/**
 * Returns `true` if the specified `Cause` is a `Fail` type, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Cause_isFailType = isFailType;
/**
 * Returns `true` if the specified `Cause` is a `Die` type, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Cause_isDieType = isDieType;
/**
 * Returns `true` if the specified `Cause` is an `Interrupt` type, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Cause_isInterruptType = isInterruptType;
/**
 * Returns `true` if the specified `Cause` is an `Annotated` type, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Cause_isAnnotatedType = isAnnotatedType;
/**
 * Returns `true` if the specified `Cause` is a `Sequential` type, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Cause_isSequentialType = isSequentialType;
/**
 * Returns `true` if the specified `Cause` is a `Parallel` type, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Cause_isParallelType = isParallelType;
/**
 * Returns the size of the cause, calculated as the number of individual `Cause`
 * nodes found in the `Cause` semiring structure.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_size = cause_size;
/**
 * Returns `true` if the specified cause is empty, `false` otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_isEmpty = cause_isEmpty;
/**
 * Returns `true` if the specified cause contains a failure, `false` otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_isFailure = isFailure;
/**
 * Returns `true` if the specified cause contains a defect, `false` otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_isDie = isDie;
/**
 * Returns `true` if the specified cause contains an interruption, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_isInterrupted = isInterrupted;
/**
 * Returns `true` if the specified cause contains only interruptions (without
 * any `Die` or `Fail` causes), `false` otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_isInterruptedOnly = isInterruptedOnly;
/**
 * Returns a `List` of all recoverable errors of type `E` in the specified
 * cause.
 *
 * @since 1.0.0
 * @category getters
 */
const failures = cause_failures;
/**
 * Returns a `List` of all unrecoverable defects in the specified cause.
 *
 * @since 1.0.0
 * @category getters
 */
const defects = cause_defects;
/**
 * Returns a `HashSet` of `FiberId`s for all fibers that interrupted the fiber
 * described by the specified cause.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_interruptors = interruptors;
/**
 * Returns the `E` associated with the first `Fail` in this `Cause`, if one
 * exists.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_failureOption = failureOption;
/**
 * Returns the first checked error on the `Left` if available, if there are
 * no checked errors return the rest of the `Cause` that is known to contain
 * only `Die` or `Interrupt` causes.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_failureOrCause = failureOrCause;
/**
 * Converts the specified `Cause<Option<E>>` to an `Option<Cause<E>>` by
 * recursively stripping out any failures with the error `None`.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_flipCauseOption = flipCauseOption;
/**
 * Returns the defect associated with the first `Die` in this `Cause`, if one
 * exists.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_dieOption = dieOption;
/**
 * Returns the `FiberId` associated with the first `Interrupt` in the specified
 * cause, if one exists.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_interruptOption = interruptOption;
/**
 * Remove all `Fail` and `Interrupt` nodes from the specified cause, and return
 * a cause containing only `Die` cause/finalizer defects.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_keepDefects = keepDefects;
/**
 * Linearizes the specified cause into a `HashSet` of parallel causes where each
 * parallel cause contains a linear sequence of failures.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_linearize = linearize;
/**
 * Remove all `Fail` and `Interrupt` nodes from the specified cause, and return
 * a cause containing only `Die` cause/finalizer defects.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_stripFailures = stripFailures;
/**
 * Remove all `Die` causes that the specified partial function is defined at,
 * returning `Some` with the remaining causes or `None` if there are no
 * remaining causes.
 *
 * @since 1.0.0
 * @category getters
 */
const Cause_stripSomeDefects = stripSomeDefects;
/**
 * @since 1.0.0
 * @category mapping
 */
const Cause_as = cause_as;
/**
 * @since 1.0.0
 * @category mapping
 */
const Cause_map = cause_map;
/**
 * @since 1.0.0
 * @category sequencing
 */
const Cause_flatMap = cause_flatMap;
/**
 * @since 1.0.0
 * @category sequencing
 */
const Cause_flatten = cause_flatten;
/**
 * Returns `true` if the `self` cause contains or is equal to `that` cause,
 * `false` otherwise.
 *
 * @since 1.0.0
 * @category elements
 */
const Cause_contains = cause_contains;
/**
 * Squashes a `Cause` down to a single defect, chosen to be the "most important"
 * defect.
 *
 * @since 1.0.0
 * @category destructors
 */
const Cause_squash = squash;
/**
 * Squashes a `Cause` down to a single defect, chosen to be the "most important"
 * defect. If a recoverable error is found, the provided function will be used
 * to map the error a defect, and the resulting value will be returned.
 *
 * @since 1.0.0
 * @category destructors
 */
const Cause_squashWith = squashWith;
/**
 * Uses the provided partial function to search the specified cause and attempt
 * to extract information from it.
 *
 * @since 1.0.0
 * @category elements
 */
const Cause_find = find;
/**
 * Filters causes which match the provided predicate out of the specified cause.
 *
 * @since 1.0.0
 * @category filtering
 */
const Cause_filter = cause_filter;
/**
 * Folds the specified cause into a value of type `Z`.
 *
 * @since 1.0.0
 * @category folding
 */
const Cause_match = cause_match;
/**
 * Reduces the specified cause into a value of type `Z`, beginning with the
 * provided `zero` value.
 *
 * @since 1.0.0
 * @category folding
 */
const Cause_reduce = cause_reduce;
/**
 * Reduces the specified cause into a value of type `Z` using a `Cause.Reducer`.
 * Also allows for accessing the provided context during reduction.
 *
 * @since 1.0.0
 * @category folding
 */
const Cause_reduceWithContext = reduceWithContext;
/**
 * Represents a checked exception which occurs when a `Fiber` is interrupted.
 *
 * @since 1.0.0
 * @category errors
 */
const Cause_InterruptedException = InterruptedException;
/**
 * Returns `true` if the specified value is an `InterruptedException`, `false`
 * otherwise.

 * @since 1.0.0
 * @category refinements
 */
const Cause_isInterruptedException = isInterruptedException;
/**
 * Represents a checked exception which occurs when an invalid argument is
 * provided to a method.
 *
 * @since 1.0.0
 * @category errors
 */
const Cause_IllegalArgumentException = IllegalArgumentException;
/**
 * Returns `true` if the specified value is an `IllegalArgumentException`, `false`
 * otherwise.

 * @since 1.0.0
 * @category refinements
 */
const Cause_isIllegalArgumentException = isIllegalArgumentException;
/**
 * Represents a checked exception which occurs when an expected element was
 * unable to be found.
 *
 * @since 1.0.0
 * @category errors
 */
const Cause_NoSuchElementException = NoSuchElementException;
/**
  * Returns `true` if the specified value is an `IllegalArgumentException`, `false`
  * otherwise.

  * @since 1.0.0
  * @category refinements
  */
const Cause_isNoSuchElementException = isNoSuchElementException;
/**
 * Represents a generic checked exception which occurs at runtime.
 *
 * @since 1.0.0
 * @category errors
 */
const Cause_RuntimeException = RuntimeException;
/**
  * Returns `true` if the specified value is an `RuntimeException`, `false`
  * otherwise.

  * @since 1.0.0
  * @category refinements
  */
const Cause_isRuntimeException = isRuntimeException;
/**
 * Returns the specified `Cause` as a pretty-printed string.
 *
 * @since 1.0.0
 * @category rendering
 */
const pretty = cause_pretty;
/**
 * Removes any annotation from the cause
 *
 * @since 1.0.0
 * @category filtering
 */
const Cause_unannotate = unannotate;
//# sourceMappingURL=Cause.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/runtimeFlagsPatch.mjs

/** @internal */
const BIT_MASK = 0xff;
/** @internal */
const BIT_SHIFT = 0x08;
/** @internal */
const active = patch => patch & BIT_MASK;
/** @internal */
const enabled = patch => patch >> BIT_SHIFT & BIT_MASK;
/** @internal */
const runtimeFlagsPatch_make = (active, enabled) => (active & BIT_MASK) + ((enabled & active & BIT_MASK) << BIT_SHIFT);
/** @internal */
const runtimeFlagsPatch_empty = /*#__PURE__*/runtimeFlagsPatch_make(0, 0);
/** @internal */
const enable = flag => runtimeFlagsPatch_make(flag, flag);
/** @internal */
const disable = flag => runtimeFlagsPatch_make(flag, 0);
/** @internal */
const runtimeFlagsPatch_isEmpty = patch => patch === 0;
/** @internal */
const isActive = /*#__PURE__*/Function_dual(2, (self, flag) => (active(self) & flag) !== 0);
/** @internal */
const isEnabled = /*#__PURE__*/Function_dual(2, (self, flag) => (enabled(self) & flag) !== 0);
/** @internal */
const isDisabled = /*#__PURE__*/Function_dual(2, (self, flag) => (active(self) & flag) !== 0 && (enabled(self) & flag) === 0);
/** @internal */
const exclude = /*#__PURE__*/Function_dual(2, (self, flag) => runtimeFlagsPatch_make(active(self) & ~flag, enabled(self)));
/** @internal */
const both = /*#__PURE__*/Function_dual(2, (self, that) => runtimeFlagsPatch_make(active(self) | active(that), enabled(self) & enabled(that)));
/** @internal */
const runtimeFlagsPatch_either = /*#__PURE__*/Function_dual(2, (self, that) => runtimeFlagsPatch_make(active(self) | active(that), enabled(self) | enabled(that)));
/** @internal */
const andThen = /*#__PURE__*/Function_dual(2, (self, that) => self | that);
/** @internal */
const inverse = patch => runtimeFlagsPatch_make(enabled(patch), invert(active(patch)));
/** @internal */
const invert = n => ~n >>> 0 & BIT_MASK;
//# sourceMappingURL=runtimeFlagsPatch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/runtimeFlags.mjs



/** @internal */
const runtimeFlags_None = 0;
/** @internal */
const Interruption = 1 << 0;
/** @internal */
const OpSupervision = 1 << 1;
/** @internal */
const RuntimeMetrics = 1 << 2;
/** @internal */
const WindDown = 1 << 4;
/** @internal */
const CooperativeYielding = 1 << 5;
/** @internal */
const allFlags = [runtimeFlags_None, Interruption, OpSupervision, RuntimeMetrics, WindDown, CooperativeYielding];
const print = flag => {
  switch (flag) {
    case CooperativeYielding:
      {
        return "CooperativeYielding";
      }
    case WindDown:
      {
        return "WindDown";
      }
    case RuntimeMetrics:
      {
        return "RuntimeMetrics";
      }
    case OpSupervision:
      {
        return "OpSupervision";
      }
    case Interruption:
      {
        return "Interruption";
      }
    case runtimeFlags_None:
      {
        return "None";
      }
  }
};
/** @internal */
const cooperativeYielding = self => runtimeFlags_isEnabled(self, CooperativeYielding);
/** @internal */
const runtimeFlags_disable = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, flag) => self & ~flag)));
/** @internal */
const disableAll = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, flags) => self & ~flags)));
/** @internal */
const runtimeFlags_enable = /*#__PURE__*/Function_dual(2, (self, flag) => self | flag);
/** @internal */
const enableAll = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, flags) => self | flags)));
/** @internal */
const interruptible = self => interruption(self) && !windDown(self);
/** @internal */
const interruption = self => runtimeFlags_isEnabled(self, Interruption);
/** @internal */
const runtimeFlags_isDisabled = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, flag) => !runtimeFlags_isEnabled(self, flag))));
/** @internal */
const runtimeFlags_isEnabled = /*#__PURE__*/Function_dual(2, (self, flag) => (self & flag) !== 0);
/** @internal */
const runtimeFlags_make = (...flags) => flags.reduce((a, b) => a | b, 0);
/** @internal */
const runtimeFlags_none = /*#__PURE__*/runtimeFlags_make(runtimeFlags_None);
/** @internal */
const opSupervision = self => runtimeFlags_isEnabled(self, OpSupervision);
/** @internal */
const render = self => {
  const active = [];
  allFlags.forEach(flag => {
    if (runtimeFlags_isEnabled(self, flag)) {
      active.push(`${print(flag)}`);
    }
  });
  return `RuntimeFlags(${active.join(", ")})`;
};
/** @internal */
const runtimeMetrics = self => runtimeFlags_isEnabled(self, RuntimeMetrics);
/** @internal */
const runtimeFlags_toSet = self => new Set(allFlags.filter(flag => runtimeFlags_isEnabled(self, flag)));
const windDown = self => runtimeFlags_isEnabled(self, WindDown);
// circular with RuntimeFlagsPatch
/** @internal */
const enabledSet = self => runtimeFlags_toSet(active(self) & enabled(self));
/** @internal */
const disabledSet = self => runtimeFlags_toSet(active(self) & ~enabled(self));
/** @internal */
const runtimeFlags_diff = /*#__PURE__*/Function_dual(2, (self, that) => runtimeFlagsPatch_make(self ^ that, that));
/** @internal */
const runtimeFlags_patch = /*#__PURE__*/Function_dual(2, (self, patch) => self & (invert(active(patch)) | enabled(patch)) | active(patch) & enabled(patch));
/** @internal */
const renderPatch = self => {
  const enabled = Array.from(enabledSet(self)).map(flag => print(flag)).join(", ");
  const disabled = Array.from(disabledSet(self)).map(flag => print(flag)).join(", ");
  return `RuntimeFlagsPatch(enabled = (${enabled}), disabled = (${disabled}))`;
};
/** @internal */
const differ = /*#__PURE__*/mjs_Differ_make({
  empty: runtimeFlagsPatch_empty,
  diff: (oldValue, newValue) => runtimeFlags_diff(oldValue, newValue),
  combine: (first, second) => andThen(second)(first),
  patch: (_patch, oldValue) => runtimeFlags_patch(oldValue, _patch)
});
//# sourceMappingURL=runtimeFlags.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Fiber/Runtime/Flags/Patch.mjs


/**
 * The empty `RuntimeFlagsPatch`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Patch_empty = runtimeFlagsPatch_empty;
/**
 * @since 1.0.0
 * @category constructors
 */
const Patch_make = runtimeFlagsPatch_make;
/**
 * Creates a `RuntimeFlagsPatch` describing enabling the provided `RuntimeFlag`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Patch_enable = enable;
/**
 * Creates a `RuntimeFlagsPatch` describing disabling the provided `RuntimeFlag`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Patch_disable = disable;
/**
 * Returns `true` if the specified `RuntimeFlagsPatch` is empty.
 *
 * @since 1.0.0
 * @category getters
 */
const Patch_isEmpty = runtimeFlagsPatch_isEmpty;
/**
 * Returns `true` if the `RuntimeFlagsPatch` describes the specified
 * `RuntimeFlag` as active.
 *
 * @since 1.0.0
 * @category elements
 */
const Patch_isActive = isActive;
/**
 * Returns `true` if the `RuntimeFlagsPatch` describes the specified
 * `RuntimeFlag` as enabled.
 *
 * @since 1.0.0
 * @category elements
 */
const Patch_isEnabled = isEnabled;
/**
 * Returns `true` if the `RuntimeFlagsPatch` describes the specified
 * `RuntimeFlag` as disabled.
 *
 * @since 1.0.0
 * @category elements
 */
const Patch_isDisabled = isDisabled;
/**
 * Returns `true` if the `RuntimeFlagsPatch` includes the specified
 * `RuntimeFlag`, `false` otherwise.
 *
 * @since 1.0.0
 * @category elements
 */
const includes = isActive;
/**
 * Creates a `RuntimeFlagsPatch` describing the application of the `self` patch,
 * followed by `that` patch.
 *
 * @since 1.0.0
 * @category utils
 */
const Patch_andThen = andThen;
/**
 * Creates a `RuntimeFlagsPatch` describing application of both the `self` patch
 * and `that` patch.
 *
 * @since 1.0.0
 * @category utils
 */
const Patch_both = both;
/**
 * Creates a `RuntimeFlagsPatch` describing application of either the `self`
 * patch or `that` patch.
 *
 * @since 1.0.0
 * @category utils
 */
const Patch_either = runtimeFlagsPatch_either;
/**
 * Creates a `RuntimeFlagsPatch` which describes exclusion of the specified
 * `RuntimeFlag` from the set of `RuntimeFlags`.
 *
 * @category utils
 * @since 1.0.0
 */
const Patch_exclude = exclude;
/**
 * Creates a `RuntimeFlagsPatch` which describes the inverse of the patch
 * specified by the provided `RuntimeFlagsPatch`.
 *
 * @since 1.0.0
 * @category utils
 */
const Patch_inverse = inverse;
/**
 * Returns a `ReadonlySet<number>` containing the `RuntimeFlags` described as
 * enabled by the specified `RuntimeFlagsPatch`.
 *
 * @since 1.0.0
 * @category destructors
 */
const Patch_enabledSet = enabledSet;
/**
 * Returns a `ReadonlySet<number>` containing the `RuntimeFlags` described as
 * disabled by the specified `RuntimeFlagsPatch`.
 *
 * @since 1.0.0
 * @category destructors
 */
const Patch_disabledSet = disabledSet;
/**
 * Renders the provided `RuntimeFlagsPatch` to a string.
 *
 * @since 1.0.0
 * @category destructors
 */
const Patch_render = renderPatch;
//# sourceMappingURL=Patch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/opCodes/deferred.mjs
/** @internal */
const OP_STATE_PENDING = "Pending";
/** @internal */
const OP_STATE_DONE = "Done";
//# sourceMappingURL=deferred.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/deferred.mjs

/** @internal */
const DeferredSymbolKey = "@effect/io/Deferred";
/** @internal */
const DeferredTypeId = /*#__PURE__*/Symbol.for(DeferredSymbolKey);
/** @internal */
const deferredVariance = {
  _E: _ => _,
  _A: _ => _
};
/** @internal */
const pending = joiners => {
  return {
    _tag: OP_STATE_PENDING,
    joiners
  };
};
/** @internal */
const done = effect => {
  return {
    _tag: OP_STATE_DONE,
    effect
  };
};
//# sourceMappingURL=deferred.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/opCodes/effect.mjs
/** @internal */
const OP_ASYNC = "Async";
/** @internal */
const OP_COMMIT = "Commit";
/** @internal */
const OP_FAILURE = "Failure";
/** @internal */
const OP_ON_FAILURE = "OnFailure";
/** @internal */
const OP_ON_SUCCESS = "OnSuccess";
/** @internal */
const OP_ON_SUCCESS_AND_FAILURE = "OnSuccessAndFailure";
/** @internal */
const OP_SUCCESS = "Success";
/** @internal */
const OP_SYNC = "Sync";
/** @internal */
const OP_TAG = "Tag";
/** @internal */
const OP_UPDATE_RUNTIME_FLAGS = "UpdateRuntimeFlags";
/** @internal */
const OP_WHILE = "While";
/** @internal */
const OP_WITH_RUNTIME = "WithRuntime";
/** @internal */
const OP_YIELD = "Yield";
/** @internal */
const OP_REVERT_FLAGS = "RevertFlags";
//# sourceMappingURL=effect.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Scheduler.mjs
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category utils
 */
class PriorityBuckets {
  constructor() {
    /**
     * @since 1.0.0
     */
    this.buckets = [];
  }
  /**
   * @since 1.0.0
   */
  scheduleTask(task, priority) {
    let bucket = undefined;
    let index;
    for (index = 0; index < this.buckets.length; index++) {
      if (this.buckets[index][0] <= priority) {
        bucket = this.buckets[index];
      } else {
        break;
      }
    }
    if (bucket) {
      bucket[1].push(task);
    } else {
      const newBuckets = [];
      for (let i = 0; i < index; i++) {
        newBuckets.push(this.buckets[i]);
      }
      newBuckets.push([priority, [task]]);
      for (let i = index; i < this.buckets.length; i++) {
        newBuckets.push(this.buckets[i]);
      }
      this.buckets = newBuckets;
    }
  }
}
/**
 * @since 1.0.0
 * @category constructors
 */
class MixedScheduler {
  constructor(
  /**
   * @since 1.0.0
   */
  maxNextTickBeforeTimer) {
    this.maxNextTickBeforeTimer = maxNextTickBeforeTimer;
    /**
     * @since 1.0.0
     */
    this.running = false;
    /**
     * @since 1.0.0
     */
    this.tasks = new PriorityBuckets();
  }
  /**
   * @since 1.0.0
   */
  starveInternal(depth) {
    const tasks = this.tasks.buckets;
    this.tasks.buckets = [];
    for (const [_, toRun] of tasks) {
      for (let i = 0; i < toRun.length; i++) {
        toRun[i]();
      }
    }
    if (this.tasks.buckets.length === 0) {
      this.running = false;
    } else {
      this.starve(depth);
    }
  }
  /**
   * @since 1.0.0
   */
  starve(depth = 0) {
    if (depth >= this.maxNextTickBeforeTimer) {
      setTimeout(() => this.starveInternal(0), 0);
    } else {
      Promise.resolve(void 0).then(() => this.starveInternal(depth + 1));
    }
  }
  /**
   * @since 1.0.0
   */
  scheduleTask(task, priority) {
    this.tasks.scheduleTask(task, priority);
    if (!this.running) {
      this.running = true;
      this.starve();
    }
  }
}
/**
 * @since 1.0.0
 * @category schedulers
 */
const defaultScheduler = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/Scheduler/defaultScheduler"), () => new MixedScheduler(2048));
/**
 * @since 1.0.0
 * @category constructors
 */
class SyncScheduler {
  constructor() {
    /**
     * @since 1.0.0
     */
    this.tasks = new PriorityBuckets();
    /**
     * @since 1.0.0
     */
    this.deferred = false;
  }
  /**
   * @since 1.0.0
   */
  scheduleTask(task, priority) {
    if (this.deferred) {
      defaultScheduler.scheduleTask(task, priority);
    } else {
      this.tasks.scheduleTask(task, priority);
    }
  }
  /**
   * @since 1.0.0
   */
  flush() {
    while (this.tasks.buckets.length > 0) {
      const tasks = this.tasks.buckets;
      this.tasks.buckets = [];
      for (const [_, toRun] of tasks) {
        for (let i = 0; i < toRun.length; i++) {
          toRun[i]();
        }
      }
    }
    this.deferred = true;
  }
}
/**
 * @since 1.0.0
 * @category constructors
 */
class ControlledScheduler {
  constructor() {
    /**
     * @since 1.0.0
     */
    this.tasks = new PriorityBuckets();
    /**
     * @since 1.0.0
     */
    this.deferred = false;
  }
  /**
   * @since 1.0.0
   */
  scheduleTask(task, priority) {
    if (this.deferred) {
      defaultScheduler.scheduleTask(task, priority);
    } else {
      this.tasks.scheduleTask(task, priority);
    }
  }
  /**
   * @since 1.0.0
   */
  step() {
    const tasks = this.tasks.buckets;
    this.tasks.buckets = [];
    for (const [_, toRun] of tasks) {
      for (let i = 0; i < toRun.length; i++) {
        toRun[i]();
      }
    }
  }
}
/**
 * @since 1.0.0
 * @category constructors
 */
const makeMatrix = (...record) => {
  const index = record.sort(([p0], [p1]) => p0 < p1 ? -1 : p0 > p1 ? 1 : 0);
  return {
    scheduleTask(task, priority) {
      let scheduler = undefined;
      for (const i of index) {
        if (priority >= i[0]) {
          scheduler = i[1];
        } else {
          return (scheduler ?? defaultScheduler).scheduleTask(task, priority);
        }
      }
      return (scheduler ?? defaultScheduler).scheduleTask(task, priority);
    }
  };
};
/**
 * @since 1.0.0
 * @category constructors
 */
const Scheduler_make = scheduleTask => ({
  scheduleTask
});
/**
 * @since 1.0.0
 * @category constructors
 */
const makeBatched = callback => {
  let running = false;
  const tasks = new PriorityBuckets();
  const starveInternal = () => {
    const tasksToRun = tasks.buckets;
    tasks.buckets = [];
    for (const [_, toRun] of tasksToRun) {
      for (let i = 0; i < toRun.length; i++) {
        toRun[i]();
      }
    }
    if (tasks.buckets.length === 0) {
      running = false;
    } else {
      starve();
    }
  };
  const starve = () => callback(starveInternal);
  return Scheduler_make((task, priority) => {
    tasks.scheduleTask(task, priority);
    if (!running) {
      running = true;
      starve();
    }
  });
};
/**
 * @since 1.0.0
 * @category constructors
 */
const timer = ms => Scheduler_make(task => setTimeout(task, ms));
/**
 * @since 1.0.0
 * @category constructors
 */
const timerBatched = ms => makeBatched(task => setTimeout(task, ms));
//# sourceMappingURL=Scheduler.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/core.mjs
var core_a, core_b, core_c, _d;



























// -----------------------------------------------------------------------------
// Effect
// -----------------------------------------------------------------------------
/** @internal */
const EffectErrorSymbolKey = "@effect/io/Effect/Error";
/** @internal */
const EffectErrorTypeId = /*#__PURE__*/Symbol.for(EffectErrorSymbolKey);
/** @internal */
const isEffectError = u => typeof u === "object" && u != null && EffectErrorTypeId in u;
/** @internal */
const makeEffectError = cause => ({
  [EffectErrorTypeId]: EffectErrorTypeId,
  _tag: "EffectError",
  cause
});
/**
 * @internal
 */
const core_blocked = (blockedRequests, _continue) => {
  const effect = new EffectPrimitive("Blocked");
  effect.i0 = blockedRequests;
  effect.i1 = _continue;
  return effect;
};
/**
 * @internal
 */
const runRequestBlock = blockedRequests => {
  const effect = new EffectPrimitive("RunBlocked");
  effect.i0 = blockedRequests;
  return effect;
};
/** @internal */
const core_EffectTypeId = /*#__PURE__*/Symbol.for("@effect/io/Effect");
/** @internal */
class RevertFlags {
  constructor(patch, op) {
    this.patch = patch;
    this.op = op;
    this._tag = OP_REVERT_FLAGS;
  }
}
/** @internal */
class EffectPrimitive {
  constructor(_tag) {
    this._tag = _tag;
    this.i0 = undefined;
    this.i1 = undefined;
    this.i2 = undefined;
    this.trace = undefined;
    this[core_a] = core_effectVariance;
  }
  [(core_a = core_EffectTypeId, Equal_symbol)](that) {
    return this === that;
  }
  [symbol]() {
    return random(this);
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
class EffectPrimitiveFailure {
  constructor(_tag) {
    this._tag = _tag;
    this.i0 = undefined;
    this.i1 = undefined;
    this.i2 = undefined;
    this.trace = undefined;
    this[core_b] = core_effectVariance;
  }
  [(core_b = core_EffectTypeId, Equal_symbol)](that) {
    return this === that;
  }
  [symbol]() {
    return random(this);
  }
  get cause() {
    return this.i0;
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
  toJSON() {
    return {
      _tag: this._tag,
      cause: this.cause.toJSON()
    };
  }
  toString() {
    return pretty(this.cause);
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
}
/** @internal */
class EffectPrimitiveSuccess {
  constructor(_tag) {
    this._tag = _tag;
    this.i0 = undefined;
    this.i1 = undefined;
    this.i2 = undefined;
    this.trace = undefined;
    this[core_c] = core_effectVariance;
  }
  [(core_c = core_EffectTypeId, Equal_symbol)](that) {
    return this === that;
  }
  [symbol]() {
    return random(this);
  }
  get value() {
    return this.i0;
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
  toJSON() {
    return {
      _tag: this._tag,
      value: this.value
    };
  }
  toString() {
    return `Success: ${String(this.value)}`;
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
}
/** @internal */
const core_effectVariance = {
  _R: _ => _,
  _E: _ => _,
  _A: _ => _
};
/** @internal */
const isEffect = u => typeof u === "object" && u != null && core_EffectTypeId in u;
/* @internal */
const withFiberRuntime = withRuntime => {
  const effect = new EffectPrimitive(OP_WITH_RUNTIME);
  effect.i0 = withRuntime;
  return effect;
};
/* @internal */
const acquireUseRelease = /*#__PURE__*/Function_dual(3, (acquire, use, release) => uninterruptibleMask(restore => core_flatMap(acquire, a => core_flatMap(core_exit(suspend(() => restore(use(a)))), exit => suspend(() => release(a, exit)).pipe(matchCauseEffect({
  onFailure: cause => {
    switch (exit._tag) {
      case OP_FAILURE:
        {
          return failCause(parallel(exit.i0, cause));
        }
      case OP_SUCCESS:
        {
          return failCause(cause);
        }
    }
  },
  onSuccess: () => exit
}))))));
/* @internal */
const core_as = /*#__PURE__*/Function_dual(2, (self, value) => core_flatMap(self, () => succeed(value)));
/* @internal */
const core_asUnit = self => core_as(self, void 0);
/* @internal */
const core_async = (register, blockingOn = Id_none) => suspend(() => {
  let cancelerRef = undefined;
  let controllerRef = undefined;
  const effect = new EffectPrimitive(OP_ASYNC);
  if (register.length !== 1) {
    const controller = new AbortController();
    controllerRef = controller;
    effect.i0 = resume => {
      cancelerRef = register(resume, controller.signal);
    };
  } else {
    effect.i0 = resume => {
      // @ts-expect-error
      cancelerRef = register(resume);
    };
  }
  effect.i1 = blockingOn;
  return onInterrupt(effect, () => {
    if (controllerRef) {
      controllerRef.abort();
    }
    return cancelerRef ?? core_unit;
  });
});
/* @internal */
const asyncEither = (register, blockingOn = Id_none) => core_async(resume => {
  const result = register(resume);
  if (Either_isRight(result)) {
    resume(result.right);
  } else {
    return result.left;
  }
}, blockingOn);
/* @internal */
const catchAllCause = /*#__PURE__*/Function_dual(2, (self, f) => {
  const effect = new EffectPrimitive(OP_ON_FAILURE);
  effect.i0 = self;
  effect.i1 = f;
  return effect;
});
/* @internal */
const catchAll = /*#__PURE__*/Function_dual(2, (self, f) => matchEffect(self, {
  onFailure: f,
  onSuccess: succeed
}));
/**
 * @macro identity
 * @internal
 */
const unified = f => (...args) => f(...args);
/* @internal */
const catchSome = /*#__PURE__*/Function_dual(2, (self, pf) => matchCauseEffect(self, {
  onFailure: unified(cause => {
    const either = failureOrCause(cause);
    switch (either._tag) {
      case "Left":
        {
          return getOrElse(() => failCause(cause))(pf(either.left));
        }
      case "Right":
        {
          return failCause(either.right);
        }
    }
  }),
  onSuccess: succeed
}));
/* @internal */
const checkInterruptible = f => withFiberRuntime((_, status) => f(interruption(status.runtimeFlags)));
/* @internal */
const core_die = defect => failCause(die(defect));
/* @internal */
const dieMessage = message => failCauseSync(() => die(RuntimeException(message)));
/* @internal */
const dieSync = evaluate => failCauseSync(() => die(evaluate()));
/* @internal */
const core_either = self => matchEffect(self, {
  onFailure: e => succeed(Either_left(e)),
  onSuccess: a => succeed(Either_right(a))
});
/* @internal */
const context = () => suspend(() => fiberRefGet(currentContext));
/* @internal */
const contextWithEffect = f => core_flatMap(context(), f);
/* @internal */
const core_exit = self => matchCause(self, {
  onFailure: exitFailCause,
  onSuccess: exitSucceed
});
/* @internal */
const core_fail = error => failCause(fail(error));
/* @internal */
const failSync = evaluate => failCauseSync(() => fail(evaluate()));
/* @internal */
const failCause = cause => {
  const effect = new EffectPrimitiveFailure(OP_FAILURE);
  effect.i0 = cause;
  return effect;
};
/* @internal */
const failCauseSync = evaluate => core_flatMap(sync(evaluate), failCause);
/* @internal */
const fiberId = /*#__PURE__*/withFiberRuntime(state => succeed(state.id()));
/* @internal */
const fiberIdWith = f => withFiberRuntime(state => f(state.id()));
/* @internal */
const core_flatMap = /*#__PURE__*/Function_dual(2, (self, f) => {
  const effect = new EffectPrimitive(OP_ON_SUCCESS);
  effect.i0 = self;
  effect.i1 = f;
  return effect;
});
/* @internal */
const step = self => {
  const effect = new EffectPrimitive("OnStep");
  effect.i0 = self;
  effect.i1 = exitSucceed;
  return effect;
};
/* @internal */
const flatMapStep = (self, f) => {
  const effect = new EffectPrimitive("OnStep");
  effect.i0 = self;
  effect.i1 = f;
  return effect;
};
/* @internal */
const core_flatten = self => core_flatMap(self, Function_identity);
/* @internal */
const core_flip = self => matchEffect(self, {
  onFailure: succeed,
  onSuccess: core_fail
});
/* @internal */
const matchCause = /*#__PURE__*/Function_dual(2, (self, {
  onFailure,
  onSuccess
}) => matchCauseEffect(self, {
  onFailure: cause => succeed(onFailure(cause)),
  onSuccess: a => succeed(onSuccess(a))
}));
/* @internal */
const matchCauseEffect = /*#__PURE__*/Function_dual(2, (self, {
  onFailure,
  onSuccess
}) => {
  const effect = new EffectPrimitive(OP_ON_SUCCESS_AND_FAILURE);
  effect.i0 = self;
  effect.i1 = onFailure;
  effect.i2 = onSuccess;
  return effect;
});
/* @internal */
const matchEffect = /*#__PURE__*/Function_dual(2, (self, {
  onFailure,
  onSuccess
}) => matchCauseEffect(self, {
  onFailure: cause => {
    const failures = cause_failures(cause);
    const defects = cause_defects(cause);
    if (defects.length > 0) {
      return failCause(electFailures(cause));
    }
    if (failures.length > 0) {
      return onFailure(unsafeHead(failures));
    }
    return failCause(cause);
  },
  onSuccess
}));
/* @internal */
const forEachSequential = /*#__PURE__*/Function_dual(2, (self, f) => suspend(() => {
  const arr = ReadonlyArray_fromIterable(self);
  const ret = new Array(arr.length);
  let i = 0;
  return core_as(whileLoop({
    while: () => i < arr.length,
    body: () => f(arr[i], i),
    step: b => {
      ret[i++] = b;
    }
  }), ret);
}));
/* @internal */
const forEachSequentialDiscard = /*#__PURE__*/Function_dual(2, (self, f) => suspend(() => {
  const arr = ReadonlyArray_fromIterable(self);
  let i = 0;
  return whileLoop({
    while: () => i < arr.length,
    body: () => f(arr[i], i),
    step: () => {
      i++;
    }
  });
}));
/* @internal */
const if_ = /*#__PURE__*/Function_dual(args => typeof args[0] === "boolean" || isEffect(args[0]), (self, {
  onFalse,
  onTrue
}) => typeof self === "boolean" ? self ? onTrue : onFalse : core_flatMap(self, unified(b => b ? onTrue : onFalse)));
/* @internal */
const core_interrupt = /*#__PURE__*/core_flatMap(fiberId, fiberId => interruptWith(fiberId));
/* @internal */
const interruptWith = fiberId => failCause(interrupt(fiberId));
/* @internal */
const core_interruptible = self => {
  const effect = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect.i0 = Patch_enable(Interruption);
  const _continue = orBlock => {
    if (orBlock._tag === "Blocked") {
      return core_blocked(orBlock.i0, core_interruptible(orBlock.i1));
    } else {
      return orBlock;
    }
  };
  effect.i1 = () => flatMapStep(self, _continue);
  return effect;
};
/* @internal */
const interruptibleMask = f => {
  const effect = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect.i0 = Patch_enable(Interruption);
  const _continue = step => {
    if (step._tag === "Blocked") {
      return core_blocked(step.i0, core_interruptible(step.i1));
    }
    return step;
  };
  effect.i1 = oldFlags => interruption(oldFlags) ? step(f(core_interruptible)) : step(f(uninterruptible));
  return core_flatMap(effect, _continue);
};
/* @internal */
const intoDeferred = /*#__PURE__*/Function_dual(2, (self, deferred) => uninterruptibleMask(restore => core_flatMap(core_exit(restore(self)), exit => deferredDone(deferred, exit))));
/* @internal */
const core_map = /*#__PURE__*/Function_dual(2, (self, f) => core_flatMap(self, a => sync(() => f(a))));
/* @internal */
const core_mapBoth = /*#__PURE__*/Function_dual(2, (self, {
  onFailure,
  onSuccess
}) => matchEffect(self, {
  onFailure: e => failSync(() => onFailure(e)),
  onSuccess: a => sync(() => onSuccess(a))
}));
/* @internal */
const mapError = /*#__PURE__*/Function_dual(2, (self, f) => matchCauseEffect(self, {
  onFailure: cause => {
    const either = failureOrCause(cause);
    switch (either._tag) {
      case "Left":
        {
          return failSync(() => f(either.left));
        }
      case "Right":
        {
          return failCause(either.right);
        }
    }
  },
  onSuccess: succeed
}));
/* @internal */
const onError = /*#__PURE__*/Function_dual(2, (self, cleanup) => onExit(self, unified(exit => exitIsSuccess(exit) ? core_unit : cleanup(exit.i0))));
/* @internal */
const onExit = /*#__PURE__*/Function_dual(2, (self, cleanup) => uninterruptibleMask(restore => matchCauseEffect(restore(self), {
  onFailure: cause1 => {
    const result = exitFailCause(cause1);
    return matchCauseEffect(cleanup(result), {
      onFailure: cause2 => exitFailCause(sequential(cause1, cause2)),
      onSuccess: () => result
    });
  },
  onSuccess: success => {
    const result = exitSucceed(success);
    return core_zipRight(cleanup(result), result);
  }
})));
/* @internal */
const onInterrupt = /*#__PURE__*/Function_dual(2, (self, cleanup) => onExit(self, exitMatch({
  onFailure: cause => isInterruptedOnly(cause) ? core_asUnit(cleanup(interruptors(cause))) : core_unit,
  onSuccess: () => core_unit
})));
/* @internal */
const core_orElse = /*#__PURE__*/Function_dual(2, (self, that) => attemptOrElse(self, that, succeed));
/* @internal */
const orDie = self => orDieWith(self, Function_identity);
/* @internal */
const orDieWith = /*#__PURE__*/Function_dual(2, (self, f) => matchEffect(self, {
  onFailure: e => core_die(f(e)),
  onSuccess: succeed
}));
/* @internal */
const core_partitionMap = (elements, f) => ReadonlyArray_fromIterable(elements).reduceRight(([lefts, rights], current) => {
  const either = f(current);
  switch (either._tag) {
    case "Left":
      {
        return [[either.left, ...lefts], rights];
      }
    case "Right":
      {
        return [lefts, [either.right, ...rights]];
      }
  }
}, [new Array(), new Array()]);
/* @internal */
const provideContext = /*#__PURE__*/Function_dual(2, (self, context) => fiberRefLocally(currentContext, context)(self));
/* @internal */
const provideSomeContext = /*#__PURE__*/Function_dual(2, (self, context) => fiberRefLocallyWith(currentContext, parent => mjs_Context_merge(parent, context))(self));
/* @internal */
const mapInputContext = /*#__PURE__*/Function_dual(2, (self, f) => contextWithEffect(context => provideContext(self, f(context))));
/* @internal */
const runtimeFlags = /*#__PURE__*/withFiberRuntime((_, status) => succeed(status.runtimeFlags));
/* @internal */
const succeed = value => {
  const effect = new EffectPrimitiveSuccess(OP_SUCCESS);
  effect.i0 = value;
  return effect;
};
/* @internal */
const suspend = effect => core_flatMap(sync(effect), Function_identity);
/* @internal */
const sync = evaluate => {
  const effect = new EffectPrimitive(OP_SYNC);
  effect.i0 = evaluate;
  return effect;
};
/* @internal */
const core_tap = /*#__PURE__*/Function_dual(2, (self, f) => core_flatMap(self, a => core_as(f(a), a)));
/* @internal */
const transplant = f => withFiberRuntime(state => {
  const scopeOverride = state.getFiberRef(currentForkScopeOverride);
  const scope = getOrElse(() => state.scope())(scopeOverride);
  return f(fiberRefLocally(currentForkScopeOverride, mjs_Option_some(scope)));
});
/* @internal */
const attemptOrElse = /*#__PURE__*/Function_dual(3, (self, that, onSuccess) => matchCauseEffect(self, {
  onFailure: cause => {
    const defects = cause_defects(cause);
    if (defects.length > 0) {
      return failCause(getOrThrow(keepDefectsAndElectFailures(cause)));
    }
    return that();
  },
  onSuccess
}));
/* @internal */
const uninterruptible = self => {
  const effect = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect.i0 = Patch_disable(Interruption);
  effect.i1 = () => flatMapStep(self, _continue);
  const _continue = orBlock => {
    if (orBlock._tag === "Blocked") {
      return core_blocked(orBlock.i0, uninterruptible(orBlock.i1));
    } else {
      return orBlock;
    }
  };
  return effect;
};
/* @internal */
const uninterruptibleMask = f => {
  const effect = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect.i0 = Patch_disable(Interruption);
  const _continue = step => {
    if (step._tag === "Blocked") {
      return core_blocked(step.i0, uninterruptible(step.i1));
    }
    return step;
  };
  effect.i1 = oldFlags => interruption(oldFlags) ? step(f(core_interruptible)) : step(f(uninterruptible));
  return core_flatMap(effect, _continue);
};
/* @internal */
const core_unit = /*#__PURE__*/succeed(void 0);
/* @internal */
const updateRuntimeFlags = patch => {
  const effect = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect.i0 = patch;
  effect.i1 = void 0;
  return effect;
};
/* @internal */
const whenEffect = /*#__PURE__*/Function_dual(2, (self, predicate) => core_flatMap(predicate, b => {
  if (b) {
    return core_map(mjs_Option_some)(self);
  }
  return succeed(Option_none());
}));
/* @internal */
const whileLoop = options => {
  const effect = new EffectPrimitive(OP_WHILE);
  effect.i0 = options.while;
  effect.i1 = options.body;
  effect.i2 = options.step;
  return effect;
};
/* @internal */
const withConcurrency = /*#__PURE__*/Function_dual(2, (self, concurrency) => fiberRefLocally(self, currentConcurrency, concurrency));
/* @internal */
const withRequestBatching = /*#__PURE__*/Function_dual(2, (self, requestBatching) => fiberRefLocally(self, currentRequestBatching, requestBatching));
/* @internal */
const withRuntimeFlags = /*#__PURE__*/Function_dual(2, (self, update) => {
  const effect = new EffectPrimitive(OP_UPDATE_RUNTIME_FLAGS);
  effect.i0 = update;
  effect.i1 = () => self;
  return effect;
});
/** @internal */
const withTracerTiming = /*#__PURE__*/Function_dual(2, (effect, enabled) => fiberRefLocally(effect, currentTracerTimingEnabled, enabled));
/* @internal */
const yieldNow = options => {
  const effect = new EffectPrimitive(OP_YIELD);
  return typeof options?.priority !== "undefined" ? withSchedulingPriority(options.priority)(effect) : effect;
};
/* @internal */
const core_zip = /*#__PURE__*/Function_dual(2, (self, that) => core_flatMap(self, a => core_map(that, b => [a, b])));
/* @internal */
const zipFlatten = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => core_flatMap(self, a => core_map(that, b => [...a, b])))));
/* @internal */
const core_zipLeft = /*#__PURE__*/Function_dual(2, (self, that) => core_flatMap(self, a => core_as(that, a)));
/* @internal */
const core_zipRight = /*#__PURE__*/Function_dual(2, (self, that) => core_flatMap(self, () => that));
/* @internal */
const core_zipWith = /*#__PURE__*/Function_dual(3, (self, that, f) => core_flatMap(self, a => core_map(that, b => f(a, b))));
/* @internal */
const never = /*#__PURE__*/asyncEither(() => {
  const interval = setInterval(() => {
    //
  }, 2 ** 31 - 1);
  return Either_left(sync(() => clearInterval(interval)));
});
// -----------------------------------------------------------------------------
// Fiber
// -----------------------------------------------------------------------------
/* @internal */
const interruptFiber = self => core_flatMap(fiberId, fiberId => interruptAsFiber(fiberId)(self));
/* @internal */
const interruptAsFiber = /*#__PURE__*/Function_dual(2, (self, fiberId) => core_flatMap(self.interruptAsFork(fiberId), () => self.await()));
// -----------------------------------------------------------------------------
// LogLevel
// -----------------------------------------------------------------------------
/** @internal */
const logLevelAll = {
  _tag: "All",
  syslog: 0,
  label: "ALL",
  ordinal: Number.MIN_SAFE_INTEGER,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
};
/** @internal */
const logLevelFatal = {
  _tag: "Fatal",
  syslog: 2,
  label: "FATAL",
  ordinal: 50000,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
};
/** @internal */
const logLevelError = {
  _tag: "Error",
  syslog: 3,
  label: "ERROR",
  ordinal: 40000,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
};
/** @internal */
const logLevelWarning = {
  _tag: "Warning",
  syslog: 4,
  label: "WARN",
  ordinal: 30000,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
};
/** @internal */
const logLevelInfo = {
  _tag: "Info",
  syslog: 6,
  label: "INFO",
  ordinal: 20000,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
};
/** @internal */
const logLevelDebug = {
  _tag: "Debug",
  syslog: 7,
  label: "DEBUG",
  ordinal: 10000,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
};
/** @internal */
const logLevelTrace = {
  _tag: "Trace",
  syslog: 7,
  label: "TRACE",
  ordinal: 0,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
};
/** @internal */
const logLevelNone = {
  _tag: "None",
  syslog: 7,
  label: "OFF",
  ordinal: Number.MAX_SAFE_INTEGER,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
};
/** @internal */
const allLogLevels = [logLevelAll, logLevelTrace, logLevelDebug, logLevelInfo, logLevelWarning, logLevelError, logLevelFatal, logLevelNone];
// -----------------------------------------------------------------------------
// FiberRef
// -----------------------------------------------------------------------------
/** @internal */
const FiberRefSymbolKey = "@effect/io/FiberRef";
/** @internal */
const FiberRefTypeId = /*#__PURE__*/Symbol.for(FiberRefSymbolKey);
/** @internal */
const fiberRefVariance = {
  _A: _ => _
};
/* @internal */
const fiberRefGet = self => fiberRefModify(self, a => [a, a]);
/* @internal */
const fiberRefGetAndSet = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, value) => fiberRefModify(self, v => [v, value]))));
/* @internal */
const fiberRefGetAndUpdate = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => fiberRefModify(self, v => [v, f(v)]))));
/* @internal */
const fiberRefGetAndUpdateSome = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, pf) => fiberRefModify(self, v => [v, Option.getOrElse(pf(v), () => v)]))));
/* @internal */
const fiberRefGetWith = /*#__PURE__*/Function_dual(2, (self, f) => core_flatMap(fiberRefGet(self), f));
/* @internal */
const fiberRefSet = /*#__PURE__*/Function_dual(2, (self, value) => fiberRefModify(self, () => [void 0, value]));
/* @internal */
const fiberRefDelete = self => withFiberRuntime(state => {
  state.unsafeDeleteFiberRef(self);
  return core_unit;
});
/* @internal */
const fiberRefReset = self => fiberRefSet(self, self.initial);
/* @internal */
const fiberRefModify = /*#__PURE__*/Function_dual(2, (self, f) => withFiberRuntime(state => {
  const [b, a] = f(state.getFiberRef(self));
  state.setFiberRef(self, a);
  return succeed(b);
}));
/* @internal */
const fiberRefModifySome = (self, def, f) => fiberRefModify(self, v => Option.getOrElse(f(v), () => [def, v]));
/* @internal */
const fiberRefUpdate = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => fiberRefModify(self, v => [void 0, f(v)]))));
/* @internal */
const fiberRefUpdateSome = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, pf) => fiberRefModify(self, v => [void 0, Option.getOrElse(pf(v), () => v)]))));
/* @internal */
const fiberRefUpdateAndGet = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => fiberRefModify(self, v => {
  const result = f(v);
  return [result, result];
}))));
/* @internal */
const fiberRefUpdateSomeAndGet = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, pf) => fiberRefModify(self, v => {
  const result = Option.getOrElse(pf(v), () => v);
  return [result, result];
}))));
// circular
/** @internal */
const RequestResolverSymbolKey = "@effect/io/RequestResolver";
/** @internal */
const RequestResolverTypeId = /*#__PURE__*/Symbol.for(RequestResolverSymbolKey);
const dataSourceVariance = {
  _R: _ => _,
  _A: _ => _
};
/** @internal */
class RequestResolverImpl {
  constructor(runAll, target) {
    this.runAll = runAll;
    this.target = target;
    this[_d] = dataSourceVariance;
    this.runAll = runAll;
  }
  [(_d = RequestResolverTypeId, symbol)]() {
    return this.target ? Hash.hash(this.target) : Hash.random(this);
  }
  [Equal_symbol](that) {
    return this.target ? isRequestResolver(that) && Equal.equals(this.target, that.target) : this === that;
  }
  identified(...ids) {
    return new RequestResolverImpl(this.runAll, Chunk.fromIterable(ids));
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
}
/** @internal */
const isRequestResolver = u => typeof u === "object" && u != null && RequestResolverTypeId in u;
// end
/** @internal */
const resolverLocally = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (use, self, value) => new RequestResolverImpl(requests => fiberRefLocally(use.runAll(requests), self, value), Chunk.make("Locally", use, self, value)))));
/** @internal */
const requestBlockLocally = (self, ref, value) => _blockedRequests.reduce(self, LocallyReducer(ref, value));
const LocallyReducer = (ref, value) => ({
  emptyCase: () => _blockedRequests.empty,
  parCase: (left, right) => _blockedRequests.par(left, right),
  seqCase: (left, right) => _blockedRequests.seq(left, right),
  singleCase: (dataSource, blockedRequest) => _blockedRequests.single(resolverLocally(dataSource, ref, value), blockedRequest)
});
/* @internal */
const fiberRefLocally = /*#__PURE__*/Function_dual(3, (use, self, value) => core_flatMap(acquireUseRelease(core_zipLeft(fiberRefGet(self), fiberRefSet(self, value)), () => step(use), oldValue => fiberRefSet(self, oldValue)), res => {
  if (res._tag === "Blocked") {
    return core_blocked(res.i0, fiberRefLocally(res.i1, self, value));
  }
  return res;
}));
/* @internal */
const fiberRefLocallyWith = /*#__PURE__*/Function_dual(3, (use, self, f) => fiberRefGetWith(self, a => fiberRefLocally(use, self, f(a))));
/** @internal */
const fiberRefUnsafeMake = (initial, options) => fiberRefUnsafeMakePatch(initial, {
  differ: Differ_update(),
  fork: options?.fork ?? Function_identity,
  join: options?.join
});
/** @internal */
const fiberRefUnsafeMakeHashSet = initial => fiberRefUnsafeMakePatch(initial, {
  differ: Differ_hashSet(),
  fork: Differ_HashSetPatch_empty()
});
/** @internal */
const fiberRefUnsafeMakeContext = initial => fiberRefUnsafeMakePatch(initial, {
  differ: Differ_environment(),
  fork: Differ_ContextPatch_empty()
});
/** @internal */
const fiberRefUnsafeMakePatch = (initial, options) => ({
  [FiberRefTypeId]: fiberRefVariance,
  initial,
  diff: (oldValue, newValue) => Differ_diff(oldValue, newValue)(options.differ),
  combine: (first, second) => Differ_combine(first, second)(options.differ),
  patch: patch => oldValue => Differ_patch(patch, oldValue)(options.differ),
  fork: options.fork,
  join: options.join ?? ((_, n) => n),
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
});
/** @internal */
const fiberRefUnsafeMakeRuntimeFlags = initial => fiberRefUnsafeMakePatch(initial, {
  differ: differ,
  fork: Patch_empty
});
/** @internal */
const currentContext = /*#__PURE__*/fiberRefUnsafeMakeContext( /*#__PURE__*/mjs_Context_empty());
/** @internal */
const currentSchedulingPriority = /*#__PURE__*/fiberRefUnsafeMake(0);
/** @internal */
const currentMaxFiberOps = /*#__PURE__*/fiberRefUnsafeMake(2048);
/** @internal */
const currentLogAnnotations = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentLogAnnotation"), () => fiberRefUnsafeMake(mjs_HashMap_empty()));
/** @internal */
const currentLogLevel = /*#__PURE__*/fiberRefUnsafeMake(logLevelInfo);
/** @internal */
const currentLogSpan = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentLogSpan"), () => fiberRefUnsafeMake(List_empty()));
/** @internal */
const currentScheduler = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentScheduler"), () => fiberRefUnsafeMake(defaultScheduler));
/** @internal */
const withScheduler = /*#__PURE__*/Function_dual(2, (self, scheduler) => fiberRefLocally(self, currentScheduler, scheduler));
/** @internal */
const withSchedulingPriority = /*#__PURE__*/Function_dual(2, (self, scheduler) => fiberRefLocally(self, currentSchedulingPriority, scheduler));
/** @internal */
const withMaxFiberOps = /*#__PURE__*/Function_dual(2, (self, ops) => fiberRefLocally(self, currentMaxFiberOps, ops));
/** @internal */
const currentConcurrency = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentConcurrency"), () => fiberRefUnsafeMake("unbounded"));
/**
 * @internal
 */
const currentRequestBatching = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentRequestBatching"), () => fiberRefUnsafeMake(true));
/** @internal */
const currentUnhandledErrorLogLevel = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentUnhandledErrorLogLevel"), () => fiberRefUnsafeMake(mjs_Option_some(logLevelDebug)));
/** @internal */
const withUnhandledErrorLogLevel = /*#__PURE__*/Function_dual(2, (self, level) => fiberRefLocally(self, currentUnhandledErrorLogLevel, level));
/** @internal */
const currentMetricLabels = /*#__PURE__*/fiberRefUnsafeMakeHashSet( /*#__PURE__*/mjs_HashSet_empty());
/* @internal */
const metricLabels = /*#__PURE__*/fiberRefGet(currentMetricLabels);
/** @internal */
const currentForkScopeOverride = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentForkScopeOverride"), () => fiberRefUnsafeMake(Option_none(), {
  fork: () => Option_none(),
  join: (parent, _) => parent
}));
/** @internal */
const currentInterruptedCause = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentInterruptedCause"), () => fiberRefUnsafeMake(cause_empty, {
  fork: () => cause_empty,
  join: (parent, _) => parent
}));
/** @internal */
const currentTracerSpan = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentTracerSpan"), () => fiberRefUnsafeMake(List_empty()));
/** @internal */
const currentTracerTimingEnabled = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentTracerTiming"), () => fiberRefUnsafeMake(true));
/** @internal */
const currentTracerSpanAnnotations = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentTracerSpanAnnotations"), () => fiberRefUnsafeMake(mjs_HashMap_empty()));
/** @internal */
const currentTracerSpanLinks = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentTracerSpanLinks"), () => fiberRefUnsafeMake(Chunk_empty()));
// -----------------------------------------------------------------------------
// Scope
// -----------------------------------------------------------------------------
/** @internal */
const ScopeTypeId = /*#__PURE__*/Symbol.for("@effect/io/Scope");
/** @internal */
const CloseableScopeTypeId = /*#__PURE__*/Symbol.for("@effect/io/CloseableScope");
/* @internal */
const scopeAddFinalizer = (self, finalizer) => self.addFinalizer(() => core_asUnit(finalizer));
/* @internal */
const scopeAddFinalizerExit = (self, finalizer) => self.addFinalizer(finalizer);
/* @internal */
const scopeClose = (self, exit) => self.close(exit);
/* @internal */
const scopeFork = (self, strategy) => self.fork(strategy);
/* @internal */
const releaseMapAdd = /*#__PURE__*/Function_dual(2, (self, finalizer) => core_map(releaseMapAddIfOpen(self, finalizer), match({
  onNone: () => () => core_unit,
  onSome: key => exit => releaseMapRelease(key, exit)(self)
})));
/* @internal */
const releaseMapRelease = /*#__PURE__*/Function_dual(3, (self, key, exit) => suspend(() => {
  switch (self.state._tag) {
    case "Exited":
      {
        return core_unit;
      }
    case "Running":
      {
        const finalizer = self.state.finalizers.get(key);
        self.state.finalizers.delete(key);
        if (finalizer != null) {
          return self.state.update(finalizer)(exit);
        }
        return core_unit;
      }
  }
}));
/* @internal */
const releaseMapAddIfOpen = /*#__PURE__*/Function_dual(2, (self, finalizer) => suspend(() => {
  switch (self.state._tag) {
    case "Exited":
      {
        self.state.nextKey += 1;
        return core_as(finalizer(self.state.exit), Option_none());
      }
    case "Running":
      {
        const key = self.state.nextKey;
        self.state.finalizers.set(key, finalizer);
        self.state.nextKey += 1;
        return succeed(mjs_Option_some(key));
      }
  }
}));
/* @internal */
const releaseMapGet = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, key) => sync(() => self.state._tag === "Running" ? Option.fromNullable(self.state.finalizers.get(key)) : Option.none()))));
/* @internal */
const releaseMapReplace = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, key, finalizer) => suspend(() => {
  switch (self.state._tag) {
    case "Exited":
      {
        return core_as(finalizer(self.state.exit), Option.none());
      }
    case "Running":
      {
        const fin = Option.fromNullable(self.state.finalizers.get(key));
        self.state.finalizers.set(key, finalizer);
        return succeed(fin);
      }
  }
}))));
/* @internal */
const releaseMapRemove = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, key) => sync(() => {
  if (self.state._tag === "Exited") {
    return Option.none();
  }
  const fin = Option.fromNullable(self.state.finalizers.get(key));
  self.state.finalizers.delete(key);
  return fin;
}))));
/* @internal */
const releaseMapMake = /*#__PURE__*/sync(() => ({
  state: {
    _tag: "Running",
    nextKey: 0,
    finalizers: new Map(),
    update: Function_identity
  }
}));
// -----------------------------------------------------------------------------
// Exit
// -----------------------------------------------------------------------------
/** @internal */
const exitIsExit = u => isEffect(u) && "_tag" in u && (u._tag === "Success" || u._tag === "Failure");
/** @internal */
const exitIsFailure = self => self._tag === "Failure";
/** @internal */
const exitIsSuccess = self => self._tag === "Success";
/** @internal */
const exitIsInterrupted = self => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return isInterrupted(self.i0);
      }
    case OP_SUCCESS:
      {
        return false;
      }
  }
};
/** @internal */
const exitAs = /*#__PURE__*/Function_dual(2, (self, value) => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return exitFailCause(self.i0);
      }
    case OP_SUCCESS:
      {
        return exitSucceed(value);
      }
  }
});
/** @internal */
const exitAsUnit = self => exitAs(self, void 0);
/** @internal */
const exitCauseOption = self => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return mjs_Option_some(self.i0);
      }
    case OP_SUCCESS:
      {
        return Option_none();
      }
  }
};
/** @internal */
const exitCollectAll = (exits, options) => exitCollectAllInternal(exits, options?.parallel ? parallel : sequential);
/** @internal */
const exitDie = defect => exitFailCause(die(defect));
/** @internal */
const exitExists = /*#__PURE__*/Function_dual(2, (self, predicate) => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return false;
      }
    case OP_SUCCESS:
      {
        return predicate(self.i0);
      }
  }
});
/** @internal */
const exitFail = error => exitFailCause(fail(error));
/** @internal */
const exitFailCause = cause => {
  const effect = new EffectPrimitiveFailure(OP_FAILURE);
  effect.i0 = cause;
  return effect;
};
/** @internal */
const exitFlatMap = /*#__PURE__*/Function_dual(2, (self, f) => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return exitFailCause(self.i0);
      }
    case OP_SUCCESS:
      {
        return f(self.i0);
      }
  }
});
/** @internal */
const exitFlatMapEffect = /*#__PURE__*/Function_dual(2, (self, f) => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return succeed(exitFailCause(self.i0));
      }
    case OP_SUCCESS:
      {
        return f(self.i0);
      }
  }
});
/** @internal */
const exitFlatten = self => exitFlatMap(Function_identity)(self);
/** @internal */
const exitForEachEffect = /*#__PURE__*/Function_dual(2, (self, f) => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return succeed(exitFailCause(self.i0));
      }
    case OP_SUCCESS:
      {
        return core_exit(f(self.i0));
      }
  }
});
/** @internal */
const exitFromEither = either => {
  switch (either._tag) {
    case "Left":
      {
        return exitFail(either.left);
      }
    case "Right":
      {
        return exitSucceed(either.right);
      }
  }
};
/** @internal */
const exitFromOption = option => {
  switch (option._tag) {
    case "None":
      {
        return exitFail(void 0);
      }
    case "Some":
      {
        return exitSucceed(option.value);
      }
  }
};
/** @internal */
const exitGetOrElse = /*#__PURE__*/Function_dual(2, (self, orElse) => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return orElse(self.i0);
      }
    case OP_SUCCESS:
      {
        return self.i0;
      }
  }
});
/** @internal */
const exitInterrupt = fiberId => exitFailCause(interrupt(fiberId));
/** @internal */
const exitMap = /*#__PURE__*/Function_dual(2, (self, f) => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return exitFailCause(self.i0);
      }
    case OP_SUCCESS:
      {
        return exitSucceed(f(self.i0));
      }
  }
});
/** @internal */
const exitMapBoth = /*#__PURE__*/Function_dual(2, (self, {
  onFailure,
  onSuccess
}) => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return exitFailCause(cause_map(onFailure)(self.i0));
      }
    case OP_SUCCESS:
      {
        return exitSucceed(onSuccess(self.i0));
      }
  }
});
/** @internal */
const exitMapError = /*#__PURE__*/Function_dual(2, (self, f) => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return exitFailCause(cause_map(f)(self.i0));
      }
    case OP_SUCCESS:
      {
        return exitSucceed(self.i0);
      }
  }
});
/** @internal */
const exitMapErrorCause = /*#__PURE__*/Function_dual(2, (self, f) => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return exitFailCause(f(self.i0));
      }
    case OP_SUCCESS:
      {
        return exitSucceed(self.i0);
      }
  }
});
/** @internal */
const exitMatch = /*#__PURE__*/Function_dual(2, (self, {
  onFailure,
  onSuccess
}) => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return onFailure(self.i0);
      }
    case OP_SUCCESS:
      {
        return onSuccess(self.i0);
      }
  }
});
/** @internal */
const exitMatchEffect = /*#__PURE__*/Function_dual(2, (self, {
  onFailure,
  onSuccess
}) => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        return onFailure(self.i0);
      }
    case OP_SUCCESS:
      {
        return onSuccess(self.i0);
      }
  }
});
/** @internal */
const exitSucceed = value => {
  const effect = new EffectPrimitiveSuccess(OP_SUCCESS);
  effect.i0 = value;
  return effect;
};
/** @internal */
const exitUnannotate = exit => exitIsSuccess(exit) ? exit : exitFailCause(unannotate(exit.i0));
/** @internal */
const exitUnit = /*#__PURE__*/exitSucceed(void 0);
/** @internal */
const exitZip = /*#__PURE__*/Function_dual(2, (self, that) => exitZipWith(self, that, {
  onSuccess: (a, a2) => [a, a2],
  onFailure: sequential
}));
/** @internal */
const exitZipLeft = /*#__PURE__*/Function_dual(2, (self, that) => exitZipWith(self, that, {
  onSuccess: (a, _) => a,
  onFailure: sequential
}));
/** @internal */
const exitZipRight = /*#__PURE__*/Function_dual(2, (self, that) => exitZipWith(self, that, {
  onSuccess: (_, a2) => a2,
  onFailure: sequential
}));
/** @internal */
const exitZipPar = /*#__PURE__*/Function_dual(2, (self, that) => exitZipWith(self, that, {
  onSuccess: (a, a2) => [a, a2],
  onFailure: parallel
}));
/** @internal */
const exitZipParLeft = /*#__PURE__*/Function_dual(2, (self, that) => exitZipWith(self, that, {
  onSuccess: (a, _) => a,
  onFailure: parallel
}));
/** @internal */
const exitZipParRight = /*#__PURE__*/Function_dual(2, (self, that) => exitZipWith(self, that, {
  onSuccess: (_, a2) => a2,
  onFailure: parallel
}));
/** @internal */
const exitZipWith = /*#__PURE__*/Function_dual(3, (self, that, {
  onFailure,
  onSuccess
}) => {
  switch (self._tag) {
    case OP_FAILURE:
      {
        switch (that._tag) {
          case OP_SUCCESS:
            {
              return exitFailCause(self.i0);
            }
          case OP_FAILURE:
            {
              return exitFailCause(onFailure(self.i0, that.i0));
            }
        }
      }
    case OP_SUCCESS:
      {
        switch (that._tag) {
          case OP_SUCCESS:
            {
              return exitSucceed(onSuccess(self.i0, that.i0));
            }
          case OP_FAILURE:
            {
              return exitFailCause(that.i0);
            }
        }
      }
  }
});
const exitCollectAllInternal = (exits, combineCauses) => {
  const list = Chunk_fromIterable(exits);
  if (!isNonEmpty(list)) {
    return Option_none();
  }
  return mjs_Option_some(exitMap(chunk => Array.from(chunk))(exitMap(Chunk_reverse)(reduce(exitMap(Chunk_of)(Chunk_headNonEmpty(list)), (accumulator, current) => exitZipWith(current, {
    onSuccess: (list, value) => Chunk_prepend(value)(list),
    onFailure: combineCauses
  })(accumulator))(Chunk_tailNonEmpty(list)))));
};
// -----------------------------------------------------------------------------
// Deferred
// -----------------------------------------------------------------------------
/** @internal */
const deferredUnsafeMake = fiberId => ({
  [DeferredTypeId]: deferredVariance,
  state: MutableRef_make(pending([])),
  blockingOn: fiberId,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
});
/* @internal */
const deferredMake = () => core_flatMap(fiberId, id => deferredMakeAs(id));
/* @internal */
const deferredMakeAs = fiberId => sync(() => deferredUnsafeMake(fiberId));
/* @internal */
const deferredAwait = self => asyncEither(k => {
  const state = MutableRef_get(self.state);
  switch (state._tag) {
    case OP_STATE_DONE:
      {
        return Either_right(state.effect);
      }
    case OP_STATE_PENDING:
      {
        MutableRef_set(pending([k, ...state.joiners]))(self.state);
        return Either_left(deferredInterruptJoiner(self, k));
      }
  }
}, self.blockingOn);
/* @internal */
const deferredComplete = /*#__PURE__*/Function_dual(2, (self, effect) => intoDeferred(effect, self));
/* @internal */
const deferredCompleteWith = /*#__PURE__*/Function_dual(2, (self, effect) => sync(() => {
  const state = MutableRef_get(self.state);
  switch (state._tag) {
    case OP_STATE_DONE:
      {
        return false;
      }
    case OP_STATE_PENDING:
      {
        MutableRef_set(done(effect))(self.state);
        for (let i = 0; i < state.joiners.length; i++) {
          state.joiners[i](effect);
        }
        return true;
      }
  }
}));
/* @internal */
const deferredDone = /*#__PURE__*/Function_dual(2, (self, exit) => deferredCompleteWith(self, exit));
/* @internal */
const deferredFail = /*#__PURE__*/Function_dual(2, (self, error) => deferredCompleteWith(self, core_fail(error)));
/* @internal */
const deferredFailSync = /*#__PURE__*/Function_dual(2, (self, evaluate) => deferredCompleteWith(self, failSync(evaluate)));
/* @internal */
const deferredFailCause = /*#__PURE__*/Function_dual(2, (self, cause) => deferredCompleteWith(self, failCause(cause)));
/* @internal */
const deferredFailCauseSync = /*#__PURE__*/Function_dual(2, (self, evaluate) => deferredCompleteWith(self, failCauseSync(evaluate)));
/* @internal */
const deferredDie = /*#__PURE__*/Function_dual(2, (self, defect) => deferredCompleteWith(self, core_die(defect)));
/* @internal */
const deferredDieSync = /*#__PURE__*/Function_dual(2, (self, evaluate) => deferredCompleteWith(self, dieSync(evaluate)));
/* @internal */
const deferredInterrupt = self => core_flatMap(fiberId, fiberId => deferredCompleteWith(self, interruptWith(fiberId)));
/* @internal */
const deferredInterruptWith = /*#__PURE__*/Function_dual(2, (self, fiberId) => deferredCompleteWith(self, interruptWith(fiberId)));
/* @internal */
const deferredIsDone = self => sync(() => MutableRef_get(self.state)._tag === OP_STATE_DONE);
/* @internal */
const deferredPoll = self => sync(() => {
  const state = MutableRef_get(self.state);
  switch (state._tag) {
    case OP_STATE_DONE:
      {
        return mjs_Option_some(state.effect);
      }
    case OP_STATE_PENDING:
      {
        return Option_none();
      }
  }
});
/* @internal */
const deferredSucceed = /*#__PURE__*/Function_dual(2, (self, value) => deferredCompleteWith(self, succeed(value)));
/* @internal */
const deferredSync = /*#__PURE__*/Function_dual(2, (self, evaluate) => deferredCompleteWith(self, sync(evaluate)));
/** @internal */
const deferredUnsafeDone = (self, effect) => {
  const state = MutableRef_get(self.state);
  if (state._tag === OP_STATE_PENDING) {
    MutableRef_set(done(effect))(self.state);
    for (let i = state.joiners.length - 1; i >= 0; i--) {
      state.joiners[i](effect);
    }
  }
};
const deferredInterruptJoiner = (self, joiner) => sync(() => {
  const state = MutableRef_get(self.state);
  if (state._tag === OP_STATE_PENDING) {
    MutableRef_set(pending(state.joiners.filter(j => j !== joiner)))(self.state);
  }
});
//# sourceMappingURL=core.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Duration.mjs
/**
 * @since 1.0.0
 */







const Duration_TypeId = /*#__PURE__*/Symbol.for("@effect/data/Duration");
const bigint1e3 = /*#__PURE__*/BigInt(1000);
const bigint1e9 = /*#__PURE__*/BigInt(1000000000);
const DURATION_REGEX = /^(-?\d+(?:\.\d+)?)\s+(nanos|micros|millis|seconds|minutes|hours|days|weeks)$/;
/**
 * @since 1.0.0
 */
const decode = input => {
  if (isDuration(input)) {
    return input;
  } else if (Predicate_isNumber(input)) {
    return millis(input);
  } else if (isBigint(input)) {
    return Duration_nanos(input);
  } else {
    DURATION_REGEX.lastIndex = 0; // Reset the lastIndex before each use
    const match = DURATION_REGEX.exec(input);
    if (match) {
      const [_, valueStr, unit] = match;
      const value = Number(valueStr);
      switch (unit) {
        case "nanos":
          return Duration_nanos(BigInt(valueStr));
        case "micros":
          return micros(BigInt(valueStr));
        case "millis":
          return millis(value);
        case "seconds":
          return seconds(value);
        case "minutes":
          return minutes(value);
        case "hours":
          return hours(value);
        case "days":
          return days(value);
        case "weeks":
          return weeks(value);
      }
    }
  }
  throw new Error("Invalid duration input");
};
const zeroValue = {
  _tag: "Millis",
  millis: 0
};
const infinityValue = {
  _tag: "Infinity"
};
class DurationImpl {
  constructor(input) {
    this._id = Duration_TypeId;
    if (Predicate_isNumber(input)) {
      if (isNaN(input) || input < 0) {
        this.value = zeroValue;
      } else if (!Number.isFinite(input)) {
        this.value = infinityValue;
      } else if (!Number.isInteger(input)) {
        this.value = {
          _tag: "Nanos",
          nanos: BigInt(Math.round(input * 1000000))
        };
      } else {
        this.value = {
          _tag: "Millis",
          millis: input
        };
      }
    } else if (input < BigInt(0)) {
      this.value = zeroValue;
    } else {
      this.value = {
        _tag: "Nanos",
        nanos: input
      };
    }
  }
  [symbol]() {
    return structure(this.value);
  }
  [Equal_symbol](that) {
    return isDuration(that) && Duration_equals(this, that);
  }
  toString() {
    switch (this.value._tag) {
      case "Millis":
        return `Duration("${this.value.millis} millis")`;
      case "Nanos":
        return `Duration("${this.value.nanos} nanos")`;
      case "Infinity":
        return "Duration(Infinity)";
    }
  }
  toJSON() {
    if (this.value._tag === "Nanos") {
      return {
        _tag: "Duration",
        value: {
          _tag: "Nanos",
          hrtime: toHrTime(this)
        }
      };
    }
    return {
      _tag: "Duration",
      value: this.value
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/**
 * @since 1.0.0
 * @category guards
 */
const isDuration = u => Predicate_isObject(u) && "_id" in u && u["_id"] === Duration_TypeId;
/**
 * @since 1.0.0
 * @category constructors
 */
const zero = /*#__PURE__*/new DurationImpl(0);
/**
 * @since 1.0.0
 * @category constructors
 */
const infinity = /*#__PURE__*/new DurationImpl(Infinity);
/**
 * @since 1.0.0
 * @category constructors
 */
const Duration_nanos = nanos => new DurationImpl(nanos);
/**
 * @since 1.0.0
 * @category constructors
 */
const micros = micros => new DurationImpl(micros * bigint1e3);
/**
 * @since 1.0.0
 * @category constructors
 */
const millis = millis => new DurationImpl(millis);
/**
 * @since 1.0.0
 * @category constructors
 */
const seconds = seconds => new DurationImpl(seconds * 1000);
/**
 * @since 1.0.0
 * @category constructors
 */
const minutes = minutes => new DurationImpl(minutes * 60000);
/**
 * @since 1.0.0
 * @category constructors
 */
const hours = hours => new DurationImpl(hours * 3600000);
/**
 * @since 1.0.0
 * @category constructors
 */
const days = days => new DurationImpl(days * 86400000);
/**
 * @since 1.0.0
 * @category constructors
 */
const weeks = weeks => new DurationImpl(weeks * 604800000);
/**
 * @since 1.0.0
 * @category getters
 */
const toMillis = self => {
  const _self = decode(self);
  switch (_self.value._tag) {
    case "Infinity":
      return Infinity;
    case "Nanos":
      return Number(_self.value.nanos) / 1000000;
    case "Millis":
      return _self.value.millis;
  }
};
/**
 * Get the duration in nanoseconds as a bigint.
 *
 * If the duration is infinite, returns `Option.none()`
 *
 * @since 1.0.0
 * @category getters
 */
const toNanos = self => {
  const _self = decode(self);
  switch (_self.value._tag) {
    case "Infinity":
      return Option.none();
    case "Nanos":
      return Option.some(_self.value.nanos);
    case "Millis":
      return Option.some(BigInt(Math.round(_self.value.millis * 1000000)));
  }
};
/**
 * Get the duration in nanoseconds as a bigint.
 *
 * If the duration is infinite, it throws an error.
 *
 * @since 1.0.0
 * @category getters
 */
const unsafeToNanos = self => {
  const _self = decode(self);
  switch (_self.value._tag) {
    case "Infinity":
      throw new Error("Cannot convert infinite duration to nanos");
    case "Nanos":
      return _self.value.nanos;
    case "Millis":
      return BigInt(Math.round(_self.value.millis * 1000000));
  }
};
/**
 * @since 1.0.0
 * @category getters
 */
const toHrTime = self => {
  const _self = decode(self);
  switch (_self.value._tag) {
    case "Infinity":
      return [Infinity, 0];
    case "Nanos":
      return [Number(_self.value.nanos / bigint1e9), Number(_self.value.nanos % bigint1e9)];
    case "Millis":
      return [Math.floor(_self.value.millis / 1000), Math.round(_self.value.millis % 1000 * 1000000)];
  }
};
/**
 * @since 1.0.0
 * @category pattern matching
 */
const Duration_match = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, options) => {
  const _self = decode(self);
  switch (_self.value._tag) {
    case "Nanos":
      return options.onNanos(_self.value.nanos);
    case "Infinity":
      return options.onMillis(Infinity);
    case "Millis":
      return options.onMillis(_self.value.millis);
  }
})));
/**
 * @since 1.0.0
 * @category pattern matching
 */
const matchWith = /*#__PURE__*/Function_dual(3, (self, that, options) => {
  const _self = decode(self);
  const _that = decode(that);
  if (_self.value._tag === "Infinity" || _that.value._tag === "Infinity") {
    return options.onMillis(toMillis(_self), toMillis(_that));
  } else if (_self.value._tag === "Nanos" || _that.value._tag === "Nanos") {
    const selfNanos = _self.value._tag === "Nanos" ? _self.value.nanos : BigInt(Math.round(_self.value.millis * 1000000));
    const thatNanos = _that.value._tag === "Nanos" ? _that.value.nanos : BigInt(Math.round(_that.value.millis * 1000000));
    return options.onNanos(selfNanos, thatNanos);
  }
  return options.onMillis(_self.value.millis, _that.value.millis);
});
/**
 * @category instances
 * @since 1.0.0
 */
const Duration_Order = /*#__PURE__*/(/* unused pure expression or super */ null && (order.make((self, that) => matchWith(self, that, {
  onMillis: (self, that) => self < that ? -1 : self > that ? 1 : 0,
  onNanos: (self, that) => self < that ? -1 : self > that ? 1 : 0
}))));
/**
 * Checks if a `Duration` is between a `minimum` and `maximum` value.
 *
 * @category predicates
 * @since 1.0.0
 */
const Duration_between = /*#__PURE__*/(/* unused pure expression or super */ null && (order.between( /*#__PURE__*/order.mapInput(Duration_Order, decode))));
/**
 * @category instances
 * @since 1.0.0
 */
const Duration_Equivalence = (self, that) => matchWith(self, that, {
  onMillis: (self, that) => self === that,
  onNanos: (self, that) => self === that
});
const _min = /*#__PURE__*/(/* unused pure expression or super */ null && (order.min(Duration_Order)));
/**
 * @since 1.0.0
 */
const Duration_min = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => _min(decode(self), decode(that)))));
const _max = /*#__PURE__*/(/* unused pure expression or super */ null && (order.max(Duration_Order)));
/**
 * @since 1.0.0
 */
const Duration_max = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => _max(decode(self), decode(that)))));
const _clamp = /*#__PURE__*/(/* unused pure expression or super */ null && (order.clamp(Duration_Order)));
/**
 * @since 1.0.0
 */
const Duration_clamp = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, minimum, maximum) => _clamp(decode(self), decode(minimum), decode(maximum)))));
/**
 * @since 1.0.0
 * @category math
 */
const times = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, times) => Duration_match(self, {
  onMillis: millis => new DurationImpl(millis * times),
  onNanos: nanos => new DurationImpl(nanos * BigInt(times))
}))));
/**
 * @since 1.0.0
 * @category math
 */
const Duration_sum = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => matchWith(self, that, {
  onMillis: (self, that) => new DurationImpl(self + that),
  onNanos: (self, that) => new DurationImpl(self + that)
}))));
/**
 * @since 1.0.0
 * @category predicates
 */
const Duration_lessThan = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => matchWith(self, that, {
  onMillis: (self, that) => self < that,
  onNanos: (self, that) => self < that
}))));
/**
 * @since 1.0.0
 * @category predicates
 */
const Duration_lessThanOrEqualTo = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => matchWith(self, that, {
  onMillis: (self, that) => self <= that,
  onNanos: (self, that) => self <= that
}))));
/**
 * @since 1.0.0
 * @category predicates
 */
const Duration_greaterThan = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => matchWith(self, that, {
  onMillis: (self, that) => self > that,
  onNanos: (self, that) => self > that
}))));
/**
 * @since 1.0.0
 * @category predicates
 */
const Duration_greaterThanOrEqualTo = /*#__PURE__*/Function_dual(2, (self, that) => matchWith(self, that, {
  onMillis: (self, that) => self >= that,
  onNanos: (self, that) => self >= that
}));
/**
 * @since 1.0.0
 * @category predicates
 */
const Duration_equals = /*#__PURE__*/Function_dual(2, (self, that) => Duration_Equivalence(decode(self), decode(that)));
//# sourceMappingURL=Duration.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/clock.mjs
var clock_a;





/** @internal */
const ClockSymbolKey = "@effect/io/Clock";
/** @internal */
const ClockTypeId = /*#__PURE__*/Symbol.for(ClockSymbolKey);
/** @internal */
const clock_clockTag = /*#__PURE__*/Tag(ClockTypeId);
/** @internal */
const MAX_TIMER_MILLIS = 2 ** 31 - 1;
/** @internal */
const globalClockScheduler = {
  unsafeSchedule(task, duration) {
    const millis = toMillis(duration);
    // If the duration is greater than the value allowable by the JS timer
    // functions, treat the value as an infinite duration
    if (millis > MAX_TIMER_MILLIS) {
      return constFalse;
    }
    let completed = false;
    const handle = setTimeout(() => {
      completed = true;
      task();
    }, millis);
    return () => {
      clearTimeout(handle);
      return !completed;
    };
  }
};
const performanceNowNanos = /*#__PURE__*/function () {
  const bigint1e6 = /*#__PURE__*/BigInt(1000000);
  if (typeof performance === "undefined") {
    return () => BigInt(Date.now()) * bigint1e6;
  }
  const origin = "timeOrigin" in performance && typeof performance.timeOrigin === "number" ? /*#__PURE__*/BigInt( /*#__PURE__*/Math.round(performance.timeOrigin * 1000000)) : /*#__PURE__*/BigInt( /*#__PURE__*/Date.now()) * bigint1e6;
  return () => origin + BigInt(Math.round(performance.now() * 1000000));
}();
const processOrPerformanceNow = /*#__PURE__*/function () {
  const processHrtime = typeof process === "object" && "hrtime" in process && typeof process.hrtime.bigint === "function" ? process.hrtime : undefined;
  if (!processHrtime) {
    return performanceNowNanos;
  }
  const origin = /*#__PURE__*/performanceNowNanos() - /*#__PURE__*/processHrtime.bigint();
  return () => origin + processHrtime.bigint();
}();
/** @internal */
class ClockImpl {
  constructor() {
    this[clock_a] = ClockTypeId;
    this.currentTimeMillis = sync(() => this.unsafeCurrentTimeMillis());
    this.currentTimeNanos = sync(() => this.unsafeCurrentTimeNanos());
  }
  unsafeCurrentTimeMillis() {
    return Date.now();
  }
  unsafeCurrentTimeNanos() {
    return processOrPerformanceNow();
  }
  scheduler() {
    return succeed(globalClockScheduler);
  }
  sleep(duration) {
    return asyncEither(cb => {
      const canceler = globalClockScheduler.unsafeSchedule(() => cb(core_unit), duration);
      return Either_left(core_asUnit(sync(canceler)));
    });
  }
}
clock_a = ClockTypeId;
/** @internal */
const clock_make = () => new ClockImpl();
//# sourceMappingURL=clock.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/opCodes/configError.mjs
/** @internal */
const OP_AND = "And";
/** @internal */
const OP_OR = "Or";
/** @internal */
const OP_INVALID_DATA = "InvalidData";
/** @internal */
const OP_MISSING_DATA = "MissingData";
/** @internal */
const OP_SOURCE_UNAVAILABLE = "SourceUnavailable";
/** @internal */
const OP_UNSUPPORTED = "Unsupported";
//# sourceMappingURL=configError.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/configError.mjs




/** @internal */
const ConfigErrorSymbolKey = "@effect/io/Config/Error";
/** @internal */
const ConfigErrorTypeId = /*#__PURE__*/Symbol.for(ConfigErrorSymbolKey);
/** @internal */
const configError_proto = {
  [ConfigErrorTypeId]: ConfigErrorTypeId
};
/** @internal */
const And = (self, that) => {
  const error = Object.create(configError_proto);
  error._tag = OP_AND;
  error.left = self;
  error.right = that;
  Object.defineProperty(error, "toString", {
    enumerable: false,
    value() {
      return `${this.left} and ${this.right}`;
    }
  });
  return error;
};
/** @internal */
const Or = (self, that) => {
  const error = Object.create(configError_proto);
  error._tag = OP_OR;
  error.left = self;
  error.right = that;
  Object.defineProperty(error, "toString", {
    enumerable: false,
    value() {
      return `${this.left} or ${this.right}`;
    }
  });
  return error;
};
/** @internal */
const InvalidData = (path, message, options = {
  pathDelim: "."
}) => {
  const error = Object.create(configError_proto);
  error._tag = OP_INVALID_DATA;
  error.path = path;
  error.message = message;
  Object.defineProperty(error, "toString", {
    enumerable: false,
    value() {
      const path = join(options.pathDelim)(this.path);
      return `(Invalid data at ${path}: "${this.message}")`;
    }
  });
  return error;
};
/** @internal */
const MissingData = (path, message, options = {
  pathDelim: "."
}) => {
  const error = Object.create(configError_proto);
  error._tag = OP_MISSING_DATA;
  error.path = path;
  error.message = message;
  Object.defineProperty(error, "toString", {
    enumerable: false,
    value() {
      const path = join(options.pathDelim)(this.path);
      return `(Missing data at ${path}: "${this.message}")`;
    }
  });
  return error;
};
/** @internal */
const SourceUnavailable = (path, message, cause, options = {
  pathDelim: "."
}) => {
  const error = Object.create(configError_proto);
  error._tag = OP_SOURCE_UNAVAILABLE;
  error.path = path;
  error.message = message;
  error.cause = cause;
  Object.defineProperty(error, "toString", {
    enumerable: false,
    value() {
      const path = join(options.pathDelim)(this.path);
      return `(Source unavailable at ${path}: "${this.message}")`;
    }
  });
  return error;
};
/** @internal */
const Unsupported = (path, message, options = {
  pathDelim: "."
}) => {
  const error = Object.create(configError_proto);
  error._tag = OP_UNSUPPORTED;
  error.path = path;
  error.message = message;
  Object.defineProperty(error, "toString", {
    enumerable: false,
    value() {
      const path = join(options.pathDelim)(this.path);
      return `(Unsupported operation at ${path}: "${this.message}")`;
    }
  });
  return error;
};
/** @internal */
const isConfigError = u => typeof u === "object" && u != null && ConfigErrorTypeId in u;
/** @internal */
const isAnd = self => self._tag === OpCodes.OP_AND;
/** @internal */
const isOr = self => self._tag === OpCodes.OP_OR;
/** @internal */
const isInvalidData = self => self._tag === OpCodes.OP_INVALID_DATA;
/** @internal */
const isMissingData = self => self._tag === OpCodes.OP_MISSING_DATA;
/** @internal */
const isSourceUnavailable = self => self._tag === OpCodes.OP_SOURCE_UNAVAILABLE;
/** @internal */
const isUnsupported = self => self._tag === OpCodes.OP_UNSUPPORTED;
/** @internal */
const prefixed = /*#__PURE__*/Function_dual(2, (self, prefix) => {
  switch (self._tag) {
    case OP_AND:
      {
        return And(prefixed(prefix)(self.left), prefixed(prefix)(self.right));
      }
    case OP_OR:
      {
        return Or(prefixed(prefix)(self.left), prefixed(prefix)(self.right));
      }
    case OP_INVALID_DATA:
      {
        return InvalidData([...prefix, ...self.path], self.message);
      }
    case OP_MISSING_DATA:
      {
        return MissingData([...prefix, ...self.path], self.message);
      }
    case OP_SOURCE_UNAVAILABLE:
      {
        return SourceUnavailable([...prefix, ...self.path], self.message, self.cause);
      }
    case OP_UNSUPPORTED:
      {
        return Unsupported([...prefix, ...self.path], self.message);
      }
  }
});
/** @internal */
const IsMissingDataOnlyReducer = {
  andCase: (_, left, right) => left && right,
  orCase: (_, left, right) => left && right,
  invalidDataCase: constFalse,
  missingDataCase: Function_constTrue,
  sourceUnavailableCase: constFalse,
  unsupportedCase: constFalse
};
/** @internal */
const configError_reduceWithContext = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, context, reducer) => {
  const input = [self];
  const output = [];
  while (input.length > 0) {
    const error = input.pop();
    switch (error._tag) {
      case OpCodes.OP_AND:
        {
          input.push(error.right);
          input.push(error.left);
          output.push(Either.left({
            _tag: "AndCase"
          }));
          break;
        }
      case OpCodes.OP_OR:
        {
          input.push(error.right);
          input.push(error.left);
          output.push(Either.left({
            _tag: "OrCase"
          }));
          break;
        }
      case OpCodes.OP_INVALID_DATA:
        {
          output.push(Either.right(reducer.invalidDataCase(context, error.path, error.message)));
          break;
        }
      case OpCodes.OP_MISSING_DATA:
        {
          output.push(Either.right(reducer.missingDataCase(context, error.path, error.message)));
          break;
        }
      case OpCodes.OP_SOURCE_UNAVAILABLE:
        {
          output.push(Either.right(reducer.sourceUnavailableCase(context, error.path, error.message, error.cause)));
          break;
        }
      case OpCodes.OP_UNSUPPORTED:
        {
          output.push(Either.right(reducer.unsupportedCase(context, error.path, error.message)));
          break;
        }
    }
  }
  const accumulator = [];
  while (output.length > 0) {
    const either = output.pop();
    switch (either._tag) {
      case "Left":
        {
          switch (either.left._tag) {
            case "AndCase":
              {
                const left = accumulator.pop();
                const right = accumulator.pop();
                const value = reducer.andCase(context, left, right);
                accumulator.push(value);
                break;
              }
            case "OrCase":
              {
                const left = accumulator.pop();
                const right = accumulator.pop();
                const value = reducer.orCase(context, left, right);
                accumulator.push(value);
                break;
              }
          }
          break;
        }
      case "Right":
        {
          accumulator.push(either.right);
          break;
        }
    }
  }
  if (accumulator.length === 0) {
    throw new Error("BUG: ConfigError.reduceWithContext - please report an issue at https://github.com/Effect-TS/io/issues");
  }
  return accumulator.pop();
})));
/** @internal */
const isMissingDataOnly = self => configError_reduceWithContext(self, void 0, IsMissingDataOnlyReducer);
//# sourceMappingURL=configError.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/config.mjs











/** @internal */
const ConfigSymbolKey = "@effect/io/Config";
/** @internal */
const ConfigTypeId = /*#__PURE__*/Symbol.for(ConfigSymbolKey);
/** @internal */
const configVariance = {
  _A: _ => _
};
/** @internal */
const config_proto = {
  [ConfigTypeId]: configVariance,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
};
/** @internal */
const config_boolean = name => {
  const config = primitive("a boolean property", text => {
    switch (text) {
      case "true":
      case "yes":
      case "on":
      case "1":
        {
          return Either.right(true);
        }
      case "false":
      case "no":
      case "off":
      case "0":
        {
          return Either.right(false);
        }
      default:
        {
          const error = configError.InvalidData([], `Expected a boolean value, but received ${text}`);
          return Either.left(error);
        }
    }
  });
  return name === undefined ? config : nested(name)(config);
};
/** @internal */
const config_array = (config, name) => {
  return config_map(Chunk.toReadonlyArray)(config_chunk(config, name));
};
/** @internal */
const config_chunk = (config, name) => {
  return config_map(name === undefined ? repeat(config) : nested(name)(repeat(config)), Chunk.unsafeFromArray);
};
/** @internal */
const date = name => {
  const config = primitive("a date property", text => {
    const result = Date.parse(text);
    if (Number.isNaN(result)) {
      return Either.left(configError.InvalidData([], `Expected a date value but received ${text}`));
    }
    return Either.right(new Date(result));
  });
  return name === undefined ? config : nested(name)(config);
};
/** @internal */
const config_fail = message => {
  const fail = Object.create(config_proto);
  fail._tag = OpCodes.OP_FAIL;
  fail.message = message;
  fail.parse = () => Either.left(configError.Unsupported([], message));
  return fail;
};
/** @internal */
const config_number = name => {
  const config = primitive("a number property", text => {
    const result = Number.parseFloat(text);
    if (Number.isNaN(result)) {
      return Either.left(configError.InvalidData([], `Expected an number value but received ${text}`));
    }
    return Either.right(result);
  });
  return name === undefined ? config : nested(name)(config);
};
/** @internal */
const integer = name => {
  const config = primitive("an integer property", text => {
    const result = Number.parseInt(text, 10);
    if (Number.isNaN(result)) {
      return Either.left(configError.InvalidData([], `Expected an integer value but received ${text}`));
    }
    return Either.right(result);
  });
  return name === undefined ? config : nested(name)(config);
};
/** @internal */
const logLevel = name => {
  const config = mapOrFail(config_string(), value => {
    const label = value.toUpperCase();
    const level = core.allLogLevels.find(level => level.label === label);
    return level === undefined ? Either.left(configError.InvalidData([], `Expected a log level, but found: ${value}`)) : Either.right(level);
  });
  return name === undefined ? config : nested(config, name);
};
/** @internal */
const config_map = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => mapOrFail(self, a => Either.right(f(a))))));
/** @internal */
const mapAttempt = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => mapOrFail(self, a => {
  try {
    return Either.right(f(a));
  } catch (error) {
    return Either.left(configError.InvalidData([], error instanceof Error ? error.message : `${error}`));
  }
}))));
/** @internal */
const mapOrFail = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const mapOrFail = Object.create(config_proto);
  mapOrFail._tag = OpCodes.OP_MAP_OR_FAIL;
  mapOrFail.original = self;
  mapOrFail.mapOrFail = f;
  return mapOrFail;
})));
/** @internal */
const missingError = name => {
  return self => {
    return MissingData([], `Expected ${self.description} with name ${name}`);
  };
};
/** @internal */
const nested = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, name) => {
  const nested = Object.create(config_proto);
  nested._tag = OpCodes.OP_NESTED;
  nested.name = name;
  nested.config = self;
  return nested;
})));
/** @internal */
const config_orElse = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => {
  const fallback = Object.create(config_proto);
  fallback._tag = OpCodes.OP_FALLBACK;
  fallback.first = self;
  fallback.second = config_suspend(that);
  fallback.condition = constTrue;
  return fallback;
})));
/** @internal */
const orElseIf = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, options) => {
  const fallback = Object.create(config_proto);
  fallback._tag = OpCodes.OP_FALLBACK;
  fallback.first = self;
  fallback.second = config_suspend(options.orElse);
  fallback.condition = options.if;
  return fallback;
})));
/** @internal */
const config_option = self => {
  return orElseIf({
    orElse: () => config_succeed(Option.none()),
    if: ConfigError.isMissingDataOnly
  })(config_map(Option.some)(self));
};
/** @internal */
const primitive = (description, parse) => {
  const primitive = Object.create(config_proto);
  primitive._tag = OpCodes.OP_PRIMITIVE;
  primitive.description = description;
  primitive.parse = parse;
  return primitive;
};
/** @internal */
const repeat = self => {
  const repeat = Object.create(config_proto);
  repeat._tag = OpCodes.OP_SEQUENCE;
  repeat.config = self;
  return repeat;
};
/** @internal */
const secret = name => {
  const config = primitive("a secret property", text => Either.right(configSecret.fromString(text)));
  return name === undefined ? config : nested(name)(config);
};
/** @internal */
const config_hashSet = (config, name) => {
  const newConfig = config_map(config_chunk(config), HashSet.fromIterable);
  return name === undefined ? newConfig : nested(name)(newConfig);
};
/** @internal */
const config_string = name => {
  const config = primitive("a text property", Either.right);
  return name === undefined ? config : nested(name)(config);
};
const config_all = arg => {
  if (Array.isArray(arg)) {
    return config_tuple(arg);
  } else if (Symbol.iterator in arg) {
    return config_tuple([...arg]);
  }
  return config_struct(arg);
};
const config_struct = r => {
  const entries = Object.entries(r);
  let result = config_map(value => ({
    [entries[0][0]]: value
  }))(entries[0][1]);
  if (entries.length === 1) {
    return result;
  }
  const rest = entries.slice(1);
  for (const [key, config] of rest) {
    result = config_zipWith(config, (record, value) => ({
      ...record,
      [key]: value
    }))(result);
  }
  return result;
};
/** @internal */
const config_succeed = value => {
  const constant = Object.create(config_proto);
  constant._tag = OpCodes.OP_CONSTANT;
  constant.value = value;
  constant.parse = () => Either.right(value);
  return constant;
};
/** @internal */
const config_suspend = config => {
  const lazy = Object.create(config_proto);
  lazy._tag = OpCodes.OP_LAZY;
  lazy.config = config;
  return lazy;
};
/** @internal */
const config_sync = value => {
  return config_suspend(() => config_succeed(value()));
};
/** @internal */
const config_hashMap = (config, name) => {
  const table = Object.create(config_proto);
  table._tag = OpCodes.OP_HASHMAP;
  table.valueConfig = config;
  return name === undefined ? table : nested(name)(table);
};
/** @internal */
const isConfig = u => typeof u === "object" && u != null && ConfigTypeId in u;
/** @internal */
const config_tuple = tuple => {
  if (tuple.length === 0) {
    return config_succeed([]);
  }
  if (tuple.length === 1) {
    return config_map(tuple[0], x => [x]);
  }
  let result = config_map(tuple[0], x => [x]);
  for (let i = 1; i < tuple.length; i++) {
    const config = tuple[i];
    result = config_zipWith(config, (tuple, value) => [...tuple, value])(result);
  }
  return result;
};
/**
 * @internal
 */
const unwrap = wrapped => {
  if (isConfig(wrapped)) {
    return wrapped;
  }
  return config_struct(Object.fromEntries(Object.entries(wrapped).map(([k, a]) => [k, unwrap(a)])));
};
/** @internal */
const validate = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, {
  message,
  validation
}) => mapOrFail(self, a => {
  if (validation(a)) {
    return Either.right(a);
  }
  return Either.left(configError.InvalidData([], message));
}))));
/** @internal */
const withDefault = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, def) => orElseIf(self, {
  orElse: () => config_succeed(def),
  if: ConfigError.isMissingDataOnly
}))));
/** @internal */
const withDescription = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, description) => {
  const described = Object.create(config_proto);
  described._tag = OpCodes.OP_DESCRIBED;
  described.config = self;
  described.description = description;
  return described;
})));
/** @internal */
const config_zip = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => config_zipWith(self, that, (a, b) => [a, b]))));
/** @internal */
const config_zipWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, that, f) => {
  const zipWith = Object.create(config_proto);
  zipWith._tag = OpCodes.OP_ZIP_WITH;
  zipWith.left = self;
  zipWith.right = that;
  zipWith.zip = f;
  return zipWith;
})));
//# sourceMappingURL=config.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/configProvider/pathPatch.mjs






/** @internal */
const pathPatch_empty = {
  _tag: "Empty"
};
/** @internal */
const pathPatch_andThen = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => ({
  _tag: "AndThen",
  first: self,
  second: that
}))));
/** @internal */
const mapName = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => pathPatch_andThen(self, {
  _tag: "MapName",
  f
}))));
/** @internal */
const pathPatch_nested = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, name) => pathPatch_andThen(self, {
  _tag: "Nested",
  name
}))));
/** @internal */
const unnested = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, name) => pathPatch_andThen(self, {
  _tag: "Unnested",
  name
}))));
/** @internal */
const pathPatch_patch = /*#__PURE__*/Function_dual(2, (path, patch) => {
  let input = List_of(patch);
  let output = path;
  while (isCons(input)) {
    const patch = input.head;
    switch (patch._tag) {
      case "Empty":
        {
          input = input.tail;
          break;
        }
      case "AndThen":
        {
          input = cons(patch.first, cons(patch.second, input.tail));
          break;
        }
      case "MapName":
        {
          output = ReadonlyArray_map(output, patch.f);
          input = input.tail;
          break;
        }
      case "Nested":
        {
          output = prepend(output, patch.name);
          input = input.tail;
          break;
        }
      case "Unnested":
        {
          const containsName = contains(patch.name)(head(output));
          if (containsName) {
            output = tailNonEmpty(output);
            input = input.tail;
          } else {
            return Either_left(MissingData(output, `Expected ${patch.name} to be in path in ConfigProvider#unnested`));
          }
          break;
        }
    }
  }
  return Either_right(output);
});
//# sourceMappingURL=pathPatch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/opCodes/config.mjs
/** @internal */
const OP_CONSTANT = "Constant";
/** @internal */
const config_OP_FAIL = "Fail";
/** @internal */
const OP_FALLBACK = "Fallback";
/** @internal */
const OP_DESCRIBED = "Described";
/** @internal */
const OP_LAZY = "Lazy";
/** @internal */
const OP_MAP_OR_FAIL = "MapOrFail";
/** @internal */
const OP_NESTED = "Nested";
/** @internal */
const OP_PRIMITIVE = "Primitive";
/** @internal */
const OP_SEQUENCE = "Sequence";
/** @internal */
const OP_HASHMAP = "HashMap";
/** @internal */
const OP_ZIP_WITH = "ZipWith";
//# sourceMappingURL=config.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/configProvider.mjs















const concat = (l, r) => [...l, ...r];
/** @internal */
const ConfigProviderSymbolKey = "@effect/io/Config/Provider";
/** @internal */
const ConfigProviderTypeId = /*#__PURE__*/Symbol.for(ConfigProviderSymbolKey);
/** @internal */
const configProviderTag = /*#__PURE__*/Tag(ConfigProviderTypeId);
/** @internal */
const FlatConfigProviderSymbolKey = "@effect/io/Config/Provider/Flat";
/** @internal */
const FlatConfigProviderTypeId = /*#__PURE__*/Symbol.for(FlatConfigProviderSymbolKey);
/** @internal */
const configProvider_make = options => ({
  [ConfigProviderTypeId]: ConfigProviderTypeId,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  },
  ...options
});
/** @internal */
const makeFlat = options => ({
  [FlatConfigProviderTypeId]: FlatConfigProviderTypeId,
  patch: options.patch,
  load: (path, config, split = true) => options.load(path, config, split),
  enumerateChildren: options.enumerateChildren
});
/** @internal */
const fromFlat = flat => configProvider_make({
  load: config => core_flatMap(fromFlatLoop(flat, ReadonlyArray_empty(), config, false), chunk => match(head(chunk), {
    onNone: () => core_fail(MissingData(ReadonlyArray_empty(), `Expected a single value having structure: ${config}`)),
    onSome: succeed
  })),
  flattened: flat
});
/** @internal */
const fromEnv = (config = {}) => {
  const {
    pathDelim,
    seqDelim
  } = Object.assign({}, {
    pathDelim: "_",
    seqDelim: ","
  }, config);
  const makePathString = path => join(pathDelim)(path);
  const unmakePathString = pathString => pathString.split(pathDelim);
  const getEnv = () => typeof process !== "undefined" && "env" in process && typeof process.env === "object" ? process.env : {};
  const load = (path, primitive, split = true) => {
    const pathString = makePathString(path);
    const current = getEnv();
    const valueOpt = pathString in current ? mjs_Option_some(current[pathString]) : Option_none();
    return core_flatMap(value => parsePrimitive(value, path, primitive, seqDelim, split))(mapError(() => MissingData(path, `Expected ${pathString} to exist in the process context`))(valueOpt));
  };
  const enumerateChildren = path => sync(() => {
    const current = getEnv();
    const keys = Object.keys(current);
    const keyPaths = Array.from(keys).map(value => unmakePathString(value.toUpperCase()));
    const filteredKeyPaths = keyPaths.filter(keyPath => {
      for (let i = 0; i < path.length; i++) {
        const pathComponent = unsafeGet(i)(path);
        const currentElement = keyPath[i];
        if (currentElement === undefined || pathComponent !== currentElement) {
          return false;
        }
      }
      return true;
    }).flatMap(keyPath => keyPath.slice(path.length, path.length + 1));
    return mjs_HashSet_fromIterable(filteredKeyPaths);
  });
  return fromFlat(makeFlat({
    load,
    enumerateChildren,
    patch: pathPatch_empty
  }));
};
/** @internal */
const fromMap = (map, config = {}) => {
  const {
    pathDelim,
    seqDelim
  } = Object.assign({}, {
    seqDelim: ",",
    pathDelim: "."
  }, config);
  const makePathString = path => RA.join(pathDelim)(path);
  const unmakePathString = pathString => pathString.split(pathDelim);
  const mapWithIndexSplit = splitIndexInKeys(map, str => Array.from(unmakePathString(str)), makePathString);
  const load = (path, primitive, split = true) => {
    const pathString = makePathString(path);
    const valueOpt = mapWithIndexSplit.has(pathString) ? Option.some(mapWithIndexSplit.get(pathString)) : Option.none();
    return core.flatMap(value => parsePrimitive(value, path, primitive, seqDelim, split))(core.mapError(() => configError.MissingData(path, `Expected ${pathString} to exist in the provided map`))(valueOpt));
  };
  const enumerateChildren = path => core.sync(() => {
    const keyPaths = Array.from(mapWithIndexSplit.keys()).map(unmakePathString);
    const filteredKeyPaths = keyPaths.filter(keyPath => {
      for (let i = 0; i < path.length; i++) {
        const pathComponent = RA.unsafeGet(i)(path);
        const currentElement = keyPath[i];
        if (currentElement === undefined || pathComponent !== currentElement) {
          return false;
        }
      }
      return true;
    }).flatMap(keyPath => keyPath.slice(path.length, path.length + 1));
    return HashSet.fromIterable(filteredKeyPaths);
  });
  return fromFlat(makeFlat({
    load,
    enumerateChildren,
    patch: pathPatch.empty
  }));
};
const configProvider_extend = (leftDef, rightDef, left, right) => {
  const leftPad = unfold(left.length, index => index >= right.length ? Option_none() : mjs_Option_some([leftDef(index), index + 1]));
  const rightPad = unfold(right.length, index => index >= left.length ? Option_none() : mjs_Option_some([rightDef(index), index + 1]));
  const leftExtension = concat(left, leftPad);
  const rightExtension = concat(right, rightPad);
  return [leftExtension, rightExtension];
};
const fromFlatLoop = (flat, prefix, config, split) => {
  const op = config;
  switch (op._tag) {
    case OP_CONSTANT:
      {
        return succeed(of(op.value));
      }
    case OP_DESCRIBED:
      {
        return suspend(() => fromFlatLoop(flat, prefix, op.config, split));
      }
    case config_OP_FAIL:
      {
        return core_fail(MissingData(prefix, op.message));
      }
    case OP_FALLBACK:
      {
        return catchAll(error1 => {
          if (op.condition(error1)) {
            return catchAll(error2 => core_fail(Or(error1, error2)))(fromFlatLoop(flat, prefix, op.second, split));
          }
          return core_fail(error1);
        })(suspend(() => fromFlatLoop(flat, prefix, op.first, split)));
      }
    case OP_LAZY:
      {
        return suspend(() => fromFlatLoop(flat, prefix, op.config(), split));
      }
    case OP_MAP_OR_FAIL:
      {
        return suspend(() => core_flatMap(forEachSequential(a => mapError(prefixed(prefix))(op.mapOrFail(a))))(fromFlatLoop(flat, prefix, op.original, split)));
      }
    case OP_NESTED:
      {
        return suspend(() => fromFlatLoop(flat, concat(prefix, of(op.name)), op.config, split));
      }
    case OP_PRIMITIVE:
      {
        return core_flatMap(prefix => core_flatMap(values => {
          if (values.length === 0) {
            const name = getOrElse(() => "<n/a>")(last(prefix));
            return core_fail(missingError(name));
          }
          return succeed(values);
        })(flat.load(prefix, op, split)))(pathPatch_patch(prefix, flat.patch));
      }
    case OP_SEQUENCE:
      {
        return core_flatMap(patchedPrefix => core_flatMap(indices => {
          if (indices.length === 0) {
            return suspend(() => core_map(fromFlatLoop(flat, patchedPrefix, op.config, true), of));
          }
          return core_map(chunkChunk => {
            const flattened = ReadonlyArray_flatten(chunkChunk);
            if (flattened.length === 0) {
              return of(ReadonlyArray_empty());
            }
            return of(flattened);
          })(forEachSequential(indices, index => fromFlatLoop(flat, append(prefix, `[${index}]`), op.config, true)));
        })(core_flatMap(indicesFrom)(flat.enumerateChildren(patchedPrefix))))(pathPatch_patch(prefix, flat.patch));
      }
    case OP_HASHMAP:
      {
        return suspend(() => core_flatMap(prefix => core_flatMap(keys => {
          return core_map(values => {
            if (values.length === 0) {
              return of(mjs_HashMap_empty());
            }
            const matrix = values.map(x => Array.from(x));
            return ReadonlyArray_map(values => mjs_HashMap_fromIterable(zip(ReadonlyArray_fromIterable(keys), values)))(transpose(matrix));
          })(forEachSequential(key => fromFlatLoop(flat, concat(prefix, of(key)), op.valueConfig, split))(keys));
        })(flat.enumerateChildren(prefix)))(pathPatch_patch(prefix, flat.patch)));
      }
    case OP_ZIP_WITH:
      {
        return suspend(() => core_flatMap(left => core_flatMap(right => {
          if (Either_isLeft(left) && Either_isLeft(right)) {
            return core_fail(And(left.left, right.left));
          }
          if (Either_isLeft(left) && Either_isRight(right)) {
            return core_fail(left.left);
          }
          if (Either_isRight(left) && Either_isLeft(right)) {
            return core_fail(right.left);
          }
          if (Either_isRight(left) && Either_isRight(right)) {
            const path = join(".")(prefix);
            const fail = fromFlatLoopFail(prefix, path);
            const [lefts, rights] = configProvider_extend(fail, fail, ReadonlyArray_map(Either_right)(left.right), ReadonlyArray_map(Either_right)(right.right));
            return forEachSequential(([left, right]) => core_map(([left, right]) => op.zip(left, right))(core_zip(left, right)))(zip(rights)(lefts));
          }
          throw new Error("BUG: ConfigProvider.fromFlatLoop - please report an issue at https://github.com/Effect-TS/io/issues");
        })(core_either(fromFlatLoop(flat, prefix, op.right, split))))(core_either(fromFlatLoop(flat, prefix, op.left, split))));
      }
  }
};
const fromFlatLoopFail = (prefix, path) => index => Either_left(MissingData(prefix, `The element at index ${index} in a sequence at path "${path}" was missing`));
/** @internal */
const mapInputPath = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => fromFlat(mapInputPathFlat(self.flattened, f)))));
const mapInputPathFlat = (self, f) => makeFlat({
  load: (path, config, split = true) => self.load(path, config, split),
  enumerateChildren: path => self.enumerateChildren(path),
  patch: pathPatch.mapName(self.patch, f)
});
/** @internal */
const configProvider_nested = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, name) => fromFlat(makeFlat({
  load: (path, config) => self.flattened.load(path, config, true),
  enumerateChildren: path => self.flattened.enumerateChildren(path),
  patch: pathPatch.nested(self.flattened.patch, name)
})))));
/** @internal */
const configProvider_unnested = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, name) => fromFlat(makeFlat({
  load: (path, config) => self.flattened.load(path, config, true),
  enumerateChildren: path => self.flattened.enumerateChildren(path),
  patch: pathPatch.unnested(self.flattened.patch, name)
})))));
/** @internal */
const configProvider_orElse = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => fromFlat(orElseFlat(self.flattened, () => that().flattened)))));
const orElseFlat = (self, that) => makeFlat({
  load: (path, config, split) => core.catchAll(error1 => core.flatMap(that => core.catchAll(error2 => core.fail(configError.Or(error1, error2)))(core.flatMap(patch => that.load(patch, config, split))(pathPatch.patch(path, that.patch))))(core.sync(that)))(core.flatMap(patch => self.load(patch, config, split))(pathPatch.patch(path, self.patch))),
  enumerateChildren: path => core.flatMap(left => core.flatMap(that => core.flatMap(right => {
    if (Either.isLeft(left) && Either.isLeft(right)) {
      return core.fail(configError.And(left.left, right.left));
    }
    if (Either.isLeft(left) && Either.isRight(right)) {
      return core.succeed(right.right);
    }
    if (Either.isRight(left) && Either.isLeft(right)) {
      return core.succeed(left.right);
    }
    if (Either.isRight(left) && Either.isRight(right)) {
      return core.succeed(HashSet.union(right.right)(left.right));
    }
    throw new Error("BUG: ConfigProvider.orElseFlat - please report an issue at https://github.com/Effect-TS/io/issues");
  })(core.either(core.flatMap(patch => that.enumerateChildren(patch))(pathPatch.patch(path, that.patch)))))(core.sync(that)))(core.either(core.flatMap(patch => self.enumerateChildren(patch))(pathPatch.patch(path, self.patch)))),
  patch: pathPatch.empty
});
/** @internal */
const constantCase = self => mapInputPath(self, StringUtils.constantCase);
/** @internal */
const kebabCase = self => mapInputPath(self, StringUtils.kebabCase);
/** @internal */
const lowerCase = self => mapInputPath(self, StringUtils.lowerCase);
/** @internal */
const snakeCase = self => mapInputPath(self, StringUtils.snakeCase);
/** @internal */
const upperCase = self => mapInputPath(self, StringUtils.upperCase);
/** @internal */
const within = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, path, f) => {
  const unnest = RA.reduce(path, self, (provider, name) => configProvider_unnested(provider, name));
  const nest = RA.reduceRight(path, f(unnest), (provider, name) => configProvider_nested(provider, name));
  return configProvider_orElse(nest, () => self);
})));
const splitPathString = (text, delim) => {
  const split = text.split(new RegExp(`\\s*${escapeRegex(delim)}\\s*`));
  return split;
};
const parsePrimitive = (text, path, primitive, delimiter, split) => {
  if (!split) {
    return mapError(prefixed(path))(core_map(of)(primitive.parse(text)));
  }
  return mapError(prefixed(path))(forEachSequential(char => primitive.parse(char.trim()))(splitPathString(text, delimiter)));
};
const transpose = array => {
  return Object.keys(array[0]).map(column => array.map(row => row[column]));
};
const escapeRegex = string => {
  return string.replace(/[/\-\\^$*+?.()|[\]{}]/g, "\\$&");
};
const indicesFrom = quotedIndices => core_map(merge)(core_either(core_mapBoth({
  onFailure: () => ReadonlyArray_empty(),
  onSuccess: sort(Number_Order)
})(forEachSequential(quotedIndices, parseQuotedIndex))));
const STR_INDEX_REGEX = /(^.+)(\[(\d+)\])$/;
const QUOTED_INDEX_REGEX = /^(\[(\d+)\])$/;
const parseQuotedIndex = str => {
  const match = str.match(QUOTED_INDEX_REGEX);
  if (match !== null) {
    const matchedIndex = match[2];
    return flatMap(parseInteger)(matchedIndex !== undefined && matchedIndex.length > 0 ? mjs_Option_some(matchedIndex) : Option_none());
  }
  return Option_none();
};
const splitIndexInKeys = (map, unmakePathString, makePathString) => {
  const newMap = new Map();
  for (const [pathString, value] of map) {
    const keyWithIndex = RA.flatMap(key => Option.match(splitIndexFrom(key), {
      onNone: () => RA.of(key),
      onSome: ([key, index]) => RA.make(key, `[${index}]`)
    }))(unmakePathString(pathString));
    newMap.set(makePathString(keyWithIndex), value);
  }
  return newMap;
};
const splitIndexFrom = key => {
  const match = key.match(STR_INDEX_REGEX);
  if (match !== null) {
    const matchedString = match[1];
    const matchedIndex = match[3];
    const optionalString = matchedString !== undefined && matchedString.length > 0 ? Option.some(matchedString) : Option.none();
    const optionalIndex = Option.flatMap(parseInteger)(matchedIndex !== undefined && matchedIndex.length > 0 ? Option.some(matchedIndex) : Option.none());
    return Option.all([optionalString, optionalIndex]);
  }
  return Option.none();
};
const parseInteger = str => {
  const parsedIndex = Number.parseInt(str);
  return Number.isNaN(parsedIndex) ? Option_none() : mjs_Option_some(parsedIndex);
};
//# sourceMappingURL=configProvider.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/defaultServices/console.mjs


/** @internal */
const console_TypeId = /*#__PURE__*/Symbol("@effect/io/Console");
/** @internal */
const consoleTag = /*#__PURE__*/Tag(console_TypeId);
/** @internal */
const defaultConsole = {
  [console_TypeId]: console_TypeId,
  assert(condition, ...args) {
    return sync(() => {
      console.assert(condition, ...args);
    });
  },
  clear: /*#__PURE__*/sync(() => {
    console.clear();
  }),
  count(label) {
    return sync(() => {
      console.count(label);
    });
  },
  countReset(label) {
    return sync(() => {
      console.countReset(label);
    });
  },
  debug(...args) {
    return sync(() => {
      console.debug(...args);
    });
  },
  dir(item, options) {
    return sync(() => {
      console.dir(item, options);
    });
  },
  dirxml(...args) {
    return sync(() => {
      console.dirxml(...args);
    });
  },
  error(...args) {
    return sync(() => {
      console.error(...args);
    });
  },
  group(options) {
    return options?.collapsed ? sync(() => console.groupCollapsed(options?.label)) : sync(() => console.group(options?.label));
  },
  groupEnd: /*#__PURE__*/sync(() => {
    console.groupEnd();
  }),
  info(...args) {
    return sync(() => {
      console.info(...args);
    });
  },
  log(...args) {
    return sync(() => {
      console.log(...args);
    });
  },
  table(tabularData, properties) {
    return sync(() => {
      console.table(tabularData, properties);
    });
  },
  time(label) {
    return sync(() => console.time(label));
  },
  timeEnd(label) {
    return sync(() => console.timeEnd(label));
  },
  timeLog(label, ...args) {
    return sync(() => {
      console.timeLog(label, ...args);
    });
  },
  trace(...args) {
    return sync(() => {
      console.trace(...args);
    });
  },
  warn(...args) {
    return sync(() => {
      console.warn(...args);
    });
  },
  withGroup(self, options) {
    return acquireUseRelease(options?.collapsed ? sync(() => console.groupCollapsed(options?.label)) : sync(() => console.group(options?.label)), () => self, () => sync(() => console.groupEnd()));
  },
  withTime(self, label) {
    return acquireUseRelease(sync(() => console.time(label)), () => self, () => sync(() => console.timeEnd(label)));
  }
};
//# sourceMappingURL=console.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/random.mjs
var random_a;




/** @internal */
const RandomSymbolKey = "@effect/io/Random";
/** @internal */
const RandomTypeId = /*#__PURE__*/Symbol.for(RandomSymbolKey);
/** @internal */
const randomTag = /*#__PURE__*/Tag(RandomTypeId);
/** @internal */
class RandomImpl {
  constructor(seed) {
    this.seed = seed;
    this[random_a] = RandomTypeId;
    this.PRNG = new PCGRandom(seed);
  }
  next() {
    return sync(() => this.PRNG.number());
  }
  nextBoolean() {
    return core_map(this.next(), n => n > 0.5);
  }
  nextInt() {
    return sync(() => this.PRNG.integer(Number.MAX_SAFE_INTEGER));
  }
  nextRange(min, max) {
    return core_map(this.next(), n => (max - min) * n + min);
  }
  nextIntBetween(min, max) {
    return sync(() => this.PRNG.integer(max - min) + min);
  }
  shuffle(elements) {
    return shuffleWith(elements, n => this.nextIntBetween(0, n + 1));
  }
}
random_a = RandomTypeId;
const shuffleWith = (elements, nextIntBounded) => {
  return suspend(() => core_flatMap(buffer => {
    const numbers = [];
    for (let i = buffer.length; i >= 2; i = i - 1) {
      numbers.push(i);
    }
    return core_as(Chunk_fromIterable(buffer))(forEachSequentialDiscard(n => core_map(k => swap(buffer, n - 1, k))(nextIntBounded(n)))(numbers));
  })(sync(() => Array.from(elements))));
};
const swap = (buffer, index1, index2) => {
  const tmp = buffer[index1];
  buffer[index1] = buffer[index2];
  buffer[index2] = tmp;
  return buffer;
};
const random_make = seed => new RandomImpl(seed);
//# sourceMappingURL=random.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/tracer.mjs
/**
 * @since 1.0.0
 */



/** @internal */
const TracerTypeId = /*#__PURE__*/Symbol.for("@effect/io/Tracer");
/** @internal */
const tracer_make = options => ({
  [TracerTypeId]: TracerTypeId,
  ...options
});
/** @internal */
const tracerTag = /*#__PURE__*/Tag( /*#__PURE__*/Symbol.for("@effect/io/Tracer"));
const tracer_ids = /*#__PURE__*/globalValue("@effect/io/Tracer/SpanId.ids", () => MutableRef_make(0));
/** @internal */
class NativeSpan {
  constructor(name, parent, context, links, startTime) {
    this.name = name;
    this.parent = parent;
    this.context = context;
    this.links = links;
    this.startTime = startTime;
    this._tag = "Span";
    this.traceId = "native";
    this.events = [];
    this.end = (endTime, exit) => {
      this.status = {
        _tag: "Ended",
        endTime,
        exit,
        startTime: this.status.startTime
      };
    };
    this.attribute = (key, value) => {
      this.attributes.set(key, value);
    };
    this.event = (name, startTime, attributes) => {
      this.events.push([name, startTime, attributes ?? {}]);
    };
    this.status = {
      _tag: "Started",
      startTime
    };
    this.attributes = new Map();
    this.spanId = `span${incrementAndGet(tracer_ids)}`;
  }
}
/** @internal */
const nativeTracer = /*#__PURE__*/tracer_make({
  span: (name, parent, context, links, startTime) => new NativeSpan(name, parent, context, links, startTime)
});
//# sourceMappingURL=tracer.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/defaultServices.mjs









/** @internal */
const liveServices = /*#__PURE__*/Context_add(tracerTag, nativeTracer)( /*#__PURE__*/Context_add(configProviderTag, fromEnv())( /*#__PURE__*/Context_add(randomTag, random_make(Math.random() * 4294967296 >>> 0))( /*#__PURE__*/Context_add(consoleTag, defaultConsole)( /*#__PURE__*/Context_add(clock_clockTag, clock_make())( /*#__PURE__*/mjs_Context_empty())))));
/**
 * The `FiberRef` holding the default `Effect` services.
 *
 * @since 1.0.0
 * @category fiberRefs
 */
const currentServices = /*#__PURE__*/fiberRefUnsafeMakeContext(liveServices);
// circular with Clock
/** @internal */
const sleep = duration => {
  const decodedDuration = decode(duration);
  return clockWith(clock => clock.sleep(decodedDuration));
};
/** @internal */
const clockWith = f => fiberRefGetWith(currentServices, services => f(mjs_Context_get(services, clock_clockTag)));
/** @internal */
const currentTimeMillis = /*#__PURE__*/clockWith(clock => clock.currentTimeMillis);
/** @internal */
const currentTimeNanos = /*#__PURE__*/clockWith(clock => clock.currentTimeNanos);
/** @internal */
const withClock = /*#__PURE__*/Function_dual(2, (effect, value) => fiberRefLocallyWith(currentServices, Context_add(clock_clockTag, value))(effect));
// circular with ConfigProvider
/** @internal */
const withConfigProvider = /*#__PURE__*/Function_dual(2, (effect, value) => fiberRefLocallyWith(currentServices, Context_add(configProviderTag, value))(effect));
/** @internal */
const configProviderWith = f => fiberRefGetWith(currentServices, services => f(mjs_Context_get(services, configProviderTag)));
/** @internal */
const config = config => configProviderWith(_ => _.load(config));
/** @internal */
const configOrDie = config => core.orDie(configProviderWith(_ => _.load(config)));
// circular with Random
/** @internal */
const randomWith = f => fiberRefGetWith(currentServices, services => f(mjs_Context_get(services, randomTag)));
/** @internal */
const next = /*#__PURE__*/(/* unused pure expression or super */ null && (randomWith(random => random.next())));
/** @internal */
const nextInt = /*#__PURE__*/(/* unused pure expression or super */ null && (randomWith(random => random.nextInt())));
/** @internal */
const nextBoolean = /*#__PURE__*/(/* unused pure expression or super */ null && (randomWith(random => random.nextBoolean())));
/** @internal */
const nextRange = (min, max) => randomWith(random => random.nextRange(min, max));
/** @internal */
const nextIntBetween = (min, max) => randomWith(random => random.nextIntBetween(min, max));
/** @internal */
const shuffle = elements => randomWith(random => random.shuffle(elements));
// circular with Tracer
/** @internal */
const tracerWith = f => fiberRefGetWith(currentServices, services => f(mjs_Context_get(services, tracerTag)));
/** @internal */
const withTracer = /*#__PURE__*/Function_dual(2, (effect, value) => fiberRefLocallyWith(currentServices, Context_add(tracerTag, value))(effect));
//# sourceMappingURL=defaultServices.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Clock.mjs


/**
 * @since 1.0.0
 * @category symbols
 */
const Clock_ClockTypeId = ClockTypeId;
/**
 * @since 1.0.0
 * @category constructors
 */
const Clock_make = clock_make;
/**
 * @since 1.0.0
 * @category constructors
 */
const Clock_sleep = sleep;
/**
 * @since 1.0.0
 * @category constructors
 */
const Clock_currentTimeMillis = currentTimeMillis;
/**
 * @since 1.0.0
 * @category constructors
 */
const Clock_currentTimeNanos = currentTimeNanos;
/**
 * @since 1.0.0
 * @category constructors
 */
const Clock_clockWith = clockWith;
/**
 * @since 1.0.0
 * @category context
 */
const Clock_Clock = clock_clockTag;
//# sourceMappingURL=Clock.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/fiberRefs.mjs
var fiberRefs_a;







/** @internal */
function fiberRefs_unsafeMake(fiberRefLocals) {
  return new FiberRefsImpl(fiberRefLocals);
}
/** @internal */
const FiberRefsSym = /*#__PURE__*/Symbol.for("@effect/io/FiberRefs");
/** @internal */
class FiberRefsImpl {
  constructor(locals) {
    this.locals = locals;
    this[fiberRefs_a] = FiberRefsSym;
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
fiberRefs_a = FiberRefsSym;
/** @internal */
const findAncestor = (_ref, _parentStack, _childStack, _childModified = false) => {
  const ref = _ref;
  let parentStack = _parentStack;
  let childStack = _childStack;
  let childModified = _childModified;
  let ret = undefined;
  while (ret === undefined) {
    if (isNonEmptyReadonlyArray(parentStack) && isNonEmptyReadonlyArray(childStack)) {
      const parentFiberId = headNonEmpty(parentStack)[0];
      const parentAncestors = tailNonEmpty(parentStack);
      const childFiberId = headNonEmpty(childStack)[0];
      const childRefValue = headNonEmpty(childStack)[1];
      const childAncestors = tailNonEmpty(childStack);
      if (parentFiberId.startTimeMillis < childFiberId.startTimeMillis) {
        childStack = childAncestors;
        childModified = true;
      } else if (parentFiberId.startTimeMillis > childFiberId.startTimeMillis) {
        parentStack = parentAncestors;
      } else {
        if (parentFiberId.id < childFiberId.id) {
          childStack = childAncestors;
          childModified = true;
        } else if (parentFiberId.id > childFiberId.id) {
          parentStack = parentAncestors;
        } else {
          ret = [childRefValue, childModified];
        }
      }
    } else {
      ret = [ref.initial, true];
    }
  }
  return ret;
};
/** @internal */
const joinAs = /*#__PURE__*/Function_dual(3, (self, fiberId, that) => {
  const parentFiberRefs = new Map(self.locals);
  for (const [fiberRef, childStack] of that.locals) {
    const childValue = headNonEmpty(childStack)[1];
    if (!equals(headNonEmpty(childStack)[0], fiberId)) {
      if (!parentFiberRefs.has(fiberRef)) {
        if (equals(childValue, fiberRef.initial)) {
          continue;
        }
        parentFiberRefs.set(fiberRef, [[fiberId, fiberRef.join(fiberRef.initial, childValue)]]);
        continue;
      }
      const parentStack = parentFiberRefs.get(fiberRef);
      const [ancestor, wasModified] = findAncestor(fiberRef, parentStack, childStack);
      if (wasModified) {
        const patch = fiberRef.diff(ancestor, childValue);
        const oldValue = headNonEmpty(parentStack)[1];
        const newValue = fiberRef.join(oldValue, fiberRef.patch(patch)(oldValue));
        if (!equals(oldValue, newValue)) {
          let newStack;
          const parentFiberId = headNonEmpty(parentStack)[0];
          if (equals(parentFiberId, fiberId)) {
            newStack = prepend([parentFiberId, newValue])(tailNonEmpty(parentStack));
          } else {
            newStack = prepend([fiberId, newValue])(parentStack);
          }
          parentFiberRefs.set(fiberRef, newStack);
        }
      }
    }
  }
  return new FiberRefsImpl(new Map(parentFiberRefs));
});
/** @internal */
const forkAs = /*#__PURE__*/Function_dual(2, (self, childId) => {
  const map = new Map();
  for (const [fiberRef, stack] of self.locals.entries()) {
    const oldValue = headNonEmpty(stack)[1];
    const newValue = fiberRef.patch(fiberRef.fork)(oldValue);
    if (equals(oldValue, newValue)) {
      map.set(fiberRef, stack);
    } else {
      map.set(fiberRef, prepend([childId, newValue])(stack));
    }
  }
  return new FiberRefsImpl(map);
});
/** @internal */
const fiberRefs = self => mjs_HashSet_fromIterable(self.locals.keys());
/** @internal */
const setAll = self => forEachSequentialDiscard(fiberRefs(self), fiberRef => fiberRefSet(fiberRef, getOrDefault(self, fiberRef)));
/** @internal */
const delete_ = /*#__PURE__*/Function_dual(2, (self, fiberRef) => {
  const locals = new Map(self.locals);
  locals.delete(fiberRef);
  return new FiberRefsImpl(locals);
});
/** @internal */
const fiberRefs_get = /*#__PURE__*/Function_dual(2, (self, fiberRef) => {
  if (!self.locals.has(fiberRef)) {
    return Option_none();
  }
  return mjs_Option_some(headNonEmpty(self.locals.get(fiberRef))[1]);
});
/** @internal */
const getOrDefault = /*#__PURE__*/Function_dual(2, (self, fiberRef) => getOrElse(() => fiberRef.initial)(fiberRefs_get(self, fiberRef)));
/** @internal */
const updatedAs = /*#__PURE__*/Function_dual(2, (self, {
  fiberId,
  fiberRef,
  value
}) => {
  const oldStack = self.locals.has(fiberRef) ? self.locals.get(fiberRef) : ReadonlyArray_empty();
  let newStack;
  if (isEmptyReadonlyArray(oldStack)) {
    newStack = of([fiberId, value]);
  } else {
    const [currentId, currentValue] = headNonEmpty(oldStack);
    if (equals(currentId, fiberId)) {
      if (equals(currentValue, value)) {
        return self;
      } else {
        newStack = prepend([fiberId, value])(tailNonEmpty(oldStack));
      }
    } else {
      newStack = prepend([fiberId, value])(oldStack);
    }
  }
  const locals = new Map(self.locals);
  return new FiberRefsImpl(locals.set(fiberRef, newStack));
});
//# sourceMappingURL=fiberRefs.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/FiberRefs.mjs

/**
 * @since 1.0.0
 * @category symbols
 */
const FiberRefs_FiberRefsSym = FiberRefsSym;
const FiberRefs_delete_ = delete_;

/**
 * Returns a set of each `FiberRef` in this collection.
 *
 * @since 1.0.0
 * @category getters
 */
const FiberRefs_fiberRefs = fiberRefs;
/**
 * Forks this collection of fiber refs as the specified child fiber id. This
 * will potentially modify the value of the fiber refs, as determined by the
 * individual fiber refs that make up the collection.
 *
 * @since 1.0.0
 * @category utils
 */
const FiberRefs_forkAs = forkAs;
/**
 * Gets the value of the specified `FiberRef` in this collection of `FiberRef`
 * values if it exists or `None` otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const FiberRefs_get = fiberRefs_get;
/**
 * Gets the value of the specified `FiberRef` in this collection of `FiberRef`
 * values if it exists or the `initial` value of the `FiberRef` otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const FiberRefs_getOrDefault = getOrDefault;
/**
 * Joins this collection of fiber refs to the specified collection, as the
 * specified fiber id. This will perform diffing and merging to ensure
 * preservation of maximum information from both child and parent refs.
 *
 * @since 1.0.0
 * @category utils
 */
const FiberRefs_joinAs = joinAs;
/**
 * Set each ref to either its value or its default.
 *
 * @since 1.0.0
 * @category utils
 */
const FiberRefs_setAll = setAll;
/**
 * Updates the value of the specified `FiberRef` using the provided `FiberId`
 *
 * @since 1.0.0
 * @category utils
 */
const FiberRefs_updatedAs = updatedAs;
/**
 * Note: it will not copy the provided Map, make sure to provide a fresh one.
 *
 * @since 1.0.0
 * @category unsafe
 */
const FiberRefs_unsafeMake = fiberRefs_unsafeMake;
//# sourceMappingURL=FiberRefs.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/fiberRefs/patch.mjs




/** @internal */
const patch_OP_EMPTY = "Empty";
/** @internal */
const OP_ADD = "Add";
/** @internal */
const OP_REMOVE = "Remove";
/** @internal */
const OP_UPDATE = "Update";
/** @internal */
const OP_AND_THEN = "AndThen";
/** @internal */
const patch_empty = {
  _tag: patch_OP_EMPTY
};
/** @internal */
const patch_diff = (oldValue, newValue) => {
  const missingLocals = new Map(oldValue.locals);
  let patch = patch_empty;
  for (const [fiberRef, pairs] of newValue.locals.entries()) {
    const newValue = headNonEmpty(pairs)[1];
    const old = missingLocals.get(fiberRef);
    if (old !== undefined) {
      const oldValue = headNonEmpty(old)[1];
      if (!equals(oldValue, newValue)) {
        patch = patch_combine({
          _tag: OP_UPDATE,
          fiberRef,
          patch: fiberRef.diff(oldValue, newValue)
        })(patch);
      }
    } else {
      patch = patch_combine({
        _tag: OP_ADD,
        fiberRef,
        value: newValue
      })(patch);
    }
    missingLocals.delete(fiberRef);
  }
  for (const [fiberRef] of missingLocals.entries()) {
    patch = patch_combine({
      _tag: OP_REMOVE,
      fiberRef
    })(patch);
  }
  return patch;
};
/** @internal */
const patch_combine = /*#__PURE__*/Function_dual(2, (self, that) => ({
  _tag: OP_AND_THEN,
  first: self,
  second: that
}));
/** @internal */
const patch_patch = /*#__PURE__*/Function_dual(3, (self, fiberId, oldValue) => {
  let fiberRefs = oldValue;
  let patches = of(self);
  while (isNonEmptyReadonlyArray(patches)) {
    const head = headNonEmpty(patches);
    const tail = tailNonEmpty(patches);
    switch (head._tag) {
      case patch_OP_EMPTY:
        {
          patches = tail;
          break;
        }
      case OP_ADD:
        {
          fiberRefs = updatedAs(fiberRefs, {
            fiberId,
            fiberRef: head.fiberRef,
            value: head.value
          });
          patches = tail;
          break;
        }
      case OP_REMOVE:
        {
          fiberRefs = delete_(fiberRefs, head.fiberRef);
          patches = tail;
          break;
        }
      case OP_UPDATE:
        {
          const value = getOrDefault(fiberRefs, head.fiberRef);
          fiberRefs = updatedAs(fiberRefs, {
            fiberId,
            fiberRef: head.fiberRef,
            value: head.fiberRef.patch(head.patch)(value)
          });
          patches = tail;
          break;
        }
      case OP_AND_THEN:
        {
          patches = prepend(head.first)(prepend(head.second)(tail));
          break;
        }
    }
  }
  return fiberRefs;
});
//# sourceMappingURL=patch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/metric/label.mjs
var label_a;



/** @internal */
const MetricLabelSymbolKey = "@effect/io/Metric/Label";
/** @internal */
const MetricLabelTypeId = /*#__PURE__*/Symbol.for(MetricLabelSymbolKey);
/** @internal */
class MetricLabelImpl {
  constructor(key, value) {
    this.key = key;
    this.value = value;
    this[label_a] = MetricLabelTypeId;
  }
  [(label_a = MetricLabelTypeId, symbol)]() {
    return combine(Hash_hash(this.value))(combine(Hash_hash(this.key))(Hash_hash(MetricLabelSymbolKey)));
  }
  [Equal_symbol](that) {
    return isMetricLabel(that) && this.key === that.key && this.value === that.value;
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
const label_make = (key, value) => {
  return new MetricLabelImpl(key, value);
};
/** @internal */
const isMetricLabel = u => {
  return typeof u === "object" && u != null && MetricLabelTypeId in u;
};
//# sourceMappingURL=label.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/singleShotGen.mjs
/** @internal */
class SingleShotGen {
  constructor(self) {
    this.self = self;
    this.called = false;
  }
  next(a) {
    return this.called ? {
      value: a,
      done: true
    } : (this.called = true, {
      value: this.self,
      done: false
    });
  }
  return(a) {
    return {
      value: a,
      done: true
    };
  }
  throw(e) {
    throw e;
  }
  [Symbol.iterator]() {
    return new SingleShotGen(this.self);
  }
}
//# sourceMappingURL=singleShotGen.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Logger/Level.mjs
/**
 * @since 1.0.0
 */




/**
 * @since 1.0.0
 * @category constructors
 */
const All = logLevelAll;
/**
 * @since 1.0.0
 * @category constructors
 */
const Fatal = logLevelFatal;
/**
 * @since 1.0.0
 * @category constructors
 */
const Level_Error = logLevelError;
/**
 * @since 1.0.0
 * @category constructors
 */
const Warning = logLevelWarning;
/**
 * @since 1.0.0
 * @category constructors
 */
const Info = logLevelInfo;
/**
 * @since 1.0.0
 * @category constructors
 */
const Debug = logLevelDebug;
/**
 * @since 1.0.0
 * @category constructors
 */
const Trace = logLevelTrace;
/**
 * @since 1.0.0
 * @category constructors
 */
const Level_None = logLevelNone;
/**
 * @since 1.0.0
 * @category constructors
 */
const allLevels = allLogLevels;
/**
 * Locally applies the specified `LogLevel` to an `Effect` workflow, reverting
 * to the previous `LogLevel` after the `Effect` workflow completes.
 *
 * @since 1.0.0
 * @category utils
 */
const locally = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (use, self) => core.fiberRefLocally(use, core.currentLogLevel, self))));
/**
 * @since 1.0.0
 * @category instances
 */
const Level_Order = /*#__PURE__*/Order_mapInput(level => level.ordinal)(Number_Order);
/**
 * @since 1.0.0
 * @category ordering
 */
const Level_lessThan = /*#__PURE__*/(/* unused pure expression or super */ null && (order.lessThan(Level_Order)));
/**
 * @since 1.0.0
 * @category ordering
 */
const lessThanEqual = /*#__PURE__*/(/* unused pure expression or super */ null && (order.lessThanOrEqualTo(Level_Order)));
/**
 * @since 1.0.0
 * @category ordering
 */
const Level_greaterThan = /*#__PURE__*/greaterThan(Level_Order);
/**
 * @since 1.0.0
 * @category ordering
 */
const greaterThanEqual = /*#__PURE__*/(/* unused pure expression or super */ null && (order.greaterThanOrEqualTo(Level_Order)));
/**
 * @since 1.0.0
 * @category conversions
 */
const fromLiteral = _ => {
  switch (_) {
    case "All":
      {
        return All;
      }
    case "Debug":
      {
        return Debug;
      }
    case "Error":
      {
        return Level_Error;
      }
    case "Fatal":
      {
        return Fatal;
      }
    case "Info":
      {
        return Info;
      }
    case "Trace":
      {
        return Trace;
      }
    case "None":
      {
        return Level_None;
      }
    case "Warning":
      {
        return Warning;
      }
  }
};
//# sourceMappingURL=Level.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/logSpan.mjs
/** @internal */
const logSpan_make = (label, startTime) => ({
  label,
  startTime
});
/** @internal */
const logSpan_render = now => {
  return self => {
    const label = self.label.replace(/[\s="]/g, "_");
    return `${label}=${now - self.startTime}ms`;
  };
};
//# sourceMappingURL=logSpan.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Logger/Span.mjs
/**
 * @since 1.0.0
 */

/**
 * @since 1.0.0
 * @category constructors
 */
const Span_make = logSpan_make;
/**
 * @since 1.0.0
 * @category destructors
 */
const Span_render = logSpan_render;
//# sourceMappingURL=Span.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/ref.mjs
var ref_a;





/** @internal */
const RefTypeId = /*#__PURE__*/Symbol.for("@effect/io/Ref");
/** @internal */
const refVariance = {
  _A: _ => _
};
class RefImpl {
  constructor(ref) {
    this.ref = ref;
    this[ref_a] = refVariance;
  }
  modify(f) {
    return sync(() => {
      const current = MutableRef_get(this.ref);
      const [b, a] = f(current);
      if (current !== a) {
        MutableRef_set(a)(this.ref);
      }
      return b;
    });
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
ref_a = RefTypeId;
/** @internal */
const ref_unsafeMake = value => new RefImpl(MutableRef_make(value));
/** @internal */
const ref_make = value => sync(() => ref_unsafeMake(value));
/** @internal */
const ref_get = self => self.modify(a => [a, a]);
/** @internal */
const ref_set = /*#__PURE__*/Function_dual(2, (self, value) => self.modify(() => [void 0, value]));
/** @internal */
const ref_getAndSet = /*#__PURE__*/Function_dual(2, (self, value) => self.modify(a => [a, value]));
/** @internal */
const ref_getAndUpdate = /*#__PURE__*/Function_dual(2, (self, f) => self.modify(a => [a, f(a)]));
/** @internal */
const getAndUpdateSome = /*#__PURE__*/Function_dual(2, (self, pf) => self.modify(value => {
  const option = pf(value);
  switch (option._tag) {
    case "None":
      {
        return [value, value];
      }
    case "Some":
      {
        return [value, option.value];
      }
  }
}));
/** @internal */
const ref_setAndGet = /*#__PURE__*/Function_dual(2, (self, value) => self.modify(() => [value, value]));
/** @internal */
const ref_modify = /*#__PURE__*/Function_dual(2, (self, f) => self.modify(f));
/** @internal */
const modifySome = /*#__PURE__*/Function_dual(3, (self, fallback, pf) => self.modify(value => {
  const option = pf(value);
  switch (option._tag) {
    case "None":
      {
        return [fallback, value];
      }
    case "Some":
      {
        return option.value;
      }
  }
}));
/** @internal */
const ref_update = /*#__PURE__*/Function_dual(2, (self, f) => self.modify(a => [void 0, f(a)]));
/** @internal */
const ref_updateAndGet = /*#__PURE__*/Function_dual(2, (self, f) => self.modify(a => {
  const result = f(a);
  return [result, result];
}));
/** @internal */
const updateSome = /*#__PURE__*/Function_dual(2, (self, f) => self.modify(a => [void 0, match(f(a), {
  onNone: () => a,
  onSome: b => b
})]));
/** @internal */
const updateSomeAndGet = /*#__PURE__*/Function_dual(2, (self, pf) => self.modify(value => {
  const option = pf(value);
  switch (option._tag) {
    case "None":
      {
        return [value, value];
      }
    case "Some":
      {
        return [option.value, option.value];
      }
  }
}));
/** @internal */
const ref_unsafeGet = self => MutableRef.get(self.ref);
//# sourceMappingURL=ref.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Ref.mjs

/**
 * @since 1.0.0
 * @category symbols
 */
const Ref_RefTypeId = RefTypeId;
/**
 * @since 1.0.0
 * @category constructors
 */
const Ref_make = ref_make;
/**
 * @since 1.0.0
 * @category getters
 */
const Ref_get = ref_get;
/**
 * @since 1.0.0
 * @category utils
 */
const Ref_getAndSet = ref_getAndSet;
/**
 * @since 1.0.0
 * @category utils
 */
const Ref_getAndUpdate = ref_getAndUpdate;
/**
 * @since 1.0.0
 * @category utils
 */
const Ref_getAndUpdateSome = getAndUpdateSome;
/**
 * @since 1.0.0
 * @category utils
 */
const Ref_modify = ref_modify;
/**
 * @since 1.0.0
 * @category utils
 */
const Ref_modifySome = modifySome;
/**
 * @since 1.0.0
 * @category utils
 */
const Ref_set = ref_set;
/**
 * @since 1.0.0
 * @category utils
 */
const Ref_setAndGet = ref_setAndGet;
/**
 * @since 1.0.0
 * @category utils
 */
const Ref_update = ref_update;
/**
 * @since 1.0.0
 * @category utils
 */
const Ref_updateAndGet = ref_updateAndGet;
/**
 * @since 1.0.0
 * @category utils
 */
const Ref_updateSome = updateSome;
/**
 * @since 1.0.0
 * @category utils
 */
const Ref_updateSomeAndGet = updateSomeAndGet;
/**
 * @since 1.0.0
 * @category unsafe
 */
const Ref_unsafeMake = ref_unsafeMake;
//# sourceMappingURL=Ref.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Tracer.mjs


/**
 * @since 1.0.0
 */
const Tracer_TracerTypeId = TracerTypeId;
/**
 * @since 1.0.0
 * @category tags
 */
const Tracer = tracerTag;
/**
 * @since 1.0.0
 * @category constructors
 */
const Tracer_make = tracer_make;
/**
 * @since 1.0.0
 * @category constructors
 */
const Tracer_tracerWith = tracerWith;
//# sourceMappingURL=Tracer.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/effect.mjs
























/* @internal */
const annotateLogs = /*#__PURE__*/Function_dual(args => isEffect(args[0]), function () {
  const args = arguments;
  return fiberRefLocallyWith(args[0], currentLogAnnotations, typeof args[1] === "string" ? HashMap_set(args[1], args[2]) : annotations => Object.entries(args[1]).reduce((acc, [key, value]) => HashMap_set(acc, key, value), annotations));
});
/* @internal */
const asSome = self => core_map(self, mjs_Option_some);
/* @internal */
const asSomeError = self => mapError(self, mjs_Option_some);
/* @internal */
const asyncOption = (register, blockingOn = Id_none) => asyncEither(cb => {
  const option = register(cb);
  switch (option._tag) {
    case "None":
      {
        return Either_left(core_unit);
      }
    case "Some":
      {
        return Either_right(option.value);
      }
  }
}, blockingOn);
/* @internal */
const effect_try_ = arg => {
  let evaluate;
  let onFailure = undefined;
  if (typeof arg === "function") {
    evaluate = arg;
  } else {
    evaluate = arg.try;
    onFailure = arg.catch;
  }
  return sync(() => {
    try {
      return evaluate();
    } catch (error) {
      throw makeEffectError(fail(onFailure ? onFailure(error) : error));
    }
  });
};
/* @internal */
const _catch = /*#__PURE__*/Function_dual(
// @ts-expect-error
3, (self, tag, options) => catchAll(self, e => {
  if (typeof e === "object" && e != null && tag in e && e[tag] === options.failure) {
    return options.onFailure(e);
  }
  return core_fail(e);
}));
/* @internal */
const catchAllDefect = /*#__PURE__*/Function_dual(2, (self, f) => catchAllCause(self, unified(cause => {
  const option = find(cause, _ => isDieType(_) ? mjs_Option_some(_) : Option_none());
  switch (option._tag) {
    case "None":
      {
        return failCause(cause);
      }
    case "Some":
      {
        return f(option.value.defect);
      }
  }
})));
/* @internal */
const catchSomeCause = /*#__PURE__*/Function_dual(2, (self, f) => matchCauseEffect(self, {
  onFailure: cause => {
    const option = f(cause);
    switch (option._tag) {
      case "None":
        {
          return failCause(cause);
        }
      case "Some":
        {
          return option.value;
        }
    }
  },
  onSuccess: succeed
}));
/* @internal */
const catchSomeDefect = /*#__PURE__*/Function_dual(2, (self, pf) => catchAllCause(self, unified(cause => {
  const option = find(cause, _ => isDieType(_) ? mjs_Option_some(_) : Option_none());
  switch (option._tag) {
    case "None":
      {
        return failCause(cause);
      }
    case "Some":
      {
        const optionEffect = pf(option.value.defect);
        return optionEffect._tag === "Some" ? optionEffect.value : failCause(cause);
      }
  }
})));
/* @internal */
const catchTag = /*#__PURE__*/Function_dual(3, (self, k, f) => catchAll(self, e => {
  if (Predicate_isObject(e) && "_tag" in e && e["_tag"] === k) {
    return f(e);
  }
  return core_fail(e);
}));
/** @internal */
const catchTags = /*#__PURE__*/Function_dual(2, (self, cases) => catchAll(self, e => {
  const keys = Object.keys(cases);
  if (Predicate_isObject(e) && "_tag" in e && keys.includes(e["_tag"])) {
    return cases[e["_tag"]](e);
  }
  return core_fail(e);
}));
/* @internal */
const cause = self => matchCause(self, {
  onFailure: Function_identity,
  onSuccess: () => cause_empty
});
/* @internal */
const effect_clockWith = Clock_clockWith;
/* @internal */
const clock = /*#__PURE__*/effect_clockWith(succeed);
/* @internal */
const delay = /*#__PURE__*/Function_dual(2, (self, duration) => core_zipRight(Clock_sleep(duration), self));
/* @internal */
const descriptorWith = f => withFiberRuntime((state, status) => f({
  id: state.id(),
  status,
  interruptors: interruptors(state.getFiberRef(currentInterruptedCause))
}));
/* @internal */
const allowInterrupt = /*#__PURE__*/descriptorWith(descriptor => mjs_HashSet_size(descriptor.interruptors) > 0 ? core_interrupt : core_unit);
/* @internal */
const descriptor = /*#__PURE__*/descriptorWith(succeed);
/* @internal */
const diffFiberRefs = self => summarized(self, getFiberRefs, patch_diff);
/* @internal */
const effect_Do = /*#__PURE__*/succeed({});
/* @internal */
const effect_bind = /*#__PURE__*/Function_dual(3, (self, tag, f) => core_flatMap(self, k => core_map(f(k), a => ({
  ...k,
  [tag]: a
}))));
/* @internal */
const effect_bindTo = /*#__PURE__*/Function_dual(2, (self, tag) => core_map(self, a => ({
  [tag]: a
})));
/* @internal */
const bindValue = /*#__PURE__*/Function_dual(3, (self, tag, f) => core_map(self, k => ({
  ...k,
  [tag]: f(k)
})));
/* @internal */
const dropUntil = /*#__PURE__*/Function_dual(2, (elements, predicate) => suspend(() => {
  const iterator = elements[Symbol.iterator]();
  const builder = [];
  let next;
  let dropping = succeed(false);
  let i = 0;
  while ((next = iterator.next()) && !next.done) {
    const a = next.value;
    const index = i++;
    dropping = core_flatMap(dropping, bool => {
      if (bool) {
        builder.push(a);
        return succeed(true);
      }
      return predicate(a, index);
    });
  }
  return core_map(dropping, () => builder);
}));
/* @internal */
const effect_dropWhile = /*#__PURE__*/Function_dual(2, (elements, f) => suspend(() => {
  const iterator = elements[Symbol.iterator]();
  const builder = [];
  let next;
  let dropping = succeed(true);
  let i = 0;
  while ((next = iterator.next()) && !next.done) {
    const a = next.value;
    const index = i++;
    dropping = core_flatMap(dropping, d => core_map(d ? f(a, index) : succeed(false), b => {
      if (!b) {
        builder.push(a);
      }
      return b;
    }));
  }
  return core_map(dropping, () => builder);
}));
/* @internal */
const contextWith = f => core_map(context(), f);
/* @internal */
const eventually = self => core_orElse(self, () => core_flatMap(yieldNow(), () => eventually(self)));
/* @internal */
const effect_filterMap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (elements, pf) => core.map(core.forEachSequential(elements, identity), ReadonlyArray.filterMap(pf)))));
/* @internal */
const filterOrDie = /*#__PURE__*/Function_dual(3, (self, filter, orDieWith) => filterOrElse(self, filter, () => dieSync(orDieWith)));
/* @internal */
const filterOrDieMessage = /*#__PURE__*/Function_dual(3, (self, filter, message) => filterOrElse(self, filter, () => dieMessage(message)));
/* @internal */
const filterOrElse = /*#__PURE__*/Function_dual(3, (self, filter, orElse) => core_flatMap(self, a => filter(a) ? succeed(a) : orElse(a)));
/* @internal */
const filterOrFail = /*#__PURE__*/Function_dual(3, (self, filter, orFailWith) => filterOrElse(self, filter, a => failSync(() => orFailWith(a))));
/* @internal */
const effect_findFirst = /*#__PURE__*/Function_dual(2, (elements, f) => suspend(() => {
  const iterator = elements[Symbol.iterator]();
  const next = iterator.next();
  if (!next.done) {
    return findLoop(iterator, 0, f, next.value);
  }
  return succeed(Option_none());
}));
const findLoop = (iterator, index, f, value) => core_flatMap(f(value, index), result => {
  if (result) {
    return succeed(mjs_Option_some(value));
  }
  const next = iterator.next();
  if (!next.done) {
    return findLoop(iterator, index + 1, f, next.value);
  }
  return succeed(Option_none());
});
/* @internal */
const firstSuccessOf = effects => suspend(() => {
  const list = Chunk_fromIterable(effects);
  if (!isNonEmpty(list)) {
    return dieSync(() => IllegalArgumentException(`Received an empty collection of effects`));
  }
  return reduce(Chunk_headNonEmpty(list), (left, right) => core_orElse(left, () => right))(Chunk_tailNonEmpty(list));
});
/* @internal */
const flipWith = /*#__PURE__*/Function_dual(2, (self, f) => core_flip(f(core_flip(self))));
/* @internal */
const effect_match = /*#__PURE__*/Function_dual(2, (self, {
  onFailure,
  onSuccess
}) => matchEffect(self, {
  onFailure: e => succeed(onFailure(e)),
  onSuccess: a => succeed(onSuccess(a))
}));
/* @internal */
const effect_every = /*#__PURE__*/Function_dual(2, (elements, f) => suspend(() => forAllLoop(elements[Symbol.iterator](), 0, f)));
const forAllLoop = (iterator, index, f) => {
  const next = iterator.next();
  return next.done ? succeed(true) : core_flatMap(f(next.value, index), b => b ? forAllLoop(iterator, index + 1, f) : succeed(b));
};
/* @internal */
const forever = self => {
  const loop = core_flatMap(core_flatMap(self, () => yieldNow()), () => loop);
  return loop;
};
/** @internal */
class EffectGen {
  constructor(value) {
    this.value = value;
  }
  [Symbol.iterator]() {
    return new SingleShotGen(this);
  }
}
const effect_adapter = function () {
  let x = arguments[0];
  for (let i = 1; i < arguments.length; i++) {
    x = arguments[i](x);
  }
  return new EffectGen(x);
};
/**
 * Inspired by https://github.com/tusharmath/qio/pull/22 (revised)
  @internal */
const effect_gen = f => suspend(() => {
  const iterator = f(effect_adapter);
  const state = iterator.next();
  const run = state => state.done ? succeed(state.value) : core_flatMap(val => run(iterator.next(val)))(state.value.value);
  return run(state);
});
/* @internal */
const getFiberRefs = /*#__PURE__*/withFiberRuntime(state => succeed(state.unsafeGetFiberRefs()));
/* @internal */
const effect_head = self => matchEffect(self, {
  onFailure: e => core_fail(mjs_Option_some(e)),
  onSuccess: as => {
    const iterator = as[Symbol.iterator]();
    const next = iterator.next();
    if (next.done) {
      return core_fail(Option_none());
    }
    return succeed(next.value);
  }
});
/* @internal */
const ignore = self => effect_match(self, {
  onFailure: Function_constVoid,
  onSuccess: Function_constVoid
});
/* @internal */
const ignoreLogged = self => matchCauseEffect(self, {
  onFailure: cause => logDebug(cause, "An error was silently ignored because it is not anticipated to be useful"),
  onSuccess: () => core_unit
});
/* @internal */
const inheritFiberRefs = childFiberRefs => updateFiberRefs((parentFiberId, parentFiberRefs) => FiberRefs_joinAs(parentFiberRefs, parentFiberId, childFiberRefs));
/* @internal */
const effect_isFailure = self => effect_match(self, {
  onFailure: Function_constTrue,
  onSuccess: constFalse
});
/* @internal */
const isSuccess = self => effect_match(self, {
  onFailure: constFalse,
  onSuccess: Function_constTrue
});
/* @internal */
const iterate = (initial, options) => suspend(() => {
  if (options.while(initial)) {
    return core_flatMap(options.body(initial), z2 => iterate(z2, options));
  }
  return succeed(initial);
});
const logWithLevel = level => (messageOrCause, supplementary) => {
  const levelOption = fromNullable(level);
  let message;
  let cause;
  if (isCause(messageOrCause)) {
    cause = messageOrCause;
    message = supplementary ?? "";
  } else {
    message = messageOrCause;
    cause = supplementary ?? cause_empty;
  }
  return withFiberRuntime(fiberState => {
    fiberState.log(message, cause, levelOption);
    return core_unit;
  });
};
/** @internal */
const log = /*#__PURE__*/logWithLevel();
/** @internal */
const logTrace = /*#__PURE__*/logWithLevel(Trace);
/** @internal */
const logDebug = /*#__PURE__*/logWithLevel(Debug);
/** @internal */
const logInfo = /*#__PURE__*/logWithLevel(Info);
/** @internal */
const logWarning = /*#__PURE__*/logWithLevel(Warning);
/** @internal */
const logError = /*#__PURE__*/logWithLevel(Level_Error);
/** @internal */
const logFatal = /*#__PURE__*/logWithLevel(Fatal);
/* @internal */
const withLogSpan = /*#__PURE__*/Function_dual(2, (effect, label) => core_flatMap(Clock_currentTimeMillis, now => fiberRefLocallyWith(effect, currentLogSpan, List_prepend(Span_make(label, now)))));
/* @internal */
const logAnnotations = /*#__PURE__*/fiberRefGet(currentLogAnnotations);
/* @internal */
// @ts-expect-error
const loop = (initial, options) => options.discard ? loopDiscard(initial, options.while, options.step, options.body) : core_map(loopInternal(initial, options.while, options.step, options.body), x => Array.from(x));
const loopInternal = (initial, cont, inc, body) => suspend(() => cont(initial) ? core_flatMap(body(initial), a => core_map(loopInternal(inc(initial), cont, inc, body), List_prepend(a))) : sync(() => List_empty()));
const loopDiscard = (initial, cont, inc, body) => suspend(() => cont(initial) ? core_flatMap(body(initial), () => loopDiscard(inc(initial), cont, inc, body)) : core_unit);
/* @internal */
const effect_mapAccum = /*#__PURE__*/Function_dual(3, (elements, zero, f) => suspend(() => {
  const iterator = elements[Symbol.iterator]();
  const builder = [];
  let result = succeed(zero);
  let next;
  let i = 0;
  while (!(next = iterator.next()).done) {
    const index = i++;
    result = core_flatMap(result, state => core_map(f(state, next.value, index), ([z, b]) => {
      builder.push(b);
      return z;
    }));
  }
  return core_map(result, z => [z, builder]);
}));
/* @internal */
const mapErrorCause = /*#__PURE__*/Function_dual(2, (self, f) => matchCauseEffect(self, {
  onFailure: c => failCauseSync(() => f(c)),
  onSuccess: succeed
}));
/* @internal */
const memoize = self => core_flatMap(deferred => core_map(complete => core_zipRight(complete, core_flatMap(([patch, a]) => core_as(patchFiberRefs(patch), a))(deferredAwait(deferred))))(once(intoDeferred(deferred)(diffFiberRefs(self)))))(deferredMake());
/* @internal */
const effect_merge = self => matchEffect(self, {
  onFailure: e => succeed(e),
  onSuccess: succeed
});
/* @internal */
const negate = self => core_map(self, b => !b);
/* @internal */
const effect_none = self => matchEffect(self, {
  onFailure: e => core_fail(mjs_Option_some(e)),
  onSuccess: option => {
    switch (option._tag) {
      case "None":
        {
          return core_unit;
        }
      case "Some":
        {
          return core_fail(Option_none());
        }
    }
  }
});
/* @internal */
const once = self => core_map(Ref_make(true), ref => core_asUnit(whenEffect(self, Ref_getAndSet(ref, false))));
/* @internal */
const effect_option = self => matchEffect(self, {
  onFailure: () => succeed(Option_none()),
  onSuccess: a => succeed(mjs_Option_some(a))
});
/* @internal */
const orElseFail = /*#__PURE__*/Function_dual(2, (self, evaluate) => core_orElse(self, () => failSync(evaluate)));
/* @internal */
const orElseSucceed = /*#__PURE__*/Function_dual(2, (self, evaluate) => core_orElse(self, () => sync(evaluate)));
/* @internal */
const parallelErrors = self => matchCauseEffect(self, {
  onFailure: cause => {
    const errors = Array.from(cause_failures(cause));
    return errors.length === 0 ? failCause(cause) : core_fail(errors);
  },
  onSuccess: succeed
});
/* @internal */
const patchFiberRefs = patch => updateFiberRefs((fiberId, fiberRefs) => patch_patch(fiberId, fiberRefs)(patch));
/* @internal */
const promise = evaluate => evaluate.length >= 1 ? core_async((resolve, signal) => {
  evaluate(signal).then(a => resolve(exitSucceed(a))).catch(e => resolve(exitDie(e)));
}) : core_async(resolve => {
  ;
  evaluate().then(a => resolve(exitSucceed(a))).catch(e => resolve(exitDie(e)));
});
/* @internal */
const provideService = /*#__PURE__*/Function_dual(3, (self, tag, service) => provideServiceEffect(self, tag, succeed(service)));
/* @internal */
const provideServiceEffect = /*#__PURE__*/Function_dual(3, (self, tag, effect) => contextWithEffect(env => core_flatMap(effect, service => provideContext(self, Context_add(tag, service)(env)))));
/* @internal */
const effect_random = /*#__PURE__*/randomWith(succeed);
/* @internal */
const effect_reduce = /*#__PURE__*/Function_dual(3, (elements, zero, f) => ReadonlyArray_fromIterable(elements).reduce((acc, el, i) => core_flatMap(acc, a => f(a, el, i)), succeed(zero)));
/* @internal */
const effect_reduceRight = /*#__PURE__*/Function_dual(3, (elements, zero, f) => ReadonlyArray_fromIterable(elements).reduceRight((acc, el, i) => core_flatMap(acc, a => f(el, a, i)), succeed(zero)));
/* @internal */
const reduceWhile = /*#__PURE__*/Function_dual(3, (elements, zero, options) => core_flatMap(sync(() => elements[Symbol.iterator]()), iterator => reduceWhileLoop(iterator, 0, zero, options.while, options.body)));
const reduceWhileLoop = (iterator, index, state, predicate, f) => {
  const next = iterator.next();
  if (!next.done && predicate(state)) {
    return core_flatMap(f(state, next.value, index), nextState => reduceWhileLoop(iterator, index + 1, nextState, predicate, f));
  }
  return succeed(state);
};
/* @internal */
const repeatN = /*#__PURE__*/Function_dual(2, (self, n) => suspend(() => repeatNLoop(self, n)));
/* @internal */
const repeatNLoop = (self, n) => core_flatMap(self, a => n <= 0 ? succeed(a) : core_zipRight(yieldNow(), repeatNLoop(self, n - 1)));
/* @internal */
const sandbox = self => matchCauseEffect(self, {
  onFailure: core_fail,
  onSuccess: succeed
});
/* @internal */
const setFiberRefs = fiberRefs => suspend(() => FiberRefs_setAll(fiberRefs));
/* @internal */
const effect_sleep = Clock_sleep;
/* @internal */
const effect_some = self => matchEffect(self, {
  onFailure: e => core_fail(mjs_Option_some(e)),
  onSuccess: option => {
    switch (option._tag) {
      case "None":
        {
          return core_fail(Option_none());
        }
      case "Some":
        {
          return succeed(option.value);
        }
    }
  }
});
/* @internal */
const succeedNone = /*#__PURE__*/succeed( /*#__PURE__*/Option_none());
/* @internal */
const succeedSome = value => succeed(mjs_Option_some(value));
/* @internal */
const summarized = /*#__PURE__*/Function_dual(3, (self, summary, f) => core_flatMap(summary, start => core_flatMap(self, value => core_map(summary, end => [f(start, end), value]))));
/* @internal */
const tagMetrics = /*#__PURE__*/Function_dual(3, (self, key, value) => labelMetrics(self, [label_make(key, value)]));
/* @internal */
const labelMetrics = /*#__PURE__*/Function_dual(2, (self, labels) => labelMetricsSet(self, mjs_HashSet_fromIterable(labels)));
/* @internal */
const labelMetricsSet = /*#__PURE__*/Function_dual(2, (self, labels) => fiberRefLocallyWith(currentMetricLabels, set => mjs_HashSet_union(labels)(set))(self));
/* @internal */
const takeUntil = /*#__PURE__*/Function_dual(2, (elements, predicate) => suspend(() => {
  const iterator = elements[Symbol.iterator]();
  const builder = [];
  let next;
  let effect = succeed(false);
  let i = 0;
  while ((next = iterator.next()) && !next.done) {
    const a = next.value;
    const index = i++;
    effect = core_flatMap(effect, bool => {
      if (bool) {
        return succeed(true);
      }
      builder.push(a);
      return predicate(a, index);
    });
  }
  return core_map(effect, () => builder);
}));
/* @internal */
const effect_takeWhile = /*#__PURE__*/Function_dual(2, (elements, predicate) => suspend(() => {
  const iterator = elements[Symbol.iterator]();
  const builder = [];
  let next;
  let taking = succeed(true);
  let i = 0;
  while ((next = iterator.next()) && !next.done) {
    const a = next.value;
    const index = i++;
    taking = core_flatMap(taking, taking => core_map(bool => {
      if (bool) {
        builder.push(a);
      }
      return bool;
    })(taking ? predicate(a, index) : succeed(false)));
  }
  return core_map(taking, () => builder);
}));
/* @internal */
const tapBoth = /*#__PURE__*/Function_dual(2, (self, {
  onFailure,
  onSuccess
}) => matchCauseEffect(self, {
  onFailure: cause => {
    const either = failureOrCause(cause);
    switch (either._tag) {
      case "Left":
        {
          return core_zipRight(onFailure(either.left), failCause(cause));
        }
      case "Right":
        {
          return failCause(cause);
        }
    }
  },
  onSuccess: a => core_as(onSuccess(a), a)
}));
/* @internal */
const tapDefect = /*#__PURE__*/Function_dual(2, (self, f) => catchAllCause(self, cause => match(keepDefects(cause), {
  onNone: () => failCause(cause),
  onSome: a => core_zipRight(f(a), failCause(cause))
})));
/* @internal */
const tapError = /*#__PURE__*/Function_dual(2, (self, f) => matchCauseEffect(self, {
  onFailure: cause => {
    const either = failureOrCause(cause);
    switch (either._tag) {
      case "Left":
        {
          return core_zipRight(f(either.left), failCause(cause));
        }
      case "Right":
        {
          return failCause(cause);
        }
    }
  },
  onSuccess: succeed
}));
/* @internal */
const tapErrorTag = /*#__PURE__*/Function_dual(3, (self, k, f) => tapError(self, e => {
  if (Predicate_isObject(e) && "_tag" in e && e["_tag"] === k) {
    return f(e);
  }
  return core_unit;
}));
/* @internal */
const tapErrorCause = /*#__PURE__*/Function_dual(2, (self, f) => matchCauseEffect(self, {
  onFailure: cause => core_zipRight(f(cause), failCause(cause)),
  onSuccess: succeed
}));
/* @internal */
const timed = self => timedWith(self, Clock_currentTimeNanos);
/* @internal */
const timedWith = /*#__PURE__*/Function_dual(2, (self, nanos) => summarized(self, nanos, (start, end) => Duration_nanos(end - start)));
/* @internal */
const effect_tracerWith = Tracer_tracerWith;
/** @internal */
const tracer = /*#__PURE__*/effect_tracerWith(succeed);
/* @internal */
const tryPromise = arg => {
  let evaluate;
  let catcher = undefined;
  if (typeof arg === "function") {
    evaluate = arg;
  } else {
    evaluate = arg.try;
    catcher = arg.catch;
  }
  if (evaluate.length >= 1) {
    return suspend(() => {
      const controller = new AbortController();
      return core_flatMap(effect_try_(() => evaluate(controller.signal)), promise => core_async(resolve => {
        promise.then(a => resolve(exitSucceed(a))).catch(e => resolve(exitFail(catcher ? catcher(e) : e)));
        return sync(() => controller.abort());
      }));
    });
  }
  return core_flatMap(effect_try_(arg), promise => core_async(resolve => {
    promise.then(a => resolve(exitSucceed(a))).catch(e => resolve(exitFail(catcher ? catcher(e) : e)));
  }));
};
/* @internal */
const tryMap = /*#__PURE__*/Function_dual(2, (self, options) => core_flatMap(self, a => effect_try_({
  try: () => options.try(a),
  catch: options.catch
})));
/* @internal */
const tryMapPromise = /*#__PURE__*/Function_dual(2, (self, options) => core_flatMap(self, a => tryPromise({
  try: options.try.length >= 1 ? signal => options.try(a, signal) : () => options.try(a),
  catch: options.catch
})));
/* @internal */
const unless = /*#__PURE__*/Function_dual(2, (self, predicate) => suspend(() => predicate() ? succeedNone : asSome(self)));
/* @internal */
const unlessEffect = /*#__PURE__*/Function_dual(2, (self, predicate) => core_flatMap(predicate, b => b ? succeedNone : asSome(self)));
/* @internal */
const unsandbox = self => mapErrorCause(self, cause_flatten);
/* @internal */
const updateFiberRefs = f => withFiberRuntime(state => {
  state.setFiberRefs(f(state.id(), state.unsafeGetFiberRefs()));
  return core_unit;
});
/* @internal */
const updateService = /*#__PURE__*/Function_dual(3, (self, tag, f) => mapInputContext(self, context => Context_add(context, tag, f(mjs_Context_unsafeGet(context, tag)))));
/* @internal */
const when = /*#__PURE__*/Function_dual(2, (self, predicate) => suspend(() => predicate() ? core_map(self, mjs_Option_some) : succeed(Option_none())));
/* @internal */
const whenFiberRef = /*#__PURE__*/Function_dual(3, (self, fiberRef, predicate) => core_flatMap(fiberRefGet(fiberRef), s => predicate(s) ? core_map(self, a => [s, mjs_Option_some(a)]) : succeed([s, Option_none()])));
/* @internal */
const whenRef = /*#__PURE__*/Function_dual(3, (self, ref, predicate) => core_flatMap(Ref_get(ref), s => predicate(s) ? core_map(self, a => [s, mjs_Option_some(a)]) : succeed([s, Option_none()])));
/* @internal */
const withMetric = /*#__PURE__*/Function_dual(2, (self, metric) => metric(self));
/** @internal */
const serviceFunctionEffect = (service, f) => (...args) => core_flatMap(service, a => f(a)(...args));
/** @internal */
const serviceFunction = (service, f) => (...args) => core_map(service, a => f(a)(...args));
/** @internal */
const serviceFunctions = tag => new Proxy({}, {
  get(_target, prop, _receiver) {
    return (...args) => core_flatMap(tag, s => s[prop](...args));
  }
});
/** @internal */
const serviceConstants = tag => new Proxy({}, {
  get(_target, prop, _receiver) {
    return core_flatMap(tag, s => s[prop]);
  }
});
/** @internal */
const serviceMembers = tag => ({
  functions: serviceFunctions(tag),
  constants: serviceConstants(tag)
});
// -----------------------------------------------------------------------------
// tracing
// -----------------------------------------------------------------------------
/* @internal */
const annotateCurrentSpan = function () {
  const args = arguments;
  return core_flatMap(currentSpan, span => span._tag === "Some" ? sync(() => {
    if (typeof args[0] === "string") {
      span.value.attribute(args[0], args[1]);
    } else {
      for (const key in args[0]) {
        span.value.attribute(key, args[0][key]);
      }
    }
  }) : core_unit);
};
/* @internal */
const annotateSpans = /*#__PURE__*/Function_dual(args => isEffect(args[0]), function () {
  const args = arguments;
  return fiberRefLocallyWith(args[0], currentTracerSpanAnnotations, typeof args[1] === "string" ? HashMap_set(args[1], args[2]) : annotations => Object.entries(args[1]).reduce((acc, [key, value]) => HashMap_set(acc, key, value), annotations));
});
/* @internal */
const currentParentSpan = /*#__PURE__*/core_map( /*#__PURE__*/fiberRefGet(currentTracerSpan), List_head);
/* @internal */
const currentSpan = /*#__PURE__*/core_map( /*#__PURE__*/fiberRefGet(currentTracerSpan), /*#__PURE__*/List_findFirst(span => span._tag === "Span"));
const bigint0 = /*#__PURE__*/BigInt(0);
/** @internal */
const currentTimeNanosTracing = /*#__PURE__*/fiberRefGetWith(currentTracerTimingEnabled, enabled => enabled ? Clock_currentTimeNanos : succeed(bigint0));
/* @internal */
const linkSpans = /*#__PURE__*/Function_dual(args => isEffect(args[0]), (self, span, attributes) => fiberRefLocallyWith(self, currentTracerSpanLinks, Chunk_append({
  _tag: "SpanLink",
  span,
  attributes: attributes ?? {}
})));
/** @internal */
const makeSpan = (name, options) => effect_tracerWith(tracer => core_flatMap(options?.parent ? succeedSome(options.parent) : options?.root ? succeedNone : currentParentSpan, parent => core_flatMap(fiberRefGet(currentTracerSpanAnnotations), annotations => core_flatMap(fiberRefGet(currentTracerSpanLinks), links => core_flatMap(currentTimeNanosTracing, startTime => sync(() => {
  const linksArray = options?.links ? [...toReadonlyArray(links), ...options.links] : toReadonlyArray(links);
  const span = tracer.span(name, parent, options?.context ?? mjs_Context_empty(), linksArray, startTime);
  mjs_HashMap_forEach(annotations, (value, key) => span.attribute(key, value));
  Object.entries(options?.attributes ?? {}).forEach(([k, v]) => span.attribute(k, v));
  return span;
}))))));
/* @internal */
const spanAnnotations = /*#__PURE__*/fiberRefGet(currentTracerSpanAnnotations);
/* @internal */
const spanLinks = /*#__PURE__*/fiberRefGet(currentTracerSpanLinks);
/** @internal */
const useSpan = (name, ...args) => {
  const options = args.length === 1 ? undefined : args[0];
  const evaluate = args[args.length - 1];
  return acquireUseRelease(makeSpan(name, options), evaluate, (span, exit) => core_flatMap(currentTimeNanosTracing, endTime => sync(() => span.end(endTime, exit))));
};
/** @internal */
const withParentSpan = /*#__PURE__*/Function_dual(2, (self, span) => fiberRefLocallyWith(self, currentTracerSpan, List_prepend(span)));
/** @internal */
const withSpan = /*#__PURE__*/Function_dual(args => typeof args[0] !== "string", (self, name, options) => useSpan(name, options ?? {}, span => withParentSpan(self, span)));
// -------------------------------------------------------------------------------------
// optionality
// -------------------------------------------------------------------------------------
/* @internal */
const effect_fromNullable = evaluate => suspend(() => {
  const a = evaluate();
  if (a === null || a === undefined) {
    return core_fail(NoSuchElementException());
  }
  return succeed(a);
});
/* @internal */
const optionFromOptional = self => catchAll(core_map(self, mjs_Option_some), error => isNoSuchElementException(error) ? succeedNone : core_fail(error));
//# sourceMappingURL=effect.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/MutableHashMap.mjs
/**
 * @since 1.0.0
 */





const MutableHashMap_TypeId = /*#__PURE__*/Symbol.for("@effect/data/MutableHashMap");
/** @internal */
class MutableHashMapImpl {
  constructor() {
    this._id = MutableHashMap_TypeId;
    this.backingMap = MutableRef_make(mjs_HashMap_empty());
  }
  [Symbol.iterator]() {
    return this.backingMap.current[Symbol.iterator]();
  }
  toString() {
    return `MutableHashMap(${Array.from(this).map(([k, v]) => `[${String(k)}, ${String(v)}]`).join(", ")})`;
  }
  toJSON() {
    return {
      _tag: "MutableHashMap",
      values: Array.from(this)
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/**
 * @since 1.0.0
 * @category constructors
 */
const MutableHashMap_empty = () => new MutableHashMapImpl();
/**
 * @since 1.0.0
 * @category constructors
 */
const MutableHashMap_make = (...entries) => MutableHashMap_fromIterable(entries);
/**
 * @since 1.0.0
 * @category conversions
 */
const MutableHashMap_fromIterable = entries => {
  const map = MutableHashMap_empty();
  for (const entry of entries) {
    MutableHashMap_set(map, entry[0], entry[1]);
  }
  return map;
};
/**
 * @since 1.0.0
 * @category elements
 */
const MutableHashMap_get = /*#__PURE__*/Function_dual(2, (self, key) => mjs_HashMap_get(self.backingMap.current, key));
/**
 * @since 1.0.0
 * @category elements
 */
const MutableHashMap_has = /*#__PURE__*/Function_dual(2, (self, key) => Option_isSome(MutableHashMap_get(self, key)));
/**
 * Updates the value of the specified key within the `MutableHashMap` if it exists.
 *
 * @since 1.0.0
 */
const MutableHashMap_modify = /*#__PURE__*/(/* unused pure expression or super */ null && (Dual.dual(3, (self, key, f) => {
  MutableRef.update(self.backingMap, HashMap.modify(key, f));
  return self;
})));
/**
 * Set or remove the specified key in the `MutableHashMap` using the specified
 * update function.
 *
 * @since 1.0.0
 */
const MutableHashMap_modifyAt = /*#__PURE__*/(/* unused pure expression or super */ null && (Dual.dual(3, (self, key, f) => {
  const result = f(MutableHashMap_get(self, key));
  if (Option.isSome(result)) {
    MutableHashMap_set(self, key, result.value);
  } else {
    MutableHashMap_remove(self, key);
  }
  return self;
})));
/**
 * @since 1.0.0
 */
const MutableHashMap_remove = /*#__PURE__*/Function_dual(2, (self, key) => {
  MutableRef_update(self.backingMap, mjs_HashMap_remove(key));
  return self;
});
/**
 * @since 1.0.0
 */
const MutableHashMap_set = /*#__PURE__*/Function_dual(3, (self, key, value) => {
  MutableRef_update(self.backingMap, HashMap_set(key, value));
  return self;
});
/**
 * @since 1.0.0
 * @category elements
 */
const MutableHashMap_size = self => mjs_HashMap_size(MutableRef_get(self.backingMap));
//# sourceMappingURL=MutableHashMap.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Exit.mjs

/**
 * Returns `true` if the specified value is an `Exit`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const isExit = exitIsExit;
/**
 * Returns `true` if the specified `Exit` is a `Failure`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Exit_isFailure = exitIsFailure;
/**
 * Returns `true` if the specified `Exit` is a `Success`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Exit_isSuccess = exitIsSuccess;
/**
 * Returns `true` if the specified exit is a `Failure` **and** the `Cause` of
 * the failure was due to interruption, `false` otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const Exit_isInterrupted = exitIsInterrupted;
/**
 * Maps the `Success` value of the specified exit to the provided constant
 * value.
 *
 * @since 1.0.0
 * @category mapping
 */
const Exit_as = exitAs;
/**
 * Maps the `Success` value of the specified exit to a void.
 *
 * @since 1.0.0
 * @category mapping
 */
const Exit_asUnit = exitAsUnit;
/**
 * Returns a `Some<Cause<E>>` if the specified exit is a `Failure`, `None`
 * otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const causeOption = exitCauseOption;
/**
 * Collects all of the specified exit values into a `Some<Exit<E, List<A>>>`. If
 * the provided iterable contains no elements, `None` will be returned.
 *
 * @since 1.0.0
 * @category constructors
 */
const Exit_all = exitCollectAll;
/**
 * Constructs a new `Exit.Failure` from the specified unrecoverable defect.
 *
 * @since 1.0.0
 * @category constructors
 */
const Exit_die = exitDie;
/**
 * Executes the predicate on the value of the specified exit if it is a
 * `Success`, otherwise returns `false`.
 *
 * @since 1.0.0
 * @category elements
 */
const Exit_exists = exitExists;
/**
 * Constructs a new `Exit.Failure` from the specified recoverable error of type
 * `E`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Exit_fail = exitFail;
/**
 * Constructs a new `Exit.Failure` from the specified `Cause` of type `E`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Exit_failCause = exitFailCause;
/**
 * @since 1.0.0
 * @category sequencing
 */
const Exit_flatMap = exitFlatMap;
/**
 * @since 1.0.0
 * @category sequencing
 */
const flatMapEffect = exitFlatMapEffect;
/**
 * @since 1.0.0
 * @category sequencing
 */
const Exit_flatten = exitFlatten;
/**
 * @since 1.0.0
 * @category traversing
 */
const forEachEffect = exitForEachEffect;
/**
 * Converts an `Either<E, A>` into an `Exit<E, A>`.
 *
 * @since 1.0.0
 * @category conversions
 */
const fromEither = exitFromEither;
/**
 * Converts an `Option<A>` into an `Exit<void, A>`.
 *
 * @since 1.0.0
 * @category conversions
 */
const Exit_fromOption = exitFromOption;
/**
 * Returns the `A` if specified exit is a `Success`, otherwise returns the
 * alternate `A` value computed from the specified function which receives the
 * `Cause<E>` of the exit `Failure`.
 *
 * @since 1.0.0
 * @category getters
 */
const Exit_getOrElse = exitGetOrElse;
/**
 * Constructs a new `Exit.Failure` from the specified `FiberId` indicating that
 * the `Fiber` running an `Effect` workflow was terminated due to interruption.
 *
 * @since 1.0.0
 * @category constructors
 */
const Exit_interrupt = exitInterrupt;
/**
 * Maps over the `Success` value of the specified exit using the provided
 * function.
 *
 * @since 1.0.0
 * @category mapping
 */
const Exit_map = exitMap;
/**
 * Maps over the `Success` and `Failure` cases of the specified exit using the
 * provided functions.
 *
 * @since 1.0.0
 * @category mapping
 */
const Exit_mapBoth = exitMapBoth;
/**
 * Maps over the error contained in the `Failure` of the specified exit using
 * the provided function.
 *
 * @since 1.0.0
 * @category mapping
 */
const Exit_mapError = exitMapError;
/**
 * Maps over the `Cause` contained in the `Failure` of the specified exit using
 * the provided function.
 *
 * @since 1.0.0
 * @category mapping
 */
const Exit_mapErrorCause = exitMapErrorCause;
/**
 * @since 1.0.0
 * @category folding
 */
const Exit_match = exitMatch;
/**
 * @since 1.0.0
 * @category folding
 */
const Exit_matchEffect = exitMatchEffect;
/**
 * Constructs a new `Exit.Success` containing the specified value of type `A`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Exit_succeed = exitSucceed;
/**
 * Removes any annotation from the failure cause
 *
 * @since 1.0.0
 * @category filtering
 */
const Exit_unannotate = exitUnannotate;
/**
 * Represents an `Exit` which succeeds with `undefined`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Exit_unit = exitUnit;
/**
 * Sequentially zips the this result with the specified result or else returns
 * the failed `Cause<E | E2>`.
 *
 * @since 1.0.0
 * @category zipping
 */
const Exit_zip = exitZip;
/**
 * Sequentially zips the this result with the specified result discarding the
 * second element of the tuple or else returns the failed `Cause<E | E2>`.
 *
 * @since 1.0.0
 * @category zipping
 */
const Exit_zipLeft = exitZipLeft;
/**
 * Sequentially zips the this result with the specified result discarding the
 * first element of the tuple or else returns the failed `Cause<E | E2>`.
 *
 * @since 1.0.0
 * @category zipping
 */
const Exit_zipRight = exitZipRight;
/**
 * Parallelly zips the this result with the specified result or else returns
 * the failed `Cause<E | E2>`.
 *
 * @since 1.0.0
 * @category zipping
 */
const zipPar = exitZipPar;
/**
 * Parallelly zips the this result with the specified result discarding the
 * second element of the tuple or else returns the failed `Cause<E | E2>`.
 *
 * @since 1.0.0
 * @category zipping
 */
const zipParLeft = exitZipParLeft;
/**
 * Parallelly zips the this result with the specified result discarding the
 * first element of the tuple or else returns the failed `Cause<E | E2>`.
 *
 * @since 1.0.0
 * @category zipping
 */
const zipParRight = exitZipParRight;
/**
 * Zips this exit together with that exit using the specified combination
 * functions.
 *
 * @since 1.0.0
 * @category zipping
 */
const Exit_zipWith = exitZipWith;
//# sourceMappingURL=Exit.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/executionStrategy.mjs

/** @internal */
const executionStrategy_OP_SEQUENTIAL = "Sequential";
/** @internal */
const executionStrategy_OP_PARALLEL = "Parallel";
/** @internal */
const OP_PARALLEL_N = "ParallelN";
/** @internal */
const executionStrategy_sequential = {
  _tag: executionStrategy_OP_SEQUENTIAL
};
/** @internal */
const executionStrategy_parallel = {
  _tag: executionStrategy_OP_PARALLEL
};
/** @internal */
const parallelN = parallelism => ({
  _tag: OP_PARALLEL_N,
  parallelism
});
/** @internal */
const isSequential = self => self._tag === executionStrategy_OP_SEQUENTIAL;
/** @internal */
const isParallel = self => self._tag === executionStrategy_OP_PARALLEL;
/** @internal */
const isParallelN = self => self._tag === OP_PARALLEL_N;
/** @internal */
const executionStrategy_match = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(4, (self, onSequential, onParallel, onParallelN) => {
  switch (self._tag) {
    case executionStrategy_OP_SEQUENTIAL:
      {
        return onSequential();
      }
    case executionStrategy_OP_PARALLEL:
      {
        return onParallel();
      }
    case OP_PARALLEL_N:
      {
        return onParallelN(self.parallelism);
      }
  }
})));
//# sourceMappingURL=executionStrategy.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/fiberStatus.mjs
var fiberStatus_a, fiberStatus_b, fiberStatus_c;


const FiberStatusSymbolKey = "@effect/io/Fiber/Status";
/** @internal */
const FiberStatusTypeId = /*#__PURE__*/Symbol.for(FiberStatusSymbolKey);
/** @internal */
const OP_DONE = "Done";
/** @internal */
const OP_RUNNING = "Running";
/** @internal */
const OP_SUSPENDED = "Suspended";
/** @internal */
class Done {
  constructor() {
    this[fiberStatus_a] = FiberStatusTypeId;
    this._tag = OP_DONE;
  }
  [(fiberStatus_a = FiberStatusTypeId, symbol)]() {
    return combine(Hash_hash(this._tag))(Hash_hash(FiberStatusSymbolKey));
  }
  [Equal_symbol](that) {
    return isFiberStatus(that) && that._tag === OP_DONE;
  }
}
/** @internal */
class Running {
  constructor(runtimeFlags) {
    this.runtimeFlags = runtimeFlags;
    this[fiberStatus_b] = FiberStatusTypeId;
    this._tag = OP_RUNNING;
  }
  [(fiberStatus_b = FiberStatusTypeId, symbol)]() {
    return combine(Hash_hash(this.runtimeFlags))(combine(Hash_hash(this._tag))(Hash_hash(FiberStatusSymbolKey)));
  }
  [Equal_symbol](that) {
    return isFiberStatus(that) && that._tag === OP_RUNNING && this.runtimeFlags === that.runtimeFlags;
  }
}
/** @internal */
class Suspended {
  constructor(runtimeFlags, blockingOn) {
    this.runtimeFlags = runtimeFlags;
    this.blockingOn = blockingOn;
    this[fiberStatus_c] = FiberStatusTypeId;
    this._tag = OP_SUSPENDED;
  }
  [(fiberStatus_c = FiberStatusTypeId, symbol)]() {
    return combine(Hash_hash(this.blockingOn))(combine(Hash_hash(this.runtimeFlags))(combine(Hash_hash(this._tag))(Hash_hash(FiberStatusSymbolKey))));
  }
  [Equal_symbol](that) {
    return isFiberStatus(that) && that._tag === OP_SUSPENDED && this.runtimeFlags === that.runtimeFlags && equals(this.blockingOn, that.blockingOn);
  }
}
/** @internal */
const fiberStatus_done = /*#__PURE__*/new Done();
/** @internal */
const running = runtimeFlags => new Running(runtimeFlags);
/** @internal */
const suspended = (runtimeFlags, blockingOn) => new Suspended(runtimeFlags, blockingOn);
/** @internal */
const isFiberStatus = u => typeof u === "object" && u != null && FiberStatusTypeId in u;
/** @internal */
const isDone = self => self._tag === OP_DONE;
/** @internal */
const isRunning = self => self._tag === OP_RUNNING;
/** @internal */
const isSuspended = self => self._tag === OP_SUSPENDED;
//# sourceMappingURL=fiberStatus.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Fiber/Status.mjs

/**
 * @since 1.0.0
 * @category symbols
 */
const Status_FiberStatusTypeId = FiberStatusTypeId;
/**
 * @since 1.0.0
 * @category constructors
 */
const Status_done = fiberStatus_done;
/**
 * @since 1.0.0
 * @category constructors
 */
const Status_running = running;
/**
 * @since 1.0.0
 * @category constructors
 */
const Status_suspended = suspended;
/**
 * Returns `true` if the specified value is a `FiberStatus`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Status_isFiberStatus = isFiberStatus;
/**
 * Returns `true` if the specified `FiberStatus` is `Done`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Status_isDone = isDone;
/**
 * Returns `true` if the specified `FiberStatus` is `Running`, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Status_isRunning = isRunning;
/**
 * Returns `true` if the specified `FiberStatus` is `Suspended`, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Status_isSuspended = isSuspended;
//# sourceMappingURL=Status.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/fiberMessage.mjs
/** @internal */
const OP_INTERRUPT_SIGNAL = "InterruptSignal";
/** @internal */
const OP_STATEFUL = "Stateful";
/** @internal */
const OP_RESUME = "Resume";
/** @internal */
const OP_YIELD_NOW = "YieldNow";
/** @internal */
const interruptSignal = cause => ({
  _tag: OP_INTERRUPT_SIGNAL,
  cause
});
/** @internal */
const stateful = onFiber => ({
  _tag: OP_STATEFUL,
  onFiber
});
/** @internal */
const resume = effect => ({
  _tag: OP_RESUME,
  effect
});
/** @internal */
const fiberMessage_yieldNow = () => ({
  _tag: OP_YIELD_NOW
});
//# sourceMappingURL=fiberMessage.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/fiberScope.mjs
var fiberScope_a, fiberScope_b;



/** @internal */
const FiberScopeSymbolKey = "@effect/io/Fiber/Scope";
/** @internal */
const FiberScopeTypeId = /*#__PURE__*/Symbol.for(FiberScopeSymbolKey);
/** @internal */
class Global {
  constructor() {
    this[fiberScope_a] = FiberScopeTypeId;
    this.fiberId = Id_none;
    this.roots = new Set();
  }
  add(_runtimeFlags, child) {
    this.roots.add(child);
    child.unsafeAddObserver(() => {
      this.roots.delete(child);
    });
  }
}
fiberScope_a = FiberScopeTypeId;
/** @internal */
class Local {
  constructor(fiberId, parent) {
    this.fiberId = fiberId;
    this.parent = parent;
    this[fiberScope_b] = FiberScopeTypeId;
  }
  add(_runtimeFlags, child) {
    this.parent.tell(stateful(parentFiber => {
      parentFiber.addChild(child);
      child.unsafeAddObserver(() => {
        parentFiber.removeChild(child);
      });
    }));
  }
}
fiberScope_b = FiberScopeTypeId;
/** @internal */
const fiberScope_unsafeMake = fiber => {
  return new Local(fiber.id(), fiber);
};
/** @internal */
const globalScope = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberScope/Global"), () => new Global());
//# sourceMappingURL=fiberScope.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/fiber.mjs














/** @internal */
const FiberSymbolKey = "@effect/io/Fiber";
/** @internal */
const FiberTypeId = /*#__PURE__*/Symbol.for(FiberSymbolKey);
/** @internal */
const fiberVariance = {
  _E: _ => _,
  _A: _ => _
};
/** @internal */
const fiberProto = {
  [FiberTypeId]: fiberVariance,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
};
/** @internal */
const RuntimeFiberSymbolKey = "@effect/io/Fiber";
/** @internal */
const RuntimeFiberTypeId = /*#__PURE__*/Symbol.for(RuntimeFiberSymbolKey);
/** @internal */
const fiber_Order = /*#__PURE__*/Order_mapInput(fiber => [fiber.id().startTimeMillis, fiber.id().id])( /*#__PURE__*/Order_tuple(Number_Order, Number_Order));
/** @internal */
const isFiber = u => typeof u === "object" && u != null && FiberTypeId in u;
/** @internal */
const isRuntimeFiber = self => RuntimeFiberTypeId in self;
/** @internal */
const _await = self => self.await();
/** @internal */
const children = self => self.children();
/** @internal */
const fiber_done = exit => ({
  ...fiberProto,
  id: () => Id_none,
  await: () => succeed(exit),
  children: () => succeed([]),
  inheritAll: () => core_unit,
  poll: () => succeed(mjs_Option_some(exit)),
  interruptAsFork: () => core_unit
});
/** @internal */
const dump = self => core_map(self.status(), status => ({
  id: self.id(),
  status
}));
/** @internal */
const dumpAll = fibers => forEachSequential(fibers, dump);
/** @internal */
const fiber_fail = error => fiber_done(Exit_fail(error));
/** @internal */
const fiber_failCause = cause => fiber_done(Exit_failCause(cause));
/** @internal */
const fromEffect = effect => core_map(core_exit(effect), fiber_done);
/** @internal */
const id = self => self.id();
/** @internal */
const fiber_inheritAll = self => self.inheritAll();
/** @internal */
const interrupted = fiberId => fiber_done(Exit_interrupt(fiberId));
/** @internal */
const interruptAll = fibers => core_flatMap(fiberId, fiberId => interruptAllAs(fiberId)(fibers));
/** @internal */
const interruptAllAs = /*#__PURE__*/Function_dual(2, (fibers, fiberId) => core_zipRight(forEachSequentialDiscard(_await)(fibers))(forEachSequentialDiscard(fibers, interruptAsFork(fiberId))));
/** @internal */
const interruptAsFork = /*#__PURE__*/Function_dual(2, (self, fiberId) => self.interruptAsFork(fiberId));
/** @internal */
const fiber_join = self => core_zipLeft(core_flatten(self.await()), self.inheritAll());
/** @internal */
const fiber_map = /*#__PURE__*/Function_dual(2, (self, f) => mapEffect(self, a => sync(() => f(a))));
/** @internal */
const mapEffect = /*#__PURE__*/Function_dual(2, (self, f) => ({
  ...fiberProto,
  id: () => self.id(),
  await: () => core_flatMap(self.await(), forEachEffect(f)),
  children: () => self.children(),
  inheritAll: () => self.inheritAll(),
  poll: () => core_flatMap(self.poll(), result => {
    switch (result._tag) {
      case "None":
        {
          return succeed(Option_none());
        }
      case "Some":
        {
          return core_map(mjs_Option_some)(forEachEffect(result.value, f));
        }
    }
  }),
  interruptAsFork: id => self.interruptAsFork(id)
}));
/** @internal */
const mapFiber = /*#__PURE__*/Function_dual(2, (self, f) => core_map(self.await(), Exit_match({
  onFailure: cause => fiber_failCause(cause),
  onSuccess: a => f(a)
})));
/** @internal */
const fiber_match = /*#__PURE__*/Function_dual(2, (self, {
  onFiber,
  onRuntimeFiber
}) => {
  if (isRuntimeFiber(self)) {
    return onRuntimeFiber(self);
  }
  return onFiber(self);
});
/** @internal */
const fiber_never = {
  ...fiberProto,
  id: () => Id_none,
  await: () => never,
  children: () => succeed([]),
  inheritAll: () => never,
  poll: () => succeed(Option_none()),
  interruptAsFork: () => never
};
/** @internal */
const fiber_orElse = /*#__PURE__*/Function_dual(2, (self, that) => ({
  ...fiberProto,
  id: () => Id_getOrElse(self.id(), that.id()),
  await: () => core_zipWith(self.await(), that.await(), (exit1, exit2) => Exit_isSuccess(exit1) ? exit1 : exit2),
  children: () => self.children(),
  inheritAll: () => core_zipRight(that.inheritAll(), self.inheritAll()),
  poll: () => core_zipWith(self.poll(), that.poll(), (option1, option2) => {
    switch (option1._tag) {
      case "None":
        {
          return Option_none();
        }
      case "Some":
        {
          return Exit_isSuccess(option1.value) ? option1 : option2;
        }
    }
  }),
  interruptAsFork: id => core_asUnit(core_zipRight(interruptAsFiber(id)(that))(interruptAsFiber(self, id)))
}));
/** @internal */
const fiber_orElseEither = /*#__PURE__*/Function_dual(2, (self, that) => fiber_orElse(fiber_map(self, Either_left), fiber_map(that, Either_right)));
/** @internal */
const poll = self => self.poll();
// forked from https://github.com/sindresorhus/parse-ms/blob/4da2ffbdba02c6e288c08236695bdece0adca173/index.js
// MIT License
// Copyright (c) Sindre Sorhus <sindresorhus@gmail.com> (sindresorhus.com)
/** @internal */
const parseMs = milliseconds => {
  const roundTowardsZero = milliseconds > 0 ? Math.floor : Math.ceil;
  return {
    days: roundTowardsZero(milliseconds / 86400000),
    hours: roundTowardsZero(milliseconds / 3600000) % 24,
    minutes: roundTowardsZero(milliseconds / 60000) % 60,
    seconds: roundTowardsZero(milliseconds / 1000) % 60,
    milliseconds: roundTowardsZero(milliseconds) % 1000,
    microseconds: roundTowardsZero(milliseconds * 1000) % 1000,
    nanoseconds: roundTowardsZero(milliseconds * 1e6) % 1000
  };
};
/** @internal */
const renderStatus = status => {
  if (Status_isDone(status)) {
    return "Done";
  }
  if (Status_isRunning(status)) {
    return "Running";
  }
  const isInterruptible = interruptible(status.runtimeFlags) ? "interruptible" : "uninterruptible";
  return `Suspended(${isInterruptible})`;
};
/** @internal */
const fiber_pretty = self => core_flatMap(Clock_currentTimeMillis, now => core_map(dump(self), dump => {
  const time = now - dump.id.startTimeMillis;
  const {
    days,
    hours,
    milliseconds,
    minutes,
    seconds
  } = parseMs(time);
  const lifeMsg = (days === 0 ? "" : `${days}d`) + (days === 0 && hours === 0 ? "" : `${hours}h`) + (days === 0 && hours === 0 && minutes === 0 ? "" : `${minutes}m`) + (days === 0 && hours === 0 && minutes === 0 && seconds === 0 ? "" : `${seconds}s`) + `${milliseconds}ms`;
  const waitMsg = Status_isSuspended(dump.status) ? (() => {
    const ids = Id_ids(dump.status.blockingOn);
    return mjs_HashSet_size(ids) > 0 ? `waiting on ` + Array.from(ids).map(id => `${id}`).join(", ") : "";
  })() : "";
  const statusMsg = renderStatus(dump.status);
  return `[Fiber](#${dump.id.id}) (${lifeMsg}) ${waitMsg}\n   Status: ${statusMsg}`;
}));
/** @internal */
const unsafeRoots = () => Array.from(globalScope.roots);
/** @internal */
const roots = /*#__PURE__*/sync(unsafeRoots);
/** @internal */
const fiber_status = self => self.status();
/** @internal */
const fiber_succeed = value => fiber_done(Exit_succeed(value));
/** @internal */
const fiber_unit = /*#__PURE__*/fiber_succeed(void 0);
/** @internal */
const currentFiberURI = "@effect/io/Fiber/Current";
/** @internal */
const getCurrentFiber = () => fromNullable(globalThis[currentFiberURI]);
//# sourceMappingURL=fiber.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Boolean.mjs
/**
 * This module provides utility functions and type class instances for working with the `boolean` type in TypeScript.
 * It includes functions for basic boolean operations, as well as type class instances for
 * `Equivalence`, `Order`, `Semigroup`, and `Monoid`.
 *
 * @since 1.0.0
 */




/**
 * Tests if a value is a `boolean`.
 *
 * @param input - The value to test.
 *
 * @example
 * import { isBoolean } from '@effect/data/Boolean'
 *
 * assert.deepStrictEqual(isBoolean(true), true)
 * assert.deepStrictEqual(isBoolean("true"), false)
 *
 * @category guards
 * @since 1.0.0
 */
const Boolean_isBoolean = isBoolean;
/**
 * This function returns the result of either of the given functions depending on the value of the boolean parameter.
 * It is useful when you have to run one of two functions depending on the boolean value.
 *
 * @param value - the boolean value that decides which function will be executed.
 * @param onFalse - a lazy evaluation function that will be executed when the `value` is `false`.
 * @param onTrue - a lazy evaluation function that will be executed when the `value` is `true`.
 *
 * @example
 * import * as B from "@effect/data/Boolean"
 *
 * assert.deepStrictEqual(B.match(true, { onFalse: () => "It's false!", onTrue: () => "It's true!" }), "It's true!")
 *
 * @category pattern matching
 * @since 1.0.0
 */
const Boolean_match = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (value, options) => value ? options.onTrue() : options.onFalse())));
/**
 * @category instances
 * @since 1.0.0
 */
const Boolean_Equivalence = Equivalence_boolean;
/**
 * @category instances
 * @since 1.0.0
 */
const Boolean_Order = Order_boolean;
/**
 * Negates the given boolean: `!self`
 *
 * @example
 * import { not } from '@effect/data/Boolean'
 *
 * assert.deepStrictEqual(not(true), false)
 * assert.deepStrictEqual(not(false), true)
 *
 * @category combinators
 * @since 1.0.0
 */
const Boolean_not = self => !self;
/**
 * Combines two boolean using AND: `self && that`.
 *
 * @example
 * import { and } from '@effect/data/Boolean'
 *
 * assert.deepStrictEqual(and(true, true), true)
 * assert.deepStrictEqual(and(true, false), false)
 * assert.deepStrictEqual(and(false, true), false)
 * assert.deepStrictEqual(and(false, false), false)
 *
 * @category combinators
 * @since 1.0.0
 */
const Boolean_and = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => self && that)));
/**
 * Combines two boolean using NAND: `!(self && that)`.
 *
 * @example
 * import { nand } from '@effect/data/Boolean'
 *
 * assert.deepStrictEqual(nand(true, true), false)
 * assert.deepStrictEqual(nand(true, false), true)
 * assert.deepStrictEqual(nand(false, true), true)
 * assert.deepStrictEqual(nand(false, false), true)
 *
 * @category combinators
 * @since 1.0.0
 */
const Boolean_nand = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => !(self && that))));
/**
 * Combines two boolean using OR: `self || that`.
 *
 * @example
 * import { or } from '@effect/data/Boolean'
 *
 * assert.deepStrictEqual(or(true, true), true)
 * assert.deepStrictEqual(or(true, false), true)
 * assert.deepStrictEqual(or(false, true), true)
 * assert.deepStrictEqual(or(false, false), false)
 *
 * @category combinators
 * @since 1.0.0
 */
const Boolean_or = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => self || that)));
/**
 * Combines two booleans using NOR: `!(self || that)`.
 *
 * @example
 * import { nor } from '@effect/data/Boolean'
 *
 * assert.deepStrictEqual(nor(true, true), false)
 * assert.deepStrictEqual(nor(true, false), false)
 * assert.deepStrictEqual(nor(false, true), false)
 * assert.deepStrictEqual(nor(false, false), true)
 *
 * @category combinators
 * @since 1.0.0
 */
const Boolean_nor = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => !(self || that))));
/**
 * Combines two booleans using XOR: `(!self && that) || (self && !that)`.
 *
 * @example
 * import { xor } from '@effect/data/Boolean'
 *
 * assert.deepStrictEqual(xor(true, true), false)
 * assert.deepStrictEqual(xor(true, false), true)
 * assert.deepStrictEqual(xor(false, true), true)
 * assert.deepStrictEqual(xor(false, false), false)
 *
 * @category combinators
 * @since 1.0.0
 */
const Boolean_xor = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => !self && that || self && !that)));
/**
 * Combines two booleans using EQV (aka XNOR): `!xor(self, that)`.
 *
 * @example
 * import { eqv } from '@effect/data/Boolean'
 *
 * assert.deepStrictEqual(eqv(true, true), true)
 * assert.deepStrictEqual(eqv(true, false), false)
 * assert.deepStrictEqual(eqv(false, true), false)
 * assert.deepStrictEqual(eqv(false, false), true)
 *
 * @category combinators
 * @since 1.0.0
 */
const Boolean_eqv = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => !Boolean_xor(self, that))));
/**
 * Combines two booleans using an implication: `(!self || that)`.
 *
 * @example
 * import { implies } from '@effect/data/Boolean'
 *
 * assert.deepStrictEqual(implies(true, true), true)
 * assert.deepStrictEqual(implies(true, false), false)
 * assert.deepStrictEqual(implies(false, true), true)
 * assert.deepStrictEqual(implies(false, false), true)
 *
 * @category combinators
 * @since 1.0.0
 */
const Boolean_implies = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => self ? that : true)));
/**
 * This utility function is used to check if all the elements in a collection of boolean values are `true`.
 *
 * @param collection - An iterable collection of booleans.
 *
 * @example
 * import { every } from '@effect/data/Boolean'
 *
 * assert.deepStrictEqual(every([true, true, true]), true)
 * assert.deepStrictEqual(every([true, false, true]), false)
 *
 * @since 1.0.0
 */
const Boolean_every = collection => {
  for (const b of collection) {
    if (!b) {
      return false;
    }
  }
  return true;
};
/**
 * This utility function is used to check if at least one of the elements in a collection of boolean values is `true`.
 *
 * @param collection - An iterable collection of booleans.
 *
 * @example
 * import { some } from '@effect/data/Boolean'
 *
 * assert.deepStrictEqual(some([true, false, true]), true)
 * assert.deepStrictEqual(some([false, false, false]), false)
 *
 * @since 1.0.0
 */
const Boolean_some = collection => {
  for (const b of collection) {
    if (b) {
      return true;
    }
  }
  return false;
};
//# sourceMappingURL=Boolean.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Deferred.mjs


/**
 * @since 1.0.0
 * @category symbols
 */
const Deferred_DeferredTypeId = DeferredTypeId;
/**
 * Creates a new `Deferred`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Deferred_make = deferredMake;
/**
 * Creates a new `Deferred` from the specified `FiberId`.
 *
 * @since 1.0.0
 * @category constructors
 */
const makeAs = deferredMakeAs;
const Deferred_await = deferredAwait;

/**
 * Completes the deferred with the result of the specified effect. If the
 * deferred has already been completed, the method will produce false.
 *
 * Note that `Deferred.completeWith` will be much faster, so consider using
 * that if you do not need to memoize the result of the specified effect.
 *
 * @since 1.0.0
 * @category utils
 */
const complete = deferredComplete;
/**
 * Completes the deferred with the result of the specified effect. If the
 * deferred has already been completed, the method will produce false.
 *
 * @since 1.0.0
 * @category utils
 */
const completeWith = deferredCompleteWith;
/**
 * Exits the `Deferred` with the specified `Exit` value, which will be
 * propagated to all fibers waiting on the value of the `Deferred`.
 *
 * @since 1.0.0
 * @category utils
 */
const Deferred_done = deferredDone;
/**
 * Fails the `Deferred` with the specified error, which will be propagated to
 * all fibers waiting on the value of the `Deferred`.
 *
 * @since 1.0.0
 * @category utils
 */
const Deferred_fail = deferredFail;
/**
 * Fails the `Deferred` with the specified error, which will be propagated to
 * all fibers waiting on the value of the `Deferred`.
 *
 * @since 1.0.0
 * @category utils
 */
const Deferred_failSync = deferredFailSync;
/**
 * Fails the `Deferred` with the specified `Cause`, which will be propagated to
 * all fibers waiting on the value of the `Deferred`.
 *
 * @since 1.0.0
 * @category utils
 */
const Deferred_failCause = deferredFailCause;
/**
 * Fails the `Deferred` with the specified `Cause`, which will be propagated to
 * all fibers waiting on the value of the `Deferred`.
 *
 * @since 1.0.0
 * @category utils
 */
const Deferred_failCauseSync = deferredFailCauseSync;
/**
 * Kills the `Deferred` with the specified defect, which will be propagated to
 * all fibers waiting on the value of the `Deferred`.
 *
 * @since 1.0.0
 * @category utils
 */
const Deferred_die = deferredDie;
/**
 * Kills the `Deferred` with the specified defect, which will be propagated to
 * all fibers waiting on the value of the `Deferred`.
 *
 * @since 1.0.0
 * @category utils
 */
const Deferred_dieSync = deferredDieSync;
/**
 * Completes the `Deferred` with interruption. This will interrupt all fibers
 * waiting on the value of the `Deferred` with the `FiberId` of the fiber
 * calling this method.
 *
 * @since 1.0.0
 * @category utils
 */
const Deferred_interrupt = deferredInterrupt;
/**
 * Completes the `Deferred` with interruption. This will interrupt all fibers
 * waiting on the value of the `Deferred` with the specified `FiberId`.
 *
 * @since 1.0.0
 * @category utils
 */
const Deferred_interruptWith = deferredInterruptWith;
/**
 * Returns `true` if this `Deferred` has already been completed with a value or
 * an error, `false` otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const Deferred_isDone = deferredIsDone;
/**
 * Returns a `Some<Effect<R, E, A>>` from the `Deferred` if this `Deferred` has
 * already been completed, `None` otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const Deferred_poll = deferredPoll;
/**
 * Completes the `Deferred` with the specified value.
 *
 * @since 1.0.0
 * @category utils
 */
const Deferred_succeed = deferredSucceed;
/**
 * Completes the `Deferred` with the specified lazily evaluated value.
 *
 * @since 1.0.0
 * @category utils
 */
const Deferred_sync = deferredSync;
/**
 * Unsafely creates a new `Deferred` from the specified `FiberId`.
 *
 * @since 1.0.0
 * @category unsafe
 */
const Deferred_unsafeMake = deferredUnsafeMake;
/**
 * Unsafely exits the `Deferred` with the specified `Exit` value, which will be
 * propagated to all fibers waiting on the value of the `Deferred`.
 *
 * @since 1.0.0
 * @category unsafe
 */
const unsafeDone = deferredUnsafeDone;
//# sourceMappingURL=Deferred.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/FiberRefs/Patch.mjs

/**
 * @since 1.0.0
 * @category constructors
 */
const FiberRefs_Patch_empty = patch_empty;
/**
 * Constructs a patch that describes the changes between the specified
 * collections of `FiberRef`
 *
 * @since 1.0.0
 * @category constructors
 */
const Patch_diff = patch_diff;
/**
 * Combines this patch and the specified patch to create a new patch that
 * describes applying the changes from this patch and the specified patch
 * sequentially.
 *
 * @since 1.0.0
 * @category constructors
 */
const Patch_combine = patch_combine;
/**
 * Applies the changes described by this patch to the specified collection
 * of `FiberRef` values.
 *
 * @since 1.0.0
 * @category destructors
 */
const Patch_patch = patch_patch;
//# sourceMappingURL=Patch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/blockedRequests.mjs
var blockedRequests_a, blockedRequests_b, blockedRequests_c;





/** @internal */
const blockedRequests_empty = {
  _tag: "Empty"
};
/**
 * Combines this collection of blocked requests with the specified collection
 * of blocked requests, in parallel.
 *
 * @internal
 */
const par = (self, that) => ({
  _tag: "Par",
  left: self,
  right: that
});
/**
 * Combines this collection of blocked requests with the specified collection
 * of blocked requests, in sequence.
 *
 * @internal
 */
const seq = (self, that) => ({
  _tag: "Seq",
  left: self,
  right: that
});
/**
 * Constructs a collection of blocked requests from the specified blocked
 * request and data source.
 *
 * @internal
 */
const single = (dataSource, blockedRequest) => ({
  _tag: "Single",
  dataSource,
  blockedRequest
});
/** @internal */
const MapRequestResolversReducer = f => ({
  emptyCase: () => blockedRequests_empty,
  parCase: (left, right) => par(left, right),
  seqCase: (left, right) => seq(left, right),
  singleCase: (dataSource, blockedRequest) => single(f(dataSource), blockedRequest)
});
/**
 * Transforms all data sources with the specified data source aspect, which
 * can change the environment type of data sources but must preserve the
 * request type of each data source.
 *
 * @internal
 */
const mapRequestResolvers = (self, f) => blockedRequests_reduce(self, MapRequestResolversReducer(f));
/**
 * Folds over the cases of this collection of blocked requests with the
 * specified functions.
 *
 * @internal
 */
const blockedRequests_reduce = (self, reducer) => {
  let input = List.of(self);
  let output = List.empty();
  while (List.isCons(input)) {
    const current = input.head;
    switch (current._tag) {
      case "Empty":
        {
          output = List.cons(Either.right(reducer.emptyCase()), output);
          input = input.tail;
          break;
        }
      case "Par":
        {
          output = List.cons(Either.left({
            _tag: "ParCase"
          }), output);
          input = List.cons(current.left, List.cons(current.right, input.tail));
          break;
        }
      case "Seq":
        {
          output = List.cons(Either.left({
            _tag: "SeqCase"
          }), output);
          input = List.cons(current.left, List.cons(current.right, input.tail));
          break;
        }
      case "Single":
        {
          const result = reducer.singleCase(current.dataSource, current.blockedRequest);
          output = List.cons(Either.right(result), output);
          input = input.tail;
          break;
        }
    }
  }
  const result = List.reduce(output, List.empty(), (acc, current) => {
    switch (current._tag) {
      case "Left":
        {
          const left = List.unsafeHead(acc);
          const right = List.unsafeHead(List.unsafeTail(acc));
          const tail = List.unsafeTail(List.unsafeTail(acc));
          switch (current.left._tag) {
            case "ParCase":
              {
                return List.cons(reducer.parCase(left, right), tail);
              }
            case "SeqCase":
              {
                return List.cons(reducer.seqCase(left, right), tail);
              }
          }
        }
      case "Right":
        {
          return List.cons(current.right, acc);
        }
    }
  });
  if (List.isNil(result)) {
    throw new Error("BUG: BlockedRequests.reduce - please report an issue at https://github.com/Effect-TS/query/issues");
  }
  return result.head;
};
/**
 * Flattens a collection of blocked requests into a collection of pipelined
 * and batched requests that can be submitted for execution.
 *
 * @internal
 */
const blockedRequests_flatten = self => {
  let current = List_of(self);
  let updated = List_empty();
  // eslint-disable-next-line no-constant-condition
  while (1) {
    const [parallel, sequential] = List_reduce(current, [parallelCollectionEmpty(), List_empty()], ([parallel, sequential], blockedRequest) => {
      const [par, seq] = blockedRequests_step(blockedRequest);
      return [parallelCollectionCombine(parallel, par), List_appendAll(sequential, seq)];
    });
    updated = blockedRequests_merge(updated, parallel);
    if (isNil(sequential)) {
      return List_reverse(updated);
    }
    current = sequential;
  }
  throw new Error("BUG: BlockedRequests.flatten - please report an issue at https://github.com/Effect-TS/query/issues");
};
/**
 * Takes one step in evaluating a collection of blocked requests, returning a
 * collection of blocked requests that can be performed in parallel and a list
 * of blocked requests that must be performed sequentially after those
 * requests.
 */
const blockedRequests_step = requests => {
  let current = requests;
  let parallel = parallelCollectionEmpty();
  let stack = List_empty();
  let sequential = List_empty();
  // eslint-disable-next-line no-constant-condition
  while (1) {
    switch (current._tag) {
      case "Empty":
        {
          if (isNil(stack)) {
            return [parallel, sequential];
          }
          current = stack.head;
          stack = stack.tail;
          break;
        }
      case "Par":
        {
          stack = cons(current.right, stack);
          current = current.left;
          break;
        }
      case "Seq":
        {
          const left = current.left;
          const right = current.right;
          switch (left._tag) {
            case "Empty":
              {
                current = right;
                break;
              }
            case "Par":
              {
                const l = left.left;
                const r = left.right;
                current = par(seq(l, right), seq(r, right));
                break;
              }
            case "Seq":
              {
                const l = left.left;
                const r = left.right;
                current = seq(l, seq(r, right));
                break;
              }
            case "Single":
              {
                current = left;
                sequential = cons(right, sequential);
                break;
              }
          }
          break;
        }
      case "Single":
        {
          parallel = parallelCollectionCombine(parallel, parallelCollectionMake(current.dataSource, current.blockedRequest));
          if (isNil(stack)) {
            return [parallel, sequential];
          }
          current = stack.head;
          stack = stack.tail;
          break;
        }
    }
  }
  throw new Error("BUG: BlockedRequests.step - please report an issue at https://github.com/Effect-TS/query/issues");
};
/**
 * Merges a collection of requests that must be executed sequentially with a
 * collection of requests that can be executed in parallel. If the collections
 * are both from the same single data source then the requests can be
 * pipelined while preserving ordering guarantees.
 */
const blockedRequests_merge = (sequential, parallel) => {
  if (isNil(sequential)) {
    return List_of(parallelCollectionToSequentialCollection(parallel));
  }
  if (parallelCollectionIsEmpty(parallel)) {
    return sequential;
  }
  const seqHeadKeys = sequentialCollectionKeys(sequential.head);
  const parKeys = parallelCollectionKeys(parallel);
  if (seqHeadKeys.length === 1 && parKeys.length === 1 && equals(seqHeadKeys[0], parKeys[0])) {
    return cons(sequentialCollectionCombine(sequential.head, parallelCollectionToSequentialCollection(parallel)), sequential.tail);
  }
  return cons(parallelCollectionToSequentialCollection(parallel), sequential);
};
//
// circular
//
/** @internal */
const EntryTypeId = /*#__PURE__*/Symbol.for("@effect/io/RequestBlock.Entry");
/** @internal */
class EntryImpl {
  constructor(request, result, listeners, ownerId, state) {
    this.request = request;
    this.result = result;
    this.listeners = listeners;
    this.ownerId = ownerId;
    this.state = state;
    this[blockedRequests_a] = blockedRequestVariance;
  }
}
blockedRequests_a = EntryTypeId;
/** @internal */
const blockedRequestVariance = {
  _R: _ => _
};
/** @internal */
const isEntry = u => {
  return typeof u === "object" && u != null && EntryTypeId in u;
};
/** @internal */
const makeEntry = options => new EntryImpl(options.request, options.result, options.listeners, options.ownerId, options.state);
/** @internal */
const RequestBlockParallelTypeId = /*#__PURE__*/Symbol.for("@effect/io/RequestBlockParallel");
const parallelVariance = {
  _R: _ => _
};
class ParallelImpl {
  constructor(map) {
    this.map = map;
    this[blockedRequests_b] = parallelVariance;
  }
}
blockedRequests_b = RequestBlockParallelTypeId;
/** @internal */
const parallelCollectionEmpty = () => new ParallelImpl(mjs_HashMap_empty());
/** @internal */
const parallelCollectionMake = (dataSource, blockedRequest) => new ParallelImpl(mjs_HashMap_make([dataSource, Array.of(blockedRequest)]));
/** @internal */
const parallelCollectionCombine = (self, that) => new ParallelImpl(mjs_HashMap_reduce(self.map, that.map, (map, value, key) => HashMap_set(map, key, match(mjs_HashMap_get(map, key), {
  onNone: () => value,
  onSome: a => [...a, ...value]
}))));
/** @internal */
const parallelCollectionIsEmpty = self => mjs_HashMap_isEmpty(self.map);
/** @internal */
const parallelCollectionKeys = self => Array.from(HashMap_keys(self.map));
/** @internal */
const parallelCollectionToSequentialCollection = self => sequentialCollectionMake(mjs_HashMap_map(self.map, x => Array.of(x)));
/** @internal */
const parallelCollectionToChunk = self => Array.from(self.map);
/** @internal */
const SequentialCollectionTypeId = /*#__PURE__*/Symbol.for("@effect/io/RequestBlockSequential");
/** @internal */
const sequentialVariance = {
  _R: _ => _
};
class SequentialImpl {
  constructor(map) {
    this.map = map;
    this[blockedRequests_c] = sequentialVariance;
  }
}
blockedRequests_c = SequentialCollectionTypeId;
/** @internal */
const sequentialCollectionMake = map => new SequentialImpl(map);
/** @internal */
const sequentialCollectionCombine = (self, that) => new SequentialImpl(mjs_HashMap_reduce(that.map, self.map, (map, value, key) => HashMap_set(map, key, match(mjs_HashMap_get(map, key), {
  onNone: () => [],
  onSome: a => [...a, ...value]
}))));
/** @internal */
const sequentialCollectionIsEmpty = self => HashMap.isEmpty(self.map);
/** @internal */
const sequentialCollectionKeys = self => Array.from(HashMap_keys(self.map));
/** @internal */
const sequentialCollectionToChunk = self => Array.from(self.map);
//# sourceMappingURL=blockedRequests.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/completedRequestMap.mjs


/** @internal */
const completedRequestMap_currentRequestMap = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentRequestMap"), () => fiberRefUnsafeMake(new Map()));
//# sourceMappingURL=completedRequestMap.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/concurrency.mjs

/** @internal */
const concurrency_match = (options, sequential, unbounded, bounded) => {
  switch (options?.concurrency) {
    case undefined:
      {
        return sequential();
      }
    case "unbounded":
      {
        return unbounded();
      }
    case "inherit":
      {
        return fiberRefGetWith(currentConcurrency, concurrency => concurrency === "unbounded" ? unbounded() : concurrency > 1 ? bounded(concurrency) : sequential());
      }
    default:
      {
        return options.concurrency > 1 ? bounded(options.concurrency) : sequential();
      }
  }
};
/** @internal */
const matchSimple = (options, sequential, concurrent) => {
  switch (options?.concurrency) {
    case undefined:
      {
        return sequential();
      }
    case "unbounded":
      {
        return concurrent();
      }
    case "inherit":
      {
        return fiberRefGetWith(currentConcurrency, concurrency => concurrency === "unbounded" ? concurrent() : concurrency > 1 ? concurrent() : sequential());
      }
    default:
      {
        return options.concurrency > 1 ? concurrent() : sequential();
      }
  }
};
//# sourceMappingURL=concurrency.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/logger.mjs








/** @internal */
const LoggerSymbolKey = "@effect/io/Logger";
/** @internal */
const LoggerTypeId = /*#__PURE__*/Symbol.for(LoggerSymbolKey);
/** @internal */
const loggerVariance = {
  _Message: _ => _,
  _Output: _ => _
};
/** @internal */
const makeLogger = log => ({
  [LoggerTypeId]: loggerVariance,
  log,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
});
/** @internal */
const logger_mapInput = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => makeLogger(options => self.log({
  ...options,
  message: f(options.message)
})))));
/** @internal */
const filterLogLevel = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => makeLogger(options => f(options.logLevel) ? Option.some(self.log(options)) : Option.none()))));
/** @internal */
const logger_map = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => makeLogger(options => f(self.log(options))))));
/** @internal */
const logger_none = {
  [LoggerTypeId]: loggerVariance,
  log: Function_constVoid,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
};
/** @internal */
const simple = log => ({
  [LoggerTypeId]: loggerVariance,
  log: ({
    message
  }) => log(message),
  pipe() {
    return pipeArguments(this, arguments);
  }
});
/** @internal */
const logger_succeed = value => {
  return simple(() => value);
};
/** @internal */
const logger_sync = evaluate => {
  return simple(evaluate);
};
/** @internal */
const logger_zip = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => makeLogger(options => [self.log(options), that.log(options)]))));
/** @internal */
const logger_zipLeft = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => logger_map(logger_zip(self, that), tuple => tuple[0]))));
/** @internal */
const logger_zipRight = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => logger_map(logger_zip(self, that), tuple => tuple[1]))));
/** @internal */
const stringLogger = /*#__PURE__*/makeLogger(({
  annotations,
  cause,
  date,
  fiberId,
  logLevel,
  message,
  spans
}) => {
  const nowMillis = date.getTime();
  const outputArray = [`timestamp=${date.toISOString()}`, `level=${logLevel.label}`, `fiber=${threadName(fiberId)}`];
  let output = outputArray.join(" ");
  const stringMessage = serializeUnknown(message);
  if (stringMessage.length > 0) {
    output = output + " message=";
    output = appendQuoted(stringMessage, output);
  }
  if (cause != null && cause != cause_empty) {
    output = output + " cause=";
    output = appendQuoted(cause_pretty(cause), output);
  }
  if (isCons(spans)) {
    output = output + " ";
    let first = true;
    for (const span of spans) {
      if (first) {
        first = false;
      } else {
        output = output + " ";
      }
      output = output + Span_render(nowMillis)(span);
    }
  }
  if (mjs_HashMap_size(annotations) > 0) {
    output = output + " ";
    let first = true;
    for (const [key, value] of annotations) {
      if (first) {
        first = false;
      } else {
        output = output + " ";
      }
      output = output + filterKeyName(key);
      output = output + "=";
      output = appendQuoted(String(value), output);
    }
  }
  return output;
});
const serializeUnknown = u => {
  try {
    return typeof u === "object" ? JSON.stringify(u) : String(u);
  } catch (_) {
    return String(u);
  }
};
/** @internal */
const escapeDoubleQuotes = str => `"${str.replace(/\\([\s\S])|(")/g, "\\$1$2")}"`;
const textOnly = /^[^\s"=]+$/;
/** @internal */
const appendQuoted = (label, output) => output + (label.match(textOnly) ? label : escapeDoubleQuotes(label));
/** @internal */
const logfmtLogger = /*#__PURE__*/(/* unused pure expression or super */ null && (makeLogger(({
  annotations,
  cause,
  date,
  fiberId,
  logLevel,
  message,
  spans
}) => {
  const nowMillis = date.getTime();
  const outputArray = [`timestamp=${date.toISOString()}`, `level=${logLevel.label}`, `fiber=${_fiberId.threadName(fiberId)}`];
  let output = outputArray.join(" ");
  const stringMessage = serializeUnknown(message);
  if (stringMessage.length > 0) {
    output = output + " message=";
    output = appendQuotedLogfmt(stringMessage, output);
  }
  if (cause != null && cause != Cause.empty) {
    output = output + " cause=";
    output = appendQuotedLogfmt(Cause.pretty(cause), output);
  }
  if (List.isCons(spans)) {
    output = output + " ";
    let first = true;
    for (const span of spans) {
      if (first) {
        first = false;
      } else {
        output = output + " ";
      }
      output = output + renderLogSpanLogfmt(nowMillis)(span);
    }
  }
  if (HashMap.size(annotations) > 0) {
    output = output + " ";
    let first = true;
    for (const [key, value] of annotations) {
      if (first) {
        first = false;
      } else {
        output = output + " ";
      }
      output = output + filterKeyName(key);
      output = output + "=";
      output = appendQuotedLogfmt(String(value), output);
    }
  }
  return output;
})));
/** @internal */
const filterKeyName = key => key.replace(/[\s="]/g, "_");
/** @internal */
const escapeDoubleQuotesLogfmt = str => JSON.stringify(str);
/** @internal */
const appendQuotedLogfmt = (label, output) => output + (label.match(textOnly) ? label : escapeDoubleQuotesLogfmt(label));
/** @internal */
const renderLogSpanLogfmt = now => self => {
  const label = filterKeyName(self.label);
  return `${label}=${now - self.startTime}ms`;
};
//# sourceMappingURL=logger.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/metric/keyType.mjs
var keyType_a, keyType_b, keyType_c, keyType_d, _e, _f, _g, _h, _j, _k;




/** @internal */
const MetricKeyTypeSymbolKey = "@effect/io/Metric/KeyType";
/** @internal */
const MetricKeyTypeTypeId = /*#__PURE__*/Symbol.for(MetricKeyTypeSymbolKey);
/** @internal */
const CounterKeyTypeSymbolKey = "effect/io/Metric/KeyType/Counter";
/** @internal */
const CounterKeyTypeTypeId = /*#__PURE__*/Symbol.for(CounterKeyTypeSymbolKey);
/** @internal */
const FrequencyKeyTypeSymbolKey = "effect/io/Metric/KeyType/Frequency";
/** @internal */
const FrequencyKeyTypeTypeId = /*#__PURE__*/Symbol.for(FrequencyKeyTypeSymbolKey);
/** @internal */
const GaugeKeyTypeSymbolKey = "effect/io/Metric/KeyType/Gauge";
/** @internal */
const GaugeKeyTypeTypeId = /*#__PURE__*/Symbol.for(GaugeKeyTypeSymbolKey);
/** @internal */
const HistogramKeyTypeSymbolKey = "effect/io/Metric/KeyType/Histogram";
/** @internal */
const HistogramKeyTypeTypeId = /*#__PURE__*/Symbol.for(HistogramKeyTypeSymbolKey);
/** @internal */
const SummaryKeyTypeSymbolKey = "effect/io/Metric/KeyType/Summary";
/** @internal */
const SummaryKeyTypeTypeId = /*#__PURE__*/Symbol.for(SummaryKeyTypeSymbolKey);
/** @internal */
const metricKeyTypeVariance = {
  _In: _ => _,
  _Out: _ => _
};
/** @internal */
class CounterKeyType {
  constructor() {
    this[keyType_a] = metricKeyTypeVariance;
    this[keyType_b] = CounterKeyTypeTypeId;
  }
  [(keyType_a = MetricKeyTypeTypeId, keyType_b = CounterKeyTypeTypeId, symbol)]() {
    return Hash_hash(CounterKeyTypeSymbolKey);
  }
  [Equal_symbol](that) {
    return isCounterKey(that);
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
class FrequencyKeyType {
  constructor() {
    this[keyType_c] = metricKeyTypeVariance;
    this[keyType_d] = FrequencyKeyTypeTypeId;
  }
  [(keyType_c = MetricKeyTypeTypeId, keyType_d = FrequencyKeyTypeTypeId, symbol)]() {
    return Hash_hash(FrequencyKeyTypeSymbolKey);
  }
  [Equal_symbol](that) {
    return isFrequencyKey(that);
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
class GaugeKeyType {
  constructor() {
    this[_e] = metricKeyTypeVariance;
    this[_f] = GaugeKeyTypeTypeId;
  }
  [(_e = MetricKeyTypeTypeId, _f = GaugeKeyTypeTypeId, symbol)]() {
    return Hash_hash(GaugeKeyTypeSymbolKey);
  }
  [Equal_symbol](that) {
    return isGaugeKey(that);
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/**
 * @category model
 * @since 1.0.0
 */
class HistogramKeyType {
  constructor(boundaries) {
    this.boundaries = boundaries;
    this[_g] = metricKeyTypeVariance;
    this[_h] = HistogramKeyTypeTypeId;
  }
  [(_g = MetricKeyTypeTypeId, _h = HistogramKeyTypeTypeId, symbol)]() {
    return combine(Hash_hash(this.boundaries))(Hash_hash(HistogramKeyTypeSymbolKey));
  }
  [Equal_symbol](that) {
    return isHistogramKey(that) && equals(this.boundaries, that.boundaries);
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
class SummaryKeyType {
  constructor(maxAge, maxSize, error, quantiles) {
    this.maxAge = maxAge;
    this.maxSize = maxSize;
    this.error = error;
    this.quantiles = quantiles;
    this[_j] = metricKeyTypeVariance;
    this[_k] = SummaryKeyTypeTypeId;
  }
  [(_j = MetricKeyTypeTypeId, _k = SummaryKeyTypeTypeId, symbol)]() {
    return Hash.combine(Hash.hash(this.quantiles))(Hash.combine(Hash.hash(this.error))(Hash.combine(Hash.hash(this.maxSize))(Hash.combine(Hash.hash(this.maxAge))(Hash.hash(SummaryKeyTypeSymbolKey)))));
  }
  [Equal_symbol](that) {
    return isSummaryKey(that) && Equal.equals(this.maxAge, that.maxAge) && this.maxSize === that.maxSize && this.error === that.error && Equal.equals(this.quantiles, that.quantiles);
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
}
/**
 * @since 1.0.0
 * @category constructors
 */
const counter = /*#__PURE__*/new CounterKeyType();
/**
 * @since 1.0.0
 * @category constructors
 */
const frequency = /*#__PURE__*/new FrequencyKeyType();
/**
 * @since 1.0.0
 * @category constructors
 */
const gauge = /*#__PURE__*/new GaugeKeyType();
/**
 * @since 1.0.0
 * @category constructors
 */
const histogram = boundaries => {
  return new HistogramKeyType(boundaries);
};
/**
 * @since 1.0.0
 * @category constructors
 */
const summary = options => {
  return new SummaryKeyType(Duration.decode(options.maxAge), options.maxSize, options.error, options.quantiles);
};
/**
 * @since 1.0.0
 * @category refinements
 */
const isMetricKeyType = u => {
  return typeof u === "object" && u != null && MetricKeyTypeTypeId in u;
};
/**
 * @since 1.0.0
 * @category refinements
 */
const isCounterKey = u => {
  return typeof u === "object" && u != null && CounterKeyTypeTypeId in u;
};
/**
 * @since 1.0.0
 * @category refinements
 */
const isFrequencyKey = u => {
  return typeof u === "object" && u != null && FrequencyKeyTypeTypeId in u;
};
/**
 * @since 1.0.0
 * @category refinements
 */
const isGaugeKey = u => {
  return typeof u === "object" && u != null && GaugeKeyTypeTypeId in u;
};
/**
 * @since 1.0.0
 * @category refinements
 */
const isHistogramKey = u => {
  return typeof u === "object" && u != null && HistogramKeyTypeTypeId in u;
};
/**
 * @since 1.0.0
 * @category refinements
 */
const isSummaryKey = u => {
  return typeof u === "object" && u != null && SummaryKeyTypeTypeId in u;
};
//# sourceMappingURL=keyType.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/metric/key.mjs
var key_a;








/** @internal */
const MetricKeySymbolKey = "@effect/io/Metric/Key";
/** @internal */
const MetricKeyTypeId = /*#__PURE__*/Symbol.for(MetricKeySymbolKey);
/** @internal */
const metricKeyVariance = {
  _Type: _ => _
};
/** @internal */
class MetricKeyImpl {
  constructor(name, keyType, description, tags = mjs_HashSet_empty()) {
    this.name = name;
    this.keyType = keyType;
    this.description = description;
    this.tags = tags;
    this[key_a] = metricKeyVariance;
  }
  [(key_a = MetricKeyTypeId, symbol)]() {
    return combine(Hash_hash(this.tags))(combine(Hash_hash(this.description))(combine(Hash_hash(this.keyType))(Hash_hash(this.name))));
  }
  [Equal_symbol](u) {
    return isMetricKey(u) && this.name === u.name && equals(this.keyType, u.keyType) && equals(this.description, u.description) && equals(this.tags, u.tags);
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
const isMetricKey = u => typeof u === "object" && u != null && MetricKeyTypeId in u;
/** @internal */
const key_counter = (name, description) => new MetricKeyImpl(name, counter, fromNullable(description));
/** @internal */
const key_frequency = (name, description) => new MetricKeyImpl(name, metricKeyType.frequency, Option.fromNullable(description));
/** @internal */
const key_gauge = (name, description) => new MetricKeyImpl(name, metricKeyType.gauge, Option.fromNullable(description));
/** @internal */
const key_histogram = (name, boundaries, description) => new MetricKeyImpl(name, histogram(boundaries), fromNullable(description));
/** @internal */
const key_summary = options => new MetricKeyImpl(options.name, metricKeyType.summary(options), Option.fromNullable(options.description));
/** @internal */
const key_tagged = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, key, value) => taggedWithLabelSet(self, HashSet.make(metricLabel.make(key, value))))));
/** @internal */
const taggedWithLabels = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, extraTags) => taggedWithLabelSet(self, HashSet.fromIterable(extraTags)))));
/** @internal */
const taggedWithLabelSet = /*#__PURE__*/Function_dual(2, (self, extraTags) => mjs_HashSet_size(extraTags) === 0 ? self : new MetricKeyImpl(self.name, self.keyType, self.description, mjs_HashSet_union(extraTags)(self.tags)));
//# sourceMappingURL=key.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/metric/state.mjs
var state_a, state_b, state_c, state_d, state_e, state_f, state_g, state_h, state_j, state_k;



/** @internal */
const MetricStateSymbolKey = "@effect/io/Metric/State";
/** @internal */
const MetricStateTypeId = /*#__PURE__*/Symbol.for(MetricStateSymbolKey);
/** @internal */
const CounterStateSymbolKey = "effect/io/Metric/State/Counter";
/** @internal */
const CounterStateTypeId = /*#__PURE__*/Symbol.for(CounterStateSymbolKey);
/** @internal */
const FrequencyStateSymbolKey = "effect/io/Metric/State/Frequency";
/** @internal */
const FrequencyStateTypeId = /*#__PURE__*/Symbol.for(FrequencyStateSymbolKey);
/** @internal */
const GaugeStateSymbolKey = "effect/io/Metric/State/Gauge";
/** @internal */
const GaugeStateTypeId = /*#__PURE__*/Symbol.for(GaugeStateSymbolKey);
/** @internal */
const HistogramStateSymbolKey = "effect/io/Metric/State/Histogram";
/** @internal */
const HistogramStateTypeId = /*#__PURE__*/Symbol.for(HistogramStateSymbolKey);
/** @internal */
const SummaryStateSymbolKey = "effect/io/Metric/State/Summary";
/** @internal */
const SummaryStateTypeId = /*#__PURE__*/Symbol.for(SummaryStateSymbolKey);
/** @internal */
const metricStateVariance = {
  _A: _ => _
};
/** @internal */
class CounterState {
  constructor(count) {
    this.count = count;
    this[state_a] = metricStateVariance;
    this[state_b] = CounterStateTypeId;
  }
  [(state_a = MetricStateTypeId, state_b = CounterStateTypeId, symbol)]() {
    return combine(Hash_hash(this.count))(Hash_hash(CounterStateSymbolKey));
  }
  [Equal_symbol](that) {
    return isCounterState(that) && this.count === that.count;
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
class FrequencyState {
  constructor(occurrences) {
    this.occurrences = occurrences;
    this[state_c] = metricStateVariance;
    this[state_d] = FrequencyStateTypeId;
  }
  [(state_c = MetricStateTypeId, state_d = FrequencyStateTypeId, symbol)]() {
    return combine(Hash_hash(this.occurrences))(Hash_hash(FrequencyStateSymbolKey));
  }
  [Equal_symbol](that) {
    return isFrequencyState(that) && equals(this.occurrences, that.occurrences);
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
class GaugeState {
  constructor(value) {
    this.value = value;
    this[state_e] = metricStateVariance;
    this[state_f] = GaugeStateTypeId;
  }
  [(state_e = MetricStateTypeId, state_f = GaugeStateTypeId, symbol)]() {
    return combine(Hash_hash(this.value))(Hash_hash(GaugeStateSymbolKey));
  }
  [Equal_symbol](u) {
    return isGaugeState(u) && this.value === u.value;
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
class HistogramState {
  constructor(buckets, count, min, max, sum) {
    this.buckets = buckets;
    this.count = count;
    this.min = min;
    this.max = max;
    this.sum = sum;
    this[state_g] = metricStateVariance;
    this[state_h] = HistogramStateTypeId;
  }
  [(state_g = MetricStateTypeId, state_h = HistogramStateTypeId, symbol)]() {
    return combine(Hash_hash(this.sum))(combine(Hash_hash(this.max))(combine(Hash_hash(this.min))(combine(Hash_hash(this.count))(combine(Hash_hash(this.buckets))(Hash_hash(HistogramStateSymbolKey))))));
  }
  [Equal_symbol](that) {
    return isHistogramState(that) && equals(this.buckets, that.buckets) && this.count === that.count && this.min === that.min && this.max === that.max && this.sum === that.sum;
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
class SummaryState {
  constructor(error, quantiles, count, min, max, sum) {
    this.error = error;
    this.quantiles = quantiles;
    this.count = count;
    this.min = min;
    this.max = max;
    this.sum = sum;
    this[state_j] = metricStateVariance;
    this[state_k] = SummaryStateTypeId;
  }
  [(state_j = MetricStateTypeId, state_k = SummaryStateTypeId, symbol)]() {
    return combine(Hash_hash(this.sum))(combine(Hash_hash(this.max))(combine(Hash_hash(this.min))(combine(Hash_hash(this.count))(combine(Hash_hash(this.quantiles))(combine(Hash_hash(this.error))(Hash_hash(SummaryStateSymbolKey)))))));
  }
  [Equal_symbol](that) {
    return isSummaryState(that) && this.error === that.error && equals(this.quantiles, that.quantiles) && this.count === that.count && this.min === that.min && this.max === that.max && this.sum === that.sum;
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
const state_counter = count => {
  return new CounterState(count);
};
/** @internal */
const state_frequency = occurrences => {
  return new FrequencyState(occurrences);
};
/** @internal */
const state_gauge = value => {
  return new GaugeState(value);
};
/** @internal */
const state_histogram = options => new HistogramState(options.buckets, options.count, options.min, options.max, options.sum);
/** @internal */
const state_summary = options => new SummaryState(options.error, options.quantiles, options.count, options.min, options.max, options.sum);
/** @internal */
const isMetricState = u => {
  return typeof u === "object" && u != null && MetricStateTypeId in u;
};
/** @internal */
const isCounterState = u => {
  return typeof u === "object" && u != null && CounterStateTypeId in u;
};
/**
 * @since 1.0.0
 * @category refinements
 */
const isFrequencyState = u => {
  return typeof u === "object" && u != null && FrequencyStateTypeId in u;
};
/**
 * @since 1.0.0
 * @category refinements
 */
const isGaugeState = u => {
  return typeof u === "object" && u != null && GaugeStateTypeId in u;
};
/**
 * @since 1.0.0
 * @category refinements
 */
const isHistogramState = u => {
  return typeof u === "object" && u != null && HistogramStateTypeId in u;
};
/**
 * @since 1.0.0
 * @category refinements
 */
const isSummaryState = u => {
  return typeof u === "object" && u != null && SummaryStateTypeId in u;
};
//# sourceMappingURL=state.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/metric/hook.mjs









/** @internal */
const MetricHookSymbolKey = "@effect/io/Metric/Hook";
/** @internal */
const MetricHookTypeId = /*#__PURE__*/Symbol.for(MetricHookSymbolKey);
/** @internal */
const metricHookVariance = {
  _In: _ => _,
  _Out: _ => _
};
/** @internal */
const hook_make = options => ({
  [MetricHookTypeId]: metricHookVariance,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  },
  ...options
});
/** @internal */
const onUpdate = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => ({
  [MetricHookTypeId]: metricHookVariance,
  pipe() {
    return pipeArguments(this, arguments);
  },
  get: self.get,
  update: input => {
    self.update(input);
    return f(input);
  }
}))));
/** @internal */
const hook_counter = _key => {
  let sum = 0;
  return hook_make({
    get: () => state_counter(sum),
    update: value => {
      sum = sum + value;
    }
  });
};
/** @internal */
const hook_frequency = _key => {
  let count = 0;
  const values = new Map();
  const update = word => {
    count = count + 1;
    const slotCount = values.get(word) ?? 0;
    values.set(word, slotCount + 1);
  };
  const snapshot = () => mjs_HashMap_fromIterable(values.entries());
  return hook_make({
    get: () => state_frequency(snapshot()),
    update
  });
};
/** @internal */
const hook_gauge = (_key, startAt) => {
  let value = startAt;
  return hook_make({
    get: () => state_gauge(value),
    update: v => {
      value = v;
    }
  });
};
/** @internal */
const hook_histogram = key => {
  const bounds = key.keyType.boundaries.values;
  const size = bounds.length;
  const values = new Uint32Array(size + 1);
  const boundaries = new Float32Array(size);
  let count = 0;
  let sum = 0;
  let min = Number.MAX_VALUE;
  let max = Number.MIN_VALUE;
  Chunk_map((n, i) => {
    boundaries[i] = n;
  })(Chunk_sort(Number_Order)(bounds));
  // Insert the value into the right bucket with a binary search
  const update = value => {
    let from = 0;
    let to = size;
    while (from !== to) {
      const mid = Math.floor(from + (to - from) / 2);
      const boundary = boundaries[mid];
      if (value <= boundary) {
        to = mid;
      } else {
        from = mid;
      }
      // The special case when to / from have a distance of one
      if (to === from + 1) {
        if (value <= boundaries[from]) {
          to = from;
        } else {
          from = to;
        }
      }
    }
    values[from] = values[from] + 1;
    count = count + 1;
    sum = sum + value;
    if (value < min) {
      min = value;
    }
    if (value > max) {
      max = value;
    }
  };
  const getBuckets = () => {
    const builder = Array(size);
    let cumulated = 0;
    for (let i = 0; i < size; i++) {
      const boundary = boundaries[i];
      const value = values[i];
      cumulated = cumulated + value;
      builder[i] = [boundary, cumulated];
    }
    return unsafeFromArray(builder);
  };
  return hook_make({
    get: () => state_histogram({
      buckets: getBuckets(),
      count,
      min,
      max,
      sum
    }),
    update
  });
};
/** @internal */
const hook_summary = key => {
  const {
    error,
    maxAge,
    maxSize,
    quantiles
  } = key.keyType;
  const sortedQuantiles = Chunk_sort(Number_Order)(quantiles);
  const values = Array(maxSize);
  let head = 0;
  let count = 0;
  let sum = 0;
  let min = Number.MAX_VALUE;
  let max = Number.MIN_VALUE;
  // Just before the snapshot we filter out all values older than maxAge
  const snapshot = now => {
    const builder = [];
    // If the buffer is not full yet it contains valid items at the 0..last
    // indices and null values at the rest of the positions.
    //
    // If the buffer is already full then all elements contains a valid
    // measurement with timestamp.
    //
    // At any given point in time we can enumerate all the non-null elements in
    // the buffer and filter them by timestamp to get a valid view of a time
    // window.
    //
    // The order does not matter because it gets sorted before passing to
    // `calculateQuantiles`.
    let i = 0;
    while (i !== maxSize - 1) {
      const item = values[i];
      if (item != null) {
        const [t, v] = item;
        const age = millis(now - t);
        if (Duration_greaterThanOrEqualTo(age, zero) && age <= maxAge) {
          builder.push(v);
        }
      }
      i = i + 1;
    }
    return calculateQuantiles(error, sortedQuantiles, Chunk_sort(Number_Order)(unsafeFromArray(builder)));
  };
  const observe = (value, timestamp) => {
    if (maxSize > 0) {
      head = head + 1;
      const target = head % maxSize;
      values[target] = [timestamp, value];
    }
    count = count + 1;
    sum = sum + value;
    if (value < min) {
      min = value;
    }
    if (value > max) {
      max = value;
    }
  };
  return hook_make({
    get: () => state_summary({
      error,
      quantiles: snapshot(Date.now()),
      count,
      min,
      max,
      sum
    }),
    update: ([value, timestamp]) => observe(value, timestamp)
  });
};
/** @internal */
const calculateQuantiles = (error, sortedQuantiles, sortedSamples) => {
  // The number of samples examined
  const sampleCount = sortedSamples.length;
  if (isEmpty(sortedQuantiles)) {
    return Chunk_empty();
  }
  const head = unsafeHead(sortedQuantiles);
  const tail = Chunk_drop(1)(sortedQuantiles);
  const resolved = reduce(Chunk_of(resolveQuantile(error, sampleCount, Option_none(), 0, head, sortedSamples)), (accumulator, quantile) => {
    const h = unsafeHead(accumulator);
    return Chunk_append(resolveQuantile(error, sampleCount, h.value, h.consumed, quantile, h.rest))(accumulator);
  })(tail);
  return Chunk_map(rq => [rq.quantile, rq.value])(resolved);
};
/** @internal */
const resolveQuantile = (error, sampleCount, current, consumed, quantile, rest) => {
  let error_1 = error;
  let sampleCount_1 = sampleCount;
  let current_1 = current;
  let consumed_1 = consumed;
  let quantile_1 = quantile;
  let rest_1 = rest;
  let error_2 = error;
  let sampleCount_2 = sampleCount;
  let current_2 = current;
  let consumed_2 = consumed;
  let quantile_2 = quantile;
  let rest_2 = rest;
  // eslint-disable-next-line no-constant-condition
  while (1) {
    // If the remaining list of samples is empty, there is nothing more to resolve
    if (isEmpty(rest_1)) {
      return {
        quantile: quantile_1,
        value: Option_none(),
        consumed: consumed_1,
        rest: Chunk_empty()
      };
    }
    // If the quantile is the 100% quantile, we can take the maximum of all the
    // remaining values as the result
    if (quantile_1 === 1) {
      return {
        quantile: quantile_1,
        value: mjs_Option_some(unsafeLast(rest_1)),
        consumed: consumed_1 + rest_1.length,
        rest: Chunk_empty()
      };
    }
    // Split into two chunks - the first chunk contains all elements of the same
    // value as the chunk head
    const sameHead = splitWhere(n => n > unsafeHead(rest_1))(rest_1);
    // How many elements do we want to accept for this quantile
    const desired = quantile_1 * sampleCount_1;
    // The error margin
    const allowedError = error_1 / 2 * desired;
    // Taking into account the elements consumed from the samples so far and the
    // number of same elements at the beginning of the chunk, calculate the number
    // of elements we would have if we selected the current head as result
    const candConsumed = consumed_1 + sameHead[0].length;
    const candError = Math.abs(candConsumed - desired);
    // If we haven't got enough elements yet, recurse
    if (candConsumed < desired - allowedError) {
      error_2 = error_1;
      sampleCount_2 = sampleCount_1;
      current_2 = Chunk_head(rest_1);
      consumed_2 = candConsumed;
      quantile_2 = quantile_1;
      rest_2 = sameHead[1];
      error_1 = error_2;
      sampleCount_1 = sampleCount_2;
      current_1 = current_2;
      consumed_1 = consumed_2;
      quantile_1 = quantile_2;
      rest_1 = rest_2;
      continue;
    }
    // If we have too many elements, select the previous value and hand back the
    // the rest as leftover
    if (candConsumed > desired + allowedError) {
      return {
        quantile: quantile_1,
        value: current_1,
        consumed: consumed_1,
        rest: rest_1
      };
    }
    // If we are in the target interval, select the current head and hand back the leftover after dropping all elements
    // from the sample chunk that are equal to the current head
    switch (current_1._tag) {
      case "None":
        {
          error_2 = error_1;
          sampleCount_2 = sampleCount_1;
          current_2 = Chunk_head(rest_1);
          consumed_2 = candConsumed;
          quantile_2 = quantile_1;
          rest_2 = sameHead[1];
          error_1 = error_2;
          sampleCount_1 = sampleCount_2;
          current_1 = current_2;
          consumed_1 = consumed_2;
          quantile_1 = quantile_2;
          rest_1 = rest_2;
          continue;
        }
      case "Some":
        {
          const prevError = Math.abs(desired - current_1.value);
          if (candError < prevError) {
            error_2 = error_1;
            sampleCount_2 = sampleCount_1;
            current_2 = Chunk_head(rest_1);
            consumed_2 = candConsumed;
            quantile_2 = quantile_1;
            rest_2 = sameHead[1];
            error_1 = error_2;
            sampleCount_1 = sampleCount_2;
            current_1 = current_2;
            consumed_1 = consumed_2;
            quantile_1 = quantile_2;
            rest_1 = rest_2;
            continue;
          }
          return {
            quantile: quantile_1,
            value: mjs_Option_some(current_1.value),
            consumed: consumed_1,
            rest: rest_1
          };
        }
    }
  }
  throw new Error("BUG: MetricHook.resolveQuantiles - please report an issue at https://github.com/Effect-TS/io/issues");
};
//# sourceMappingURL=hook.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/metric/pair.mjs

/** @internal */
const MetricPairSymbolKey = "@effect/io/Metric/Pair";
/** @internal */
const MetricPairTypeId = /*#__PURE__*/Symbol.for(MetricPairSymbolKey);
/** @internal */
const metricPairVariance = {
  _Type: _ => _
};
/** @internal */
const pair_make = (metricKey, metricState) => {
  return {
    [MetricPairTypeId]: metricPairVariance,
    metricKey,
    metricState,
    pipe() {
      return pipeArguments(this, arguments);
    }
  };
};
/** @internal */
const pair_unsafeMake = (metricKey, metricState) => {
  return {
    [MetricPairTypeId]: metricPairVariance,
    metricKey,
    metricState,
    pipe() {
      return Pipeable_pipeArguments(this, arguments);
    }
  };
};
//# sourceMappingURL=pair.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/metric/registry.mjs
var registry_a;






/** @internal */
const MetricRegistrySymbolKey = "@effect/io/Metric/Registry";
/** @internal */
const MetricRegistryTypeId = /*#__PURE__*/Symbol.for(MetricRegistrySymbolKey);
/** @internal */
class MetricRegistryImpl {
  constructor() {
    this[registry_a] = MetricRegistryTypeId;
    this.map = MutableHashMap_empty();
  }
  snapshot() {
    const result = [];
    for (const [key, hook] of this.map) {
      result.push(pair_unsafeMake(key, hook.get()));
    }
    return mjs_HashSet_fromIterable(result);
  }
  get(key) {
    const hook = getOrUndefined(MutableHashMap_get(key)(this.map));
    if (hook == null) {
      if (isCounterKey(key.keyType)) {
        return this.getCounter(key);
      }
      if (isGaugeKey(key.keyType)) {
        return this.getGauge(key);
      }
      if (isFrequencyKey(key.keyType)) {
        return this.getFrequency(key);
      }
      if (isHistogramKey(key.keyType)) {
        return this.getHistogram(key);
      }
      if (isSummaryKey(key.keyType)) {
        return this.getSummary(key);
      }
      throw new Error("BUG: MetricRegistry.get - unknown MetricKeyType - please report an issue at https://github.com/Effect-TS/io/issues");
    } else {
      return hook;
    }
  }
  getCounter(key) {
    let value = getOrUndefined(MutableHashMap_get(key)(this.map));
    if (value == null) {
      const counter = hook_counter(key);
      if (!MutableHashMap_has(key)(this.map)) {
        MutableHashMap_set(key, counter)(this.map);
      }
      value = counter;
    }
    return value;
  }
  getFrequency(key) {
    let value = getOrUndefined(MutableHashMap_get(key)(this.map));
    if (value == null) {
      const frequency = hook_frequency(key);
      if (!MutableHashMap_has(key)(this.map)) {
        MutableHashMap_set(key, frequency)(this.map);
      }
      value = frequency;
    }
    return value;
  }
  getGauge(key) {
    let value = getOrUndefined(MutableHashMap_get(key)(this.map));
    if (value == null) {
      const gauge = hook_gauge(key, 0);
      if (!MutableHashMap_has(key)(this.map)) {
        MutableHashMap_set(key, gauge)(this.map);
      }
      value = gauge;
    }
    return value;
  }
  getHistogram(key) {
    let value = getOrUndefined(MutableHashMap_get(key)(this.map));
    if (value == null) {
      const histogram = hook_histogram(key);
      if (!MutableHashMap_has(key)(this.map)) {
        MutableHashMap_set(key, histogram)(this.map);
      }
      value = histogram;
    }
    return value;
  }
  getSummary(key) {
    let value = getOrUndefined(MutableHashMap_get(key)(this.map));
    if (value == null) {
      const summary = hook_summary(key);
      if (!MutableHashMap_has(key)(this.map)) {
        MutableHashMap_set(key, summary)(this.map);
      }
      value = summary;
    }
    return value;
  }
}
registry_a = MetricRegistryTypeId;
/** @internal */
const registry_make = () => {
  return new MetricRegistryImpl();
};
//# sourceMappingURL=registry.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/metric.mjs














/** @internal */
const MetricSymbolKey = "@effect/io/Metric";
/** @internal */
const MetricTypeId = /*#__PURE__*/Symbol.for(MetricSymbolKey);
/** @internal */
const metricVariance = {
  _Type: _ => _,
  _In: _ => _,
  _Out: _ => _
};
/** @internal */
const globalMetricRegistry = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/Metric/globalMetricRegistry"), () => registry_make());
/** @internal */
const metric_make = function (keyType, unsafeUpdate, unsafeValue) {
  const metric = Object.assign(effect => core_tap(effect, a => sync(() => unsafeUpdate(a, mjs_HashSet_empty()))), {
    [MetricTypeId]: metricVariance,
    keyType,
    unsafeUpdate,
    unsafeValue,
    pipe() {
      return Pipeable_pipeArguments(this, arguments);
    }
  });
  return metric;
};
/** @internal */
const metric_mapInput = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => metric_make(self.keyType, (input, extraTags) => self.unsafeUpdate(f(input), extraTags), self.unsafeValue))));
/** @internal */
const metric_counter = (name, description) => fromMetricKey(key_counter(name, description));
/** @internal */
const metric_frequency = (name, description) => fromMetricKey(metricKey.frequency(name, description));
/** @internal */
const withConstantInput = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, input) => metric_mapInput(self, () => input))));
/** @internal */
const fromMetricKey = key => {
  const hook = extraTags => {
    const fullKey = taggedWithLabelSet(extraTags)(key);
    return globalMetricRegistry.get(fullKey);
  };
  return metric_make(key.keyType, (input, extraTags) => hook(extraTags).update(input), extraTags => hook(extraTags).get());
};
/** @internal */
const metric_gauge = (name, description) => fromMetricKey(metricKey.gauge(name, description));
/** @internal */
const metric_histogram = (name, boundaries, description) => fromMetricKey(key_histogram(name, boundaries, description));
/* @internal */
const metric_increment = self => metric_update(self, 1);
/* @internal */
const incrementBy = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, amount) => metric_update(self, amount))));
/** @internal */
const metric_map = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => metric_make(self.keyType, self.unsafeUpdate, extraTags => f(self.unsafeValue(extraTags))))));
/** @internal */
const mapType = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => metric_make(f(self.keyType), self.unsafeUpdate, self.unsafeValue))));
/* @internal */
const metric_set = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, value) => metric_update(self, value))));
/** @internal */
const metric_succeed = out => metric_make(void 0, constVoid, () => out);
/** @internal */
const metric_sync = evaluate => metric_make(void 0, constVoid, evaluate);
/** @internal */
const metric_summary = options => withNow(summaryTimestamp(options));
/** @internal */
const summaryTimestamp = options => fromMetricKey(metricKey.summary(options));
/** @internal */
const metric_tagged = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, key, value) => metric_taggedWithLabels(self, HashSet.make(metricLabel.make(key, value))))));
/** @internal */
const taggedWithLabelsInput = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => metric_map(metric_make(self.keyType, (input, extraTags) => self.unsafeUpdate(input, HashSet.union(HashSet.fromIterable(f(input)), extraTags)), self.unsafeValue), constVoid))));
/** @internal */
const metric_taggedWithLabels = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, extraTagsIterable) => {
  const extraTags = HashSet.isHashSet(extraTagsIterable) ? extraTagsIterable : HashSet.fromIterable(extraTagsIterable);
  return metric_make(self.keyType, (input, extraTags1) => self.unsafeUpdate(input, HashSet.union(extraTags1)(extraTags)), extraTags1 => self.unsafeValue(HashSet.union(extraTags1)(extraTags)));
})));
/** @internal */
const metric_timer = name => {
  const boundaries = metricBoundaries.exponential({
    start: 1,
    factor: 2,
    count: 100
  });
  const base = metric_tagged("time_unit", "milliseconds")(metric_histogram(name, boundaries));
  return metric_mapInput(base, Duration.toMillis);
};
/** @internal */
const timerWithBoundaries = (name, boundaries) => {
  const base = metric_tagged("time_unit", "milliseconds")(metric_histogram(name, metricBoundaries.fromChunk(boundaries)));
  return metric_mapInput(base, Duration.toMillis);
};
/* @internal */
const trackAll = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, input) => effect => core.matchCauseEffect(effect, {
  onFailure: cause => {
    self.unsafeUpdate(input, HashSet.empty());
    return core.failCause(cause);
  },
  onSuccess: value => {
    self.unsafeUpdate(input, HashSet.empty());
    return core.succeed(value);
  }
}))));
/* @internal */
const trackDefect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, metric) => trackDefectWith(self, metric, identity))));
/* @internal */
const trackDefectWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, metric, f) => {
  const updater = defect => metric.unsafeUpdate(f(defect), HashSet.empty());
  return _effect.tapDefect(self, cause => core.sync(() => ReadonlyArray.forEach(updater)(Cause.defects(cause))));
})));
/* @internal */
const trackDuration = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, metric) => trackDurationWith(self, metric, identity))));
/* @internal */
const trackDurationWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, metric, f) => Clock.clockWith(clock => {
  const startTime = clock.unsafeCurrentTimeNanos();
  return core.map(self, a => {
    const endTime = clock.unsafeCurrentTimeNanos();
    const duration = Duration.nanos(endTime - startTime);
    metric.unsafeUpdate(f(duration), HashSet.empty());
    return a;
  });
}))));
/* @internal */
const trackError = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, metric) => trackErrorWith(self, metric, a => a))));
/* @internal */
const trackErrorWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, metric, f) => {
  const updater = error => metric_update(metric, f(error));
  return _effect.tapError(self, updater);
})));
/* @internal */
const trackSuccess = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, metric) => trackSuccessWith(self, metric, a => a))));
/* @internal */
const trackSuccessWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, metric, f) => {
  const updater = value => metric_update(metric, f(value));
  return core.tap(self, updater);
})));
/* @internal */
const metric_update = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, input) => core.fiberRefGetWith(core.currentMetricLabels, tags => core.sync(() => self.unsafeUpdate(input, tags))))));
/* @internal */
const value = self => core.fiberRefGetWith(core.currentMetricLabels, tags => core.sync(() => self.unsafeValue(tags)));
/** @internal */
const withNow = self => metric_mapInput(self, input => [input, Date.now()]);
/** @internal */
const metric_zip = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => metric_make([self.keyType, that.keyType], (input, extraTags) => {
  const [l, r] = input;
  self.unsafeUpdate(l, extraTags);
  that.unsafeUpdate(r, extraTags);
}, extraTags => [self.unsafeValue(extraTags), that.unsafeValue(extraTags)]))));
/** @internal */
const unsafeSnapshot = () => globalMetricRegistry.snapshot();
/** @internal */
const snapshot = /*#__PURE__*/(/* unused pure expression or super */ null && (core.sync(unsafeSnapshot)));
//# sourceMappingURL=metric.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/metric/boundaries.mjs
var boundaries_a;





/** @internal */
const MetricBoundariesSymbolKey = "@effect/io/Metric/Boundaries";
/** @internal */
const MetricBoundariesTypeId = /*#__PURE__*/Symbol.for(MetricBoundariesSymbolKey);
/** @internal */
class MetricBoundariesImpl {
  constructor(values) {
    this.values = values;
    this[boundaries_a] = MetricBoundariesTypeId;
  }
  [(boundaries_a = MetricBoundariesTypeId, symbol)]() {
    return combine(Hash_hash(this.values))(Hash_hash(MetricBoundariesSymbolKey));
  }
  [Equal_symbol](u) {
    return isMetricBoundaries(u) && equals(this.values, u.values);
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
const isMetricBoundaries = u => {
  return typeof u === "object" && u != null && MetricBoundariesTypeId in u;
};
/** @internal */
const fromChunk = chunk => {
  const values = Chunk_dedupe(Chunk_appendAll(Chunk_of(Number.POSITIVE_INFINITY))(chunk));
  return new MetricBoundariesImpl(values);
};
/** @internal */
const linear = options => fromChunk(Chunk.unsafeFromArray(ReadonlyArray.makeBy(options.count - 1, i => options.start + i * options.width)));
/** @internal */
const exponential = options => fromChunk(unsafeFromArray(makeBy(options.count - 1, i => options.start * Math.pow(options.factor, i))));
//# sourceMappingURL=boundaries.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/request.mjs




/** @internal */
const RequestSymbolKey = "@effect/io/Request";
/** @internal */
const RequestTypeId = /*#__PURE__*/(/* unused pure expression or super */ null && (Symbol.for(RequestSymbolKey)));
/** @internal */
const requestVariance = {
  _E: _ => _,
  _A: _ => _
};
/** @internal */
const isRequest = u => typeof u === "object" && u != null && RequestTypeId in u;
/** @internal */
const request_of = () => args =>
// @ts-expect-error
Data.struct({
  [RequestTypeId]: requestVariance,
  ...args
});
/** @internal */
const request_tagged = tag => args =>
// @ts-expect-error
Data.struct({
  [RequestTypeId]: requestVariance,
  _tag: tag,
  ...args
});
/** @internal */
const request_complete = /*#__PURE__*/Function_dual(2, (self, result) => fiberRefGetWith(completedRequestMap_currentRequestMap, map => sync(() => {
  if (map.has(self)) {
    const entry = map.get(self);
    if (!entry.state.completed) {
      entry.state.completed = true;
      deferredUnsafeDone(entry.result, result);
    }
  }
})));
/** @internal */
const completeEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, effect) => core.matchEffect(effect, {
  onFailure: error => request_complete(self, core.exitFail(error)),
  onSuccess: value => request_complete(self, core.exitSucceed(value))
}))));
/** @internal */
const request_fail = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, error) => request_complete(self, core.exitFail(error)))));
/** @internal */
const request_succeed = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, value) => request_complete(self, core.exitSucceed(value)))));
/** @internal */
class Listeners {
  constructor() {
    this.count = 0;
    this.observers = new Set();
  }
  addObserver(f) {
    this.observers.add(f);
  }
  removeObserver(f) {
    this.observers.delete(f);
  }
  increment() {
    this.count++;
    this.observers.forEach(f => f(this.count));
  }
  decrement() {
    this.count--;
    this.observers.forEach(f => f(this.count));
  }
}
/**
 * @internal
 */
const filterOutCompleted = requests => core.fiberRefGetWith(completedRequestMap.currentRequestMap, map => core.succeed(requests.filter(request => !(map.get(request)?.state.completed === true))));
//# sourceMappingURL=request.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/supervisor.mjs
var supervisor_a, supervisor_b, supervisor_c, supervisor_d, supervisor_e;



/** @internal */
const SupervisorSymbolKey = "@effect/io/Supervisor";
/** @internal */
const SupervisorTypeId = /*#__PURE__*/Symbol.for(SupervisorSymbolKey);
/** @internal */
const supervisorVariance = {
  _T: _ => _
};
/** @internal */
class ProxySupervisor {
  constructor(underlying, value0) {
    this.underlying = underlying;
    this.value0 = value0;
    this[supervisor_a] = supervisorVariance;
  }
  value() {
    return this.value0();
  }
  onStart(context, effect, parent, fiber) {
    this.underlying.onStart(context, effect, parent, fiber);
  }
  onEnd(value, fiber) {
    this.underlying.onEnd(value, fiber);
  }
  onEffect(fiber, effect) {
    this.underlying.onEffect(fiber, effect);
  }
  onSuspend(fiber) {
    this.underlying.onSuspend(fiber);
  }
  onResume(fiber) {
    this.underlying.onResume(fiber);
  }
  map(f) {
    return new ProxySupervisor(this, () => core_map(f)(this.value()));
  }
  zip(right) {
    return new Zip(this, right);
  }
  onRun(execution, fiber) {
    return this.underlying.onRun(execution, fiber);
  }
}
supervisor_a = SupervisorTypeId;
/** @internal */
class Zip {
  constructor(left, right) {
    this.left = left;
    this.right = right;
    this[supervisor_b] = supervisorVariance;
  }
  value() {
    return core_zip(this.left.value(), this.right.value());
  }
  onStart(context, effect, parent, fiber) {
    this.left.onStart(context, effect, parent, fiber);
    this.right.onStart(context, effect, parent, fiber);
  }
  onEnd(value, fiber) {
    this.left.onEnd(value, fiber);
    this.right.onEnd(value, fiber);
  }
  onEffect(fiber, effect) {
    this.left.onEffect(fiber, effect);
    this.right.onEffect(fiber, effect);
  }
  onSuspend(fiber) {
    this.left.onSuspend(fiber);
    this.right.onSuspend(fiber);
  }
  onResume(fiber) {
    this.left.onResume(fiber);
    this.right.onResume(fiber);
  }
  map(f) {
    return new ProxySupervisor(this, () => core_map(f)(this.value()));
  }
  zip(right) {
    return new Zip(this, right);
  }
  onRun(execution, fiber) {
    return this.right.onRun(() => this.left.onRun(execution, fiber), fiber);
  }
}
supervisor_b = SupervisorTypeId;
class Track {
  constructor() {
    this[supervisor_c] = supervisorVariance;
    this.fibers = new Set();
  }
  value() {
    return sync(() => Array.from(this.fibers));
  }
  onStart(_context, _effect, _parent, fiber) {
    this.fibers.add(fiber);
  }
  onEnd(_value, fiber) {
    this.fibers.delete(fiber);
  }
  onEffect(_fiber, _effect) {
    //
  }
  onSuspend(_fiber) {
    //
  }
  onResume(_fiber) {
    //
  }
  map(f) {
    return new ProxySupervisor(this, () => core_map(f)(this.value()));
  }
  zip(right) {
    return new Zip(this, right);
  }
  onRun(execution, _fiber) {
    return execution();
  }
}
supervisor_c = SupervisorTypeId;
class Const {
  constructor(effect) {
    this.effect = effect;
    this[supervisor_d] = supervisorVariance;
  }
  value() {
    return this.effect;
  }
  onStart(_context, _effect, _parent, _fiber) {
    //
  }
  onEnd(_value, _fiber) {
    //
  }
  onEffect(_fiber, _effect) {
    //
  }
  onSuspend(_fiber) {
    //
  }
  onResume(_fiber) {
    //
  }
  map(f) {
    return new ProxySupervisor(this, () => core_map(f)(this.value()));
  }
  zip(right) {
    return new Zip(this, right);
  }
  onRun(execution, _fiber) {
    return execution();
  }
}
supervisor_d = SupervisorTypeId;
class FibersIn {
  constructor(ref) {
    this.ref = ref;
    this[supervisor_e] = supervisorVariance;
  }
  value() {
    return core.sync(() => MutableRef.get(this.ref));
  }
  onStart(_context, _effect, _parent, fiber) {
    MutableRef.set(SortedSet.add(fiber)(MutableRef.get(this.ref)))(this.ref);
  }
  onEnd(_value, fiber) {
    MutableRef.set(SortedSet.remove(fiber)(MutableRef.get(this.ref)))(this.ref);
  }
  onEffect(_fiber, _effect) {
    //
  }
  onSuspend(_fiber) {
    //
  }
  onResume(_fiber) {
    //
  }
  map(f) {
    return new ProxySupervisor(this, () => core.map(f)(this.value()));
  }
  zip(right) {
    return new Zip(this, right);
  }
  onRun(execution, _fiber) {
    return execution();
  }
}
supervisor_e = SupervisorTypeId;
/** @internal */
const unsafeTrack = () => {
  return new Track();
};
/** @internal */
const track = /*#__PURE__*/sync(unsafeTrack);
/** @internal */
const supervisor_fromEffect = effect => {
  return new Const(effect);
};
/** @internal */
const supervisor_none = /*#__PURE__*/supervisor_fromEffect(core_unit);
/** @internal */
const fibersIn = ref => core.sync(() => new FibersIn(ref));
//# sourceMappingURL=supervisor.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/supervisor/patch.mjs





/** @internal */
const supervisor_patch_OP_EMPTY = "Empty";
/** @internal */
const OP_ADD_SUPERVISOR = "AddSupervisor";
/** @internal */
const OP_REMOVE_SUPERVISOR = "RemoveSupervisor";
/** @internal */
const patch_OP_AND_THEN = "AndThen";
/**
 * The empty `SupervisorPatch`.
 *
 * @internal
 */
const supervisor_patch_empty = {
  _tag: supervisor_patch_OP_EMPTY
};
/**
 * Combines two patches to produce a new patch that describes applying the
 * updates from this patch and then the updates from the specified patch.
 *
 * @internal
 */
const supervisor_patch_combine = (self, that) => {
  return {
    _tag: patch_OP_AND_THEN,
    first: self,
    second: that
  };
};
/**
 * Applies a `SupervisorPatch` to a `Supervisor` to produce a new `Supervisor`.
 *
 * @internal
 */
const supervisor_patch_patch = (self, supervisor) => {
  return patchLoop(supervisor, Chunk_of(self));
};
/** @internal */
const patchLoop = (_supervisor, _patches) => {
  let supervisor = _supervisor;
  let patches = _patches;
  while (isNonEmpty(patches)) {
    const head = Chunk_headNonEmpty(patches);
    switch (head._tag) {
      case supervisor_patch_OP_EMPTY:
        {
          patches = Chunk_tailNonEmpty(patches);
          break;
        }
      case OP_ADD_SUPERVISOR:
        {
          supervisor = supervisor.zip(head.supervisor);
          patches = Chunk_tailNonEmpty(patches);
          break;
        }
      case OP_REMOVE_SUPERVISOR:
        {
          supervisor = removeSupervisor(supervisor, head.supervisor);
          patches = Chunk_tailNonEmpty(patches);
          break;
        }
      case patch_OP_AND_THEN:
        {
          patches = Chunk_prepend(head.first)(Chunk_prepend(head.second)(Chunk_tailNonEmpty(patches)));
          break;
        }
    }
  }
  return supervisor;
};
/** @internal */
const removeSupervisor = (self, that) => {
  if (equals(self, that)) {
    return supervisor_none;
  } else {
    if (self instanceof Zip) {
      return removeSupervisor(self.left, that).zip(removeSupervisor(self.right, that));
    } else {
      return self;
    }
  }
};
/** @internal */
const patch_toSet = self => {
  if (equals(self, supervisor_none)) {
    return mjs_HashSet_empty();
  } else {
    if (self instanceof Zip) {
      return mjs_HashSet_union(patch_toSet(self.right))(patch_toSet(self.left));
    } else {
      return mjs_HashSet_make(self);
    }
  }
};
/** @internal */
const supervisor_patch_diff = (oldValue, newValue) => {
  if (equals(oldValue, newValue)) {
    return supervisor_patch_empty;
  }
  const oldSupervisors = patch_toSet(oldValue);
  const newSupervisors = patch_toSet(newValue);
  const added = mjs_HashSet_reduce(supervisor_patch_empty, (patch, supervisor) => supervisor_patch_combine(patch, {
    _tag: OP_ADD_SUPERVISOR,
    supervisor
  }))(mjs_HashSet_difference(oldSupervisors)(newSupervisors));
  const removed = mjs_HashSet_reduce(supervisor_patch_empty, (patch, supervisor) => supervisor_patch_combine(patch, {
    _tag: OP_REMOVE_SUPERVISOR,
    supervisor
  }))(mjs_HashSet_difference(newSupervisors)(oldSupervisors));
  return supervisor_patch_combine(added, removed);
};
/** @internal */
const patch_differ = /*#__PURE__*/mjs_Differ_make({
  empty: supervisor_patch_empty,
  patch: supervisor_patch_patch,
  combine: supervisor_patch_combine,
  diff: supervisor_patch_diff
});
//# sourceMappingURL=patch.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/fiberRuntime.mjs
var fiberRuntime_a, fiberRuntime_b;











































/** @internal */
const fiberStarted = /*#__PURE__*/metric_counter("effect_fiber_started");
/** @internal */
const fiberActive = /*#__PURE__*/metric_counter("effect_fiber_active");
/** @internal */
const fiberSuccesses = /*#__PURE__*/metric_counter("effect_fiber_successes");
/** @internal */
const fiberFailures = /*#__PURE__*/metric_counter("effect_fiber_failures");
/** @internal */
const fiberLifetimes = /*#__PURE__*/metric_histogram("effect_fiber_lifetimes", /*#__PURE__*/exponential({
  start: 1.0,
  factor: 2.0,
  count: 100
}));
/** @internal */
const EvaluationSignalContinue = "Continue";
/** @internal */
const EvaluationSignalDone = "Done";
/** @internal */
const EvaluationSignalYieldNow = "Yield";
/** @internal */
const runtimeFiberVariance = {
  _E: _ => _,
  _A: _ => _
};
const fiberRuntime_absurd = _ => {
  throw new Error(`BUG: FiberRuntime - ${JSON.stringify(_)} - please report an issue at https://github.com/Effect-TS/io/issues`);
};
const contOpSuccess = {
  [OP_ON_SUCCESS]: (_, cont, value) => {
    return cont.i1(value);
  },
  ["OnStep"]: (_, cont, value) => {
    return cont.i1(exitSucceed(value));
  },
  [OP_ON_SUCCESS_AND_FAILURE]: (_, cont, value) => {
    return cont.i2(value);
  },
  [OP_REVERT_FLAGS]: (self, cont, value) => {
    self.patchRuntimeFlags(self._runtimeFlags, cont.patch);
    if (interruptible(self._runtimeFlags) && self.isInterrupted()) {
      return exitFailCause(self.getInterruptedCause());
    } else {
      return exitSucceed(value);
    }
  },
  [OP_WHILE]: (self, cont, value) => {
    cont.i2(value);
    if (cont.i0()) {
      self.pushStack(cont);
      return cont.i1();
    } else {
      return core_unit;
    }
  }
};
const drainQueueWhileRunningTable = {
  [OP_INTERRUPT_SIGNAL]: (self, runtimeFlags, cur, message) => {
    self.processNewInterruptSignal(message.cause);
    return interruptible(runtimeFlags) ? exitFailCause(message.cause) : cur;
  },
  [OP_RESUME]: (_self, _runtimeFlags, _cur, _message) => {
    throw new Error("It is illegal to have multiple concurrent run loops in a single fiber");
  },
  [OP_STATEFUL]: (self, runtimeFlags, cur, message) => {
    message.onFiber(self, Status_running(runtimeFlags));
    return cur;
  },
  [OP_YIELD_NOW]: (_self, _runtimeFlags, cur, _message) => {
    return core_flatMap(yieldNow(), () => cur);
  }
};
/**
 * Executes all requests, submitting requests to each data source in parallel.
 */
const runBlockedRequests = self => forEachSequentialDiscard(blockedRequests_flatten(self), requestsByRequestResolver => forEachParUnboundedDiscard(sequentialCollectionToChunk(requestsByRequestResolver), ([dataSource, sequential]) => {
  const map = new Map();
  for (const block of sequential) {
    for (const entry of block) {
      map.set(entry.request, entry);
    }
  }
  return fiberRefLocally(invokeWithInterrupt(dataSource.runAll(sequential), sequential.flat()), completedRequestMap_currentRequestMap, map);
}, false));
/** @internal */
class FiberRuntime {
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
  constructor(fiberId, fiberRefs0, runtimeFlags0) {
    this[fiberRuntime_a] = fiberVariance;
    this[fiberRuntime_b] = runtimeFiberVariance;
    this._queue = new Array();
    this._children = null;
    this._observers = new Array();
    this._running = false;
    this._stack = [];
    this._asyncInterruptor = null;
    this._asyncBlockingOn = null;
    this._exitValue = null;
    this._steps = [false];
    this.run = () => {
      this.drainQueueOnCurrentThread();
    };
    this._runtimeFlags = runtimeFlags0;
    this._fiberId = fiberId;
    this._fiberRefs = fiberRefs0;
    this._supervisor = this.getFiberRef(currentSupervisor);
    if (runtimeMetrics(runtimeFlags0)) {
      const tags = this.getFiberRef(currentMetricLabels);
      fiberStarted.unsafeUpdate(1, tags);
      fiberActive.unsafeUpdate(1, tags);
    }
  }
  /**
   * The identity of the fiber.
   */
  id() {
    return this._fiberId;
  }
  /**
   * Begins execution of the effect associated with this fiber on in the
   * background. This can be called to "kick off" execution of a fiber after
   * it has been created.
   */
  resume(effect) {
    this.tell(resume(effect));
  }
  /**
   * The status of the fiber.
   */
  status() {
    return this.ask((_, status) => status);
  }
  /**
   * Gets the fiber runtime flags.
   */
  runtimeFlags() {
    return this.ask((state, status) => {
      if (Status_isDone(status)) {
        return state._runtimeFlags;
      }
      return status.runtimeFlags;
    });
  }
  /**
   * Returns the current `FiberScope` for the fiber.
   */
  scope() {
    return fiberScope_unsafeMake(this);
  }
  /**
   * Retrieves the immediate children of the fiber.
   */
  children() {
    return this.ask(fiber => Array.from(fiber.getChildren()));
  }
  /**
   * Gets the fiber's set of children.
   */
  getChildren() {
    if (this._children === null) {
      this._children = new Set();
    }
    return this._children;
  }
  /**
   * Retrieves the interrupted cause of the fiber, which will be `Cause.empty`
   * if the fiber has not been interrupted.
   *
   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked
   * on this fiber, then values derived from the fiber's state (including the
   * log annotations and log level) may not be up-to-date.
   */
  getInterruptedCause() {
    return this.getFiberRef(currentInterruptedCause);
  }
  /**
   * Retrieves the whole set of fiber refs.
   */
  fiberRefs() {
    return this.ask(fiber => fiber.unsafeGetFiberRefs());
  }
  /**
   * Returns an effect that will contain information computed from the fiber
   * state and status while running on the fiber.
   *
   * This allows the outside world to interact safely with mutable fiber state
   * without locks or immutable data.
   */
  ask(f) {
    return suspend(() => {
      const deferred = deferredUnsafeMake(this._fiberId);
      this.tell(stateful((fiber, status) => {
        deferredUnsafeDone(deferred, sync(() => f(fiber, status)));
      }));
      return deferredAwait(deferred);
    });
  }
  /**
   * Adds a message to be processed by the fiber on the fiber.
   */
  tell(message) {
    this._queue.push(message);
    if (!this._running) {
      this._running = true;
      this.drainQueueLaterOnExecutor();
    }
  }
  await() {
    return core_async(resume => {
      const cb = exit => resume(succeed(exit));
      this.tell(stateful((fiber, _) => {
        if (fiber._exitValue !== null) {
          cb(this._exitValue);
        } else {
          fiber.unsafeAddObserver(cb);
        }
      }));
      return sync(() => this.tell(stateful((fiber, _) => {
        fiber.unsafeRemoveObserver(cb);
      })));
    }, this.id());
  }
  inheritAll() {
    return withFiberRuntime((parentFiber, parentStatus) => {
      const parentFiberId = parentFiber.id();
      const parentFiberRefs = parentFiber.unsafeGetFiberRefs();
      const parentRuntimeFlags = parentStatus.runtimeFlags;
      const childFiberRefs = this.unsafeGetFiberRefs();
      const updatedFiberRefs = joinAs(parentFiberRefs, parentFiberId, childFiberRefs);
      parentFiber.setFiberRefs(updatedFiberRefs);
      const updatedRuntimeFlags = parentFiber.getFiberRef(currentRuntimeFlags);
      const patch = Patch_exclude(WindDown)(
      // Do not inherit WindDown or Interruption!
      Patch_exclude(Interruption)(runtimeFlags_diff(parentRuntimeFlags, updatedRuntimeFlags)));
      return updateRuntimeFlags(patch);
    });
  }
  /**
   * Tentatively observes the fiber, but returns immediately if it is not
   * already done.
   */
  poll() {
    return sync(() => fromNullable(this._exitValue));
  }
  /**
   * Unsafely observes the fiber, but returns immediately if it is not
   * already done.
   */
  unsafePoll() {
    return this._exitValue;
  }
  /**
   * In the background, interrupts the fiber as if interrupted from the specified fiber.
   */
  interruptAsFork(fiberId) {
    return sync(() => this.tell(interruptSignal(interrupt(fiberId))));
  }
  /**
   * Adds an observer to the list of observers.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  unsafeAddObserver(observer) {
    if (this._exitValue !== null) {
      observer(this._exitValue);
    } else {
      this._observers.push(observer);
    }
  }
  /**
   * Removes the specified observer from the list of observers that will be
   * notified when the fiber exits.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  unsafeRemoveObserver(observer) {
    this._observers = this._observers.filter(o => o !== observer);
  }
  /**
   * Retrieves all fiber refs of the fiber.
   *
   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked
   * on this fiber, then values derived from the fiber's state (including the
   * log annotations and log level) may not be up-to-date.
   */
  unsafeGetFiberRefs() {
    this.setFiberRef(currentRuntimeFlags, this._runtimeFlags);
    return this._fiberRefs;
  }
  /**
   * Deletes the specified fiber ref.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  unsafeDeleteFiberRef(fiberRef) {
    this._fiberRefs = delete_(this._fiberRefs, fiberRef);
  }
  /**
   * Retrieves the state of the fiber ref, or else its initial value.
   *
   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked
   * on this fiber, then values derived from the fiber's state (including the
   * log annotations and log level) may not be up-to-date.
   */
  getFiberRef(fiberRef) {
    if (this._fiberRefs.locals.has(fiberRef)) {
      return this._fiberRefs.locals.get(fiberRef)[0][1];
    }
    return fiberRef.initial;
  }
  /**
   * Sets the fiber ref to the specified value.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  setFiberRef(fiberRef, value) {
    this._fiberRefs = updatedAs(this._fiberRefs, {
      fiberId: this._fiberId,
      fiberRef,
      value
    });
    // @ts-expect-error
    if (fiberRef === currentSupervisor) {
      // @ts-expect-error
      this._supervisor = value;
    }
  }
  /**
   * Wholesale replaces all fiber refs of this fiber.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  setFiberRefs(fiberRefs) {
    this._fiberRefs = fiberRefs;
    this._supervisor = this.getFiberRef(currentSupervisor);
  }
  /**
   * Adds a reference to the specified fiber inside the children set.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  addChild(child) {
    this.getChildren().add(child);
  }
  /**
   * Removes a reference to the specified fiber inside the children set.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  removeChild(child) {
    this.getChildren().delete(child);
  }
  /**
   * On the current thread, executes all messages in the fiber's inbox. This
   * method may return before all work is done, in the event the fiber executes
   * an asynchronous operation.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  drainQueueOnCurrentThread() {
    let recurse = true;
    while (recurse) {
      let evaluationSignal = EvaluationSignalContinue;
      const prev = globalThis[currentFiberURI];
      globalThis[currentFiberURI] = this;
      try {
        while (evaluationSignal === EvaluationSignalContinue) {
          evaluationSignal = this._queue.length === 0 ? EvaluationSignalDone : this.evaluateMessageWhileSuspended(this._queue.splice(0, 1)[0]);
        }
      } finally {
        this._running = false;
        globalThis[currentFiberURI] = prev;
      }
      // Maybe someone added something to the queue between us checking, and us
      // giving up the drain. If so, we need to restart the draining, but only
      // if we beat everyone else to the restart:
      if (this._queue.length > 0 && !this._running) {
        this._running = true;
        if (evaluationSignal === EvaluationSignalYieldNow) {
          this.drainQueueLaterOnExecutor();
          recurse = false;
        } else {
          recurse = true;
        }
      } else {
        recurse = false;
      }
    }
  }
  /**
   * Schedules the execution of all messages in the fiber's inbox.
   *
   * This method will return immediately after the scheduling
   * operation is completed, but potentially before such messages have been
   * executed.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  drainQueueLaterOnExecutor() {
    this.getFiberRef(currentScheduler).scheduleTask(this.run, this.getFiberRef(currentSchedulingPriority));
  }
  /**
   * Drains the fiber's message queue while the fiber is actively running,
   * returning the next effect to execute, which may be the input effect if no
   * additional effect needs to be executed.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  drainQueueWhileRunning(runtimeFlags, cur0) {
    let cur = cur0;
    while (this._queue.length > 0) {
      const message = this._queue.splice(0, 1)[0];
      // @ts-expect-error
      cur = drainQueueWhileRunningTable[message._tag](this, runtimeFlags, cur, message);
    }
    return cur;
  }
  /**
   * Determines if the fiber is interrupted.
   *
   * **NOTE**: This method is safe to invoke on any fiber, but if not invoked
   * on this fiber, then values derived from the fiber's state (including the
   * log annotations and log level) may not be up-to-date.
   */
  isInterrupted() {
    return !cause_isEmpty(this.getFiberRef(currentInterruptedCause));
  }
  /**
   * Adds an interruptor to the set of interruptors that are interrupting this
   * fiber.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  addInterruptedCause(cause) {
    const oldSC = this.getFiberRef(currentInterruptedCause);
    this.setFiberRef(currentInterruptedCause, sequential(oldSC, cause));
  }
  /**
   * Processes a new incoming interrupt signal.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  processNewInterruptSignal(cause) {
    this.addInterruptedCause(cause);
    this.sendInterruptSignalToAllChildren();
  }
  /**
   * Interrupts all children of the current fiber, returning an effect that will
   * await the exit of the children. This method will return null if the fiber
   * has no children.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  sendInterruptSignalToAllChildren() {
    if (this._children === null || this._children.size === 0) {
      return false;
    }
    let told = false;
    for (const child of this._children) {
      child.tell(interruptSignal(interrupt(this.id())));
      told = true;
    }
    return told;
  }
  /**
   * Interrupts all children of the current fiber, returning an effect that will
   * await the exit of the children. This method will return null if the fiber
   * has no children.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  interruptAllChildren() {
    if (this.sendInterruptSignalToAllChildren()) {
      const it = this._children.values();
      this._children = null;
      let isDone = false;
      const body = () => {
        const next = it.next();
        if (!next.done) {
          return core_asUnit(next.value.await());
        } else {
          return sync(() => {
            isDone = true;
          });
        }
      };
      return whileLoop({
        while: () => !isDone,
        body,
        step: () => {
          //
        }
      });
    }
    return null;
  }
  reportExitValue(exit) {
    if (runtimeMetrics(this._runtimeFlags)) {
      const tags = this.getFiberRef(currentMetricLabels);
      fiberActive.unsafeUpdate(-1, tags);
      switch (exit._tag) {
        case OP_SUCCESS:
          {
            fiberSuccesses.unsafeUpdate(1, tags);
            break;
          }
        case OP_FAILURE:
          {
            fiberFailures.unsafeUpdate(1, tags);
            break;
          }
      }
    }
    if (exit._tag === "Failure") {
      const level = this.getFiberRef(currentUnhandledErrorLogLevel);
      if (!isInterruptedOnly(exit.cause) && level._tag === "Some") {
        this.log("Fiber terminated with a non handled error", exit.cause, level);
      }
    }
  }
  setExitValue(exit) {
    this._exitValue = exit;
    if (runtimeMetrics(this._runtimeFlags)) {
      const tags = this.getFiberRef(currentMetricLabels);
      const startTimeMillis = this.id().startTimeMillis;
      const endTimeMillis = new Date().getTime();
      fiberLifetimes.unsafeUpdate((endTimeMillis - startTimeMillis) / 1000.0, tags);
    }
    this.reportExitValue(exit);
    for (let i = this._observers.length - 1; i >= 0; i--) {
      this._observers[i](exit);
    }
  }
  getLoggers() {
    return this.getFiberRef(currentLoggers);
  }
  log(message, cause, overrideLogLevel) {
    const logLevel = Option_isSome(overrideLogLevel) ? overrideLogLevel.value : this.getFiberRef(currentLogLevel);
    const minimumLogLevel = this.getFiberRef(currentMinimumLogLevel);
    if (Level_greaterThan(minimumLogLevel, logLevel)) {
      return;
    }
    const spans = this.getFiberRef(currentLogSpan);
    const annotations = this.getFiberRef(currentLogAnnotations);
    const loggers = this.getLoggers();
    const contextMap = this.unsafeGetFiberRefs();
    if (mjs_HashSet_size(loggers) > 0) {
      const clockService = mjs_Context_get(this.getFiberRef(currentServices), clock_clockTag);
      const date = new Date(clockService.unsafeCurrentTimeMillis());
      for (const logger of loggers) {
        logger.log({
          fiberId: this.id(),
          logLevel,
          message,
          cause,
          context: contextMap,
          spans,
          annotations,
          date
        });
      }
    }
  }
  /**
   * Evaluates a single message on the current thread, while the fiber is
   * suspended. This method should only be called while evaluation of the
   * fiber's effect is suspended due to an asynchronous operation.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  evaluateMessageWhileSuspended(message) {
    switch (message._tag) {
      case OP_YIELD_NOW:
        {
          return EvaluationSignalYieldNow;
        }
      case OP_INTERRUPT_SIGNAL:
        {
          this.processNewInterruptSignal(message.cause);
          if (this._asyncInterruptor !== null) {
            this._asyncInterruptor(exitFailCause(message.cause));
            this._asyncInterruptor = null;
          }
          return EvaluationSignalContinue;
        }
      case OP_RESUME:
        {
          this._asyncInterruptor = null;
          this._asyncBlockingOn = null;
          this.evaluateEffect(message.effect);
          return EvaluationSignalContinue;
        }
      case OP_STATEFUL:
        {
          message.onFiber(this, this._exitValue !== null ? Status_done : Status_suspended(this._runtimeFlags, this._asyncBlockingOn));
          return EvaluationSignalContinue;
        }
      default:
        {
          return fiberRuntime_absurd(message);
        }
    }
  }
  /**
   * Evaluates an effect until completion, potentially asynchronously.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  evaluateEffect(effect0) {
    this._supervisor.onResume(this);
    try {
      let effect = interruptible(this._runtimeFlags) && this.isInterrupted() ? exitFailCause(this.getInterruptedCause()) : effect0;
      while (effect !== null) {
        try {
          const eff = effect;
          const exit = this.runLoop(eff);
          this._runtimeFlags = runtimeFlags_enable(WindDown)(this._runtimeFlags);
          const interruption = this.interruptAllChildren();
          if (interruption !== null) {
            effect = core_flatMap(interruption, () => exit);
          } else {
            if (this._queue.length === 0) {
              // No more messages to process, so we will allow the fiber to end life:
              this.setExitValue(exit);
            } else {
              // There are messages, possibly added by the final op executed by
              // the fiber. To be safe, we should execute those now before we
              // allow the fiber to end life:
              this.tell(resume(exit));
            }
            effect = null;
          }
        } catch (e) {
          if (isEffect(e)) {
            if (e._tag === OP_YIELD) {
              if (cooperativeYielding(this._runtimeFlags)) {
                this.tell(fiberMessage_yieldNow());
                this.tell(resume(exitUnit));
                effect = null;
              } else {
                effect = exitUnit;
              }
            } else if (e._tag === OP_ASYNC) {
              // Terminate this evaluation, async resumption will continue evaluation:
              effect = null;
            }
          } else {
            throw e;
          }
        }
      }
    } finally {
      this._supervisor.onSuspend(this);
    }
  }
  /**
   * Begins execution of the effect associated with this fiber on the current
   * thread. This can be called to "kick off" execution of a fiber after it has
   * been created, in hopes that the effect can be executed synchronously.
   *
   * This is not the normal way of starting a fiber, but it is useful when the
   * express goal of executing the fiber is to synchronously produce its exit.
   */
  start(effect) {
    if (!this._running) {
      this._running = true;
      const prev = globalThis[currentFiberURI];
      globalThis[currentFiberURI] = this;
      try {
        this.evaluateEffect(effect);
      } finally {
        this._running = false;
        globalThis[currentFiberURI] = prev;
        // Because we're special casing `start`, we have to be responsible
        // for spinning up the fiber if there were new messages added to
        // the queue between the completion of the effect and the transition
        // to the not running state.
        if (this._queue.length > 0) {
          this.drainQueueLaterOnExecutor();
        }
      }
    } else {
      this.tell(resume(effect));
    }
  }
  /**
   * Begins execution of the effect associated with this fiber on in the
   * background, and on the correct thread pool. This can be called to "kick
   * off" execution of a fiber after it has been created, in hopes that the
   * effect can be executed synchronously.
   */
  startFork(effect) {
    this.tell(resume(effect));
  }
  /**
   * Takes the current runtime flags, patches them to return the new runtime
   * flags, and then makes any changes necessary to fiber state based on the
   * specified patch.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  patchRuntimeFlags(oldRuntimeFlags, patch) {
    const newRuntimeFlags = runtimeFlags_patch(oldRuntimeFlags, patch);
    globalThis[currentFiberURI] = this;
    this._runtimeFlags = newRuntimeFlags;
    return newRuntimeFlags;
  }
  /**
   * Initiates an asynchronous operation, by building a callback that will
   * resume execution, and then feeding that callback to the registration
   * function, handling error cases and repeated resumptions appropriately.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  initiateAsync(runtimeFlags, asyncRegister) {
    let alreadyCalled = false;
    const callback = effect => {
      if (!alreadyCalled) {
        alreadyCalled = true;
        this.tell(resume(effect));
      }
    };
    if (interruptible(runtimeFlags)) {
      this._asyncInterruptor = callback;
    }
    try {
      asyncRegister(callback);
    } catch (e) {
      callback(failCause(die(e)));
    }
  }
  pushStack(cont) {
    this._stack.push(cont);
    if (cont._tag === "OnStep") {
      this._steps.push(true);
    }
    if (cont._tag === "RevertFlags") {
      this._steps.push(false);
    }
  }
  popStack() {
    const item = this._stack.pop();
    if (item) {
      if (item._tag === "OnStep" || item._tag === "RevertFlags") {
        this._steps.pop();
      }
      return item;
    }
    return;
  }
  getNextSuccessCont() {
    let frame = this.popStack();
    while (frame) {
      if (frame._tag !== OP_ON_FAILURE) {
        return frame;
      }
      frame = this.popStack();
    }
  }
  getNextFailCont() {
    let frame = this.popStack();
    while (frame) {
      if (frame._tag !== OP_ON_SUCCESS && frame._tag !== OP_WHILE) {
        return frame;
      }
      frame = this.popStack();
    }
  }
  [(fiberRuntime_a = FiberTypeId, fiberRuntime_b = RuntimeFiberTypeId, OP_TAG)](op) {
    return core_map(fiberRefGet(currentContext), context => {
      try {
        return mjs_Context_unsafeGet(context, op);
      } catch (e) {
        console.log(e);
        throw e;
      }
    });
  }
  ["Left"](op) {
    return exitFail(op.i0);
  }
  ["None"](_) {
    return exitFail(NoSuchElementException());
  }
  ["Right"](op) {
    return exitSucceed(op.i0);
  }
  ["Some"](op) {
    return exitSucceed(op.i0);
  }
  [OP_SYNC](op) {
    const value = op.i0();
    const cont = this.getNextSuccessCont();
    if (cont !== undefined) {
      if (!(cont._tag in contOpSuccess)) {
        // @ts-expect-error
        fiberRuntime_absurd(cont);
      }
      // @ts-expect-error
      return contOpSuccess[cont._tag](this, cont, value);
    } else {
      throw exitSucceed(value);
    }
  }
  [OP_SUCCESS](op) {
    const oldCur = op;
    const cont = this.getNextSuccessCont();
    if (cont !== undefined) {
      if (!(cont._tag in contOpSuccess)) {
        // @ts-expect-error
        fiberRuntime_absurd(cont);
      }
      // @ts-expect-error
      return contOpSuccess[cont._tag](this, cont, oldCur.i0);
    } else {
      throw oldCur;
    }
  }
  [OP_FAILURE](op) {
    const span = this.getFiberRef(currentTracerSpan);
    const cause = isNil(span) || span.head._tag === "ExternalSpan" ? op.i0 : annotated(op.i0, makeSpanAnnotation(span.head));
    const cont = this.getNextFailCont();
    if (cont !== undefined) {
      switch (cont._tag) {
        case OP_ON_FAILURE:
        case OP_ON_SUCCESS_AND_FAILURE:
          {
            if (!(interruptible(this._runtimeFlags) && this.isInterrupted())) {
              return cont.i1(cause);
            } else {
              return exitFailCause(stripFailures(cause));
            }
          }
        case "OnStep":
          {
            if (!(interruptible(this._runtimeFlags) && this.isInterrupted())) {
              return cont.i1(exitFailCause(cause));
            } else {
              return exitFailCause(stripFailures(cause));
            }
          }
        case OP_REVERT_FLAGS:
          {
            this.patchRuntimeFlags(this._runtimeFlags, cont.patch);
            if (interruptible(this._runtimeFlags) && this.isInterrupted()) {
              return exitFailCause(sequential(cause, this.getInterruptedCause()));
            } else {
              return exitFailCause(cause);
            }
          }
        default:
          {
            fiberRuntime_absurd(cont);
          }
      }
    } else {
      throw exitFailCause(cause);
    }
  }
  [OP_WITH_RUNTIME](op) {
    return op.i0(this, Status_running(this._runtimeFlags));
  }
  ["Blocked"](op) {
    if (this._steps[this._steps.length - 1]) {
      const nextOp = this.popStack();
      if (nextOp) {
        switch (nextOp._tag) {
          case "OnStep":
            {
              return nextOp.i1(op);
            }
          case "OnSuccess":
            {
              return core_blocked(op.i0, core_flatMap(op.i1, nextOp.i1));
            }
          case "OnSuccessAndFailure":
            {
              return core_blocked(op.i0, matchCauseEffect(op.i1, {
                onFailure: nextOp.i1,
                onSuccess: nextOp.i2
              }));
            }
          case "OnFailure":
            {
              return core_blocked(op.i0, catchAllCause(op.i1, nextOp.i1));
            }
          case "While":
            {
              return core_blocked(op.i0, core_flatMap(op.i1, a => {
                nextOp.i2(a);
                if (nextOp.i0()) {
                  return whileLoop({
                    while: nextOp.i0,
                    body: nextOp.i1,
                    step: nextOp.i2
                  });
                }
                return core_unit;
              }));
            }
          case "RevertFlags":
            {
              this.pushStack(nextOp);
              break;
            }
        }
      }
    }
    return uninterruptibleMask(restore => core_flatMap(fork(runRequestBlock(op.i0)), () => restore(op.i1)));
  }
  ["RunBlocked"](op) {
    return runBlockedRequests(op.i0);
  }
  [OP_UPDATE_RUNTIME_FLAGS](op) {
    const updateFlags = op.i0;
    const oldRuntimeFlags = this._runtimeFlags;
    const newRuntimeFlags = runtimeFlags_patch(oldRuntimeFlags, updateFlags);
    // One more chance to short circuit: if we're immediately going
    // to interrupt. Interruption will cause immediate reversion of
    // the flag, so as long as we "peek ahead", there's no need to
    // set them to begin with.
    if (interruptible(newRuntimeFlags) && this.isInterrupted()) {
      return exitFailCause(this.getInterruptedCause());
    } else {
      // Impossible to short circuit, so record the changes
      this.patchRuntimeFlags(this._runtimeFlags, updateFlags);
      if (op.i1) {
        // Since we updated the flags, we need to revert them
        const revertFlags = runtimeFlags_diff(newRuntimeFlags, oldRuntimeFlags);
        this.pushStack(new RevertFlags(revertFlags, op));
        return op.i1(oldRuntimeFlags);
      } else {
        return exitUnit;
      }
    }
  }
  [OP_ON_SUCCESS](op) {
    this.pushStack(op);
    return op.i0;
  }
  ["OnStep"](op) {
    this.pushStack(op);
    return op.i0;
  }
  [OP_ON_FAILURE](op) {
    this.pushStack(op);
    return op.i0;
  }
  [OP_ON_SUCCESS_AND_FAILURE](op) {
    this.pushStack(op);
    return op.i0;
  }
  [OP_ASYNC](op) {
    this._asyncBlockingOn = op.i1;
    this.initiateAsync(this._runtimeFlags, op.i0);
    throw op;
  }
  [OP_YIELD](op) {
    throw op;
  }
  [OP_WHILE](op) {
    const check = op.i0;
    const body = op.i1;
    if (check()) {
      this.pushStack(op);
      return body();
    } else {
      return exitUnit;
    }
  }
  [OP_COMMIT](op) {
    return op.commit();
  }
  /**
   * The main run-loop for evaluating effects.
   *
   * **NOTE**: This method must be invoked by the fiber itself.
   */
  runLoop(effect0) {
    let cur = effect0;
    let ops = 0;
    // eslint-disable-next-line no-constant-condition
    while (true) {
      if ((this._runtimeFlags & OpSupervision) !== 0) {
        this._supervisor.onEffect(this, cur);
      }
      if (this._queue.length > 0) {
        cur = this.drainQueueWhileRunning(this._runtimeFlags, cur);
      }
      ops += 1;
      if (ops >= this.getFiberRef(currentMaxFiberOps)) {
        ops = 0;
        const oldCur = cur;
        cur = core_flatMap(yieldNow(), () => oldCur);
      }
      try {
        if (!(cur._tag in this)) {
          if (typeof cur === "function") {
            console.log(cur());
          }
          // @ts-expect-error
          fiberRuntime_absurd(cur);
        }
        // @ts-expect-error
        cur = this._supervisor.onRun(
        // @ts-expect-error
        () => this[cur._tag](cur), this);
      } catch (e) {
        if (isEffect(e)) {
          if (e._tag === OP_YIELD || e._tag === OP_ASYNC) {
            throw e;
          }
          if (e._tag === OP_SUCCESS || e._tag === OP_FAILURE) {
            return e;
          }
        } else {
          if (isEffectError(e)) {
            cur = exitFailCause(e.cause);
          } else if (isInterruptedException(e)) {
            cur = exitFailCause(sequential(die(e), interrupt(Id_none)));
          } else {
            cur = exitFailCause(die(e));
          }
        }
      }
    }
  }
}
// circular with Logger
/** @internal */
const currentMinimumLogLevel = /*#__PURE__*/fiberRefUnsafeMake( /*#__PURE__*/fromLiteral("Info"));
/** @internal */
const defaultLogger = /*#__PURE__*/makeLogger(options => {
  const formatted = stringLogger.log(options);
  globalThis.console.log(formatted);
});
/** @internal */
const filterMinimumLogLevel = /*#__PURE__*/(/* unused pure expression or super */ null && (internalLogger.makeLogger(options => {
  const formatted = internalLogger.stringLogger.log(options);
  globalThis.console.log(formatted);
})));
/** @internal */
const logFmtLogger = /*#__PURE__*/(/* unused pure expression or super */ null && (internalLogger.makeLogger(options => {
  const formatted = internalLogger.logfmtLogger.log(options);
  globalThis.console.log(formatted);
})));
/** @internal */
const tracerLogger = /*#__PURE__*/makeLogger(({
  annotations,
  cause,
  context,
  fiberId,
  logLevel,
  message
}) => {
  const span = flatMap(fiberRefs_get(context, currentTracerSpan), List_head);
  const clockService = map(fiberRefs_get(context, currentServices), _ => mjs_Context_get(_, clock_clockTag));
  if (span._tag === "None" || span.value._tag === "ExternalSpan" || clockService._tag === "None") {
    return;
  }
  const attributes = Object.fromEntries(annotations);
  attributes["effect.fiberId"] = Id_threadName(fiberId);
  attributes["effect.logLevel"] = logLevel.label;
  if (cause !== null && cause !== cause_empty) {
    attributes["effect.cause"] = cause_pretty(cause);
  }
  span.value.event(String(message), clockService.value.unsafeCurrentTimeNanos(), attributes);
});
/** @internal */
const currentLoggers = /*#__PURE__*/fiberRefUnsafeMakeHashSet( /*#__PURE__*/mjs_HashSet_make(defaultLogger, tracerLogger));
// circular with Effect
/* @internal */
const acquireRelease = /*#__PURE__*/Function_dual(args => isEffect(args[0]), (acquire, release) => {
  return uninterruptible(core_tap(acquire, a => addFinalizer(exit => release(a, exit))));
});
/* @internal */
const acquireReleaseInterruptible = /*#__PURE__*/Function_dual(args => isEffect(args[0]), (acquire, release) => {
  return ensuring(acquire, addFinalizer(exit => release(exit)));
});
/* @internal */
const addFinalizer = finalizer => withFiberRuntime(runtime => {
  const acquireRefs = runtime.unsafeGetFiberRefs();
  return core_flatMap(scope, scope => scopeAddFinalizerExit(scope, exit => withFiberRuntime(runtimeFinalizer => {
    const pre = runtimeFinalizer.unsafeGetFiberRefs();
    const patch = Patch_diff(pre, acquireRefs);
    const inverse = Patch_diff(acquireRefs, pre);
    runtimeFinalizer.setFiberRefs(Patch_patch(patch, runtimeFinalizer.id(), acquireRefs));
    return ensuring(finalizer(exit), sync(() => {
      runtimeFinalizer.setFiberRefs(Patch_patch(inverse, runtimeFinalizer.id(), runtimeFinalizer.unsafeGetFiberRefs()));
    }));
  })));
});
/* @internal */
const daemonChildren = self => {
  const forkScope = fiberRefLocally(currentForkScopeOverride, mjs_Option_some(globalScope));
  return forkScope(self);
};
/** @internal */
const _existsParFound = /*#__PURE__*/Symbol("@effect/io/Effect/existsPar/found");
/* @internal */
const fiberRuntime_exists = /*#__PURE__*/Function_dual(args => isIterable(args[0]), (elements, f, options) => matchSimple(options, () => suspend(() => existsLoop(elements[Symbol.iterator](), 0, f)), () => matchEffect(forEachOptions(elements, (a, i) => if_(f(a, i), {
  onTrue: core_fail(_existsParFound),
  onFalse: core_unit
}), options), {
  onFailure: e => e === _existsParFound ? succeed(true) : core_fail(e),
  onSuccess: () => succeed(false)
})));
const existsLoop = (iterator, index, f) => {
  const next = iterator.next();
  if (next.done) {
    return succeed(false);
  }
  return core_flatMap(f(next.value, index), b => b ? succeed(b) : existsLoop(iterator, index + 1, f));
};
/* @internal */
const fiberRuntime_filter = /*#__PURE__*/Function_dual(args => isIterable(args[0]), (elements, f, options) => {
  const predicate = options?.negate ? (a, i) => core_map(f(a, i), Boolean_not) : f;
  return matchSimple(options, () => suspend(() => ReadonlyArray_fromIterable(elements).reduceRight((effect, a, i) => core_zipWith(effect, suspend(() => predicate(a, i)), (list, b) => b ? [a, ...list] : list), sync(() => new Array()))), () => core_map(forEachOptions(elements, (a, i) => core_map(predicate(a, i), b => b ? mjs_Option_some(a) : Option_none()), options), ReadonlyArray_compact));
});
// === all
const allResolveInput = input => {
  if (Array.isArray(input) || isIterable(input)) {
    return [input, Option_none()];
  }
  const keys = Object.keys(input);
  const size = keys.length;
  return [keys.map(k => input[k]), mjs_Option_some(values => {
    const res = {};
    for (let i = 0; i < size; i++) {
      ;
      res[keys[i]] = values[i];
    }
    return res;
  })];
};
const allValidate = (effects, reconcile, options) => {
  const eitherEffects = [];
  for (const effect of effects) {
    eitherEffects.push(core_either(effect));
  }
  return core_flatMap(forEachOptions(eitherEffects, Function_identity, {
    concurrency: options?.concurrency,
    batching: options?.batching
  }), eithers => {
    const none = Option_none();
    const size = eithers.length;
    const errors = new Array(size);
    const successes = new Array(size);
    let errored = false;
    for (let i = 0; i < size; i++) {
      const either = eithers[i];
      if (either._tag === "Left") {
        errors[i] = mjs_Option_some(either.left);
        errored = true;
      } else {
        successes[i] = either.right;
        errors[i] = none;
      }
    }
    if (errored) {
      return reconcile._tag === "Some" ? core_fail(reconcile.value(errors)) : core_fail(errors);
    } else if (options?.discard) {
      return core_unit;
    }
    return reconcile._tag === "Some" ? succeed(reconcile.value(successes)) : succeed(successes);
  });
};
const allEither = (effects, reconcile, options) => {
  const eitherEffects = [];
  for (const effect of effects) {
    eitherEffects.push(core_either(effect));
  }
  if (options?.discard) {
    return forEachOptions(eitherEffects, Function_identity, {
      concurrency: options?.concurrency,
      batching: options?.batching,
      discard: true
    });
  }
  return core_map(forEachOptions(eitherEffects, Function_identity, {
    concurrency: options?.concurrency,
    batching: options?.batching
  }), eithers => reconcile._tag === "Some" ? reconcile.value(eithers) : eithers);
};
/* @internal */
const fiberRuntime_all = (arg, options) => {
  const [effects, reconcile] = allResolveInput(arg);
  if (options?.mode === "validate") {
    return allValidate(effects, reconcile, options);
  } else if (options?.mode === "either") {
    return allEither(effects, reconcile, options);
  }
  return reconcile._tag === "Some" ? core_map(forEachOptions(effects, Function_identity, options), reconcile.value) : forEachOptions(effects, Function_identity, options);
};
/* @internal */
const allWith = options => arg => fiberRuntime_all(arg, options);
/* @internal */
const allSuccesses = (elements, options) => core_map(fiberRuntime_all(ReadonlyArray_fromIterable(elements).map(core_exit), options), ReadonlyArray_filterMap(exit => exitIsSuccess(exit) ? mjs_Option_some(exit.i0) : Option_none()));
/* @internal */
const fiberRuntime_replicate = /*#__PURE__*/Function_dual(2, (self, n) => Array.from({
  length: n
}, () => self));
/* @internal */
const replicateEffect = /*#__PURE__*/Function_dual(args => isEffect(args[0]), (self, n, options) => fiberRuntime_all(fiberRuntime_replicate(n)(self), options));
// @ts-expect-error
const forEachOptions = /*#__PURE__*/Function_dual(args => isIterable(args[0]), (self, f, options) => withFiberRuntime(r => {
  const requestBatchingEnabled = options?.batching === true || options?.batching === "inherit" && r.getFiberRef(currentRequestBatching);
  if (options?.discard) {
    return concurrency_match(options, () => requestBatchingEnabled ? forEachBatchedDiscard(self, f) : forEachSequentialDiscard(self, f), () => forEachParUnboundedDiscard(self, f, requestBatchingEnabled), n => forEachParNDiscard(self, n, f, requestBatchingEnabled));
  }
  return concurrency_match(options, () => requestBatchingEnabled ? forEachParN(self, 1, f, true) : forEachSequential(self, f), () => forEachParUnbounded(self, f, requestBatchingEnabled), n => forEachParN(self, n, f, requestBatchingEnabled));
}));
/* @internal */
const forEachParUnbounded = (self, f, batching) => suspend(() => {
  const as = ReadonlyArray_fromIterable(self);
  const array = new Array(as.length);
  const fn = (a, i) => core_flatMap(f(a, i), b => sync(() => array[i] = b));
  return core_zipRight(forEachParUnboundedDiscard(as, fn, batching), succeed(array));
});
const forEachBatchedDiscard = (self, f) => suspend(() => {
  const as = ReadonlyArray_fromIterable(self);
  const size = as.length;
  if (size === 0) {
    return core_unit;
  } else if (size === 1) {
    return core_asUnit(f(as[0], 0));
  }
  const effects = as.map(f);
  const blocked = new Array();
  const loop = i => i === effects.length ? suspend(() => {
    if (blocked.length > 0) {
      const requests = blocked.map(b => b.i0).reduce(par);
      return core_blocked(requests, forEachBatchedDiscard(blocked.map(b => b.i1), Function_identity));
    }
    return core_unit;
  }) : flatMapStep(effects[i], s => {
    if (s._tag === "Blocked") {
      blocked.push(s);
      return loop(i + 1);
    } else if (s._tag === "Failure") {
      return suspend(() => {
        if (blocked.length > 0) {
          const requests = blocked.map(b => b.i0).reduce(par);
          return core_blocked(requests, core_flatMap(forEachBatchedDiscard(blocked.map(b => b.i1), Function_identity), () => s));
        }
        return core_unit;
      });
    } else {
      return loop(i + 1);
    }
  });
  return loop(0);
});
/* @internal */
const forEachParUnboundedDiscard = (self, f, batching) => suspend(() => {
  const as = ReadonlyArray_fromIterable(self);
  const size = as.length;
  if (size === 0) {
    return core_unit;
  } else if (size === 1) {
    return core_asUnit(f(as[0], 0));
  }
  return uninterruptibleMask(restore => {
    const deferred = deferredUnsafeMake(Id_none);
    let ref = 0;
    const residual = [];
    const joinOrder = [];
    const process = transplant(graft => forEachSequential(as, (a, i) => core_map(fiber => {
      fiber.unsafeAddObserver(() => {
        joinOrder.push(fiber);
      });
      return fiber;
    })(forkDaemon(graft(core_flatMap(exit => {
      switch (exit._tag) {
        case "Failure":
          {
            if (residual.length > 0) {
              const requests = residual.map(blocked => blocked.i0).reduce(par);
              const _continue = forEachParUnboundedDiscard(residual, blocked => blocked.i1, batching);
              return core_blocked(requests, matchCauseEffect(_continue, {
                onFailure: cause => core_zipRight(deferredFail(deferred, void 0), failCause(parallel(cause, exit.cause))),
                onSuccess: () => core_zipRight(deferredFail(deferred, void 0), failCause(exit.cause))
              }));
            }
            return core_zipRight(deferredFail(deferred, void 0), failCause(exit.cause));
          }
        default:
          {
            if (exit._tag === "Blocked") {
              residual.push(exit);
            }
            if (ref + 1 === size) {
              if (residual.length > 0) {
                const requests = residual.map(blocked => blocked.i0).reduce(par);
                const _continue = forEachParUnboundedDiscard(residual, blocked => blocked.i1, batching);
                return deferredSucceed(deferred, core_blocked(requests, _continue));
              } else {
                deferredUnsafeDone(deferred, exitSucceed(exitUnit));
              }
            } else {
              ref = ref + 1;
            }
            return core_unit;
          }
      }
    })(suspend(() => restore((batching ? step : core_exit)(f(a, i))))))))));
    return core_flatMap(process, fibers => matchCauseEffect(restore(deferredAwait(deferred)), {
      onFailure: cause => core_flatMap(forEachParUnbounded(fibers, interruptFiber, batching), exits => {
        const exit = exitCollectAll(exits, {
          parallel: true
        });
        if (exit._tag === "Some" && exitIsFailure(exit.value)) {
          return failCause(parallel(stripFailures(cause), exit.value.i0));
        } else {
          return failCause(stripFailures(cause));
        }
      }),
      onSuccess: rest => core_flatMap(rest, () => forEachSequentialDiscard(joinOrder, f => f.inheritAll()))
    }));
  });
});
/* @internal */
const forEachParN = (self, n, f, batching) => suspend(() => {
  const as = ReadonlyArray_fromIterable(self);
  const array = new Array(as.length);
  const fn = (a, i) => core_map(f(a, i), b => array[i] = b);
  return core_zipRight(forEachParNDiscard(as, n, fn, batching), succeed(array));
});
/* @internal */
const forEachParNDiscard = (self, n, f, batching) => suspend(() => {
  let i = 0;
  const iterator = self[Symbol.iterator]();
  const residual = [];
  const worker = core_flatMap(sync(() => iterator.next()), next => next.done ? core_unit : core_flatMap((batching ? step : core_exit)(core_asUnit(f(next.value, i++))), res => {
    switch (res._tag) {
      case "Blocked":
        {
          residual.push(res);
          return worker;
        }
      case "Failure":
        {
          return res;
        }
      case "Success":
        return worker;
    }
  }));
  const effects = [];
  for (let i = 0; i < n; i++) {
    effects.push(worker);
  }
  return core_flatMap(core_exit(forEachParUnboundedDiscard(effects, Function_identity, batching)), exit => {
    if (residual.length === 0) {
      return exit;
    }
    const requests = residual.map(blocked => blocked.i0).reduce(par);
    const _continue = forEachParNDiscard(residual, n, blocked => blocked.i1, batching);
    if (exit._tag === "Failure") {
      return core_blocked(requests, matchCauseEffect(_continue, {
        onFailure: cause => exitFailCause(parallel(exit.cause, cause)),
        onSuccess: () => exit
      }));
    }
    return core_blocked(requests, _continue);
  });
});
/* @internal */
const fork = self => withFiberRuntime((state, status) => succeed(unsafeFork(self, state, status.runtimeFlags)));
/* @internal */
const forkDaemon = self => forkWithScopeOverride(self, globalScope);
/* @internal */
const forkWithErrorHandler = /*#__PURE__*/Function_dual(2, (self, handler) => fork(onError(self, cause => {
  const either = failureOrCause(cause);
  switch (either._tag) {
    case "Left":
      {
        return handler(either.left);
      }
    case "Right":
      {
        return failCause(either.right);
      }
  }
})));
/** @internal */
const unsafeFork = (effect, parentFiber, parentRuntimeFlags, overrideScope = null) => {
  const childFiber = unsafeMakeChildFiber(effect, parentFiber, parentRuntimeFlags, overrideScope);
  childFiber.resume(effect);
  return childFiber;
};
/** @internal */
const unsafeMakeChildFiber = (effect, parentFiber, parentRuntimeFlags, overrideScope = null) => {
  const childId = Id_unsafeMake();
  const parentFiberRefs = parentFiber.unsafeGetFiberRefs();
  const childFiberRefs = forkAs(parentFiberRefs, childId);
  const childFiber = new FiberRuntime(childId, childFiberRefs, parentRuntimeFlags);
  const childContext = getOrDefault(childFiberRefs, currentContext);
  const supervisor = childFiber._supervisor;
  supervisor.onStart(childContext, effect, mjs_Option_some(parentFiber), childFiber);
  childFiber.unsafeAddObserver(exit => supervisor.onEnd(exit, childFiber));
  const parentScope = overrideScope !== null ? overrideScope : getOrElse(() => parentFiber.scope())(parentFiber.getFiberRef(currentForkScopeOverride));
  parentScope.add(parentRuntimeFlags, childFiber);
  return childFiber;
};
/* @internal */
const forkWithScopeOverride = (self, scopeOverride) => withFiberRuntime((parentFiber, parentStatus) => succeed(unsafeFork(self, parentFiber, parentStatus.runtimeFlags, scopeOverride)));
/* @internal */
const mergeAll = /*#__PURE__*/Function_dual(args => isIterable(args[0]), (elements, zero, f, options) => matchSimple(options, () => ReadonlyArray_fromIterable(elements).reduce((acc, a, i) => core_zipWith(acc, a, (acc, a) => f(acc, a, i)), succeed(zero)), () => core_flatMap(Ref_make(zero), acc => core_flatMap(forEachOptions(elements, (effect, i) => core_flatMap(effect, a => Ref_update(acc, b => f(b, a, i))), options), () => Ref_get(acc)))));
/* @internal */
const fiberRuntime_partition = /*#__PURE__*/Function_dual(args => isIterable(args[0]), (elements, f, options) => core_map(chunk => core_partitionMap(chunk, Function_identity))(forEachOptions(elements, (a, i) => core_either(f(a, i)), options)));
/* @internal */
const validateAll = /*#__PURE__*/Function_dual(args => isIterable(args[0]), (elements, f, options) => core_flatMap(fiberRuntime_partition(elements, f, {
  concurrency: options?.concurrency,
  batching: options?.batching
}), ([es, bs]) => es.length === 0 ? options?.discard ? core_unit : succeed(bs) : core_fail(es)));
/* @internal */
const raceAll = all => {
  const list = Chunk_fromIterable(all);
  if (!isNonEmpty(list)) {
    return dieSync(() => IllegalArgumentException(`Received an empty collection of effects`));
  }
  const self = Chunk_headNonEmpty(list);
  const effects = Chunk_tailNonEmpty(list);
  const inheritAll = res => core_as(res[0])(fiber_inheritAll(res[1]));
  return core_flatMap(done => core_flatMap(fails => uninterruptibleMask(restore => core_flatMap(head => core_flatMap(fibers => onInterrupt(() => reduce(core_unit, (effect, fiber) => core_zipLeft(interruptFiber(fiber))(effect))(fibers))(restore(core_flatMap(inheritAll)(Deferred_await(done)))))(core_tap(fibers => reduce(core_unit, (effect, fiber) => core_zipRight(core_asUnit(fork(core_flatMap(raceAllArbiter(fibers, fiber, done, fails))(_await(fiber)))))(effect))(fibers))(core_map(tail => Chunk_prepend(head)(tail))(core_map(unsafeFromArray)(forEachSequential(effect => fork(core_interruptible(effect)))(effects))))))(fork(core_interruptible(self)))))(Ref_make(effects.length)))(deferredMake());
};
/* @internal */
const raceAllArbiter = (fibers, winner, deferred, fails) => exit => exitMatchEffect(exit, {
  onFailure: cause => core_flatten(Ref_modify(fails, fails => [fails === 0 ? core_asUnit(deferredFailCause(deferred, cause)) : core_unit, fails - 1])),
  onSuccess: value => core_flatMap(set => set ? reduce(core_unit, (effect, fiber) => fiber === winner ? effect : core_zipLeft(interruptFiber(fiber))(effect))(Chunk_fromIterable(fibers)) : core_unit)(deferredSucceed(deferred, [value, winner]))
});
/* @internal */
const reduceEffect = /*#__PURE__*/Function_dual(args => isIterable(args[0]), (elements, zero, f, options) => matchSimple(options, () => ReadonlyArray_fromIterable(elements).reduce((acc, a, i) => core_zipWith(acc, a, (acc, a) => f(acc, a, i)), zero), () => suspend(() => core_map(option => {
  switch (option._tag) {
    case "None":
      {
        throw new Error("BUG: Effect.reduceEffect - please report an issue at https://github.com/Effect-TS/io/issues");
      }
    case "Some":
      {
        return option.value;
      }
  }
})(mergeAll([zero, ...elements], Option_none(), (acc, elem, i) => {
  switch (acc._tag) {
    case "None":
      {
        return mjs_Option_some(elem);
      }
    case "Some":
      {
        return mjs_Option_some(f(acc.value, elem, i));
      }
  }
}, options)))));
/* @internal */
const parallelFinalizers = self => core_flatMap(scope, outerScope => core_flatMap(scopeMake(executionStrategy_parallel), innerScope => core_zipRight(scopeExtend(self, innerScope))(outerScope.addFinalizer(exit => innerScope.close(exit)))));
/* @internal */
const scopeWith = f => core_flatMap(scopeTag, f);
/* @internal */
const scopedEffect = effect => core_flatMap(scopeMake(), scope => scopeUse(scope)(effect));
/* @internal */
const sequentialFinalizers = self => scopeWith(scope => core_flatMap(scope => scopeExtend(scope)(self))(scopeFork(scope, executionStrategy_sequential)));
/* @internal */
const tagMetricsScoped = (key, value) => labelMetricsScoped([label_make(key, value)]);
/* @internal */
const labelMetricsScoped = labels => labelMetricsScopedSet(mjs_HashSet_fromIterable(labels));
/* @internal */
const labelMetricsScopedSet = labels => fiberRefLocallyScopedWith(currentMetricLabels, set => mjs_HashSet_union(labels)(set));
/* @internal */
const using = /*#__PURE__*/Function_dual(2, (self, use) => acquireUseRelease(scopeMake(), scope => core_flatMap(scopeExtend(self, scope), use), (scope, exit) => scopeClose(scope, exit)));
/* @internal */
const unsome = self => matchEffect(self, {
  onFailure: option => {
    switch (option._tag) {
      case "None":
        {
          return succeed(Option_none());
        }
      case "Some":
        {
          return core_fail(option.value);
        }
    }
  },
  onSuccess: a => succeed(mjs_Option_some(a))
});
/** @internal */
const fiberRuntime_validate = /*#__PURE__*/Function_dual(args => isEffect(args[1]), (self, that, options) => validateWith(self, that, (a, b) => [a, b], options));
/** @internal */
const validateWith = /*#__PURE__*/Function_dual(args => isEffect(args[1]), (self, that, f, options) => core_flatten(zipWithOptions(core_exit(self), core_exit(that), (ea, eb) => exitZipWith(ea, eb, {
  onSuccess: f,
  onFailure: (ca, cb) => options?.concurrent ? parallel(ca, cb) : sequential(ca, cb)
}), options)));
/* @internal */
const validateAllPar = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (elements, f) => core.flatMap(fiberRuntime_partition(elements, f), ([es, bs]) => es.length === 0 ? core.succeed(bs) : core.fail(es)))));
/* @internal */
const validateAllParDiscard = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (elements, f) => core.flatMap(fiberRuntime_partition(elements, f), ([es, _]) => es.length === 0 ? core.unit : core.fail(es)))));
/* @internal */
const validateFirst = /*#__PURE__*/Function_dual(args => isIterable(args[0]), (elements, f, options) => core_flip(forEachOptions(elements, (a, i) => core_flip(f(a, i)), options)));
/* @internal */
const withClockScoped = value => fiberRefLocallyScopedWith(currentServices, Context_add(clock_clockTag, value));
/* @internal */
const withConfigProviderScoped = value => fiberRefLocallyScopedWith(currentServices, Context_add(configProviderTag, value));
/* @internal */
const withEarlyRelease = self => scopeWith(parent => core_flatMap(scopeFork(parent, executionStrategy_sequential), child => core_map(value => [fiberIdWith(fiberId => scopeClose(child, exitInterrupt(fiberId))), value])(scopeExtend(child)(self))));
/** @internal */
const zipOptions = /*#__PURE__*/Function_dual(args => isEffect(args[1]), (self, that, options) => zipWithOptions(self, that, (a, b) => [a, b], options));
/** @internal */
const zipLeftOptions = /*#__PURE__*/Function_dual(args => isEffect(args[1]), (self, that, options) => zipWithOptions(self, that, (a, _) => a, options));
/** @internal */
const zipRightOptions = /*#__PURE__*/Function_dual(args => isEffect(args[1]), (self, that, options) => zipWithOptions(self, that, (_, b) => b, options));
/** @internal */
const zipWithOptions = /*#__PURE__*/Function_dual(args => isEffect(args[1]), (self, that, f, options) => core_map(fiberRuntime_all([self, that], {
  concurrency: options?.concurrent ? 2 : 1,
  batching: options?.batching
}), ([a, a2]) => f(a, a2)));
/* @internal */
const withRuntimeFlagsScoped = update => {
  if (update === Patch_empty) {
    return core_unit;
  }
  return uninterruptible(core_flatMap(runtimeFlags => {
    const updatedRuntimeFlags = runtimeFlags_patch(runtimeFlags, update);
    const revertRuntimeFlags = runtimeFlags_diff(updatedRuntimeFlags, runtimeFlags);
    return core_asUnit(core_zipRight(addFinalizer(() => updateRuntimeFlags(revertRuntimeFlags)))(updateRuntimeFlags(update)));
  })(runtimeFlags));
};
// circular with ReleaseMap
/* @internal */
const releaseMapReleaseAll = (strategy, exit) => self => suspend(() => {
  switch (self.state._tag) {
    case "Exited":
      {
        return core_unit;
      }
    case "Running":
      {
        const finalizersMap = self.state.finalizers;
        const update = self.state.update;
        const finalizers = Array.from(finalizersMap.keys()).sort((a, b) => b - a).map(key => finalizersMap.get(key));
        self.state = {
          _tag: "Exited",
          nextKey: self.state.nextKey,
          exit,
          update
        };
        return isSequential(strategy) ? core_flatMap(results => getOrElse(() => exitUnit)(map(exitAsUnit)(exitCollectAll(results))))(forEachSequential(fin => core_exit(update(fin)(exit)))(finalizers)) : isParallel(strategy) ? core_flatMap(results => getOrElse(() => exitUnit)(map(exitAsUnit)(exitCollectAll(results, {
          parallel: true
        }))))(forEachParUnbounded(finalizers, fin => core_exit(update(fin)(exit)), false)) : core_flatMap(results => getOrElse(() => exitUnit)(map(exitAsUnit)(exitCollectAll(results, {
          parallel: true
        }))))(forEachParN(finalizers, strategy.parallelism, fin => core_exit(update(fin)(exit)), false));
      }
  }
});
// circular with Scope
/** @internal */
const scopeTag = /*#__PURE__*/Tag(ScopeTypeId);
/* @internal */
const scope = scopeTag;
/* @internal */
const scopeMake = (strategy = executionStrategy_sequential) => core_map(releaseMapMake, rm => ({
  [ScopeTypeId]: ScopeTypeId,
  [CloseableScopeTypeId]: CloseableScopeTypeId,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  },
  fork: strategy => uninterruptible(core_flatMap(scope => core_as(scope)(core_tap(fin => scopeAddFinalizerExit(scope, fin))(releaseMapAdd(rm, exit => scopeClose(scope, exit)))))(scopeMake(strategy))),
  close: exit => core_asUnit(releaseMapReleaseAll(strategy, exit)(rm)),
  addFinalizer: fin => core_asUnit(releaseMapAdd(fin)(rm))
}));
/* @internal */
const scopeExtend = /*#__PURE__*/Function_dual(2, (effect, scope) => mapInputContext(effect,
// @ts-expect-error
mjs_Context_merge(mjs_Context_make(scopeTag, scope))));
/* @internal */
const scopeUse = /*#__PURE__*/Function_dual(2, (effect, scope) => onExit(exit => scope.close(exit))(scopeExtend(scope)(effect)));
// circular with Supervisor
/** @internal */
const fiberRefUnsafeMakeSupervisor = initial => fiberRefUnsafeMakePatch(initial, {
  differ: patch_differ,
  fork: supervisor_patch_empty
});
// circular with FiberRef
/* @internal */
const fiberRefLocallyScoped = /*#__PURE__*/Function_dual(2, (self, value) => core_asUnit(acquireRelease(core_flatMap(fiberRefGet(self), oldValue => core_as(fiberRefSet(self, value), oldValue)), oldValue => fiberRefSet(self, oldValue))));
/* @internal */
const fiberRefLocallyScopedWith = /*#__PURE__*/Function_dual(2, (self, f) => fiberRefGetWith(self, a => fiberRefLocallyScoped(self, f(a))));
/* @internal */
const fiberRefMake = (initial, options) => fiberRefMakeWith(() => core.fiberRefUnsafeMake(initial, options));
/* @internal */
const fiberRefMakeWith = ref => acquireRelease(core.tap(core.sync(ref), ref => core.fiberRefUpdate(ref, identity)), fiberRef => core.fiberRefDelete(fiberRef));
/* @internal */
const fiberRefMakeContext = initial => fiberRefMakeWith(() => core.fiberRefUnsafeMakeContext(initial));
/* @internal */
const fiberRefMakeRuntimeFlags = initial => fiberRefMakeWith(() => core.fiberRefUnsafeMakeRuntimeFlags(initial));
/** @internal */
const currentRuntimeFlags = /*#__PURE__*/fiberRefUnsafeMakeRuntimeFlags(runtimeFlags_none);
/** @internal */
const currentSupervisor = /*#__PURE__*/fiberRefUnsafeMakeSupervisor(supervisor_none);
// circular with Fiber
/* @internal */
const fiberAwaitAll = fibers => core_asUnit(_await(fiberAll(fibers)));
/** @internal */
const fiberAll = fibers => ({
  [FiberTypeId]: fiberVariance,
  id: () => ReadonlyArray_fromIterable(fibers).reduce((id, fiber) => Id_combine(id, fiber.id()), Id_none),
  await: () => core_exit(forEachParUnbounded(fibers, fiber => core_flatten(fiber.await()), false)),
  children: () => core_map(forEachParUnbounded(fibers, fiber => fiber.children(), false), ReadonlyArray_flatten),
  inheritAll: () => forEachSequentialDiscard(fibers, fiber => fiber.inheritAll()),
  poll: () => core_map(forEachSequential(fibers, fiber => fiber.poll()), reduceRight(mjs_Option_some(exitSucceed(new Array())), (optionB, optionA) => {
    switch (optionA._tag) {
      case "None":
        {
          return Option_none();
        }
      case "Some":
        {
          switch (optionB._tag) {
            case "None":
              {
                return Option_none();
              }
            case "Some":
              {
                return mjs_Option_some(exitZipWith(optionA.value, optionB.value, {
                  onSuccess: (a, chunk) => [a, ...chunk],
                  onFailure: parallel
                }));
              }
          }
        }
    }
  })),
  interruptAsFork: fiberId => forEachSequentialDiscard(fibers, fiber => fiber.interruptAsFork(fiberId)),
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
});
/* @internal */
const fiberInterruptFork = self => core_asUnit(forkDaemon(interruptFiber(self)));
/* @internal */
const fiberJoinAll = fibers => core_asUnit(fiber_join(fiberAll(fibers)));
/* @internal */
const fiberScoped = self => acquireRelease(succeed(self), interruptFiber);
//
// circular race
//
/** @internal */
const raceWith = /*#__PURE__*/Function_dual(3, (self, other, options) => raceFibersWith(self, other, {
  onSelfWin: (winner, loser) => core_flatMap(winner.await(), exit => {
    switch (exit._tag) {
      case OP_SUCCESS:
        {
          return core_flatMap(winner.inheritAll(), () => options.onSelfDone(exit, loser));
        }
      case OP_FAILURE:
        {
          return options.onSelfDone(exit, loser);
        }
    }
  }),
  onOtherWin: (winner, loser) => core_flatMap(winner.await(), exit => {
    switch (exit._tag) {
      case OP_SUCCESS:
        {
          return core_flatMap(winner.inheritAll(), () => options.onOtherDone(exit, loser));
        }
      case OP_FAILURE:
        {
          return options.onOtherDone(exit, loser);
        }
    }
  })
}));
/** @internal */
const disconnect = self => uninterruptibleMask(restore => fiberIdWith(fiberId => core_flatMap(forkDaemon(restore(self)), fiber => onInterrupt(() => interruptAsFork(fiberId)(fiber))(restore(fiber_join(fiber))))));
/** @internal */
const race = /*#__PURE__*/Function_dual(2, (self, that) => fiberIdWith(parentFiberId => raceWith(self, that, {
  onSelfDone: (exit, right) => exitMatchEffect(exit, {
    onFailure: cause => mapErrorCause(cause2 => parallel(cause, cause2))(fiber_join(right)),
    onSuccess: value => core_as(value)(interruptAsFiber(parentFiberId)(right))
  }),
  onOtherDone: (exit, left) => exitMatchEffect(exit, {
    onFailure: cause => mapErrorCause(cause2 => parallel(cause2, cause))(fiber_join(left)),
    onSuccess: value => core_as(value)(interruptAsFiber(parentFiberId)(left))
  })
})));
/** @internal */
const raceFibersWith = /*#__PURE__*/Function_dual(3, (self, other, options) => withFiberRuntime((parentFiber, parentStatus) => {
  const parentRuntimeFlags = parentStatus.runtimeFlags;
  const raceIndicator = MutableRef_make(true);
  const leftFiber = unsafeMakeChildFiber(self, parentFiber, parentRuntimeFlags, options.selfScope);
  const rightFiber = unsafeMakeChildFiber(other, parentFiber, parentRuntimeFlags, options.otherScope);
  return core_async(cb => {
    leftFiber.unsafeAddObserver(() => completeRace(leftFiber, rightFiber, options.onSelfWin, raceIndicator, cb));
    rightFiber.unsafeAddObserver(() => completeRace(rightFiber, leftFiber, options.onOtherWin, raceIndicator, cb));
    leftFiber.startFork(self);
    rightFiber.startFork(other);
  }, Id_combine(leftFiber.id(), rightFiber.id()));
}));
const completeRace = (winner, loser, cont, ab, cb) => {
  if (compareAndSet(true, false)(ab)) {
    cb(cont(winner, loser));
  }
};
/** @internal */
const ensuring = /*#__PURE__*/Function_dual(2, (self, finalizer) => uninterruptibleMask(restore => matchCauseEffect(restore(self), {
  onFailure: cause1 => matchCauseEffect(finalizer, {
    onFailure: cause2 => failCause(sequential(cause1, cause2)),
    onSuccess: () => failCause(cause1)
  }),
  onSuccess: a => core_as(finalizer, a)
})));
/** @internal */
const invokeWithInterrupt = (dataSource, all) => fiberIdWith(id => core_flatMap(core_flatMap(forkDaemon(core_interruptible(dataSource)), processing => core_async(cb => {
  const counts = all.map(_ => _.listeners.count);
  const checkDone = () => {
    if (counts.every(count => count === 0)) {
      cleanup.forEach(f => f());
      cb(interruptFiber(processing));
    }
  };
  processing.unsafeAddObserver(exit => {
    cleanup.forEach(f => f());
    cb(exit);
  });
  const cleanup = all.map((r, i) => {
    const observer = count => {
      counts[i] = count;
      checkDone();
    };
    r.listeners.addObserver(observer);
    return () => r.listeners.removeObserver(observer);
  });
  checkDone();
  return sync(() => {
    cleanup.forEach(f => f());
  });
})), () => suspend(() => {
  const residual = all.flatMap(entry => {
    if (!entry.state.completed) {
      return [entry];
    }
    return [];
  });
  return forEachSequentialDiscard(residual, entry => request_complete(entry.request, exitInterrupt(id)));
})));
/** @internal */
const interruptWhenPossible = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, all) => core.fiberRefGetWith(currentRequestMap, map => core.suspend(() => {
  const entries = RA.fromIterable(all).flatMap(_ => map.has(_) ? [map.get(_)] : []);
  return invokeWithInterrupt(self, entries);
})))));
// circular Tracer
/** @internal */
const useSpanScoped = (name, options) => acquireRelease(makeSpan(name, options), (span, exit) => core_flatMap(currentTimeNanosTracing, endTime => sync(() => span.end(endTime, exit))));
/* @internal */
const withSpanScoped = (name, options) => core_flatMap(makeSpan(name, options), span => fiberRefLocallyScopedWith(currentTracerSpan, List_prepend(span)));
/* @internal */
const withTracerScoped = value => fiberRefLocallyScopedWith(currentServices, Context_add(tracerTag, value));
/* @internal */
const withParentSpanScoped = span => fiberRefLocallyScopedWith(currentTracerSpan, List_prepend(span));
//# sourceMappingURL=fiberRuntime.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/schedule/interval.mjs



/** @internal */
const IntervalSymbolKey = "@effect/io/Schedule/Interval";
/** @internal */
const IntervalTypeId = /*#__PURE__*/Symbol.for(IntervalSymbolKey);
/** @internal */
const interval_empty = {
  [IntervalTypeId]: IntervalTypeId,
  startMillis: 0,
  endMillis: 0
};
/** @internal */
const interval_make = (startMillis, endMillis) => {
  if (startMillis > endMillis) {
    return interval_empty;
  }
  return {
    [IntervalTypeId]: IntervalTypeId,
    startMillis,
    endMillis
  };
};
/** @internal */
const interval_lessThan = /*#__PURE__*/Function_dual(2, (self, that) => interval_min(self, that) === self);
/** @internal */
const interval_min = /*#__PURE__*/Function_dual(2, (self, that) => {
  if (self.endMillis <= that.startMillis) return self;
  if (that.endMillis <= self.startMillis) return that;
  if (self.startMillis < that.startMillis) return self;
  if (that.startMillis < self.startMillis) return that;
  if (self.endMillis <= that.endMillis) return self;
  return that;
});
/** @internal */
const interval_max = /*#__PURE__*/Function_dual(2, (self, that) => interval_min(self, that) === self ? that : self);
/** @internal */
const interval_isEmpty = self => {
  return self.startMillis >= self.endMillis;
};
/** @internal */
const interval_isNonEmpty = self => {
  return !interval_isEmpty(self);
};
/** @internal */
const intersect = /*#__PURE__*/Function_dual(2, (self, that) => {
  const start = Math.max(self.startMillis, that.startMillis);
  const end = Math.min(self.endMillis, that.endMillis);
  return interval_make(start, end);
});
/** @internal */
const interval_size = self => {
  return millis(self.endMillis - self.startMillis);
};
/** @internal */
const interval_union = /*#__PURE__*/Function_dual(2, (self, that) => {
  const start = Math.max(self.startMillis, that.startMillis);
  const end = Math.min(self.endMillis, that.endMillis);
  return start < end ? Option_none() : mjs_Option_some(interval_make(start, end));
});
/** @internal */
const after = startMilliseconds => {
  return interval_make(startMilliseconds, Number.POSITIVE_INFINITY);
};
/** @internal */
const before = endMilliseconds => {
  return interval_make(Number.NEGATIVE_INFINITY, endMilliseconds);
};
//# sourceMappingURL=interval.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Schedule/Interval.mjs

/**
 * @since 1.0.0
 * @category symbols
 */
const Interval_IntervalTypeId = IntervalTypeId;
/**
 * Constructs a new interval from the two specified endpoints. If the start
 * endpoint greater than the end endpoint, then a zero size interval will be
 * returned.
 *
 * @since 1.0.0
 * @category constructors
 */
const Interval_make = interval_make;
/**
 * An `Interval` of zero-width.
 *
 * @since 1.0.0
 * @category constructors
 */
const Interval_empty = interval_empty;
/**
 * Returns `true` if this `Interval` is less than `that` interval, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category ordering
 */
const Interval_lessThan = interval_lessThan;
/**
 * Returns the minimum of two `Interval`s.
 *
 * @since 1.0.0
 * @category ordering
 */
const Interval_min = interval_min;
/**
 * Returns the maximum of two `Interval`s.
 *
 * @since 1.0.0
 * @category ordering
 */
const Interval_max = interval_max;
/**
 * Returns `true` if the specified `Interval` is empty, `false` otherwise.
 *
 * @since 1.0.0
 * @category ordering
 */
const Interval_isEmpty = interval_isEmpty;
/**
 * Returns `true` if the specified `Interval` is non-empty, `false` otherwise.
 *
 * @since 1.0.0
 * @category ordering
 */
const Interval_isNonEmpty = interval_isNonEmpty;
/**
 * Computes a new `Interval` which is the intersection of this `Interval` and
 * that `Interval`.
 *
 * @since 1.0.0
 * @category ordering
 */
const Interval_intersect = intersect;
/**
 * Calculates the size of the `Interval` as the `Duration` from the start of the
 * interval to the end of the interval.
 *
 * @since 1.0.0
 * @category getters
 */
const Interval_size = interval_size;
/**
 * Computes a new `Interval` which is the union of this `Interval` and that
 * `Interval` as a `Some`, otherwise returns `None` if the two intervals cannot
 * form a union.
 *
 * @since 1.0.0
 * @category utils
 */
const Interval_union = interval_union;
/**
 * Construct an `Interval` that includes all time equal to and after the
 * specified start time.
 *
 * @since 1.0.0
 * @category constructors
 */
const Interval_after = after;
/**
 * Construct an `Interval` that includes all time equal to and before the
 * specified end time.
 *
 * @category constructors
 * @since 1.0.0
 */
const Interval_before = before;
//# sourceMappingURL=Interval.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/schedule/intervals.mjs




/** @internal */
const IntervalsSymbolKey = "@effect/io/Schedule/Intervals";
/** @internal */
const IntervalsTypeId = /*#__PURE__*/Symbol.for(IntervalsSymbolKey);
/** @internal */
const intervals_make = intervals => {
  return {
    [IntervalsTypeId]: IntervalsTypeId,
    intervals
  };
};
/** @internal */
const intervals_empty = /*#__PURE__*/intervals_make( /*#__PURE__*/Chunk_empty());
/** @internal */
const intervals_fromIterable = intervals => Array.from(intervals).reduce((intervals, interval) => intervals_union(intervals_make(Chunk_of(interval)))(intervals), intervals_empty);
/** @internal */
const intervals_union = /*#__PURE__*/Function_dual(2, (self, that) => {
  if (!isNonEmpty(that.intervals)) {
    return self;
  }
  if (!isNonEmpty(self.intervals)) {
    return that;
  }
  if (Chunk_headNonEmpty(self.intervals).startMillis < Chunk_headNonEmpty(that.intervals).startMillis) {
    return unionLoop(Chunk_tailNonEmpty(self.intervals), that.intervals, Chunk_headNonEmpty(self.intervals), Chunk_empty());
  }
  return unionLoop(self.intervals, Chunk_tailNonEmpty(that.intervals), Chunk_headNonEmpty(that.intervals), Chunk_empty());
});
/** @internal */
const unionLoop = (_self, _that, _interval, _acc) => {
  let self = _self;
  let that = _that;
  let interval = _interval;
  let acc = _acc;
  while (isNonEmpty(self) || isNonEmpty(that)) {
    if (!isNonEmpty(self) && isNonEmpty(that)) {
      if (interval.endMillis < Chunk_headNonEmpty(that).startMillis) {
        acc = Chunk_prepend(interval)(acc);
        interval = Chunk_headNonEmpty(that);
        that = Chunk_tailNonEmpty(that);
        self = Chunk_empty();
      } else {
        interval = Interval_make(interval.startMillis, Chunk_headNonEmpty(that).endMillis);
        that = Chunk_tailNonEmpty(that);
        self = Chunk_empty();
      }
    } else if (isNonEmpty(self) && isEmpty(that)) {
      if (interval.endMillis < Chunk_headNonEmpty(self).startMillis) {
        acc = Chunk_prepend(interval)(acc);
        interval = Chunk_headNonEmpty(self);
        that = Chunk_empty();
        self = Chunk_tailNonEmpty(self);
      } else {
        interval = Interval_make(interval.startMillis, Chunk_headNonEmpty(self).endMillis);
        that = Chunk_empty();
        self = Chunk_tailNonEmpty(self);
      }
    } else if (isNonEmpty(self) && isNonEmpty(that)) {
      if (Chunk_headNonEmpty(self).startMillis < Chunk_headNonEmpty(that).startMillis) {
        if (interval.endMillis < Chunk_headNonEmpty(self).startMillis) {
          acc = Chunk_prepend(interval)(acc);
          interval = Chunk_headNonEmpty(self);
          self = Chunk_tailNonEmpty(self);
        } else {
          interval = Interval_make(interval.startMillis, Chunk_headNonEmpty(self).endMillis);
          self = Chunk_tailNonEmpty(self);
        }
      } else if (interval.endMillis < Chunk_headNonEmpty(that).startMillis) {
        acc = Chunk_prepend(interval)(acc);
        interval = Chunk_headNonEmpty(that);
        that = Chunk_tailNonEmpty(that);
      } else {
        interval = Interval_make(interval.startMillis, Chunk_headNonEmpty(that).endMillis);
        that = Chunk_tailNonEmpty(that);
      }
    } else {
      throw new Error("BUG: Intervals.unionLoop - please report an issue at https://github.com/Effect-TS/io/issues");
    }
  }
  return intervals_make(Chunk_reverse(Chunk_prepend(interval)(acc)));
};
/** @internal */
const intervals_intersect = /*#__PURE__*/Function_dual(2, (self, that) => intersectLoop(self.intervals, that.intervals, Chunk_empty()));
/** @internal */
const intersectLoop = (_left, _right, _acc) => {
  let left = _left;
  let right = _right;
  let acc = _acc;
  while (isNonEmpty(left) && isNonEmpty(right)) {
    const interval = Interval_intersect(Chunk_headNonEmpty(right))(Chunk_headNonEmpty(left));
    const intervals = Interval_isEmpty(interval) ? acc : Chunk_prepend(interval)(acc);
    if (Interval_lessThan(Chunk_headNonEmpty(right))(Chunk_headNonEmpty(left))) {
      left = Chunk_tailNonEmpty(left);
    } else {
      right = Chunk_tailNonEmpty(right);
    }
    acc = intervals;
  }
  return intervals_make(Chunk_reverse(acc));
};
/** @internal */
const start = self => {
  return getOrElse(() => Interval_empty)(Chunk_head(self.intervals)).startMillis;
};
/** @internal */
const end = self => {
  return getOrElse(() => Interval_empty)(Chunk_head(self.intervals)).endMillis;
};
/** @internal */
const intervals_lessThan = /*#__PURE__*/Function_dual(2, (self, that) => start(self) < start(that));
/** @internal */
const intervals_isNonEmpty = self => {
  return isNonEmpty(self.intervals);
};
/** @internal */
const intervals_max = /*#__PURE__*/Function_dual(2, (self, that) => intervals_lessThan(self, that) ? that : self);
//# sourceMappingURL=intervals.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Schedule/Intervals.mjs

/**
 * @since 1.0.0
 * @category symbols
 */
const Intervals_IntervalsTypeId = IntervalsTypeId;
/**
 * Creates a new `Intervals` from a `List` of `Interval`s.
 *
 * @since 1.0.0
 * @category constructors
 */
const Intervals_make = intervals_make;
/**
 * Constructs an empty list of `Interval`s.
 *
 * @since 1.0.0
 * @category constructors
 */
const Intervals_empty = intervals_empty;
/**
 * Constructs `Intervals` from the specified `Iterable<Interval>`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Intervals_fromIterable = intervals_fromIterable;
/**
 * Computes the union of this `Intervals` and  that `Intervals`
 *
 * @since 1.0.0
 * @category utils
 */
const Intervals_union = intervals_union;
/**
 * Produces the intersection of this `Intervals` and that `Intervals`.
 *
 * @since 1.0.0
 * @category utils
 */
const Intervals_intersect = intervals_intersect;
/**
 * The start of the earliest interval in the specified `Intervals`.
 *
 * @since 1.0.0
 * @category getters
 */
const Intervals_start = start;
/**
 * The end of the latest interval in the specified `Intervals`.
 *
 * @since 1.0.0
 * @category getters
 */
const Intervals_end = end;
/**
 * Returns `true` if the start of this `Intervals` is before the start of that
 * `Intervals`, `false` otherwise.
 *
 * @since 1.0.0
 * @category ordering
 */
const Intervals_lessThan = intervals_lessThan;
/**
 * Returns `true` if this `Intervals` is non-empty, `false` otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const Intervals_isNonEmpty = intervals_isNonEmpty;
/**
 * Returns the maximum of the two `Intervals` (i.e. which has the latest start).
 *
 * @since 1.0.0
 * @category ordering
 */
const Intervals_max = intervals_max;
//# sourceMappingURL=Intervals.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/schedule/decision.mjs


/** @internal */
const OP_CONTINUE = "Continue";
/** @internal */
const decision_OP_DONE = "Done";
/** @internal */
const _continue = intervals => {
  return {
    _tag: OP_CONTINUE,
    intervals
  };
};
/** @internal */
const continueWith = interval => {
  return {
    _tag: OP_CONTINUE,
    intervals: Intervals_make(Chunk_of(interval))
  };
};
/** @internal */
const decision_done = {
  _tag: decision_OP_DONE
};
/** @internal */
const isContinue = self => {
  return self._tag === OP_CONTINUE;
};
/** @internal */
const decision_isDone = self => {
  return self._tag === decision_OP_DONE;
};
//# sourceMappingURL=decision.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Schedule/Decision.mjs
/**
 * @since 1.0.0
 */

const Decision_continue = _continue;

/**
 * @since 1.0.0
 * @category constructors
 */
const Decision_continueWith = continueWith;
/**
 * @since 1.0.0
 * @category constructors
 */
const Decision_done = decision_done;
/**
 * @since 1.0.0
 * @category refinements
 */
const Decision_isContinue = isContinue;
/**
 * @since 1.0.0
 * @category refinements
 */
const Decision_isDone = decision_isDone;
//# sourceMappingURL=Decision.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/schedule.mjs
var schedule_a, schedule_b;

















/** @internal */
const ScheduleSymbolKey = "@effect/io/Schedule";
/** @internal */
const ScheduleTypeId = /*#__PURE__*/Symbol.for(ScheduleSymbolKey);
/** @internal */
const ScheduleDriverSymbolKey = "@effect/io/Schedule/Driver";
/** @internal */
const ScheduleDriverTypeId = /*#__PURE__*/Symbol.for(ScheduleDriverSymbolKey);
/** @internal */
const scheduleVariance = {
  _Env: _ => _,
  _In: _ => _,
  _Out: _ => _
};
const scheduleDriverVariance = {
  _Env: _ => _,
  _In: _ => _,
  _Out: _ => _
};
/** @internal */
class ScheduleImpl {
  constructor(initial, step) {
    this.initial = initial;
    this.step = step;
    this[schedule_a] = scheduleVariance;
  }
  pipe() {
    return pipeArguments(this, arguments);
  }
}
schedule_a = ScheduleTypeId;
/** @internal */
class ScheduleDriverImpl {
  constructor(schedule, ref) {
    this.schedule = schedule;
    this.ref = ref;
    this[schedule_b] = scheduleDriverVariance;
  }
  state() {
    return core_map(ref_get(this.ref), tuple => tuple[1]);
  }
  last() {
    return core_flatMap(ref_get(this.ref), ([element, _]) => {
      switch (element._tag) {
        case "None":
          {
            return failSync(() => NoSuchElementException());
          }
        case "Some":
          {
            return succeed(element.value);
          }
      }
    });
  }
  reset() {
    return ref_set(this.ref, [Option_none(), this.schedule.initial]);
  }
  next(input) {
    return core_flatMap(state => core_flatMap(now => core_flatMap(([state, out, decision]) => Decision_isDone(decision) ? core_zipRight(core_fail(Option_none()))(ref_set(this.ref, [mjs_Option_some(out), state])) : core_as(out)(core_zipRight(effect_sleep(millis(Intervals_start(decision.intervals) - now)))(ref_set(this.ref, [mjs_Option_some(out), state]))))(suspend(() => this.schedule.step(now, input, state))))(Clock_currentTimeMillis))(core_map(ref_get(this.ref), tuple => tuple[1]));
  }
}
schedule_b = ScheduleDriverTypeId;
/** @internal */
const makeWithState = (initial, step) => new ScheduleImpl(initial, step);
/** @internal */
const addDelay = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => addDelayEffect(self, out => core.sync(() => f(out))))));
/** @internal */
const addDelayEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => modifyDelayEffect(self, (out, duration) => core.map(f(out), delay => Duration.sum(duration, Duration.decode(delay)))))));
/** @internal */
const schedule_andThen = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => schedule_map(andThenEither(self, that), Either.merge))));
/** @internal */
const andThenEither = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => makeWithState([self.initial, that.initial, true], (now, input, state) => state[2] ? core.flatMap(self.step(now, input, state[0]), ([lState, out, decision]) => {
  if (ScheduleDecision.isDone(decision)) {
    return core.map(that.step(now, input, state[1]), ([rState, out, decision]) => [[lState, rState, false], Either.right(out), decision]);
  }
  return core.succeed([[lState, state[1], true], Either.left(out), decision]);
}) : core.map(that.step(now, input, state[1]), ([rState, out, decision]) => [[state[0], rState, false], Either.right(out), decision])))));
/** @internal */
const schedule_as = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, out) => schedule_map(self, () => out))));
/** @internal */
const schedule_asUnit = self => schedule_map(self, constVoid);
/** @internal */
const bothInOut = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => makeWithState([self.initial, that.initial], (now, [in1, in2], state) => core.zipWith(self.step(now, in1, state[0]), that.step(now, in2, state[1]), ([lState, out, lDecision], [rState, out2, rDecision]) => {
  if (ScheduleDecision.isContinue(lDecision) && ScheduleDecision.isContinue(rDecision)) {
    const interval = Intervals.union(rDecision.intervals)(lDecision.intervals);
    return [[lState, rState], [out, out2], ScheduleDecision.continue(interval)];
  }
  return [[lState, rState], [out, out2], ScheduleDecision.done];
})))));
/** @internal */
const check = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, test) => checkEffect(self, (input, out) => core.sync(() => test(input, out))))));
/** @internal */
const checkEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, test) => makeWithState(self.initial, (now, input, state) => core.flatMap(self.step(now, input, state), ([state, out, decision]) => {
  if (ScheduleDecision.isDone(decision)) {
    return core.succeed([state, out, ScheduleDecision.done]);
  }
  return core.map(test(input, out), cont => cont ? [state, out, decision] : [state, out, ScheduleDecision.done]);
})))));
/** @internal */
const collectAllInputs = () => collectAllOutputs(schedule_identity());
/** @internal */
const collectAllOutputs = self => schedule_reduce(self, Chunk.empty(), (outs, out) => Chunk.append(out)(outs));
/** @internal */
const collectUntil = f => collectAllOutputs(recurUntil(f));
/** @internal */
const collectUntilEffect = f => collectAllOutputs(recurUntilEffect(f));
/** @internal */
const collectWhile = f => collectAllOutputs(recurWhile(f));
/** @internal */
const collectWhileEffect = f => collectAllOutputs(recurWhileEffect(f));
/** @internal */
const schedule_compose = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => makeWithState([self.initial, that.initial], (now, input, state) => core.flatMap(self.step(now, input, state[0]), ([lState, out, lDecision]) => core.map(that.step(now, out, state[1]), ([rState, out2, rDecision]) => ScheduleDecision.isDone(lDecision) ? [[lState, rState], out2, ScheduleDecision.done] : ScheduleDecision.isDone(rDecision) ? [[lState, rState], out2, ScheduleDecision.done] : [[lState, rState], out2, ScheduleDecision.continue(Intervals.max(rDecision.intervals)(lDecision.intervals))]))))));
/** @internal */
const schedule_mapInput = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => mapInputEffect(self, input2 => core.sync(() => f(input2))))));
/** @internal */
const schedule_mapInputContext = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => makeWithState(self.initial, (now, input, state) => core.mapInputContext(self.step(now, input, state), f)))));
/** @internal */
const mapInputEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => makeWithState(self.initial, (now, input2, state) => core.flatMap(f(input2), input => self.step(now, input, state))))));
/** @internal */
const dayOfMonth = day => {
  return makeWithState([Number.NEGATIVE_INFINITY, 0], (now, _, state) => {
    if (!Number.isInteger(day) || day < 1 || 31 < day) {
      return core.dieSync(() => internalCause.IllegalArgumentException(`Invalid argument in: dayOfMonth(${day}). Must be in range 1...31`));
    }
    const n = state[1];
    const initial = n === 0;
    const day0 = nextDayOfMonth(now, day, initial);
    const start = beginningOfDay(day0);
    const end = endOfDay(day0);
    const interval = Interval.make(start, end);
    return core.succeed([[end, n + 1], n, ScheduleDecision.continueWith(interval)]);
  });
};
/** @internal */
const dayOfWeek = day => {
  return makeWithState([Number.MIN_SAFE_INTEGER, 0], (now, _, state) => {
    if (!Number.isInteger(day) || day < 1 || 7 < day) {
      return core.dieSync(() => internalCause.IllegalArgumentException(`Invalid argument in: dayOfWeek(${day}). Must be in range 1 (Monday)...7 (Sunday)`));
    }
    const n = state[1];
    const initial = n === 0;
    const day0 = nextDay(now, day, initial);
    const start = beginningOfDay(day0);
    const end = endOfDay(day0);
    const interval = Interval.make(start, end);
    return core.succeed([[end, n + 1], n, ScheduleDecision.continueWith(interval)]);
  });
};
/** @internal */
const delayed = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => delayedEffect(self, duration => core.sync(() => f(duration))))));
/** @internal */
const delayedEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => modifyDelayEffect(self, (_, delay) => f(delay)))));
/** @internal */
const delayedSchedule = schedule => addDelay(schedule, x => x);
/** @internal */
const delays = self => makeWithState(self.initial, (now, input, state) => core.flatMap(([state, _, decision]) => {
  if (ScheduleDecision.isDone(decision)) {
    return core.succeed([state, Duration.zero, decision]);
  }
  return core.succeed([state, Duration.millis(Intervals.start(decision.intervals) - now), decision]);
})(self.step(now, input, state)));
/** @internal */
const schedule_mapBoth = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, {
  onInput,
  onOutput
}) => schedule_map(schedule_mapInput(self, onInput), onOutput))));
/** @internal */
const mapBothEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, {
  onInput,
  onOutput
}) => schedule_mapEffect(mapInputEffect(self, onInput), onOutput))));
/** @internal */
const driver = self => core_map(ref => new ScheduleDriverImpl(self, ref))(ref_make([Option_none(), self.initial]));
/** @internal */
const duration = durationInput => {
  const duration = Duration.decode(durationInput);
  const durationMillis = Duration.toMillis(duration);
  return makeWithState(true, (now, _, state) => core.succeed(state ? [false, duration, ScheduleDecision.continueWith(Interval.after(now + durationMillis))] : [false, Duration.zero, ScheduleDecision.done]));
};
/** @internal */
const schedule_either = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => schedule_union(self, that))));
/** @internal */
const eitherWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, that, f) => schedule_unionWith(self, that, f))));
/** @internal */
const schedule_ensuring = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, finalizer) => makeWithState(self.initial, (now, input, state) => core.flatMap(self.step(now, input, state), ([state, out, decision]) => ScheduleDecision.isDone(decision) ? core.as(finalizer, [state, out, decision]) : core.succeed([state, out, decision]))))));
/** @internal */
const schedule_exponential = (baseInput, factor = 2.0) => {
  const base = Duration.decode(baseInput);
  return delayedSchedule(schedule_map(schedule_forever, i => Duration.times(base, Math.pow(factor, i))));
};
/** @internal */
const fibonacci = oneInput => {
  const one = Duration.decode(oneInput);
  return delayedSchedule(schedule_map(out => out[0])(schedule_unfold([one, one], ([a, b]) => [b, Duration.sum(a, b)])));
};
/** @internal */
const fixed = intervalInput => {
  const interval = Duration.decode(intervalInput);
  const intervalMillis = Duration.toMillis(interval);
  return makeWithState([Option.none(), 0], (now, _, [option, n]) => core.sync(() => {
    switch (option._tag) {
      case "None":
        {
          return [[Option.some([now, now + intervalMillis]), n + 1], n, ScheduleDecision.continueWith(Interval.after(now + intervalMillis))];
        }
      case "Some":
        {
          const [startMillis, lastRun] = option.value;
          const runningBehind = now > lastRun + intervalMillis;
          const boundary = Equal.equals(interval, Duration.zero) ? interval : Duration.millis(intervalMillis - (now - startMillis) % intervalMillis);
          const sleepTime = Equal.equals(boundary, Duration.zero) ? interval : boundary;
          const nextRun = runningBehind ? now : now + Duration.toMillis(sleepTime);
          return [[Option.some([startMillis, nextRun]), n + 1], n, ScheduleDecision.continueWith(Interval.after(nextRun))];
        }
    }
  }));
};
/** @internal */
const fromDelay = delay => duration(delay);
/** @internal */
const fromDelays = (delay, ...delays) => makeWithState([[delay, ...delays].map(_ => Duration.decode(_)), true], (now, _, [durations, cont]) => core.sync(() => {
  if (cont) {
    const x = durations[0];
    const interval = Interval.after(now + Duration.toMillis(x));
    if (durations.length >= 2) {
      return [[durations.slice(1), true], x, ScheduleDecision.continueWith(interval)];
    }
    const y = durations.slice(1);
    return [[[x, ...y], false], x, ScheduleDecision.continueWith(interval)];
  }
  return [[durations, false], Duration.zero, ScheduleDecision.done];
}));
/** @internal */
const fromFunction = f => schedule_map(schedule_identity(), f);
/** @internal */
const hourOfDay = hour => makeWithState([Number.NEGATIVE_INFINITY, 0], (now, _, state) => {
  if (!Number.isInteger(hour) || hour < 0 || 23 < hour) {
    return core.dieSync(() => internalCause.IllegalArgumentException(`Invalid argument in: hourOfDay(${hour}). Must be in range 0...23`));
  }
  const n = state[1];
  const initial = n === 0;
  const hour0 = nextHour(now, hour, initial);
  const start = beginningOfHour(hour0);
  const end = endOfHour(hour0);
  const interval = Interval.make(start, end);
  return core.succeed([[end, n + 1], n, ScheduleDecision.continueWith(interval)]);
});
/** @internal */
const schedule_identity = () => makeWithState(void 0, (now, input, state) => core.succeed([state, input, ScheduleDecision.continueWith(Interval.after(now))]));
/** @internal */
const schedule_intersect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => intersectWith(self, that, Intervals.intersect))));
/** @internal */
const intersectWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, that, f) => makeWithState([self.initial, that.initial], (now, input, state) => core.flatMap(([[lState, out, lDecision], [rState, out2, rDecision]]) => {
  if (ScheduleDecision.isContinue(lDecision) && ScheduleDecision.isContinue(rDecision)) {
    return intersectWithLoop(self, that, input, lState, out, lDecision.intervals, rState, out2, rDecision.intervals, f);
  }
  return core.succeed([[lState, rState], [out, out2], ScheduleDecision.done]);
})(core.zipWith(self.step(now, input, state[0]), that.step(now, input, state[1]), (a, b) => [a, b]))))));
/** @internal */
const intersectWithLoop = (self, that, input, lState, out, lInterval, rState, out2, rInterval, f) => {
  const combined = f(lInterval, rInterval);
  if (Intervals.isNonEmpty(combined)) {
    return core.succeed([[lState, rState], [out, out2], ScheduleDecision.continue(combined)]);
  }
  if (Intervals.lessThan(rInterval)(lInterval)) {
    return core.flatMap(self.step(Intervals.end(lInterval), input, lState), ([lState, out, decision]) => {
      if (ScheduleDecision.isDone(decision)) {
        return core.succeed([[lState, rState], [out, out2], ScheduleDecision.done]);
      }
      return intersectWithLoop(self, that, input, lState, out, decision.intervals, rState, out2, rInterval, f);
    });
  }
  return core.flatMap(that.step(Intervals.end(rInterval), input, rState), ([rState, out2, decision]) => {
    if (ScheduleDecision.isDone(decision)) {
      return core.succeed([[lState, rState], [out, out2], ScheduleDecision.done]);
    }
    return intersectWithLoop(self, that, input, lState, out, lInterval, rState, out2, decision.intervals, f);
  });
};
/** @internal */
const jittered = self => jitteredWith(self, {
  min: 0.8,
  max: 1.2
});
/** @internal */
const jitteredWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, options) => {
  const {
    max,
    min
  } = Object.assign({
    min: 0.8,
    max: 1.2
  }, options);
  return delayedEffect(self, duration => core.map(Random.next, random => {
    const d = Duration.toMillis(duration);
    const jittered = d * min * (1 - random) + d * max * random;
    return Duration.millis(jittered);
  }));
})));
/** @internal */
const schedule_linear = baseInput => {
  const base = Duration.decode(baseInput);
  return delayedSchedule(schedule_map(schedule_forever, i => Duration.times(base, i + 1)));
};
/** @internal */
const schedule_map = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => schedule_mapEffect(self, out => core.sync(() => f(out))))));
/** @internal */
const schedule_mapEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => makeWithState(self.initial, (now, input, state) => core.flatMap(self.step(now, input, state), ([state, out, decision]) => core.map(f(out), out2 => [state, out2, decision]))))));
/** @internal */
const minuteOfHour = minute => makeWithState([Number.MIN_SAFE_INTEGER, 0], (now, _, state) => {
  if (!Number.isInteger(minute) || minute < 0 || 59 < minute) {
    return core.dieSync(() => internalCause.IllegalArgumentException(`Invalid argument in: minuteOfHour(${minute}). Must be in range 0...59`));
  }
  const n = state[1];
  const initial = n === 0;
  const minute0 = nextMinute(now, minute, initial);
  const start = beginningOfMinute(minute0);
  const end = endOfMinute(minute0);
  const interval = Interval.make(start, end);
  return core.succeed([[end, n + 1], n, ScheduleDecision.continueWith(interval)]);
});
/** @internal */
const modifyDelay = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => modifyDelayEffect(self, (out, duration) => core.sync(() => f(out, duration))))));
/** @internal */
const modifyDelayEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => makeWithState(self.initial, (now, input, state) => core.flatMap(self.step(now, input, state), ([state, out, decision]) => {
  if (ScheduleDecision.isDone(decision)) {
    return core.succeed([state, out, decision]);
  }
  const intervals = decision.intervals;
  const delay = Interval.size(Interval.make(now, Intervals.start(intervals)));
  return core.map(f(out, delay), durationInput => {
    const duration = Duration.decode(durationInput);
    const oldStart = Intervals.start(intervals);
    const newStart = now + Duration.toMillis(duration);
    const delta = newStart - oldStart;
    const newEnd = Math.min(Math.max(0, Intervals.end(intervals) + delta), Number.MAX_SAFE_INTEGER);
    const newInterval = Interval.make(newStart, newEnd);
    return [state, out, ScheduleDecision.continueWith(newInterval)];
  });
})))));
/** @internal */
const onDecision = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => makeWithState(self.initial, (now, input, state) => core.flatMap(self.step(now, input, state), ([state, out, decision]) => core.as(f(out, decision), [state, out, decision]))))));
/** @internal */
const passthrough = self => makeWithState(self.initial, (now, input, state) => core.map(([state, _, decision]) => [state, input, decision])(self.step(now, input, state)));
/** @internal */
const schedule_provideContext = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, context) => makeWithState(self.initial, (now, input, state) => core.provideContext(self.step(now, input, state), context)))));
/** @internal */
const schedule_provideService = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, tag, service) => makeWithState(self.initial, (now, input, state) => core.contextWithEffect(env => core.provideContext(
// @ts-expect-error
self.step(now, input, state), Context.add(env, tag, service)))))));
/** @internal */
const recurUntil = f => untilInput(schedule_identity(), f);
/** @internal */
const recurUntilEffect = f => untilInputEffect(schedule_identity(), f);
/** @internal */
const recurUntilOption = pf => untilOutput(schedule_map(schedule_identity(), pf), Option.isSome);
/** @internal */
const recurUpTo = durationInput => {
  const duration = Duration.decode(durationInput);
  return whileOutput(elapsed, elapsed => Duration.lessThan(elapsed, duration));
};
/** @internal */
const recurWhile = f => whileInput(schedule_identity(), f);
/** @internal */
const recurWhileEffect = f => whileInputEffect(schedule_identity(), f);
/** @internal */
const recurs = n => whileOutput(schedule_forever, out => out < n);
/** @internal */
const schedule_reduce = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, zero, f) => schedule_reduceEffect(self, zero, (z, out) => core.sync(() => f(z, out))))));
/** @internal */
const schedule_reduceEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, zero, f) => makeWithState([self.initial, zero], (now, input, [s, z]) => core.flatMap(self.step(now, input, s), ([s, out, decision]) => ScheduleDecision.isDone(decision) ? core.succeed([[s, z], z, decision]) : core.map(f(z, out), z2 => [[s, z2], z, decision]))))));
/** @internal */
const repeatForever = self => makeWithState(self.initial, (now, input, state) => {
  const step = (now, input, state) => core.flatMap(self.step(now, input, state), ([state, out, decision]) => ScheduleDecision.isDone(decision) ? step(now, input, self.initial) : core.succeed([state, out, decision]));
  return step(now, input, state);
});
/** @internal */
const repetitions = self => schedule_reduce(self, 0, (n, _) => n + 1);
/** @internal */
const resetAfter = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, durationInput) => {
  const duration = Duration.decode(durationInput);
  return schedule_map(out => out[0])(resetWhen(([, time]) => Duration.greaterThanOrEqualTo(time, duration))(schedule_intersect(elapsed)(self)));
})));
/** @internal */
const resetWhen = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => makeWithState(self.initial, (now, input, state) => core.flatMap(self.step(now, input, state), ([state, out, decision]) => f(out) ? self.step(now, input, self.initial) : core.succeed([state, out, decision]))))));
/** @internal */
const run = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, now, input) => core.map(list => Chunk.reverse(list))(runLoop(self, now, Chunk.fromIterable(input), self.initial, Chunk.empty())))));
/** @internal */
const runLoop = (self, now, inputs, state, acc) => {
  if (!Chunk.isNonEmpty(inputs)) {
    return core.succeed(acc);
  }
  const input = Chunk.headNonEmpty(inputs);
  const nextInputs = Chunk.tailNonEmpty(inputs);
  return core.flatMap(self.step(now, input, state), ([state, out, decision]) => {
    if (ScheduleDecision.isDone(decision)) {
      return core.sync(() => Chunk.prepend(out)(acc));
    }
    return runLoop(self, Intervals.start(decision.intervals), nextInputs, state, Chunk.prepend(acc, out));
  });
};
/** @internal */
const secondOfMinute = second => makeWithState([Number.NEGATIVE_INFINITY, 0], (now, _, state) => {
  if (!Number.isInteger(second) || second < 0 || 59 < second) {
    return core.dieSync(() => internalCause.IllegalArgumentException(`Invalid argument in: secondOfMinute(${second}). Must be in range 0...59`));
  }
  const n = state[1];
  const initial = n === 0;
  const second0 = nextSecond(now, second, initial);
  const start = beginningOfSecond(second0);
  const end = endOfSecond(second0);
  const interval = Interval.make(start, end);
  return core.succeed([[end, n + 1], n, ScheduleDecision.continueWith(interval)]);
});
/** @internal */
const spaced = duration => addDelay(schedule_forever, () => duration);
/** @internal */
const schedule_succeed = value => schedule_map(schedule_forever, () => value);
/** @internal */
const schedule_sync = evaluate => schedule_map(schedule_forever, evaluate);
/** @internal */
const tapInput = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => makeWithState(self.initial, (now, input, state) => core.zipRight(f(input), self.step(now, input, state))))));
/** @internal */
const tapOutput = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => makeWithState(self.initial, (now, input, state) => core.tap(self.step(now, input, state), ([, out]) => f(out))))));
/** @internal */
const schedule_unfold = (initial, f) => makeWithState(initial, (now, _, state) => core.sync(() => [f(state), state, ScheduleDecision.continueWith(Interval.after(now))]));
/** @internal */
const schedule_union = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => schedule_unionWith(self, that, Intervals.union))));
/** @internal */
const schedule_unionWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, that, f) => makeWithState([self.initial, that.initial], (now, input, state) => core.zipWith(self.step(now, input, state[0]), that.step(now, input, state[1]), ([lState, l, lDecision], [rState, r, rDecision]) => {
  if (ScheduleDecision.isDone(lDecision) && ScheduleDecision.isDone(rDecision)) {
    return [[lState, rState], [l, r], ScheduleDecision.done];
  }
  if (ScheduleDecision.isDone(lDecision) && ScheduleDecision.isContinue(rDecision)) {
    return [[lState, rState], [l, r], ScheduleDecision.continue(rDecision.intervals)];
  }
  if (ScheduleDecision.isContinue(lDecision) && ScheduleDecision.isDone(rDecision)) {
    return [[lState, rState], [l, r], ScheduleDecision.continue(lDecision.intervals)];
  }
  if (ScheduleDecision.isContinue(lDecision) && ScheduleDecision.isContinue(rDecision)) {
    const combined = f(lDecision.intervals, rDecision.intervals);
    return [[lState, rState], [l, r], ScheduleDecision.continue(combined)];
  }
  throw new Error("BUG: Schedule.unionWith - please report an issue at https://github.com/Effect-TS/io/issues");
})))));
/** @internal */
const untilInput = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => check(self, (input, _) => !f(input)))));
/** @internal */
const untilInputEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => checkEffect(self, (input, _) => effect.negate(f(input))))));
/** @internal */
const untilOutput = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => check(self, (_, out) => !f(out)))));
/** @internal */
const untilOutputEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => checkEffect(self, (_, out) => effect.negate(f(out))))));
/** @internal */
const upTo = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, duration) => schedule_zipLeft(self, recurUpTo(duration)))));
/** @internal */
const whileInput = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => check(self, (input, _) => f(input)))));
/** @internal */
const whileInputEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => checkEffect(self, (input, _) => f(input)))));
/** @internal */
const whileOutput = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => check(self, (_, out) => f(out)))));
/** @internal */
const whileOutputEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => checkEffect(self, (_, out) => f(out)))));
/** @internal */
const windowed = intervalInput => {
  const interval = Duration.decode(intervalInput);
  const millis = Duration.toMillis(interval);
  return makeWithState([Option.none(), 0], (now, _, [option, n]) => {
    switch (option._tag) {
      case "None":
        {
          return core.succeed([[Option.some(now), n + 1], n, ScheduleDecision.continueWith(Interval.after(now + millis))]);
        }
      case "Some":
        {
          return core.succeed([[Option.some(option.value), n + 1], n, ScheduleDecision.continueWith(Interval.after(now + (millis - (now - option.value) % millis)))]);
        }
    }
  });
};
/** @internal */
const schedule_zipLeft = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => schedule_map(schedule_intersect(self, that), out => out[0]))));
/** @internal */
const schedule_zipRight = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => schedule_map(schedule_intersect(self, that), out => out[1]))));
/** @internal */
const schedule_zipWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, that, f) => schedule_map(schedule_intersect(self, that), ([out, out2]) => f(out, out2)))));
// -----------------------------------------------------------------------------
// Seconds
// -----------------------------------------------------------------------------
/** @internal */
const beginningOfSecond = now => {
  const date = new Date(now);
  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds(), 0).getTime();
};
/** @internal */
const endOfSecond = now => {
  const date = new Date(beginningOfSecond(now));
  return date.setSeconds(date.getSeconds() + 1);
};
/** @internal */
const nextSecond = (now, second, initial) => {
  const date = new Date(now);
  if (date.getSeconds() === second && initial) {
    return now;
  }
  if (date.getSeconds() < second) {
    return date.setSeconds(second);
  }
  // Set seconds to the provided value and add one minute
  const newDate = new Date(date.setSeconds(second));
  return newDate.setTime(newDate.getTime() + 1000 * 60);
};
// -----------------------------------------------------------------------------
// Minutes
// -----------------------------------------------------------------------------
/** @internal */
const beginningOfMinute = now => {
  const date = new Date(now);
  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), 0, 0).getTime();
};
/** @internal */
const endOfMinute = now => {
  const date = new Date(beginningOfMinute(now));
  return date.setMinutes(date.getMinutes() + 1);
};
/** @internal */
const nextMinute = (now, minute, initial) => {
  const date = new Date(now);
  if (date.getMinutes() === minute && initial) {
    return now;
  }
  if (date.getMinutes() < minute) {
    return date.setMinutes(minute);
  }
  // Set minutes to the provided value and add one hour
  const newDate = new Date(date.setMinutes(minute));
  return newDate.setTime(newDate.getTime() + 1000 * 60 * 60);
};
// -----------------------------------------------------------------------------
// Hours
// -----------------------------------------------------------------------------
/** @internal */
const beginningOfHour = now => {
  const date = new Date(now);
  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), 0, 0, 0).getTime();
};
/** @internal */
const endOfHour = now => {
  const date = new Date(beginningOfHour(now));
  return date.setHours(date.getHours() + 1);
};
/** @internal */
const nextHour = (now, hour, initial) => {
  const date = new Date(now);
  if (date.getHours() === hour && initial) {
    return now;
  }
  if (date.getHours() < hour) {
    return date.setHours(hour);
  }
  // Set hours to the provided value and add one day
  const newDate = new Date(date.setHours(hour));
  return newDate.setTime(newDate.getTime() + 1000 * 60 * 60 * 24);
};
// -----------------------------------------------------------------------------
// Days
// -----------------------------------------------------------------------------
/** @internal */
const beginningOfDay = now => {
  const date = new Date(now);
  return new Date(date.getFullYear(), date.getMonth(), date.getDate(), 0, 0, 0, 0).getTime();
};
/** @internal */
const endOfDay = now => {
  const date = new Date(beginningOfDay(now));
  return date.setDate(date.getDate() + 1);
};
/** @internal */
const nextDay = (now, dayOfWeek, initial) => {
  const date = new Date(now);
  if (date.getDay() === dayOfWeek && initial) {
    return now;
  }
  const nextDayOfWeek = (7 + dayOfWeek - date.getDay()) % 7;
  return date.setDate(date.getDate() + (nextDayOfWeek === 0 ? 7 : nextDayOfWeek));
};
/** @internal */
const nextDayOfMonth = (now, day, initial) => {
  const date = new Date(now);
  if (date.getDate() === day && initial) {
    return now;
  }
  if (date.getDate() < day) {
    return date.setDate(day);
  }
  return findNextMonth(now, day, 1);
};
/** @internal */
const findNextMonth = (now, day, months) => {
  const d = new Date(now);
  const tmp1 = new Date(d.setDate(day));
  const tmp2 = new Date(tmp1.setMonth(tmp1.getMonth() + months));
  if (tmp2.getDate() === day) {
    const d2 = new Date(now);
    const tmp3 = new Date(d2.setDate(day));
    return tmp3.setMonth(tmp3.getMonth() + months);
  }
  return findNextMonth(now, day, months + 1);
};
// circular with Effect
/** @internal */
const repeat_Effect = /*#__PURE__*/Function_dual(2, (self, schedule) => repeatOrElse_Effect(self, schedule, (e, _) => core_fail(e)));
/** @internal */
const repeatOrElse_Effect = /*#__PURE__*/Function_dual(3, (self, schedule, orElse) => core_flatMap(driver(schedule), driver => matchEffect(self, {
  onFailure: error => orElse(error, Option_none()),
  onSuccess: value => repeatOrElseEffectLoop(self, driver, orElse, value)
})));
/** @internal */
const repeatOrElseEffectLoop = (self, driver, orElse, value) => {
  return matchEffect(driver.next(value), {
    onFailure: () => orDie(driver.last()),
    onSuccess: b => matchEffect(self, {
      onFailure: error => orElse(error, mjs_Option_some(b)),
      onSuccess: value => repeatOrElseEffectLoop(self, driver, orElse, value)
    })
  });
};
/** @internal */
const repeatUntil_Effect = /*#__PURE__*/Function_dual(2, (self, f) => repeatUntilEffect_Effect(self, a => sync(() => f(a))));
/** @internal */
const repeatUntilEffect_Effect = /*#__PURE__*/Function_dual(2, (self, f) => core_flatMap(self, a => core_flatMap(f(a), result => result ? succeed(a) : core_flatMap(yieldNow(), () => repeatUntilEffect_Effect(self, f)))));
/** @internal */
const repeatWhile_Effect = /*#__PURE__*/Function_dual(2, (self, f) => repeatWhileEffect_Effect(self, a => sync(() => f(a))));
/** @internal */
const repeatWhileEffect_Effect = /*#__PURE__*/Function_dual(2, (self, f) => repeatUntilEffect_Effect(self, a => negate(f(a))));
/** @internal */
const retry_Effect = /*#__PURE__*/Function_dual(2, (self, policy) => retryOrElse_Effect(self, policy, (e, _) => core_fail(e)));
/** @internal */
const retryN_Effect = /*#__PURE__*/Function_dual(2, (self, n) => retryN_EffectLoop(self, n));
/** @internal */
const retryN_EffectLoop = (self, n) => {
  return catchAll(self, e => n < 0 ? core_fail(e) : core_flatMap(yieldNow(), () => retryN_EffectLoop(self, n - 1)));
};
/** @internal */
const retryOrElse_Effect = /*#__PURE__*/Function_dual(3, (self, policy, orElse) => core_flatMap(driver(policy), driver => retryOrElse_EffectLoop(self, driver, orElse)));
/** @internal */
const retryOrElse_EffectLoop = (self, driver, orElse) => {
  return catchAll(self, e => matchEffect(driver.next(e), {
    onFailure: () => core_flatMap(out => orElse(e, out))(orDie(driver.last())),
    onSuccess: () => retryOrElse_EffectLoop(self, driver, orElse)
  }));
};
/** @internal */
const retryUntil_Effect = /*#__PURE__*/Function_dual(2, (self, f) => retryUntilEffect_Effect(self, e => sync(() => f(e))));
/** @internal */
const retryUntilEffect_Effect = /*#__PURE__*/Function_dual(2, (self, f) => catchAll(self, e => core_flatMap(f(e), b => b ? core_fail(e) : core_flatMap(yieldNow(), () => retryUntilEffect_Effect(self, f)))));
/** @internal */
const retryWhile_Effect = /*#__PURE__*/Function_dual(2, (self, f) => retryWhileEffect_Effect(self, e => sync(() => f(e))));
/** @internal */
const retryWhileEffect_Effect = /*#__PURE__*/Function_dual(2, (self, f) => retryUntilEffect_Effect(self, e => negate(f(e))));
/** @internal */
const schedule_Effect = /*#__PURE__*/Function_dual(2, (self, schedule) => scheduleFrom_Effect(self, void 0, schedule));
/** @internal */
const scheduleFrom_Effect = /*#__PURE__*/Function_dual(3, (self, initial, schedule) => core_flatMap(driver(schedule), driver => scheduleFrom_EffectLoop(self, initial, driver)));
/** @internal */
const scheduleFrom_EffectLoop = (self, initial, driver) => matchEffect(driver.next(initial), {
  onFailure: () => orDie(driver.last()),
  onSuccess: () => core_flatMap(self, a => scheduleFrom_EffectLoop(self, a, driver))
});
/** @internal */
const count = /*#__PURE__*/(/* unused pure expression or super */ null && (schedule_unfold(0, n => n + 1)));
/** @internal */
const elapsed = /*#__PURE__*/(/* unused pure expression or super */ null && (makeWithState( /*#__PURE__*/Option.none(), (now, _, state) => {
  switch (state._tag) {
    case "None":
      {
        return core.succeed([Option.some(now), Duration.zero, ScheduleDecision.continueWith(Interval.after(now))]);
      }
    case "Some":
      {
        return core.succeed([Option.some(state.value), Duration.millis(now - state.value), ScheduleDecision.continueWith(Interval.after(now))]);
      }
  }
})));
/** @internal */
const schedule_forever = /*#__PURE__*/(/* unused pure expression or super */ null && (schedule_unfold(0, n => n + 1)));
/** @internal */
const schedule_once = /*#__PURE__*/(/* unused pure expression or super */ null && (schedule_asUnit( /*#__PURE__*/recurs(1))));
/** @internal */
const stop = /*#__PURE__*/(/* unused pure expression or super */ null && (schedule_asUnit( /*#__PURE__*/recurs(0))));
//# sourceMappingURL=schedule.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/effect/circular.mjs
var circular_a, circular_b, circular_c;





















/** @internal */
class Semaphore {
  constructor(permits) {
    this.permits = permits;
    this.waiters = new Array();
    this.taken = 0;
    this.take = n => asyncEither(resume => {
      if (this.free < n) {
        const observer = () => {
          if (this.free >= n) {
            const observerIndex = this.waiters.findIndex(cb => cb === observer);
            if (observerIndex !== -1) {
              this.waiters.splice(observerIndex, 1);
            }
            this.taken += n;
            resume(succeed(n));
          }
        };
        this.waiters.push(observer);
        return Either_left(sync(() => {
          const observerIndex = this.waiters.findIndex(cb => cb === observer);
          if (observerIndex !== -1) {
            this.waiters.splice(observerIndex, 1);
          }
        }));
      }
      this.taken += n;
      return Either_right(succeed(n));
    });
    this.release = n => withFiberRuntime(fiber => {
      this.taken -= n;
      fiber.getFiberRef(currentScheduler).scheduleTask(() => {
        this.waiters.forEach(wake => wake());
      }, fiber.getFiberRef(currentSchedulingPriority));
      return core_unit;
    });
    this.withPermits = n => self => uninterruptibleMask(restore => core_flatMap(restore(this.take(n)), permits => ensuring(restore(self), this.release(permits))));
  }
  get free() {
    return this.permits - this.taken;
  }
}
/** @internal */
const unsafeMakeSemaphore = leases => {
  return new Semaphore(leases);
};
/** @internal */
const makeSemaphore = permits => sync(() => unsafeMakeSemaphore(permits));
/** @internal */
const awaitAllChildren = self => ensuringChildren(self, fiberAwaitAll);
/** @internal */
const cached = /*#__PURE__*/Function_dual(2, (self, timeToLive) => core_map(cachedInvalidate(self, timeToLive), tuple => tuple[0]));
/** @internal */
const cachedInvalidate = /*#__PURE__*/Function_dual(2, (self, timeToLive) => {
  const duration = decode(timeToLive);
  return core_flatMap(context(), env => core_map(makeSynchronized(Option_none()), cache => [provideContext(getCachedValue(self, duration, cache), env), invalidateCache(cache)]));
});
/** @internal */
const computeCachedValue = (self, timeToLive, start) => {
  const timeToLiveMillis = toMillis(decode(timeToLive));
  return core_map(deferred => mjs_Option_some([start + timeToLiveMillis, deferred]))(core_tap(deferred => intoDeferred(self, deferred))(deferredMake()));
};
/** @internal */
const getCachedValue = (self, timeToLive, cache) => uninterruptibleMask(restore => core_flatMap(option => Option_isNone(option) ? dieMessage("BUG: Effect.cachedInvalidate - please report an issue at https://github.com/Effect-TS/io/issues") : restore(deferredAwait(option.value[1])))(core_flatMap(time => updateSomeAndGetEffectSynchronized(cache, option => {
  switch (option._tag) {
    case "None":
      {
        return mjs_Option_some(computeCachedValue(self, timeToLive, time));
      }
    case "Some":
      {
        const [end] = option.value;
        return end - time <= 0 ? mjs_Option_some(computeCachedValue(self, timeToLive, time)) : Option_none();
      }
  }
}))(effect_clockWith(clock => clock.currentTimeMillis))));
/** @internal */
const invalidateCache = cache => ref_set(cache, Option_none());
/** @internal */
const ensuringChild = /*#__PURE__*/Function_dual(2, (self, f) => ensuringChildren(self, children => f(fiberAll(children))));
/** @internal */
const ensuringChildren = /*#__PURE__*/Function_dual(2, (self, children) => core_flatMap(track, supervisor => ensuring(core_flatMap(supervisor.value(), children))(supervised(self, supervisor))));
/** @internal */
// @ts-expect-error
const forkAll = /*#__PURE__*/Function_dual(args => isIterable(args[0]), (effects, options) => options?.discard ? forEachSequentialDiscard(effects, fork) : core_map(forEachSequential(effects, fork), fiberAll));
/** @internal */
const forkIn = /*#__PURE__*/Function_dual(2, (self, scope) => uninterruptibleMask(restore => core_flatMap(scope.fork(executionStrategy_sequential), child => core_tap(fiber => child.addFinalizer(() => fiberIdWith(fiberId => equals(fiberId, fiber.id()) ? core_unit : core_asUnit(interruptFiber(fiber)))))(forkDaemon(onExit(exit => child.close(exit))(restore(self)))))));
/** @internal */
const forkScoped = self => scopeWith(scope => forkIn(self, scope));
/** @internal */
const fromFiber = fiber => fiber_join(fiber);
/** @internal */
const fromFiberEffect = fiber => suspend(() => core_flatMap(fiber, fiber_join));
const memoKeySymbol = /*#__PURE__*/Symbol.for("@effect/io/Effect/memoizeFunction.key");
class Key {
  constructor(a, eq) {
    this.a = a;
    this.eq = eq;
    this[circular_a] = memoKeySymbol;
  }
  [(circular_a = memoKeySymbol, Equal_symbol)](that) {
    if (typeof that === "object" && that !== null && memoKeySymbol in that) {
      if (this.eq) {
        return this.eq(this.a, that.a);
      } else {
        return equals(this.a, that.a);
      }
    }
    return false;
  }
  [symbol]() {
    return this.eq ? 0 : Hash_hash(this.a);
  }
}
/** @internal */
const memoizeFunction = (f, eq) => {
  return core_map(ref => a => core_flatMap(([patch, b]) => core_as(b)(patchFiberRefs(patch)))(core_flatMap(deferredAwait)(ref.modifyEffect(map => {
    const result = MutableHashMap_get(new Key(a, eq))(map);
    if (Option_isNone(result)) {
      return core_map(deferred => [deferred, MutableHashMap_set(new Key(a, eq), deferred)(map)])(core_tap(deferred => fork(intoDeferred(deferred)(diffFiberRefs(f(a)))))(deferredMake()));
    }
    return succeed([result.value, map]);
  }))))(core_flatMap(makeSynchronized)(sync(() => MutableHashMap_empty())));
};
/** @internal */
const raceFirst = /*#__PURE__*/Function_dual(2, (self, that) => (effect => core_flatten(effect))(race(core_exit(that))(core_exit(self))));
/** @internal */
const scheduleForked = /*#__PURE__*/Function_dual(2, (self, schedule) => forkScoped(schedule_Effect(schedule)(self)));
/** @internal */
const supervised = /*#__PURE__*/Function_dual(2, (self, supervisor) => {
  const supervise = fiberRefLocallyWith(currentSupervisor, s => s.zip(supervisor));
  return supervise(self);
});
/** @internal */
const timeout = /*#__PURE__*/Function_dual(2, (self, duration) => timeoutTo(self, {
  onTimeout: Option_none,
  onSuccess: mjs_Option_some,
  duration
}));
/** @internal */
const timeoutFail = /*#__PURE__*/Function_dual(2, (self, {
  duration,
  onTimeout
}) => core_flatten(timeoutTo(self, {
  onTimeout: () => failSync(onTimeout),
  onSuccess: succeed,
  duration
})));
/** @internal */
const timeoutFailCause = /*#__PURE__*/Function_dual(2, (self, {
  duration,
  onTimeout
}) => core_flatten(timeoutTo(self, {
  onTimeout: () => failCauseSync(onTimeout),
  onSuccess: succeed,
  duration
})));
/** @internal */
const timeoutTo = /*#__PURE__*/Function_dual(2, (self, {
  duration,
  onSuccess,
  onTimeout
}) => fiberIdWith(parentFiberId => raceFibersWith(self, core_interruptible(effect_sleep(duration)), {
  onSelfWin: (winner, loser) => core_flatMap(winner.await(), exit => {
    if (exit._tag === "Success") {
      return core_flatMap(winner.inheritAll(), () => core_as(interruptAsFiber(loser, parentFiberId), onSuccess(exit.value)));
    } else {
      return core_flatMap(interruptAsFiber(loser, parentFiberId), () => exitFailCause(exit.cause));
    }
  }),
  onOtherWin: (winner, loser) => core_flatMap(winner.await(), exit => {
    if (exit._tag === "Success") {
      return core_flatMap(winner.inheritAll(), () => core_as(interruptAsFiber(loser, parentFiberId), onTimeout()));
    } else {
      return core_flatMap(interruptAsFiber(loser, parentFiberId), () => exitFailCause(exit.cause));
    }
  }),
  otherScope: globalScope
})));
// circular with Synchronized
/** @internal */
const SynchronizedSymbolKey = "@effect/io/Ref/Synchronized";
/** @internal */
const SynchronizedTypeId = /*#__PURE__*/Symbol.for(SynchronizedSymbolKey);
/** @internal */
const synchronizedVariance = {
  _A: _ => _
};
/** @internal */
class SynchronizedImpl {
  constructor(ref, withLock) {
    this.ref = ref;
    this.withLock = withLock;
    this[circular_b] = synchronizedVariance;
    this[circular_c] = refVariance;
  }
  modify(f) {
    return this.modifyEffect(a => succeed(f(a)));
  }
  modifyEffect(f) {
    return this.withLock(core_flatMap(([b, a]) => core_as(ref_set(this.ref, a), b))(core_flatMap(ref_get(this.ref), f)));
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
circular_b = SynchronizedTypeId, circular_c = RefTypeId;
/** @internal */
const makeSynchronized = value => sync(() => unsafeMakeSynchronized(value));
/** @internal */
const unsafeMakeSynchronized = value => {
  const ref = ref_unsafeMake(value);
  const sem = unsafeMakeSemaphore(1);
  return new SynchronizedImpl(ref, sem.withPermits(1));
};
/** @internal */
const updateSomeAndGetEffectSynchronized = /*#__PURE__*/Function_dual(2, (self, pf) => self.modifyEffect(value => {
  const result = pf(value);
  switch (result._tag) {
    case "None":
      {
        return succeed([value, value]);
      }
    case "Some":
      {
        return core_map(result.value, a => [a, a]);
      }
  }
}));
// circular with Fiber
/** @internal */
const zipFiber = /*#__PURE__*/Function_dual(2, (self, that) => zipWithFiber(self, that, (a, b) => [a, b]));
/** @internal */
const zipLeftFiber = /*#__PURE__*/Function_dual(2, (self, that) => zipWithFiber(self, that, (a, _) => a));
/** @internal */
const zipRightFiber = /*#__PURE__*/Function_dual(2, (self, that) => zipWithFiber(self, that, (_, b) => b));
/** @internal */
const zipWithFiber = /*#__PURE__*/Function_dual(3, (self, that, f) => ({
  [FiberTypeId]: fiberVariance,
  id: () => Id_getOrElse(that.id())(self.id()),
  await: () => core_exit(zipWithOptions(core_flatten(that.await()), f, {
    concurrent: true
  })(core_flatten(self.await()))),
  children: () => self.children(),
  inheritAll: () => core_zipRight(that.inheritAll(), self.inheritAll()),
  poll: () => core_zipWith(self.poll(), that.poll(), (optionA, optionB) => flatMap(exitA => map(exitB => Exit_zipWith(exitA, exitB, {
    onSuccess: f,
    onFailure: parallel
  }))(optionB))(optionA)),
  interruptAsFork: id => core_zipRight(self.interruptAsFork(id), that.interruptAsFork(id)),
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}));
//# sourceMappingURL=circular.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/opCodes/layer.mjs
/** @internal */
const OP_EXTEND_SCOPE = "ExtendScope";
/** @internal */
const OP_FOLD = "Fold";
/** @internal */
const OP_FRESH = "Fresh";
/** @internal */
const OP_FROM_EFFECT = "FromEffect";
/** @internal */
const OP_SCOPED = "Scoped";
/** @internal */
const OP_SUSPEND = "Suspend";
/** @internal */
const OP_PROVIDE_TO = "ProvideTo";
/** @internal */
const layer_OP_ZIP_WITH = "ZipWith";
/** @internal */
const OP_ZIP_WITH_PAR = "ZipWithPar";
//# sourceMappingURL=layer.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/synchronizedRef.mjs



/** @internal */
const getAndUpdateEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => self.modifyEffect(value => core.map(f(value), result => [value, result])))));
/** @internal */
const getAndUpdateSomeEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, pf) => self.modifyEffect(value => {
  const result = pf(value);
  switch (result._tag) {
    case "None":
      {
        return core.succeed([value, value]);
      }
    case "Some":
      {
        return core.map(result.value, newValue => [value, newValue]);
      }
  }
}))));
/** @internal */
const synchronizedRef_modify = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => self.modify(f))));
/** @internal */
const modifyEffect = /*#__PURE__*/Function_dual(2, (self, f) => self.modifyEffect(f));
/** @internal */
const modifySomeEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, fallback, pf) => self.modifyEffect(value => Option.getOrElse(() => core.succeed([fallback, value]))(pf(value))))));
/** @internal */
const updateEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => self.modifyEffect(value => core.map(f(value), result => [undefined, result])))));
/** @internal */
const updateAndGetEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => self.modifyEffect(value => core.map(f(value), result => [result, result])))));
/** @internal */
const updateSomeEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, pf) => self.modifyEffect(value => {
  const result = pf(value);
  switch (result._tag) {
    case "None":
      {
        return core.succeed([void 0, value]);
      }
    case "Some":
      {
        return core.map(result.value, a => [void 0, a]);
      }
  }
}))));
//# sourceMappingURL=synchronizedRef.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/layer.mjs


















/** @internal */
const LayerSymbolKey = "@effect/io/Layer";
/** @internal */
const LayerTypeId = /*#__PURE__*/Symbol.for(LayerSymbolKey);
/** @internal */
const layerVariance = {
  _RIn: _ => _,
  _E: _ => _,
  _ROut: _ => _
};
/** @internal */
const layer_proto = {
  [LayerTypeId]: layerVariance,
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
};
/** @internal */
const isLayer = u => {
  return typeof u === "object" && u != null && LayerTypeId in u;
};
/** @internal */
const isFresh = self => {
  return self._tag === OP_FRESH;
};
// -----------------------------------------------------------------------------
// MemoMap
// -----------------------------------------------------------------------------
/** @internal */
class MemoMap {
  constructor(ref) {
    this.ref = ref;
  }
  /**
   * Checks the memo map to see if a layer exists. If it is, immediately
   * returns it. Otherwise, obtains the layer, stores it in the memo map,
   * and adds a finalizer to the `Scope`.
   */
  getOrElseMemoize(layer, scope) {
    return core_flatten(modifyEffect(this.ref, map => {
      const inMap = map.get(layer);
      if (inMap !== undefined) {
        const [acquire, release] = inMap;
        const cached = onExit(exitMatch({
          onFailure: () => core_unit,
          onSuccess: () => scopeAddFinalizerExit(scope, release)
        }))(core_flatMap(([patch, b]) => core_as(b)(patchFiberRefs(patch)))(acquire));
        return succeed([cached, map]);
      }
      return core_flatMap(observers => core_flatMap(deferred => core_map(finalizerRef => {
        const resource = uninterruptibleMask(restore => core_flatMap(innerScope => core_flatMap(exit => {
          switch (exit._tag) {
            case OP_FAILURE:
              {
                return core_zipRight(failCause(exit.i0))(core_zipRight(scopeClose(innerScope, exit))(deferredFailCause(deferred, exit.i0)));
              }
            case OP_SUCCESS:
              {
                return core_as(exit.i0[1])(core_zipRight(deferredSucceed(deferred, exit.i0))(core_zipRight(scopeAddFinalizerExit(scope, exit => core_flatMap(finalizer => finalizer(exit))(ref_get(finalizerRef))))(core_zipRight(ref_update(observers, n => n + 1))(ref_set(finalizerRef, exit => core_asUnit(whenEffect(ref_modify(observers, n => [n === 1, n - 1]))(scopeClose(innerScope, exit))))))));
              }
          }
        })(core_exit(restore(core_flatMap(withScope(layer, innerScope), f => diffFiberRefs(f(this)))))))(scopeMake()));
        const memoized = [onExit(exitMatchEffect({
          onFailure: () => core_unit,
          onSuccess: () => ref_update(observers, n => n + 1)
        }))(deferredAwait(deferred)), exit => core_flatMap(finalizer => finalizer(exit))(ref_get(finalizerRef))];
        return [resource, isFresh(layer) ? map : map.set(layer, memoized)];
      })(ref_make(() => core_unit)))(deferredMake()))(ref_make(0));
    }));
  }
}
const makeMemoMap = () => core_map(makeSynchronized(new Map()), ref => new MemoMap(ref));
/** @internal */
const build = self => fiberRuntime.scopeWith(scope => buildWithScope(self, scope));
/** @internal */
const buildWithScope = /*#__PURE__*/Function_dual(2, (self, scope) => core_flatMap(makeMemoMap(), memoMap => core_flatMap(withScope(self, scope), run => run(memoMap))));
const withScope = (self, scope) => {
  const op = self;
  switch (op._tag) {
    case "Locally":
      {
        return sync(() => memoMap => op.f(memoMap.getOrElseMemoize(op.self, scope)));
      }
    case "ExtendScope":
      {
        return sync(() => memoMap => scopeWith(scope => memoMap.getOrElseMemoize(op.layer, scope)));
      }
    case "Fold":
      {
        return sync(() => memoMap => matchCauseEffect({
          onFailure: cause => memoMap.getOrElseMemoize(op.failureK(cause), scope),
          onSuccess: value => memoMap.getOrElseMemoize(op.successK(value), scope)
        })(memoMap.getOrElseMemoize(op.layer, scope)));
      }
    case "Fresh":
      {
        return sync(() => _ => buildWithScope(scope)(op.layer));
      }
    case "FromEffect":
      {
        return sync(() => _ => op.effect);
      }
    case "ProvideTo":
      {
        return sync(() => memoMap => core_flatMap(env => provideContext(env)(memoMap.getOrElseMemoize(op.second, scope)))(memoMap.getOrElseMemoize(op.first, scope)));
      }
    case "Scoped":
      {
        return sync(() => _ => scopeExtend(op.effect, scope));
      }
    case "Suspend":
      {
        return sync(() => memoMap => memoMap.getOrElseMemoize(op.evaluate(), scope));
      }
    case "ZipWith":
      {
        return sync(() => memoMap => core_zipWith(memoMap.getOrElseMemoize(op.second, scope), op.zipK)(memoMap.getOrElseMemoize(op.first, scope)));
      }
    case "ZipWithPar":
      {
        return sync(() => memoMap => zipWithOptions(memoMap.getOrElseMemoize(op.second, scope), op.zipK, {
          concurrent: true
        })(memoMap.getOrElseMemoize(op.first, scope)));
      }
  }
};
// -----------------------------------------------------------------------------
// Layer
// -----------------------------------------------------------------------------
/** @internal */
const layer_catchAll = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, onFailure) => layer_match(self, {
  onFailure,
  onSuccess: succeedContext
}))));
/** @internal */
const layer_catchAllCause = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, onFailure) => layer_matchCause(self, {
  onFailure,
  onSuccess: succeedContext
}))));
/** @internal */
const layer_die = defect => layer_failCause(Cause.die(defect));
/** @internal */
const layer_dieSync = evaluate => layer_failCauseSync(() => Cause.die(evaluate()));
/** @internal */
const discard = self => layer_map(self, () => Context.empty());
/** @internal */
const layer_context = () => fromEffectContext(context());
/** @internal */
const extendScope = self => {
  const extendScope = Object.create(layer_proto);
  extendScope._tag = OpCodes.OP_EXTEND_SCOPE;
  extendScope.layer = self;
  return extendScope;
};
/** @internal */
const layer_fail = error => layer_failCause(Cause.fail(error));
/** @internal */
const layer_failSync = evaluate => layer_failCauseSync(() => Cause.fail(evaluate()));
/** @internal */
const layer_failCause = cause => fromEffectContext(core.failCause(cause));
/** @internal */
const layer_failCauseSync = evaluate => fromEffectContext(core.failCauseSync(evaluate));
/** @internal */
const layer_flatMap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => layer_match(self, {
  onFailure: layer_fail,
  onSuccess: f
}))));
/** @internal */
const layer_flatten = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, tag) => layer_flatMap(self, Context.get(tag)))));
/** @internal */
const fresh = self => {
  const fresh = Object.create(layer_proto);
  fresh._tag = OpCodes.OP_FRESH;
  fresh.layer = self;
  return fresh;
};
/** @internal */
const layer_fromEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (a, b) => {
  const tagFirst = Context.isTag(a);
  const tag = tagFirst ? a : b;
  const effect = tagFirst ? b : a;
  return fromEffectContext(core.map(effect, service => Context.make(tag, service)));
})));
/** @internal */
const fromEffectDiscard = effect => fromEffectContext(core.map(effect, () => Context.empty()));
/** @internal */
function fromEffectContext(effect) {
  const fromEffect = Object.create(layer_proto);
  fromEffect._tag = OP_FROM_EFFECT;
  fromEffect.effect = effect;
  return fromEffect;
}
/** @internal */
const layer_fiberRefLocally = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, ref, value) => locallyEffect(self, core.fiberRefLocally(ref, value)))));
/** @internal */
const locallyEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => {
  const locally = Object.create(layer_proto);
  locally._tag = "Locally";
  locally.self = self;
  locally.f = f;
  return locally;
})));
/** @internal */
const layer_fiberRefLocallyWith = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(3, (self, ref, value) => locallyEffect(self, core.fiberRefLocallyWith(ref, value)))));
/** @internal */
const layer_fiberRefLocallyScoped = (self, value) => scopedDiscard(fiberRuntime.fiberRefLocallyScoped(self, value));
/** @internal */
const layer_fiberRefLocallyScopedWith = (self, value) => scopedDiscard(fiberRuntime.fiberRefLocallyScopedWith(self, value));
/** @internal */
const layer_fromFunction = (tagA, tagB, f) => fromEffectContext(core.map(tagA, a => Context.make(tagB, f(a))));
/** @internal */
const launch = self => fiberRuntime.scopedEffect(core.zipRight(fiberRuntime.scopeWith(scope => buildWithScope(scope)(self)), core.never));
/** @internal */
const layer_map = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => layer_flatMap(self, context => succeedContext(f(context))))));
/** @internal */
const layer_mapError = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => layer_catchAll(self, error => layer_failSync(() => f(error))))));
/** @internal */
const layer_matchCause = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, {
  onFailure,
  onSuccess
}) => {
  const fold = Object.create(layer_proto);
  fold._tag = OpCodes.OP_FOLD;
  fold.layer = self;
  fold.failureK = onFailure;
  fold.successK = onSuccess;
  return fold;
})));
/** @internal */
const layer_match = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, {
  onFailure,
  onSuccess
}) => layer_matchCause(self, {
  onFailure: cause => {
    const failureOrCause = Cause.failureOrCause(cause);
    switch (failureOrCause._tag) {
      case "Left":
        {
          return onFailure(failureOrCause.left);
        }
      case "Right":
        {
          return layer_failCause(failureOrCause.right);
        }
    }
  },
  onSuccess
}))));
/** @internal */
const layer_memoize = self => fiberRuntime.scopeWith(scope => core.map(effect.memoize(buildWithScope(self, scope)), fromEffectContext));
/** @internal */
const layer_merge = /*#__PURE__*/Function_dual(2, (self, that) => zipWithPar(self, that, (a, b) => mjs_Context_merge(b)(a)));
/** @internal */
const layer_mergeAll = (...layers) => {
  let final = layers[0];
  for (let i = 1; i < layers.length; i++) {
    final = layer_merge(layers[i])(final);
  }
  return final;
};
/** @internal */
const layer_orDie = self => layer_catchAll(self, defect => layer_die(defect));
/** @internal */
const layer_orElse = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => layer_catchAll(self, that))));
/** @internal */
const layer_passthrough = self => layer_merge(layer_context(), self);
/** @internal */
const project = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(4, (self, tagA, tagB, f) => layer_map(self, context => Context.make(tagB, f(Context.unsafeGet(context, tagA)))))));
/** @internal */
const provide = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => layer_suspend(() => {
  const provideTo = Object.create(layer_proto);
  provideTo._tag = OpCodes.OP_PROVIDE_TO;
  provideTo.first = Object.create(layer_proto, {
    _tag: {
      value: OpCodes.OP_ZIP_WITH,
      enumerable: true
    },
    first: {
      value: layer_context(),
      enumerable: true
    },
    second: {
      value: self
    },
    zipK: {
      value: (a, b) => Context.merge(a, b)
    }
  });
  provideTo.second = that;
  return provideTo;
}))));
/** @internal */
const provideMerge = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => {
  const zipWith = Object.create(layer_proto);
  zipWith._tag = OpCodes.OP_ZIP_WITH;
  zipWith.first = self;
  zipWith.second = provide(that)(self);
  zipWith.zipK = (a, b) => Context.merge(a, b);
  return zipWith;
})));
/** @internal */
const retry = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, schedule) => layer_suspend(() => {
  const stateTag = Context.Tag();
  return layer_flatMap(env => retryLoop(self, schedule, stateTag, Context.get(stateTag)(env).state))(layer_succeed(stateTag, {
    state: schedule.initial
  }));
}))));
/** @internal */
const retryLoop = (self, schedule, stateTag, state) => {
  return layer_catchAll(error => layer_flatMap(env => fresh(retryLoop(self, schedule, stateTag, Context.get(stateTag)(env).state)))(retryUpdate(schedule, stateTag, error, state)))(self);
};
/** @internal */
const retryUpdate = (schedule, stateTag, error, state) => {
  return layer_fromEffect(stateTag, core.flatMap(now => core.flatMap(([state, _, decision]) => ScheduleDecision.isDone(decision) ? core.fail(error) : core.as({
    state
  })(Clock.sleep(Duration.millis(Intervals.start(decision.intervals) - now))))(schedule.step(now, error, state)))(Clock.currentTimeMillis));
};
/** @internal */
const scoped = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (a, b) => {
  const tagFirst = Context.isTag(a);
  const tag = tagFirst ? a : b;
  const effect = tagFirst ? b : a;
  return scopedContext(core.map(effect, service => Context.make(tag, service)));
})));
/** @internal */
const scopedDiscard = effect => {
  return scopedContext(core_as(mjs_Context_empty())(effect));
};
/** @internal */
const scopedContext = effect => {
  const scoped = Object.create(layer_proto);
  scoped._tag = OP_SCOPED;
  scoped.effect = effect;
  return scoped;
};
/** @internal */
const layer_scope = /*#__PURE__*/(/* unused pure expression or super */ null && (scopedContext( /*#__PURE__*/core.map( /*#__PURE__*/fiberRuntime.acquireRelease( /*#__PURE__*/fiberRuntime.scopeMake(), (scope, exit) => scope.close(exit)), scope => Context.make(Scope.Scope, scope)))));
/** @internal */
const service = tag => {
  return layer_fromEffect(tag, tag);
};
/** @internal */
const layer_succeed = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (a, b) => {
  const tagFirst = Context.isTag(a);
  const tag = tagFirst ? a : b;
  const resource = tagFirst ? b : a;
  return fromEffectContext(core.succeed(Context.make(tag, resource)));
})));
/** @internal */
const succeedContext = context => {
  return fromEffectContext(core.succeed(context));
};
/** @internal */
const layer_suspend = evaluate => {
  const suspend = Object.create(layer_proto);
  suspend._tag = OP_SUSPEND;
  suspend.evaluate = evaluate;
  return suspend;
};
/** @internal */
const layer_sync = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (a, b) => {
  const tagFirst = Context.isTag(a);
  const tag = tagFirst ? a : b;
  const evaluate = tagFirst ? b : a;
  return fromEffectContext(core.sync(() => Context.make(tag, evaluate())));
})));
/** @internal */
const syncContext = evaluate => {
  return fromEffectContext(core.sync(evaluate));
};
/** @internal */
const layer_tap = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => layer_flatMap(self, context => fromEffectContext(core.as(f(context), context))))));
/** @internal */
const layer_tapError = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => layer_catchAll(self, e => fromEffectContext(core.flatMap(f(e), () => core.fail(e)))))));
/** @internal */
const layer_tapErrorCause = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, f) => layer_catchAllCause(self, cause => fromEffectContext(core.flatMap(f(cause), () => core.failCause(cause)))))));
/** @internal */
const toRuntime = self => {
  return core.flatMap(context => core.provideContext(context)(runtime.runtime()))(fiberRuntime.scopeWith(scope => buildWithScope(scope)(self)));
};
/** @internal */
const use = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (that, self) => layer_suspend(() => {
  const provideTo = Object.create(layer_proto);
  provideTo._tag = OpCodes.OP_PROVIDE_TO;
  provideTo.first = Object.create(layer_proto, {
    _tag: {
      value: OpCodes.OP_ZIP_WITH,
      enumerable: true
    },
    first: {
      value: layer_context(),
      enumerable: true
    },
    second: {
      value: self
    },
    zipK: {
      value: (a, b) => Context.merge(b)(a)
    }
  });
  provideTo.second = that;
  return provideTo;
}))));
/** @internal */
const useMerge = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (that, self) => {
  const zipWith = Object.create(layer_proto);
  zipWith._tag = OpCodes.OP_ZIP_WITH;
  zipWith.first = self;
  zipWith.second = provide(that)(self);
  zipWith.zipK = (a, b) => {
    return Context.merge(b)(a);
  };
  return zipWith;
})));
/** @internal */
const zipWithPar = /*#__PURE__*/Function_dual(3, (self, that, f) => layer_suspend(() => {
  const zipWithPar = Object.create(layer_proto);
  zipWithPar._tag = OP_ZIP_WITH_PAR;
  zipWithPar.first = self;
  zipWithPar.second = that;
  zipWithPar.zipK = f;
  return zipWithPar;
}));
// circular with Effect
/** @internal */
const provideLayer = /*#__PURE__*/Function_dual(2, (self, layer) => acquireUseRelease(scopeMake(), scope => core_flatMap(buildWithScope(layer, scope), context => provideContext(self, context)), (scope, exit) => scopeClose(scope, exit)));
/** @internal */
const provideSomeLayer = /*#__PURE__*/Function_dual(2, (self, layer) => provideLayer(self, layer_merge(layer_context(), layer)));
//# sourceMappingURL=layer.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/layer/circular.mjs









// circular with Logger
/** @internal */
const minimumLogLevel = level => layer.scopedDiscard(fiberRuntime.fiberRefLocallyScoped(fiberRuntime.currentMinimumLogLevel, level));
/** @internal */
const withMinimumLogLevel = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, level) => core.fiberRefLocally(fiberRuntime.currentMinimumLogLevel, level)(self))));
/** @internal */
const addLogger = logger => layer.scopedDiscard(fiberRuntime.fiberRefLocallyScopedWith(fiberRuntime.currentLoggers, HashSet.add(logger)));
/** @internal */
const addLoggerEffect = effect => Layer.unwrapEffect(core.map(effect, addLogger));
/** @internal */
const addLoggerScoped = effect => Layer.unwrapScoped(core.map(effect, addLogger));
/** @internal */
const removeLogger = logger => layer.scopedDiscard(fiberRuntime.fiberRefLocallyScopedWith(fiberRuntime.currentLoggers, HashSet.remove(logger)));
/** @internal */
const replaceLogger = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => layer.flatMap(removeLogger(self), () => addLogger(that)))));
/** @internal */
const replaceLoggerEffect = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => layer.flatMap(removeLogger(self), () => addLoggerEffect(that)))));
/** @internal */
const replaceLoggerScoped = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => layer.flatMap(removeLogger(self), () => addLoggerScoped(that)))));
/** @internal */
const addSupervisor = supervisor => layer.scopedDiscard(fiberRuntime.fiberRefLocallyScopedWith(fiberRuntime.currentSupervisor, current => new _supervisor.Zip(current, supervisor)));
/** @internal */
const enableCooperativeYielding = /*#__PURE__*/scopedDiscard( /*#__PURE__*/withRuntimeFlagsScoped( /*#__PURE__*/enable(CooperativeYielding)));
/** @internal */
const enableInterruption = /*#__PURE__*/scopedDiscard( /*#__PURE__*/withRuntimeFlagsScoped( /*#__PURE__*/enable(Interruption)));
/** @internal */
const enableOpSupervision = /*#__PURE__*/scopedDiscard( /*#__PURE__*/withRuntimeFlagsScoped( /*#__PURE__*/enable(OpSupervision)));
/** @internal */
const enableRuntimeMetrics = /*#__PURE__*/scopedDiscard( /*#__PURE__*/withRuntimeFlagsScoped( /*#__PURE__*/enable(RuntimeMetrics)));
/** @internal */
const enableWindDown = /*#__PURE__*/scopedDiscard( /*#__PURE__*/withRuntimeFlagsScoped( /*#__PURE__*/enable(WindDown)));
/** @internal */
const disableCooperativeYielding = /*#__PURE__*/scopedDiscard( /*#__PURE__*/withRuntimeFlagsScoped( /*#__PURE__*/disable(CooperativeYielding)));
/** @internal */
const disableInterruption = /*#__PURE__*/scopedDiscard( /*#__PURE__*/withRuntimeFlagsScoped( /*#__PURE__*/disable(Interruption)));
/** @internal */
const disableOpSupervision = /*#__PURE__*/scopedDiscard( /*#__PURE__*/withRuntimeFlagsScoped( /*#__PURE__*/disable(OpSupervision)));
/** @internal */
const disableRuntimeMetrics = /*#__PURE__*/scopedDiscard( /*#__PURE__*/withRuntimeFlagsScoped( /*#__PURE__*/disable(RuntimeMetrics)));
/** @internal */
const disableWindDown = /*#__PURE__*/scopedDiscard( /*#__PURE__*/withRuntimeFlagsScoped( /*#__PURE__*/disable(WindDown)));
/** @internal */
const setConfigProvider = configProvider => scopedDiscard(withConfigProviderScoped(configProvider));
/** @internal */
const setParentSpan = span => scopedDiscard(withParentSpanScoped(span));
/** @internal */
const setSpan = (name, options) => scopedDiscard(withSpanScoped(name, options));
/** @internal */
const setTracer = tracer => scopedDiscard(withTracerScoped(tracer));
//# sourceMappingURL=circular.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/MutableList.mjs
/**
 * @since 1.0.0
 */


const MutableList_TypeId = /*#__PURE__*/Symbol.for("@effect/data/MutableList");
/** @internal */
class MutableListImpl {
  constructor() {
    this._id = MutableList_TypeId;
    this.head = undefined;
    this.tail = undefined;
    this._length = 0;
  }
  [Symbol.iterator]() {
    let done = false;
    let head = this.head;
    return {
      next() {
        if (done) {
          return this.return();
        }
        if (head == null) {
          done = true;
          return this.return();
        }
        const value = head.value;
        head = head.next;
        return {
          done,
          value
        };
      },
      return(value) {
        if (!done) {
          done = true;
        }
        return {
          done: true,
          value
        };
      }
    };
  }
  toString() {
    return `MutableList(${Array.from(this).map(String).join(", ")})`;
  }
  toJSON() {
    return {
      _tag: "MutableList",
      values: Array.from(this)
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
class LinkedListNode {
  constructor(value) {
    this.value = value;
    this.removed = false;
    this.prev = undefined;
    this.next = undefined;
  }
}
/**
 * Creates an empty `MutableList`.
 *
 * @since 1.0.0
 * @category constructors
 */
const MutableList_empty = () => new MutableListImpl();
/**
 * Creates a new `MutableList` from an `Iterable`.
 *
 * @since 1.0.0
 * @category constructors
 */
const MutableList_fromIterable = iterable => {
  const list = new MutableListImpl();
  for (const element of iterable) {
    MutableList_append(list, element);
  }
  return list;
};
/**
 * Creates a new `MutableList` from the specified elements.
 *
 * @since 1.0.0
 * @category constructors
 */
const MutableList_make = (...elements) => MutableList_fromIterable(elements);
/**
 * Returns `true` if the list contains zero elements, `false`, otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const MutableList_isEmpty = self => MutableList_length(self) === 0;
/**
 * Returns the length of the list.
 *
 * @since 1.0.0
 * @category getters
 */
const MutableList_length = self => self._length;
/**
 * Returns the last element of the list, if it exists.
 *
 * @since 1.0.0
 * @category getters
 */
const MutableList_tail = self => self.tail === undefined ? undefined : self.tail.value;
/**
 * Returns the first element of the list, if it exists.
 *
 * @since 1.0.0
 * @category getters
 */
const MutableList_head = self => self.head === undefined ? undefined : self.head.value;
/**
 * Executes the specified function `f` for each element in the list.
 *
 * @since 1.0.0
 * @category traversing
 */
const MutableList_forEach = /*#__PURE__*/(/* unused pure expression or super */ null && (Dual.dual(2, (self, f) => {
  let current = self.head;
  while (current !== undefined) {
    f(current.value);
    current = current.next;
  }
})));
/**
 * Removes all elements from the doubly-linked list.
 *
 * @since 1.0.0
 */
const MutableList_reset = self => {
  ;
  self._length = 0;
  self.head = undefined;
  self.tail = undefined;
  return self;
};
/**
 * Appends the specified element to the end of the `MutableList`.
 *
 * @category concatenating
 * @since 1.0.0
 */
const MutableList_append = /*#__PURE__*/Function_dual(2, (self, value) => {
  const node = new LinkedListNode(value);
  if (self.head === undefined) {
    self.head = node;
  }
  if (self.tail === undefined) {
    self.tail = node;
  } else {
    self.tail.next = node;
    node.prev = self.tail;
    self.tail = node;
  }
  ;
  self._length += 1;
  return self;
});
/**
 * Removes the first value from the list and returns it, if it exists.
 *
 * @since 0.0.1
 */
const shift = self => {
  const head = self.head;
  if (head !== undefined) {
    MutableList_remove(self, head);
    return head.value;
  }
  return undefined;
};
/**
 * Removes the last value from the list and returns it, if it exists.
 *
 * @since 0.0.1
 */
const MutableList_pop = self => {
  const tail = self.tail;
  if (tail !== undefined) {
    MutableList_remove(self, tail);
    return tail.value;
  }
  return undefined;
};
/**
 * Prepends the specified value to the beginning of the list.
 *
 * @category concatenating
 * @since 1.0.0
 */
const MutableList_prepend = /*#__PURE__*/(/* unused pure expression or super */ null && (Dual.dual(2, (self, value) => {
  const node = new LinkedListNode(value);
  node.next = self.head;
  if (self.head !== undefined) {
    self.head.prev = node;
  }
  self.head = node;
  if (self.tail === undefined) {
    self.tail = node;
  }
  ;
  self._length += 1;
  return self;
})));
const MutableList_remove = (self, node) => {
  if (node.removed) {
    return;
  }
  node.removed = true;
  if (node.prev !== undefined && node.next !== undefined) {
    node.prev.next = node.next;
    node.next.prev = node.prev;
  } else if (node.prev !== undefined) {
    self.tail = node.prev;
    node.prev.next = undefined;
  } else if (node.next !== undefined) {
    self.head = node.next;
    node.next.prev = undefined;
  } else {
    self.tail = undefined;
    self.head = undefined;
  }
  if (self._length > 0) {
    ;
    self._length -= 1;
  }
};
//# sourceMappingURL=MutableList.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/MutableQueue.mjs
/**
 * @since 1.0.0
 */




const MutableQueue_TypeId = /*#__PURE__*/Symbol.for("@effect/data/MutableQueue");
/**
 * @since 1.0.0
 * @category symbol
 */
const EmptyMutableQueue = /*#__PURE__*/Symbol.for("@effect/data/mutable/MutableQueue/Empty");
/** @internal */
class MutableQueueImpl {
  constructor(capacity = undefined) {
    this.capacity = capacity;
    this._tag = "Bounded";
    this._id = MutableQueue_TypeId;
    this.queue = MutableList_empty();
  }
  [Symbol.iterator]() {
    return Array.from(this.queue)[Symbol.iterator]();
  }
  toString() {
    return `MutableQueue(${Array.from(this).map(String).join(", ")})`;
  }
  toJSON() {
    return {
      _tag: "MutableQueue",
      values: Array.from(this)
    };
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return this.toJSON();
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/**
 * Creates a new bounded `MutableQueue`.
 *
 * @since 1.0.0
 * @category constructors
 */
const bounded = capacity => new MutableQueueImpl(capacity);
/**
 * Creates a new unbounded `MutableQueue`.
 *
 * @since 1.0.0
 * @category constructors
 */
const unbounded = () => new MutableQueueImpl();
/**
 * Returns the current number of elements in the queue.
 *
 * @since 1.0.0
 * @category getters
 */
const MutableQueue_length = self => MutableList.length(self.queue);
/**
 * Returns `true` if the queue is empty, `false` otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const MutableQueue_isEmpty = self => MutableList.isEmpty(self.queue);
/**
 * Returns `true` if the queue is full, `false` otherwise.
 *
 * @since 1.0.0
 * @category getters
 */
const isFull = self => self.capacity === undefined ? false : MutableList.length(self.queue) === self.capacity;
/**
 * The **maximum** number of elements that a queue can hold.
 *
 * **Note**: unbounded queues can still implement this interface with
 * `capacity = Infinity`.
 *
 * @since 1.0.0
 * @category getters
 */
const capacity = self => self.capacity === undefined ? Infinity : self.capacity;
/**
 * Offers an element to the queue.
 *
 * Returns whether the enqueue was successful or not.
 *
 * @since 1.0.0
 */
const offer = /*#__PURE__*/Function_dual(2, (self, value) => {
  const queueLength = MutableList_length(self.queue);
  if (self.capacity !== undefined && queueLength === self.capacity) {
    return false;
  }
  MutableList_append(value)(self.queue);
  return true;
});
/**
 * Enqueues a collection of values into the queue.
 *
 * Returns a `Chunk` of the values that were **not** able to be enqueued.
 *
 * @since 1.0.0
 */
const offerAll = /*#__PURE__*/(/* unused pure expression or super */ null && (Dual.dual(2, (self, values) => {
  const iterator = values[Symbol.iterator]();
  let next;
  let remainder = Chunk.empty();
  let offering = true;
  while (offering && (next = iterator.next()) && !next.done) {
    offering = offer(next.value)(self);
  }
  while (next != null && !next.done) {
    remainder = Chunk.prepend(next.value)(remainder);
    next = iterator.next();
  }
  return Chunk.reverse(remainder);
})));
/**
 * Dequeues an element from the queue.
 *
 * Returns either an element from the queue, or the `def` param.
 *
 * **Note**: if there is no meaningful default for your type, you can always
 * use `poll(MutableQueue.EmptyMutableQueue)`.
 *
 * @since 1.0.0
 */
const MutableQueue_poll = /*#__PURE__*/Function_dual(2, (self, def) => {
  if (MutableList_isEmpty(self.queue)) {
    return def;
  }
  return shift(self.queue);
});
/**
 * Dequeues up to `n` elements from the queue.
 *
 * Returns a `List` of up to `n` elements.
 *
 * @since 1.0.0
 */
const pollUpTo = /*#__PURE__*/(/* unused pure expression or super */ null && (Dual.dual(2, (self, n) => {
  let result = Chunk.empty();
  let count = 0;
  while (count < n) {
    const element = MutableQueue_poll(EmptyMutableQueue)(self);
    if (element === EmptyMutableQueue) {
      break;
    }
    result = Chunk.prepend(element)(result);
    count += 1;
  }
  return Chunk.reverse(result);
})));
//# sourceMappingURL=MutableQueue.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/cache.mjs
var cache_a, cache_b;
















/** @internal */
const cache_complete = (key, exit, entryStats, timeToLiveMillis) => Data_struct({
  _tag: "Complete",
  key,
  exit,
  entryStats,
  timeToLiveMillis
});
/** @internal */
const cache_pending = (key, deferred) => Data_struct({
  _tag: "Pending",
  key,
  deferred
});
/** @internal */
const refreshing = (deferred, complete) => Data_struct({
  _tag: "Refreshing",
  deferred,
  complete
});
/** @internal */
const MapKeyTypeId = /*#__PURE__*/Symbol.for("@effect/cache/Cache/MapKey");
class MapKeyImpl {
  constructor(current) {
    this.current = current;
    this[cache_a] = MapKeyTypeId;
    this.previous = undefined;
    this.next = undefined;
  }
  [(cache_a = MapKeyTypeId, symbol)]() {
    return combine(Hash_hash(this.next))(combine(Hash_hash(this.previous))(Hash_hash(this.current)));
  }
  [Equal_symbol](that) {
    if (this === that) {
      return true;
    }
    return isMapKey(that) && equals(this.current, that.current) && equals(this.previous, that.previous) && equals(this.next, that.next);
  }
}
/** @internal */
const makeMapKey = current => new MapKeyImpl(current);
/** @internal */
const isMapKey = u => typeof u === "object" && u != null && MapKeyTypeId in u;
class KeySetImpl {
  constructor() {
    this.head = undefined;
    this.tail = undefined;
  }
  add(key) {
    if (key !== this.tail) {
      if (this.tail === undefined) {
        this.head = key;
        this.tail = key;
      } else {
        const previous = key.previous;
        const next = key.next;
        if (next !== undefined) {
          key.next = undefined;
          if (previous !== undefined) {
            previous.next = next;
            next.previous = previous;
          } else {
            this.head = next;
            this.head.previous = undefined;
          }
        }
        this.tail.next = key;
        key.previous = this.tail;
        this.tail = key;
      }
    }
  }
  remove() {
    const key = this.head;
    if (key !== undefined) {
      const next = key.next;
      if (next !== undefined) {
        key.next = undefined;
        this.head = next;
        this.head.previous = undefined;
      } else {
        this.head = undefined;
        this.tail = undefined;
      }
    }
    return key;
  }
}
/** @internal */
const makeKeySet = () => new KeySetImpl();
/**
 * Constructs a new `CacheState` from the specified values.
 *
 * @internal
 */
const makeCacheState = (map, keys, accesses, updating, hits, misses) => ({
  map,
  keys,
  accesses,
  updating,
  hits,
  misses
});
/**
 * Constructs an initial cache state.
 *
 * @internal
 */
const initialCacheState = () => makeCacheState(MutableHashMap_empty(), makeKeySet(), unbounded(), MutableRef_make(false), 0, 0);
/** @internal */
const CacheSymbolKey = "@effect/cache/Cache";
/** @internal */
const CacheTypeId = /*#__PURE__*/Symbol.for(CacheSymbolKey);
const cacheVariance = {
  _Key: _ => _,
  _Error: _ => _,
  _Value: _ => _
};
/** @internal */
const makeCacheStats = options => options;
/** @internal */
const makeEntryStats = loadedMillis => ({
  loadedMillis
});
class CacheImpl {
  constructor(capacity, context, fiberId, lookup, timeToLive) {
    this.capacity = capacity;
    this.context = context;
    this.fiberId = fiberId;
    this.lookup = lookup;
    this.timeToLive = timeToLive;
    this[cache_b] = cacheVariance;
    this.cacheState = initialCacheState();
  }
  get(key) {
    return core_map(this.getEither(key), merge);
  }
  cacheStats() {
    return sync(() => makeCacheStats({
      hits: this.cacheState.hits,
      misses: this.cacheState.misses,
      size: MutableHashMap_size(this.cacheState.map)
    }));
  }
  getOption(key) {
    return suspend(() => match(MutableHashMap_get(this.cacheState.map, key), {
      onNone: () => {
        const mapKey = makeMapKey(key);
        this.trackAccess(mapKey);
        this.trackMiss();
        return succeed(Option_none());
      },
      onSome: value => this.resolveMapValue(value)
    }));
  }
  getOptionComplete(key) {
    return suspend(() => match(MutableHashMap_get(this.cacheState.map, key), {
      onNone: () => {
        const mapKey = makeMapKey(key);
        this.trackAccess(mapKey);
        this.trackMiss();
        return succeed(Option_none());
      },
      onSome: value => this.resolveMapValue(value, true)
    }));
  }
  contains(key) {
    return sync(() => MutableHashMap_has(this.cacheState.map, key));
  }
  entryStats(key) {
    return sync(() => {
      const option = MutableHashMap_get(this.cacheState.map, key);
      if (Option_isSome(option)) {
        switch (option.value._tag) {
          case "Complete":
            {
              const loaded = option.value.entryStats.loadedMillis;
              return mjs_Option_some(makeEntryStats(loaded));
            }
          case "Pending":
            {
              return Option_none();
            }
          case "Refreshing":
            {
              const loaded = option.value.complete.entryStats.loadedMillis;
              return mjs_Option_some(makeEntryStats(loaded));
            }
        }
      }
      return Option_none();
    });
  }
  getEither(key) {
    return suspend(() => {
      const k = key;
      let mapKey = undefined;
      let deferred = undefined;
      let value = getOrUndefined(MutableHashMap_get(this.cacheState.map, k));
      if (value === undefined) {
        deferred = Deferred_unsafeMake(this.fiberId);
        mapKey = makeMapKey(k);
        if (MutableHashMap_has(this.cacheState.map, k)) {
          value = getOrUndefined(MutableHashMap_get(this.cacheState.map, k));
        } else {
          MutableHashMap_set(this.cacheState.map, k, cache_pending(mapKey, deferred));
        }
      }
      if (value === undefined) {
        this.trackAccess(mapKey);
        this.trackMiss();
        return core_map(this.lookupValueOf(key, deferred), Either_right);
      } else {
        return core_flatMap(this.resolveMapValue(value), match({
          onNone: () => this.getEither(key),
          onSome: value => succeed(Either_left(value))
        }));
      }
    });
  }
  invalidate(key) {
    return sync(() => {
      MutableHashMap_remove(this.cacheState.map, key);
    });
  }
  invalidateWhen(key, when) {
    return sync(() => {
      const value = MutableHashMap_get(this.cacheState.map, key);
      if (Option_isSome(value) && value.value._tag === "Complete") {
        if (value.value.exit._tag === "Success") {
          if (when(value.value.exit.value)) {
            MutableHashMap_remove(this.cacheState.map, key);
          }
        }
      }
    });
  }
  invalidateAll() {
    return sync(() => {
      this.cacheState.map = MutableHashMap_empty();
    });
  }
  refresh(key) {
    return effect_clockWith(clock => suspend(() => {
      const k = key;
      const deferred = Deferred_unsafeMake(this.fiberId);
      let value = getOrUndefined(MutableHashMap_get(this.cacheState.map, k));
      if (value === undefined) {
        if (MutableHashMap_has(this.cacheState.map, k)) {
          value = getOrUndefined(MutableHashMap_get(this.cacheState.map, k));
        } else {
          MutableHashMap_set(this.cacheState.map, k, cache_pending(makeMapKey(k), deferred));
        }
      }
      if (value === undefined) {
        return core_asUnit(this.lookupValueOf(key, deferred));
      } else {
        switch (value._tag) {
          case "Complete":
            {
              if (this.hasExpired(clock, value.timeToLiveMillis)) {
                const found = getOrUndefined(MutableHashMap_get(this.cacheState.map, k));
                if (equals(found, value)) {
                  MutableHashMap_remove(this.cacheState.map, k);
                }
                return core_asUnit(this.get(key));
              }
              // Only trigger the lookup if we're still the current value, `completedResult`
              return core_asUnit(when(() => {
                const current = getOrUndefined(MutableHashMap_get(this.cacheState.map, k));
                if (equals(current, value)) {
                  const mapValue = refreshing(deferred, value);
                  MutableHashMap_set(this.cacheState.map, k, mapValue);
                  return true;
                }
                return false;
              })(this.lookupValueOf(key, deferred)));
            }
          case "Pending":
            {
              return Deferred_await(value.deferred);
            }
          case "Refreshing":
            {
              return Deferred_await(value.deferred);
            }
        }
      }
    }));
  }
  set(key, value) {
    return effect_clockWith(clock => sync(() => {
      const now = clock.unsafeCurrentTimeMillis();
      const k = key;
      const lookupResult = Exit_succeed(value);
      const mapValue = cache_complete(makeMapKey(k), lookupResult, makeEntryStats(now), now + toMillis(decode(this.timeToLive(lookupResult))));
      MutableHashMap_set(this.cacheState.map, k, mapValue);
    }));
  }
  size() {
    return sync(() => {
      return MutableHashMap_size(this.cacheState.map);
    });
  }
  values() {
    return sync(() => {
      const values = [];
      for (const entry of this.cacheState.map) {
        if (entry[1]._tag === "Complete" && entry[1].exit._tag === "Success") {
          values.push(entry[1].exit.value);
        }
      }
      return values;
    });
  }
  entries() {
    return sync(() => {
      const values = [];
      for (const entry of this.cacheState.map) {
        if (entry[1]._tag === "Complete" && entry[1].exit._tag === "Success") {
          values.push([entry[0], entry[1].exit.value]);
        }
      }
      return values;
    });
  }
  keys() {
    return sync(() => {
      const keys = [];
      for (const entry of this.cacheState.map) {
        if (entry[1]._tag === "Complete" && entry[1].exit._tag === "Success") {
          keys.push(entry[0]);
        }
      }
      return keys;
    });
  }
  resolveMapValue(value, ignorePending = false) {
    return effect_clockWith(clock => {
      switch (value._tag) {
        case "Complete":
          {
            this.trackAccess(value.key);
            this.trackHit();
            if (this.hasExpired(clock, value.timeToLiveMillis)) {
              MutableHashMap_remove(this.cacheState.map, value.key.current);
              return succeed(Option_none());
            }
            return core_map(value.exit, mjs_Option_some);
          }
        case "Pending":
          {
            this.trackAccess(value.key);
            this.trackHit();
            if (ignorePending) {
              return succeed(Option_none());
            }
            return core_map(Deferred_await(value.deferred), mjs_Option_some);
          }
        case "Refreshing":
          {
            this.trackAccess(value.complete.key);
            this.trackHit();
            if (this.hasExpired(clock, value.complete.timeToLiveMillis)) {
              if (ignorePending) {
                return succeed(Option_none());
              }
              return core_map(Deferred_await(value.deferred), mjs_Option_some);
            }
            return core_map(value.complete.exit, mjs_Option_some);
          }
      }
    });
  }
  trackHit() {
    this.cacheState.hits = this.cacheState.hits + 1;
  }
  trackMiss() {
    this.cacheState.misses = this.cacheState.misses + 1;
  }
  trackAccess(key) {
    offer(this.cacheState.accesses, key);
    if (compareAndSet(this.cacheState.updating, false, true)) {
      let loop = true;
      while (loop) {
        const key = MutableQueue_poll(this.cacheState.accesses, EmptyMutableQueue);
        if (key === EmptyMutableQueue) {
          loop = false;
        } else {
          this.cacheState.keys.add(key);
        }
      }
      let size = MutableHashMap_size(this.cacheState.map);
      loop = size > this.capacity;
      while (loop) {
        const key = this.cacheState.keys.remove();
        if (key !== undefined) {
          if (MutableHashMap_has(this.cacheState.map, key.current)) {
            MutableHashMap_remove(this.cacheState.map, key.current);
            size = size - 1;
            loop = size > this.capacity;
          }
        } else {
          loop = false;
        }
      }
      MutableRef_set(this.cacheState.updating, false);
    }
  }
  hasExpired(clock, timeToLiveMillis) {
    return clock.unsafeCurrentTimeMillis() > timeToLiveMillis;
  }
  lookupValueOf(input, deferred) {
    return effect_clockWith(clock => suspend(() => {
      const key = input;
      return onInterrupt(() => core_zipRight(Deferred_interrupt(deferred), sync(() => {
        MutableHashMap_remove(this.cacheState.map, key);
      })))(core_flatMap(exit => {
        const now = clock.unsafeCurrentTimeMillis();
        const stats = makeEntryStats(now);
        const value = cache_complete(makeMapKey(key), exit, stats, now + toMillis(decode(this.timeToLive(exit))));
        MutableHashMap_set(this.cacheState.map, key, value);
        return core_zipRight(Deferred_done(deferred, exit), exit);
      })(core_exit(provideContext(this.context)(this.lookup(input)))));
    }));
  }
}
cache_b = CacheTypeId;
/** @internal */
const cache_make = options => {
  const timeToLive = Duration.decode(options.timeToLive);
  return makeWith({
    capacity: options.capacity,
    lookup: options.lookup,
    timeToLive: () => timeToLive
  });
};
/** @internal */
const makeWith = options => core.map(fiberRuntime.all([core.context(), core.fiberId]), ([context, fiberId]) => new CacheImpl(options.capacity, context, fiberId, options.lookup, exit => Duration.decode(options.timeToLive(exit))));
/** @internal */
const unsafeMakeWith = (capacity, lookup, timeToLive) => new CacheImpl(capacity, mjs_Context_empty(), fiberId_none, lookup, exit => decode(timeToLive(exit)));
//# sourceMappingURL=cache.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/query.mjs









/** @internal */
const currentCache = /*#__PURE__*/fiberRefUnsafeMake( /*#__PURE__*/unsafeMakeWith(65536, () => core_map(deferredMake(), handle => ({
  listeners: new Listeners(),
  handle
})), () => seconds(60)));
/** @internal */
const currentCacheEnabled = /*#__PURE__*/globalValue( /*#__PURE__*/Symbol.for("@effect/io/FiberRef/currentCacheEnabled"), () => fiberRefUnsafeMake(false));
/** @internal */
const fromRequest = (request, dataSource) => core_flatMap(isEffect(dataSource) ? dataSource : succeed(dataSource), ds => fiberIdWith(id => {
  const proxy = new Proxy(request, {});
  return fiberRefGetWith(currentCacheEnabled, cacheEnabled => {
    if (cacheEnabled) {
      return fiberRefGetWith(currentCache, cache => core_flatMap(cache.getEither(proxy), orNew => {
        switch (orNew._tag) {
          case "Left":
            {
              orNew.left.listeners.increment();
              return core_blocked(blockedRequests_empty, core_flatMap(core_exit(deferredAwait(orNew.left.handle)), exit => {
                if (exit._tag === "Failure" && isInterruptedOnly(exit.cause)) {
                  orNew.left.listeners.decrement();
                  return core_flatMap(cache.invalidateWhen(proxy, entry => entry.handle === orNew.left.handle), () => fromRequest(proxy, dataSource));
                }
                return ensuring(deferredAwait(orNew.left.handle), sync(() => orNew.left.listeners.decrement()));
              }));
            }
          case "Right":
            {
              orNew.right.listeners.increment();
              return core_blocked(single(ds, makeEntry({
                request: proxy,
                result: orNew.right.handle,
                listeners: orNew.right.listeners,
                ownerId: id,
                state: {
                  completed: false
                }
              })), uninterruptibleMask(restore => core_flatMap(core_exit(restore(deferredAwait(orNew.right.handle))), exit => {
                orNew.right.listeners.decrement();
                return exit;
              })));
            }
        }
      }));
    }
    const listeners = new Listeners();
    listeners.increment();
    return core_flatMap(deferredMake(), ref => core_blocked(single(ds, makeEntry({
      request: proxy,
      result: ref,
      listeners,
      ownerId: id,
      state: {
        completed: false
      }
    })), ensuring(deferredAwait(ref), sync(() => listeners.decrement()))));
  });
}));
/** @internal */
const cacheRequest = (request, result) => {
  return fiberRefGetWith(currentCacheEnabled, cacheEnabled => {
    if (cacheEnabled) {
      return fiberRefGetWith(currentCache, cache => core_flatMap(cache.getEither(request), orNew => {
        switch (orNew._tag) {
          case "Left":
            {
              return core_unit;
            }
          case "Right":
            {
              return deferredComplete(orNew.right.handle, result);
            }
        }
      }));
    }
    return core_unit;
  });
};
/** @internal */
const withRequestCaching = /*#__PURE__*/Function_dual(2, (self, strategy) => fiberRefLocally(self, currentCacheEnabled, strategy));
/** @internal */
const withRequestCache = /*#__PURE__*/Function_dual(2,
// @ts-expect-error
(self, cache) => fiberRefLocally(self, currentCache, cache));
//# sourceMappingURL=query.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Fiber.mjs




/**
 * @since 1.0.0
 * @category symbols
 */
const Fiber_FiberTypeId = FiberTypeId;
/**
 * @since 1.0.0
 * @category symbols
 */
const Fiber_RuntimeFiberTypeId = RuntimeFiberTypeId;
/**
 * @since 1.0.0
 * @category instances
 */
const Fiber_Order = fiber_Order;
/**
 * Returns `true` if the specified value is a `Fiber`, `false` otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Fiber_isFiber = isFiber;
/**
 * Returns `true` if the specified `Fiber` is a `RuntimeFiber`, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Fiber_isRuntimeFiber = isRuntimeFiber;
/**
 * The identity of the fiber.
 *
 * @since 1.0.0
 * @category getters
 */
const Fiber_id = id;
const Fiber_await = _await;

/**
 * Awaits on all fibers to be completed, successfully or not.
 *
 * @since 1.0.0
 * @category destructors
 */
const awaitAll = fiberAwaitAll;
/**
 * Retrieves the immediate children of the fiber.
 *
 * @since 1.0.0
 * @category getters
 */
const Fiber_children = children;
/**
 * Collects all fibers into a single fiber producing an in-order list of the
 * results.
 *
 * @since 1.0.0
 * @category constructors
 */
const Fiber_all = fiberAll;
/**
 * A fiber that is done with the specified `Exit` value.
 *
 * @since 1.0.0
 * @category constructors
 */
const Fiber_done = fiber_done;
/**
 * @since 1.0.0
 * @category destructors
 */
const Fiber_dump = dump;
/**
 * @since 1.0.0
 * @category destructors
 */
const Fiber_dumpAll = dumpAll;
/**
 * A fiber that has already failed with the specified value.
 *
 * @since 1.0.0
 * @category constructors
 */
const Fiber_fail = fiber_fail;
/**
 * Creates a `Fiber` that has already failed with the specified cause.
 *
 * @since 1.0.0
 * @category constructors
 */
const Fiber_failCause = fiber_failCause;
/**
 * Lifts an `Effect` into a `Fiber`.
 *
 * @since 1.0.0
 * @category conversions
 */
const Fiber_fromEffect = fromEffect;
/**
 * Gets the current fiber if one is running.
 *
 * @since 1.0.0
 * @category utilities
 */
const Fiber_getCurrentFiber = getCurrentFiber;
/**
 * Inherits values from all `FiberRef` instances into current fiber. This
 * will resume immediately.
 *
 * @since 1.0.0
 * @category destructors
 */
const inheritAll = fiber_inheritAll;
/**
 * Interrupts the fiber from whichever fiber is calling this method. If the
 * fiber has already exited, the returned effect will resume immediately.
 * Otherwise, the effect will resume when the fiber exits.
 *
 * @since 1.0.0
 * @category interruption
 */
const Fiber_interrupt = interruptFiber;
/**
 * Constructrs a `Fiber` that is already interrupted.
 *
 * @since 1.0.0
 * @category constructors
 */
const Fiber_interrupted = interrupted;
/**
 * Interrupts the fiber as if interrupted from the specified fiber. If the
 * fiber has already exited, the returned effect will resume immediately.
 * Otherwise, the effect will resume when the fiber exits.
 *
 * @since 1.0.0
 * @category interruption
 */
const interruptAs = interruptAsFiber;
/**
 * Interrupts the fiber as if interrupted from the specified fiber. If the
 * fiber has already exited, the returned effect will resume immediately.
 * Otherwise, the effect will resume when the fiber exits.
 *
 * @since 1.0.0
 * @category interruption
 */
const Fiber_interruptAsFork = interruptAsFork;
/**
 * Interrupts all fibers, awaiting their interruption.
 *
 * @since 1.0.0
 * @category interruption
 */
const Fiber_interruptAll = interruptAll;
/**
 * Interrupts all fibers as by the specified fiber, awaiting their
 * interruption.
 *
 * @since 1.0.0
 * @category interruption
 */
const Fiber_interruptAllAs = interruptAllAs;
/**
 * Interrupts the fiber from whichever fiber is calling this method. The
 * interruption will happen in a separate daemon fiber, and the returned
 * effect will always resume immediately without waiting.
 *
 * @since 1.0.0
 * @category interruption
 */
const interruptFork = fiberInterruptFork;
/**
 * Joins the fiber, which suspends the joining fiber until the result of the
 * fiber has been determined. Attempting to join a fiber that has erred will
 * result in a catchable error. Joining an interrupted fiber will result in an
 * "inner interruption" of this fiber, unlike interruption triggered by
 * another fiber, "inner interruption" can be caught and recovered.
 *
 * @since 1.0.0
 * @category destructors
 */
const Fiber_join = fiber_join;
/**
 * Joins all fibers, awaiting their _successful_ completion. Attempting to
 * join a fiber that has erred will result in a catchable error, _if_ that
 * error does not result from interruption.
 *
 * @since 1.0.0
 * @category destructors
 */
const joinAll = fiberJoinAll;
/**
 * Maps over the value the Fiber computes.
 *
 * @since 1.0.0
 * @category mapping
 */
const Fiber_map = fiber_map;
/**
 * Effectually maps over the value the fiber computes.
 *
 * @since 1.0.0
 * @category mapping
 */
const Fiber_mapEffect = mapEffect;
/**
 * Passes the success of this fiber to the specified callback, and continues
 * with the fiber that it returns.
 *
 * @since 1.0.0
 * @category mapping
 */
const Fiber_mapFiber = mapFiber;
/**
 * Folds over the `Fiber` or `RuntimeFiber`.
 *
 * @since 1.0.0
 * @category folding
 */
const Fiber_match = fiber_match;
/**
 * A fiber that never fails or succeeds.
 *
 * @since 1.0.0
 * @category constructors
 */
const Fiber_never = fiber_never;
/**
 * Returns a fiber that prefers `this` fiber, but falls back to the `that` one
 * when `this` one fails. Interrupting the returned fiber will interrupt both
 * fibers, sequentially, from left to right.
 *
 * @since 1.0.0
 * @category alternatives
 */
const Fiber_orElse = fiber_orElse;
/**
 * Returns a fiber that prefers `this` fiber, but falls back to the `that` one
 * when `this` one fails. Interrupting the returned fiber will interrupt both
 * fibers, sequentially, from left to right.
 *
 * @since 1.0.0
 * @category alternatives
 */
const Fiber_orElseEither = fiber_orElseEither;
/**
 * Tentatively observes the fiber, but returns immediately if it is not
 * already done.
 *
 * @since 1.0.0
 * @category getters
 */
const Fiber_poll = poll;
/**
 * Pretty-prints a `RuntimeFiber`.
 *
 * @since 1.0.0
 * @category destructors
 */
const Fiber_pretty = fiber_pretty;
/**
 * Returns a chunk containing all root fibers.
 *
 * @since 1.0.0
 * @category constructors
 */
const Fiber_roots = roots;
/**
 * Returns a chunk containing all root fibers.
 *
 * @since 1.0.0
 * @category constructors
 */
const Fiber_unsafeRoots = unsafeRoots;
/**
 * Converts this fiber into a scoped effect. The fiber is interrupted when the
 * scope is closed.
 *
 * @since 1.0.0
 * @category destructors
 */
const Fiber_scoped = fiberScoped;
/**
 * Returns the `FiberStatus` of a `RuntimeFiber`.
 *
 * @since 1.0.0
 * @category getters
 */
const Fiber_status = fiber_status;
/**
 * Returns a fiber that has already succeeded with the specified value.
 *
 * @since 1.0.0
 * @category constructors
 */
const Fiber_succeed = fiber_succeed;
/**
 * A fiber that has already succeeded with unit.
 *
 * @since 1.0.0
 * @category constructors
 */
const Fiber_unit = fiber_unit;
/**
 * Zips this fiber and the specified fiber together, producing a tuple of
 * their output.
 *
 * @since 1.0.0
 * @category zipping
 */
const Fiber_zip = zipFiber;
/**
 * Same as `zip` but discards the output of that `Fiber`.
 *
 * @since 1.0.0
 * @category zipping
 */
const Fiber_zipLeft = zipLeftFiber;
/**
 * Same as `zip` but discards the output of this `Fiber`.
 *
 * @since 1.0.0
 * @category zipping
 */
const Fiber_zipRight = zipRightFiber;
/**
 * Zips this fiber with the specified fiber, combining their results using the
 * specified combiner function. Both joins and interruptions are performed in
 * sequential order from left to right.
 *
 * @since 1.0.0
 * @category zipping
 */
const Fiber_zipWith = zipWithFiber;
//# sourceMappingURL=Fiber.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/internal/runtime.mjs
















/** @internal */
const runtime_unsafeFork = runtime => (self, options) => {
  const fiberId = Id_unsafeMake();
  const effect = self;
  let fiberRefs = FiberRefs_updatedAs(runtime.fiberRefs, {
    fiberId,
    fiberRef: currentContext,
    value: runtime.context
  });
  if (options?.scheduler) {
    fiberRefs = FiberRefs_updatedAs(fiberRefs, {
      fiberId,
      fiberRef: currentScheduler,
      value: options.scheduler
    });
  }
  if (options?.updateRefs) {
    fiberRefs = options.updateRefs(fiberRefs, fiberId);
  }
  const fiberRuntime = new FiberRuntime(fiberId, FiberRefs_forkAs(fiberRefs, fiberId), runtime.runtimeFlags);
  const supervisor = fiberRuntime._supervisor;
  if (supervisor !== supervisor_none) {
    supervisor.onStart(runtime.context, effect, Option_none(), fiberRuntime);
    fiberRuntime.unsafeAddObserver(exit => supervisor.onEnd(exit, fiberRuntime));
  }
  globalScope.add(runtime.runtimeFlags, fiberRuntime);
  fiberRuntime.start(effect);
  return fiberRuntime;
};
/** @internal */
const unsafeRunCallback = runtime => (effect, onExit) => {
  const fiberRuntime = runtime_unsafeFork(runtime)(effect);
  if (onExit) {
    fiberRuntime.unsafeAddObserver(exit => {
      onExit(exit);
    });
  }
  return (id, onExitInterrupt) => unsafeRunCallback(runtime)(interruptAs(id ?? Id_none)(fiberRuntime), onExitInterrupt ? exit => onExitInterrupt(Exit_flatten(exit)) : void 0);
};
/** @internal */
const unsafeRunSync = runtime => effect => {
  const result = unsafeRunSyncExit(runtime)(effect);
  if (result._tag === "Failure") {
    throw fiberFailure(result.i0);
  } else {
    return result.i0;
  }
};
/** @internal */
const asyncFiberException = fiber => {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 0;
  const error = new Error();
  Error.stackTraceLimit = limit;
  const message = `Fiber #${fiber.id().id} cannot be be resolved synchronously, this is caused by using runSync on an effect that performs async work`;
  const _tag = "AsyncFiberException";
  Object.defineProperties(error, {
    _tag: {
      value: _tag
    },
    message: {
      value: message
    },
    name: {
      value: _tag
    },
    toString: {
      get() {
        return () => message;
      }
    },
    [NodePrint]: {
      get() {
        return () => message;
      }
    }
  });
  return error;
};
/** @internal */
const isAsyncFiberException = u => typeof u === "object" && u !== null && "_tag" in u && u._tag === "AsyncFiberException" && "fiber" in u;
/** @internal */
const FiberFailureId = /*#__PURE__*/Symbol.for("@effect/io/Runtime/FiberFailure");
/** @internal */
const FiberFailureCauseId = /*#__PURE__*/Symbol.for("@effect/io/Runtime/FiberFailure/Cause");
/** @internal */
const NodePrint = /*#__PURE__*/Symbol.for("nodejs.util.inspect.custom");
/** @internal */
const fiberFailure = cause => {
  const limit = Error.stackTraceLimit;
  Error.stackTraceLimit = 0;
  const error = new Error();
  Error.stackTraceLimit = limit;
  const pretty = prettyErrors(cause);
  if (pretty.length > 0) {
    error.name = pretty[0].message.split(":")[0];
    error.message = pretty[0].message.substring(error.name.length + 2);
    error.stack = `${error.name}: ${error.message}\n${pretty[0].stack}`;
  }
  error[FiberFailureId] = FiberFailureId;
  error[FiberFailureCauseId] = cause;
  error.toString = () => {
    return cause_pretty(cause);
  };
  error[NodePrint] = () => {
    return error.toString();
  };
  return error;
};
/** @internal */
const isFiberFailure = u => typeof u === "object" && u !== null && FiberFailureId in u;
const fastPath = effect => {
  const op = effect;
  switch (op._tag) {
    case "Failure":
    case "Success":
      {
        // @ts-expect-error
        return op;
      }
    case "Left":
      {
        return exitFail(op.left);
      }
    case "Right":
      {
        return exitSucceed(op.right);
      }
    case "Some":
      {
        return exitSucceed(op.value);
      }
    case "None":
      {
        // @ts-expect-error
        return exitFail(NoSuchElementException());
      }
  }
};
/** @internal */
const unsafeRunSyncExit = runtime => effect => {
  const op = fastPath(effect);
  if (op) {
    return op;
  }
  const scheduler = new SyncScheduler();
  const fiberRuntime = runtime_unsafeFork(runtime)(effect, {
    scheduler
  });
  scheduler.flush();
  const result = fiberRuntime.unsafePoll();
  if (result) {
    return result;
  }
  throw asyncFiberException(fiberRuntime);
};
/** @internal */
const unsafeRunPromise = runtime => effect => unsafeRunPromiseExit(runtime)(effect).then(result => {
  switch (result._tag) {
    case OP_SUCCESS:
      {
        return result.i0;
      }
    case OP_FAILURE:
      {
        throw fiberFailure(result.i0);
      }
  }
});
/** @internal */
const unsafeRunPromiseExit = runtime => effect => new Promise(resolve => {
  const op = fastPath(effect);
  if (op) {
    resolve(op);
  }
  runtime_unsafeFork(runtime)(effect).unsafeAddObserver(exit => {
    resolve(exit);
  });
});
/** @internal */
class RuntimeImpl {
  constructor(context, runtimeFlags, fiberRefs) {
    this.context = context;
    this.runtimeFlags = runtimeFlags;
    this.fiberRefs = fiberRefs;
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/** @internal */
const runtime_make = options => new RuntimeImpl(options.context, options.flags, options.fiberRefs);
/** @internal */
const runtime_runtime = () => withFiberRuntime((state, status) => succeed(new RuntimeImpl(state.getFiberRef(currentContext), status.runtimeFlags, state.unsafeGetFiberRefs())));
/** @internal */
const defaultRuntimeFlags = /*#__PURE__*/runtimeFlags_make(Interruption, CooperativeYielding, RuntimeMetrics);
/** @internal */
const defaultRuntime = /*#__PURE__*/runtime_make({
  context: /*#__PURE__*/mjs_Context_empty(),
  flags: defaultRuntimeFlags,
  fiberRefs: /*#__PURE__*/FiberRefs_unsafeMake( /*#__PURE__*/new Map())
});
/** @internal */
const unsafeRunEffect = /*#__PURE__*/unsafeRunCallback(defaultRuntime);
/** @internal */
const unsafeForkEffect = /*#__PURE__*/runtime_unsafeFork(defaultRuntime);
/** @internal */
const unsafeRunPromiseEffect = /*#__PURE__*/unsafeRunPromise(defaultRuntime);
/** @internal */
const unsafeRunPromiseExitEffect = /*#__PURE__*/unsafeRunPromiseExit(defaultRuntime);
/** @internal */
const unsafeRunSyncEffect = /*#__PURE__*/unsafeRunSync(defaultRuntime);
/** @internal */
const unsafeRunSyncExitEffect = /*#__PURE__*/unsafeRunSyncExit(defaultRuntime);
// circular with Effect
/** @internal */
const asyncEffect = register => core_flatMap(deferredMake(), deferred => core_flatMap(runtime_runtime(), runtime => uninterruptibleMask(restore => core_zipRight(fork(restore(catchAllCause(register(cb => unsafeRunCallback(runtime)(intoDeferred(cb, deferred))), cause => deferredFailCause(deferred, cause)))), restore(deferredAwait(deferred))))));
//# sourceMappingURL=runtime.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+io@0.38.2_@effect+data@0.17.6/node_modules/@effect/io/mjs/Effect.mjs















/**
 * @since 1.0.0
 * @category symbols
 */
const Effect_EffectTypeId = core_EffectTypeId;
// -------------------------------------------------------------------------------------
// refinements
// -------------------------------------------------------------------------------------
/**
 * This function returns `true` if the specified value is an `Effect` value,
 * `false` otherwise.
 *
 * This function can be useful for checking the type of a value before
 * attempting to operate on it as an `Effect` value. For example, you could
 * use `isEffect` to check the type of a value before using it as an
 * argument to a function that expects an `Effect` value.
 *
 * @param u - The value to check for being an `Effect` value.
 *
 * @returns `true` if the specified value is an `Effect` value, `false`
 * otherwise.
 *
 * @since 1.0.0
 * @category refinements
 */
const Effect_isEffect = isEffect;
// -------------------------------------------------------------------------------------
// caching
// -------------------------------------------------------------------------------------
/**
 * Returns an effect that, if evaluated, will return the cached result of this
 * effect. Cached results will expire after `timeToLive` duration.
 *
 * @since 1.0.0
 * @category caching
 */
const cachedWithTTL = cached;
/**
 * Returns an effect that, if evaluated, will return the cached result of this
 * effect. Cached results will expire after `timeToLive` duration. In
 * addition, returns an effect that can be used to invalidate the current
 * cached value before the `timeToLive` duration expires.
 *
 * @since 1.0.0
 * @category caching
 */
const cachedInvalidateWithTTL = cachedInvalidate;
/**
 * Returns an effect that, if evaluated, will return the lazily computed
 * result of this effect.
 *
 * @since 1.0.0
 * @category caching
 */
const Effect_cached = memoize;
/**
 * Returns a memoized version of the specified effectual function.
 *
 * @since 1.0.0
 * @category caching
 */
const cachedFunction = memoizeFunction;
/**
 * Returns an effect that will be executed at most once, even if it is
 * evaluated multiple times.
 *
 * @since 1.0.0
 * @category caching
 */
const Effect_once = once;
// -------------------------------------------------------------------------------------
// collecting & elements
// -------------------------------------------------------------------------------------
/**
 * Runs all the provided effects in sequence respecting the structure provided in input.
 *
 * Supports multiple arguments, a single argument tuple / array or record / struct.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_all = fiberRuntime_all;
/**
 * Data-last variant of `Effect.all`.
 *
 * Runs all the provided effects in sequence respecting the structure provided in input.
 *
 * Supports multiple arguments, a single argument tuple / array or record / struct.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_allWith = allWith;
/**
 * Evaluate and run each effect in the structure and collect the results,
 * discarding results from failed effects.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_allSuccesses = allSuccesses;
/**
 * Drops all elements until the effectful predicate returns true.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_dropUntil = dropUntil;
/**
 * Drops all elements so long as the predicate returns true.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_dropWhile = effect_dropWhile;
/**
 * Determines whether all elements of the `Collection<A>` satisfies the effectual
 * predicate `f`.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_every = effect_every;
/**
 * Determines whether any element of the `Iterable<A>` satisfies the effectual
 * predicate `f`.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_exists = fiberRuntime_exists;
/**
 * Filters the collection using the specified effectful predicate.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_filter = fiberRuntime_filter;
/**
 * Returns the first element that satisfies the effectful predicate.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_findFirst = effect_findFirst;
/**
 * This function takes an iterable of `Effect` values and returns a new
 * `Effect` value that represents the first `Effect` value in the iterable
 * that succeeds. If all of the `Effect` values in the iterable fail, then
 * the resulting `Effect` value will fail as well.
 *
 * This function is sequential, meaning that the `Effect` values in the
 * iterable will be executed in sequence, and the first one that succeeds
 * will determine the outcome of the resulting `Effect` value.
 *
 * @param effects - The iterable of `Effect` values to evaluate.
 *
 * @returns A new `Effect` value that represents the first successful
 * `Effect` value in the iterable, or a failed `Effect` value if all of the
 * `Effect` values in the iterable fail.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_firstSuccessOf = firstSuccessOf;
/**
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_forEach = forEachOptions;
/**
 * Returns a successful effect with the head of the collection if the collection
 * is non-empty, or fails with the error `None` if the collection is empty.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_head = effect_head;
/**
 * Merges an `Iterable<Effect<R, E, A>>` to a single effect, working
 * sequentially.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_mergeAll = mergeAll;
/**
 * Feeds elements of type `A` to a function `f` that returns an effect.
 * Collects all successes and failures in a tupled fashion.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_partition = fiberRuntime_partition;
/**
 * Folds an `Iterable<A>` using an effectual function f, working sequentially
 * from left to right.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_reduce = effect_reduce;
/**
 * Reduces an `Iterable<Effect<R, E, A>>` to a single effect.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_reduceEffect = reduceEffect;
/**
 * Folds an `Iterable<A>` using an effectual function f, working sequentially from left to right.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_reduceRight = effect_reduceRight;
/**
 * Folds over the elements in this chunk from the left, stopping the fold early
 * when the predicate is not satisfied.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_reduceWhile = reduceWhile;
/**
 * Replicates the given effect `n` times.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_replicate = fiberRuntime_replicate;
/**
 * Performs this effect the specified number of times and collects the
 * results.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_replicateEffect = replicateEffect;
/**
 * Takes elements until the effectual predicate returns true.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_takeUntil = takeUntil;
/**
 * Takes all elements so long as the effectual predicate returns true.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_takeWhile = effect_takeWhile;
/**
 * Feeds elements of type `A` to `f` and accumulates all errors in error
 * channel or successes in success channel.
 *
 * This combinator is lossy meaning that if there are errors all successes
 * will be lost. To retain all information please use `partition`.
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_validateAll = validateAll;
/**
 * Feeds elements of type `A` to `f` until it succeeds. Returns first success
 * or the accumulation of all errors.
 *
 * If `elements` is empty then `Effect.fail([])` is returned.
 *
 * @example
 * import * as Effect from "@effect/io/Effect"
 * import * as Exit from "@effect/io/Exit"
 *
 * const f = (n: number) => (n > 0 ? Effect.succeed(n) : Effect.fail(`${n} is negative`))
 *
 * assert.deepStrictEqual(Exit.unannotate(Effect.runSyncExit(Effect.validateFirst([], f))), Exit.fail([]))
 * assert.deepStrictEqual(Exit.unannotate(Effect.runSyncExit(Effect.validateFirst([1, 2], f))), Exit.succeed(1))
 * assert.deepStrictEqual(Exit.unannotate(Effect.runSyncExit(Effect.validateFirst([1, -1], f))), Exit.succeed(1))
 * assert.deepStrictEqual(Exit.unannotate(Effect.runSyncExit(Effect.validateFirst([-1, 2], f))), Exit.succeed(2))
 * assert.deepStrictEqual(Exit.unannotate(Effect.runSyncExit(Effect.validateFirst([-1, -2], f))), Exit.fail(['-1 is negative', '-2 is negative']))
 *
 * @since 1.0.0
 * @category collecting & elements
 */
const Effect_validateFirst = validateFirst;
// -------------------------------------------------------------------------------------
// constructors
// -------------------------------------------------------------------------------------
/**
 * Imports an asynchronous side-effect into a pure `Effect` value.
 * The callback function `Effect<R, E, A> => void` must be called at most once.
 *
 * If an Effect is returned by the registration function, it will be executed
 * if the fiber executing the effect is interrupted.
 *
 * The registration function can also receive an `AbortSignal` if required for
 * interruption.
 *
 * The `FiberId` of the fiber that may complete the async callback may be
 * provided to allow for better diagnostics.
 *
 * @since 1.0.0
 * @category constructors
 */
const Effect_async = core_async;
/**
 * Converts an asynchronous, callback-style API into an `Effect`, which will
 * be executed asynchronously.
 *
 * With this variant, the registration function may return a an `Effect`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Effect_asyncEffect = asyncEffect;
/**
 * Imports an asynchronous effect into a pure `Effect` value, possibly returning
 * the value synchronously.
 *
 * If the register function returns a value synchronously, then the callback
 * function `Effect<R, E, A> => void` must not be called. Otherwise the callback
 * function must be called at most once.
 *
 * The `FiberId` of the fiber that may complete the async callback may be
 * provided to allow for better diagnostics.
 *
 * @since 1.0.0
 * @category constructors
 */
const Effect_asyncOption = asyncOption;
/**
 * Imports an asynchronous side-effect into an effect. It has the option of
 * returning the value synchronously, which is useful in cases where it cannot
 * be determined if the effect is synchronous or asynchronous until the register
 * is actually executed. It also has the option of returning a canceler,
 * which will be used by the runtime to cancel the asynchronous effect if the fiber
 * executing the effect is interrupted.
 *
 * If the register function returns a value synchronously, then the callback
 * function `Effect<R, E, A> => void` must not be called. Otherwise the callback
 * function must be called at most once.
 *
 * The `FiberId` of the fiber that may complete the async callback may be
 * provided to allow for better diagnostics.
 *
 * @since 1.0.0
 * @category constructors
 */
const Effect_asyncEither = asyncEither;
/**
 * @since 1.0.0
 * @category constructors
 */
const Effect_fail = core_fail;
/**
 * @since 1.0.0
 * @category constructors
 */
const Effect_failSync = failSync;
/**
 * @since 1.0.0
 * @category constructors
 */
const Effect_failCause = failCause;
/**
 * @since 1.0.0
 * @category constructors
 */
const Effect_failCauseSync = failCauseSync;
/**
 * @since 1.0.0
 * @category constructors
 */
const Effect_die = core_die;
/**
 * Returns an effect that dies with a `RuntimeException` having the specified
 * text message. This method can be used for terminating a fiber because a
 * defect has been detected in the code.
 *
 * @since 1.0.0
 * @category constructors
 */
const Effect_dieMessage = dieMessage;
/**
 * @since 1.0.0
 * @category constructors
 */
const Effect_dieSync = dieSync;
/**
 * @since 1.0.0
 * @category constructors
 */
const Effect_gen = effect_gen;
/**
 * Returns a effect that will never produce anything. The moral equivalent of
 * `while(true) {}`, only without the wasted CPU cycles.
 *
 * @since 1.0.0
 * @category constructors
 */
const Effect_never = never;
/**
 * Requires the option produced by this value to be `None`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Effect_none = effect_none;
/**
 * Like `tryPromise` but produces a defect in case of errors.
 *
 * An optional `AbortSignal` can be provided to allow for interruption of the
 * wrapped Promise api.
 *
 * @since 1.0.0
 * @category constructors
 */
const Effect_promise = promise;
/**
 * @since 1.0.0
 * @category constructors
 */
const Effect_succeed = succeed;
/**
 * Returns an effect which succeeds with `None`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Effect_succeedNone = succeedNone;
/**
 * Returns an effect which succeeds with the value wrapped in a `Some`.
 *
 * @since 1.0.0
 * @category constructors
 */
const Effect_succeedSome = succeedSome;
/**
 * @since 1.0.0
 * @category constructors
 */
const Effect_suspend = suspend;
/**
 * @since 1.0.0
 * @category constructors
 */
const Effect_sync = sync;
/**
 * @since 1.0.0
 * @category constructors
 */
const Effect_unit = core_unit;
/**
 * @since 1.0.0
 * @category constructors
 */
const Effect_yieldNow = yieldNow;
// -------------------------------------------------------------------------------------
// error handling
// -------------------------------------------------------------------------------------
const Effect_catch = _catch;

/**
 * Recovers from all recoverable errors.
 *
 * **Note**: that `Effect.catchAll` will not recover from unrecoverable defects. To
 * recover from both recoverable and unrecoverable errors use
 * `Effect.catchAllCause`.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_catchAll = catchAll;
/**
 * Recovers from both recoverable and unrecoverable errors.
 *
 * See `absorb`, `sandbox`, `mapErrorCause` for other functions that can
 * recover from defects.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_catchAllCause = catchAllCause;
/**
 * Recovers from all defects with provided function.
 *
 * **WARNING**: There is no sensible way to recover from defects. This
 * method should be used only at the boundary between Effect and an external
 * system, to transmit information on a defect for diagnostic or explanatory
 * purposes.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_catchAllDefect = catchAllDefect;
/**
 * Recovers from some or all of the error cases.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_catchSome = catchSome;
/**
 * Recovers from some or all of the error cases with provided cause.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_catchSomeCause = catchSomeCause;
/**
 * Recovers from some or all of the defects with provided partial function.
 *
 * **WARNING**: There is no sensible way to recover from defects. This
 * method should be used only at the boundary between Effect and an external
 * system, to transmit information on a defect for diagnostic or explanatory
 * purposes.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_catchSomeDefect = catchSomeDefect;
/**
 * Recovers from the specified tagged error.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_catchTag = catchTag;
/**
 * Recovers from the specified tagged errors.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_catchTags = catchTags;
/**
 * Returns an effect that succeeds with the cause of failure of this effect,
 * or `Cause.empty` if the effect did succeed.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_cause = cause;
/**
 * Returns an effect that ignores errors and runs repeatedly until it
 * eventually succeeds.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_eventually = eventually;
/**
 * Returns a new effect that ignores the success or failure of this effect.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_ignore = ignore;
/**
 * Returns a new effect that ignores the success or failure of this effect,
 * but which also logs failures at the Debug level, just in case the failure
 * turns out to be important.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_ignoreLogged = ignoreLogged;
/**
 * Exposes all parallel errors in a single call.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_parallelErrors = parallelErrors;
/**
 * Exposes the full `Cause` of failure for the specified effect.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_sandbox = sandbox;
/**
 * Retries with the specified retry policy. Retries are done following the
 * failure of the original `io` (up to a fixed maximum with `once` or `recurs`
 * for example), so that that `io.retry(Schedule.once)` means "execute `io`
 * and in case of failure, try again once".
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_retry = retry_Effect;
/**
 * Retries this effect the specified number of times.
 *
 * @since 1.0.0
 * @category error handling
 */
const retryN = retryN_Effect;
/**
 * Retries with the specified schedule, until it fails, and then both the
 * value produced by the schedule together with the last error are passed to
 * the recovery function.
 *
 * @since 1.0.0
 * @category error handling
 */
const retryOrElse = retryOrElse_Effect;
/**
 * Retries this effect until its error satisfies the specified predicate.
 *
 * @since 1.0.0
 * @category error handling
 */
const retryUntil = retryUntil_Effect;
/**
 * Retries this effect until its error satisfies the specified effectful
 * predicate.
 *
 * @since 1.0.0
 * @category error handling
 */
const retryUntilEffect = retryUntilEffect_Effect;
/**
 * Retries this effect while its error satisfies the specified predicate.
 *
 * @since 1.0.0
 * @category error handling
 */
const retryWhile = retryWhile_Effect;
/**
 * Retries this effect while its error satisfies the specified effectful
 * predicate.
 *
 * @since 1.0.0
 * @category error handling
 */
const retryWhileEffect = retryWhileEffect_Effect;
const Effect_try_ = effect_try_;

/**
 * Returns an effect whose success is mapped by the specified side effecting
 * `try` function, translating any promise rejections into typed failed effects
 * via the `catch` function.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_tryMap = tryMap;
/**
 * Returns an effect whose success is mapped by the specified side effecting
 * `try` function, translating any promise rejections into typed failed effects
 * via the `catch` function.
 *
 * An optional `AbortSignal` can be provided to allow for interruption of the
 * wrapped Promise api.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_tryMapPromise = tryMapPromise;
/**
 * Create an `Effect` that when executed will construct `promise` and wait for
 * its result, errors will produce failure as `unknown`.
 *
 * An optional `AbortSignal` can be provided to allow for interruption of the
 * wrapped Promise api.
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_tryPromise = tryPromise;
/**
 * The inverse operation `sandbox(effect)`
 *
 * Terminates with exceptions on the `Left` side of the `Either` error, if it
 * exists. Otherwise extracts the contained `Effect<R, E, A>`
 *
 * @since 1.0.0
 * @category error handling
 */
const Effect_unsandbox = unsandbox;
// -------------------------------------------------------------------------------------
// interuption
// -------------------------------------------------------------------------------------
/**
 * This function checks if any fibers are attempting to interrupt the current
 * fiber, and if so, performs self-interruption.
 *
 * Note that this allows for interruption to occur in uninterruptible regions.
 *
 * @returns A new `Effect` value that represents the check for interruption
 * and the potential self-interruption of the current fiber.
 *
 * @since 1.0.0
 * @category interruption
 */
const Effect_allowInterrupt = allowInterrupt;
/**
 * Checks the interrupt status, and produces the effect returned by the
 * specified callback.
 *
 * @since 1.0.0
 * @category interruption
 */
const Effect_checkInterruptible = checkInterruptible;
/**
 * Returns an effect whose interruption will be disconnected from the
 * fiber's own interruption, being performed in the background without
 * slowing down the fiber's interruption.
 *
 * This method is useful to create "fast interrupting" effects. For
 * example, if you call this on a bracketed effect, then even if the
 * effect is "stuck" in acquire or release, its interruption will return
 * immediately, while the acquire / release are performed in the
 * background.
 *
 * See timeout and race for other applications.
 *
 * @since 1.0.0
 * @category interruption
 */
const Effect_disconnect = disconnect;
/**
 * @since 1.0.0
 * @category interruption
 */
const Effect_interrupt = core_interrupt;
/**
 * @since 1.0.0
 * @category interruption
 */
const Effect_interruptWith = interruptWith;
/**
 * @since 1.0.0
 * @category interruption
 */
const Effect_interruptible = core_interruptible;
/**
 * @since 1.0.0
 * @category interruption
 */
const Effect_interruptibleMask = interruptibleMask;
/**
 * @since 1.0.0
 * @category interruption
 */
const Effect_onInterrupt = onInterrupt;
/**
 * @since 1.0.0
 * @category interruption
 */
const Effect_uninterruptible = uninterruptible;
/**
 * @since 1.0.0
 * @category interruption
 */
const Effect_uninterruptibleMask = uninterruptibleMask;
// -------------------------------------------------------------------------------------
// mapping
// -------------------------------------------------------------------------------------
/**
 * This function maps the success value of an `Effect` value to a specified
 * constant value.
 *
 * @param value - The constant value that the success value of the `Effect`
 * value will be mapped to.
 * @param self - The `Effect` value whose success value will be mapped to the
 * specified constant value.
 *
 * @returns A new `Effect` value that represents the mapping of the success
 * value of the original `Effect` value to the specified constant value.
 *
 * @since 1.0.0
 * @category mapping
 */
const Effect_as = core_as;
/**
 * This function maps the success value of an `Effect` value to a `Some` value
 * in an `Option` value. If the original `Effect` value fails, the returned
 * `Effect` value will also fail.
 *
 * @param self - The `Effect` value whose success value will be mapped to a
 * `Some` value in an `Option` value.
 *
 * @returns A new `Effect` value that represents the mapping of the success
 * value of the original `Effect` value to a `Some` value in an `Option`
 * value. The returned `Effect` value may fail if the original `Effect` value
 * fails.
 *
 * @category mapping
 * @since 1.0.0
 */
const Effect_asSome = asSome;
/**
 * This function maps the error value of an `Effect` value to a `Some` value
 * in an `Option` value. If the original `Effect` value succeeds, the returned
 * `Effect` value will also succeed.
 *
 * @param self - The `Effect` value whose error value will be mapped to a
 * `Some` value in an `Option` value.
 *
 * @returns A new `Effect` value that represents the mapping of the error
 * value of the original `Effect` value to a `Some` value in an `Option`
 * value. The returned `Effect` value may succeed if the original `Effect`
 * value succeeds.
 *
 * @category mapping
 * @since 1.0.0
 */
const Effect_asSomeError = asSomeError;
/**
 * This function maps the success value of an `Effect` value to `void`. If the
 * original `Effect` value succeeds, the returned `Effect` value will also
 * succeed. If the original `Effect` value fails, the returned `Effect` value
 * will fail with the same error.
 *
 * @param self - The `Effect` value whose success value will be mapped to `void`.
 *
 * @returns A new `Effect` value that represents the mapping of the success
 * value of the original `Effect` value to `void`.
 *
 * @since 1.0.0
 * @category mapping
 */
const Effect_asUnit = core_asUnit;
/**
 * Returns an effect that swaps the error/success cases. This allows you to
 * use all methods on the error channel, possibly before flipping back.
 *
 * @since 1.0.0
 * @category mapping
 */
const Effect_flip = core_flip;
/**
 * Swaps the error/value parameters, applies the function `f` and flips the
 * parameters back
 *
 * @since 1.0.0
 * @category mapping
 */
const Effect_flipWith = flipWith;
/**
 * @since 1.0.0
 * @category mapping
 */
const Effect_map = core_map;
/**
 * Statefully and effectfully maps over the elements of this chunk to produce
 * new elements.
 *
 * @since 1.0.0
 * @category mapping
 */
const Effect_mapAccum = effect_mapAccum;
/**
 * Returns an effect whose failure and success channels have been mapped by
 * the specified `onFailure` and `onSuccess` functions.
 *
 * @since 1.0.0
 * @category mapping
 */
const Effect_mapBoth = core_mapBoth;
/**
 * Returns an effect with its error channel mapped using the specified function.
 *
 * @since 1.0.0
 * @category mapping
 */
const Effect_mapError = mapError;
/**
 * Returns an effect with its full cause of failure mapped using the specified
 * function. This can be used to transform errors while preserving the
 * original structure of `Cause`.
 *
 * See `absorb`, `sandbox`, `catchAllCause` for other functions for dealing
 * with defects.
 *
 * @since 1.0.0
 * @category mapping
 */
const Effect_mapErrorCause = mapErrorCause;
/**
 * Returns a new effect where the error channel has been merged into the
 * success channel to their common combined type.
 *
 * @since 1.0.0
 * @category mapping
 */
const Effect_merge = effect_merge;
/**
 * Returns a new effect where boolean value of this effect is negated.
 *
 * @since 1.0.0
 * @category mapping
 */
const Effect_negate = negate;
// -------------------------------------------------------------------------------------
// scoping, resources & finalization
// -------------------------------------------------------------------------------------
/**
 * This function constructs a scoped resource from an `acquire` and `release`
 * `Effect` value.
 *
 * If the `acquire` `Effect` value successfully completes execution, then the
 * `release` `Effect` value will be added to the finalizers associated with the
 * scope of this `Effect` value, and it is guaranteed to be run when the scope
 * is closed.
 *
 * The `acquire` and `release` `Effect` values will be run uninterruptibly.
 * Additionally, the `release` `Effect` value may depend on the `Exit` value
 * specified when the scope is closed.
 *
 * @param acquire - The `Effect` value that acquires the resource.
 * @param release - The `Effect` value that releases the resource.
 * @param interruptible - Whether the `acquire` Effect can be interrupted
 *
 * @returns A new `Effect` value that represents the scoped resource.
 *
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_acquireRelease = acquireRelease;
/**
 * This function constructs a scoped resource from an `acquire` and `release`
 * `Effect` value.
 *
 * If the `acquire` `Effect` value successfully completes execution, then the
 * `release` `Effect` value will be added to the finalizers associated with the
 * scope of this `Effect` value, and it is guaranteed to be run when the scope
 * is closed.
 *
 * The `acquire` `Effect` values will be run interruptibly.
 * The `release` `Effect` values will be run uninterruptibly.
 *
 * Additionally, the `release` `Effect` value may depend on the `Exit` value
 * specified when the scope is closed.
 *
 * @param acquire - The `Effect` value that acquires the resource.
 * @param release - The `Effect` value that releases the resource.
 *
 * @returns A new `Effect` value that represents the scoped resource.
 *
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_acquireReleaseInterruptible = acquireReleaseInterruptible;
/**
 * This function is used to ensure that an `Effect` value that represents the
 * acquisition of a resource (for example, opening a file, launching a thread,
 * etc.) will not be interrupted, and that the resource will always be released
 * when the `Effect` value completes execution.
 *
 * `acquireUseRelease` does the following:
 *
 *   1. Ensures that the `Effect` value that acquires the resource will not be
 *      interrupted. Note that acquisition may still fail due to internal
 *      reasons (such as an uncaught exception).
 *   2. Ensures that the `release` `Effect` value will not be interrupted,
 *      and will be executed as long as the acquisition `Effect` value
 *      successfully acquires the resource.
 *
 * During the time period between the acquisition and release of the resource,
 * the `use` `Effect` value will be executed.
 *
 * If the `release` `Effect` value fails, then the entire `Effect` value will
 * fail, even if the `use` `Effect` value succeeds. If this fail-fast behavior
 * is not desired, errors produced by the `release` `Effect` value can be caught
 * and ignored.
 *
 * @param acquire - The `Effect` value that acquires the resource.
 * @param use - The `Effect` value that is executed between the acquisition
 * and release of the resource.
 * @param release - The `Effect` value that releases the resource.
 *
 * @returns A new `Effect` value that represents the acquisition, use, and
 * release of the resource.
 *
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_acquireUseRelease = acquireUseRelease;
/**
 * This function adds a finalizer to the scope of the calling `Effect` value.
 * The finalizer is guaranteed to be run when the scope is closed, and it may
 * depend on the `Exit` value that the scope is closed with.
 *
 * @param finalizer - The finalizer to add to the scope of the calling
 * `Effect` value. This function must take an `Exit` value as its parameter,
 * and return a new `Effect` value.
 *
 * @returns A new `Effect` value that represents the addition of the finalizer
 * to the scope of the calling `Effect` value.
 *
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_addFinalizer = addFinalizer;
/**
 * Returns an effect that, if this effect _starts_ execution, then the
 * specified `finalizer` is guaranteed to be executed, whether this effect
 * succeeds, fails, or is interrupted.
 *
 * For use cases that need access to the effect's result, see `onExit`.
 *
 * Finalizers offer very powerful guarantees, but they are low-level, and
 * should generally not be used for releasing resources. For higher-level
 * logic built on `ensuring`, see the `acquireRelease` family of methods.
 *
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_ensuring = ensuring;
/**
 * Runs the specified effect if this effect fails, providing the error to the
 * effect if it exists. The provided effect will not be interrupted.
 *
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_onError = onError;
/**
 * Ensures that a cleanup functions runs, whether this effect succeeds, fails,
 * or is interrupted.
 *
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_onExit = onExit;
/**
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_parallelFinalizers = parallelFinalizers;
/**
 * Returns a new scoped workflow that runs finalizers added to the scope of
 * this workflow sequentially in the reverse of the order in which they were
 * added. Note that finalizers are run sequentially by default so this only
 * has meaning if used within a scope where finalizers are being run in
 * parallel.
 *
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_sequentialFinalizers = sequentialFinalizers;
/**
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_scope = scope;
/**
 * Accesses the current scope and uses it to perform the specified effect.
 *
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_scopeWith = scopeWith;
/**
 * Scopes all resources uses in this workflow to the lifetime of the workflow,
 * ensuring that their finalizers are run as soon as this workflow completes
 * execution, whether by success, failure, or interruption.
 *
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_scoped = scopedEffect;
/**
 * Scopes all resources acquired by `resource` to the lifetime of `use`
 * without effecting the scope of any resources acquired by `use`.
 *
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_using = using;
/**
 * Returns a new scoped workflow that returns the result of this workflow as
 * well as a finalizer that can be run to close the scope of this workflow.
 *
 * @since 1.0.0
 * @category scoping, resources & finalization
 */
const Effect_withEarlyRelease = withEarlyRelease;
// -------------------------------------------------------------------------------------
// supervision & fibers
// -------------------------------------------------------------------------------------
/**
 * Returns a new effect that will not succeed with its value before first
 * waiting for the end of all child fibers forked by the effect.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_awaitAllChildren = awaitAllChildren;
/**
 * Returns a new workflow that will not supervise any fibers forked by this
 * workflow.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_daemonChildren = daemonChildren;
/**
 * Constructs an effect with information about the current `Fiber`.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_descriptor = descriptor;
/**
 * Constructs an effect based on information about the current `Fiber`.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_descriptorWith = descriptorWith;
/**
 * Returns a new workflow that executes this one and captures the changes in
 * `FiberRef` values.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_diffFiberRefs = diffFiberRefs;
/**
 * Acts on the children of this fiber (collected into a single fiber),
 * guaranteeing the specified callback will be invoked, whether or not this
 * effect succeeds.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_ensuringChild = ensuringChild;
/**
 * Acts on the children of this fiber, guaranteeing the specified callback
 * will be invoked, whether or not this effect succeeds.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_ensuringChildren = ensuringChildren;
/**
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_fiberId = fiberId;
/**
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_fiberIdWith = fiberIdWith;
/**
 * Returns an effect that forks this effect into its own separate fiber,
 * returning the fiber immediately, without waiting for it to begin executing
 * the effect.
 *
 * You can use the `fork` method whenever you want to execute an effect in a
 * new fiber, concurrently and without "blocking" the fiber executing other
 * effects. Using fibers can be tricky, so instead of using this method
 * directly, consider other higher-level methods, such as `raceWith`,
 * `zipPar`, and so forth.
 *
 * The fiber returned by this method has methods to interrupt the fiber and to
 * wait for it to finish executing the effect. See `Fiber` for more
 * information.
 *
 * Whenever you use this method to launch a new fiber, the new fiber is
 * attached to the parent fiber's scope. This means when the parent fiber
 * terminates, the child fiber will be terminated as well, ensuring that no
 * fibers leak. This behavior is called "auto supervision", and if this
 * behavior is not desired, you may use the `forkDaemon` or `forkIn` methods.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_fork = fork;
/**
 * Forks the effect into a new fiber attached to the global scope. Because the
 * new fiber is attached to the global scope, when the fiber executing the
 * returned effect terminates, the forked fiber will continue running.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_forkDaemon = forkDaemon;
/**
 * Returns an effect that forks all of the specified values, and returns a
 * composite fiber that produces a list of their results, in order.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_forkAll = forkAll;
/**
 * Forks the effect in the specified scope. The fiber will be interrupted
 * when the scope is closed.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_forkIn = forkIn;
/**
 * Forks the fiber in a `Scope`, interrupting it when the scope is closed.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_forkScoped = forkScoped;
/**
 * Like fork but handles an error with the provided handler.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_forkWithErrorHandler = forkWithErrorHandler;
/**
 * Creates an `Effect` value that represents the exit value of the specified
 * fiber.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_fromFiber = fromFiber;
/**
 * Creates an `Effect` value that represents the exit value of the specified
 * fiber.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_fromFiberEffect = fromFiberEffect;
/**
 * Returns an effect with the behavior of this one, but where all child fibers
 * forked in the effect are reported to the specified supervisor.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_supervised = supervised;
/**
 * Transplants specified effects so that when those effects fork other
 * effects, the forked effects will be governed by the scope of the fiber that
 * executes this effect.
 *
 * This can be used to "graft" deep grandchildren onto a higher-level scope,
 * effectively extending their lifespans into the parent scope.
 *
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_transplant = transplant;
/**
 * @since 1.0.0
 * @category supervision & fibers
 */
const Effect_withConcurrency = withConcurrency;
// ---------------------------------------------------------------------------------------
// scheduler
// ---------------------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category scheduler
 */
const setScheduler = scheduler => layer.scopedDiscard(fiberRuntime.fiberRefLocallyScoped(core.currentScheduler, scheduler));
/**
 * Sets the child effect's maximum number of ops before yield
 *
 * @since 1.0.0
 * @category scheduler
 */
const Effect_withMaxFiberOps = withMaxFiberOps;
/**
 * Sets the provided scheduler for usage in the wrapped effect
 *
 * @since 1.0.0
 * @category scheduler
 */
const Effect_withScheduler = withScheduler;
/**
 * Sets the scheduling priority used when yielding
 *
 * @since 1.0.0
 * @category utils
 */
const Effect_withSchedulingPriority = withSchedulingPriority;
// ---------------------------------------------------------------------------------------
// clock
// ---------------------------------------------------------------------------------------
/**
 * Retreives the `Clock` service from the context
 *
 * @since 1.0.0
 * @category clock
 */
const Effect_clock = clock;
/**
 * Retreives the `Clock` service from the context and provides it to the
 * specified effectful function.
 *
 * @since 1.0.0
 * @category clock
 */
const Effect_clockWith = effect_clockWith;
/**
 * @since 1.0.0
 * @category clock
 */
const setClock = clock => layer.scopedDiscard(fiberRuntime.fiberRefLocallyScopedWith(defaultServices.currentServices, Context.add(clockTag, clock)));
/**
 * Sets the implementation of the clock service to the specified value and
 * restores it to its original value when the scope is closed.
 *
 * @since 1.0.0
 * @category constructors
 */
const Effect_withClockScoped = withClockScoped;
/**
 * Executes the specified workflow with the specified implementation of the
 * clock service.
 *
 * @since 1.0.0
 * @category clock
 */
const Effect_withClock = withClock;
// ---------------------------------------------------------------------------------------
// delays & timeouts
// ---------------------------------------------------------------------------------------
/**
 * Returns an effect that is delayed from this effect by the specified
 * `Duration`.
 *
 * @since 1.0.0
 * @category delays & timeouts
 */
const Effect_delay = delay;
/**
 * Returns an effect that suspends for the specified duration. This method is
 * asynchronous, and does not actually block the fiber executing the effect.
 *
 * @since 1.0.0
 * @category delays & timeouts
 */
const Effect_sleep = effect_sleep;
/**
 * Returns a new effect that executes this one and times the execution.
 *
 * @since 1.0.0
 * @category delays & timeouts
 */
const Effect_timed = timed;
/**
 * A more powerful variation of `timed` that allows specifying the clock.
 *
 * @since 1.0.0
 * @category delays & timeouts
 */
const Effect_timedWith = timedWith;
/**
 * Returns an effect that will timeout this effect, returning `None` if the
 * timeout elapses before the effect has produced a value; and returning
 * `Some` of the produced value otherwise.
 *
 * If the timeout elapses without producing a value, the running effect will
 * be safely interrupted.
 *
 * WARNING: The effect returned by this method will not itself return until
 * the underlying effect is actually interrupted. This leads to more
 * predictable resource utilization. If early return is desired, then instead
 * of using `effect.timeout(d)`, use `effect.disconnect.timeout(d)`, which
 * first disconnects the effect's interruption signal before performing the
 * timeout, resulting in earliest possible return, before an underlying effect
 * has been successfully interrupted.
 *
 * @since 1.0.0
 * @category delays & timeouts
 */
const Effect_timeout = timeout;
/**
 * The same as `timeout`, but instead of producing a `None` in the event of
 * timeout, it will produce the specified error.
 *
 * @since 1.0.0
 * @category delays & timeouts
 */
const Effect_timeoutFail = timeoutFail;
/**
 * The same as `timeout`, but instead of producing a `None` in the event of
 * timeout, it will produce the specified failure.
 *
 * @since 1.0.0
 * @category delays & timeouts
 */
const Effect_timeoutFailCause = timeoutFailCause;
/**
 * Returns an effect that will timeout this effect, returning either the
 * default value if the timeout elapses before the effect has produced a
 * value or returning the result of applying the function `onSuccess` to the
 * success value of the effect.
 *
 * If the timeout elapses without producing a value, the running effect will
 * be safely interrupted.
 *
 * @since 1.0.0
 * @category delays & timeouts
 */
const Effect_timeoutTo = timeoutTo;
// -------------------------------------------------------------------------------------
// config
// -------------------------------------------------------------------------------------
/**
 * Uses the default config provider to load the specified config, or fail with
 * an error of type Config.Error.
 *
 * @since 1.0.0
 * @category config
 */
const Effect_config = config;
/**
 * Retrieves the default config provider, and passes it to the specified
 * function, which may return an effect that uses the provider to perform some
 * work or compute some value.
 *
 * @since 1.0.0
 * @category config
 */
const Effect_configProviderWith = configProviderWith;
/**
 * Sets the current `ConfigProvider`.
 *
 * @since 1.0.0
 * @category config
 */
const Effect_setConfigProvider = setConfigProvider;
/**
 * Executes the specified workflow with the specified configuration provider.
 *
 * @since 1.0.0
 * @category config
 */
const Effect_withConfigProvider = withConfigProvider;
/**
 * Sets the configuration provider to the specified value and restores it to its original value
 * when the scope is closed.
 *
 * @since 1.0.0
 * @category config
 */
const Effect_withConfigProviderScoped = withConfigProviderScoped;
// -------------------------------------------------------------------------------------
// context
// -------------------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category context
 */
const Effect_context = context;
/**
 * Accesses the context of the effect.
 *
 * @since 1.0.0
 * @category context
 */
const Effect_contextWith = contextWith;
/**
 * Effectually accesses the context of the effect.
 *
 * @since 1.0.0
 * @category context
 */
const Effect_contextWithEffect = contextWithEffect;
/**
 * Provides some of the context required to run this effect,
 * leaving the remainder `R0`.
 *
 * @since 1.0.0
 * @category context
 */
const Effect_mapInputContext = mapInputContext;
/**
 * Provides the effect with its required context, which eliminates its
 * dependency on `R`.
 *
 * @since 1.0.0
 * @category context
 */
const Effect_provideContext = provideContext;
/**
 * Splits the context into two parts, providing one part using the
 * specified layer and leaving the remainder `R0`.
 *
 * @since 1.0.0
 * @category context
 */
const Effect_provideSomeContext = provideSomeContext;
/**
 * Splits the context into two parts, providing one part using the
 * specified runtime and leaving the remainder `R0`.
 *
 * @since 1.0.0
 * @category context
 */
const provideSomeRuntime = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, runtime) => {
  const patchFlags = RuntimeFlags.diff(_runtime.defaultRuntime.runtimeFlags, runtime.runtimeFlags);
  const inversePatchFlags = RuntimeFlags.diff(runtime.runtimeFlags, _runtime.defaultRuntime.runtimeFlags);
  const patchRefs = FiberRefsPatch.diff(_runtime.defaultRuntime.fiberRefs, runtime.fiberRefs);
  const inversePatchRefs = FiberRefsPatch.diff(runtime.fiberRefs, _runtime.defaultRuntime.fiberRefs);
  return Effect_acquireUseRelease(core.flatMap(Effect_updateRuntimeFlags(patchFlags), () => Effect_patchFiberRefs(patchRefs)), () => Effect_provideSomeContext(self, runtime.context), () => core.flatMap(Effect_updateRuntimeFlags(inversePatchFlags), () => Effect_patchFiberRefs(inversePatchRefs)));
})));
/**
 * Provides a layer to the effect, which translates it to another level.
 *
 * @since 1.0.0
 * @category context
 */
const Effect_provideLayer = provideLayer;
/**
 * Provides the effect with the single service it requires. If the effect
 * requires more than one service use `provideContext` instead.
 *
 * @since 1.0.0
 * @category context
 */
const Effect_provideService = provideService;
/**
 * Provides the effect with the single service it requires. If the effect
 * requires more than one service use `provideContext` instead.
 *
 * @since 1.0.0
 * @category context
 */
const Effect_provideServiceEffect = provideServiceEffect;
/**
 * Splits the context into two parts, providing one part using the
 * specified layer and leaving the remainder `R0`.
 *
 * @since 1.0.0
 * @category context
 */
const Effect_provideSomeLayer = provideSomeLayer;
/**
 * @since 1.0.0
 * @category context
 */
const Effect_serviceFunction = serviceFunction;
/**
 * @since 1.0.0
 * @category context
 */
const Effect_serviceFunctionEffect = serviceFunctionEffect;
/**
 * @since 1.0.0
 * @category context
 */
const Effect_serviceFunctions = serviceFunctions;
/**
 * @since 1.0.0
 * @category context
 */
const Effect_serviceConstants = serviceConstants;
/**
 * @since 1.0.0
 * @category context
 */
const Effect_serviceMembers = serviceMembers;
/**
 * @since 1.0.0
 * @category context
 */
const serviceOption = tag => Effect_contextWith(_ => Context.getOption(_, tag));
/**
 * Updates the service with the required service entry.
 *
 * @since 1.0.0
 * @category context
 */
const Effect_updateService = updateService;
// -------------------------------------------------------------------------------------
// do notation
// -------------------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category do notation
 */
const Effect_Do = effect_Do;
/**
 * Binds an effectful value in a `do` scope
 *
 * @since 1.0.0
 * @category do notation
 */
const Effect_bind = effect_bind;
/**
 * @category do notation
 * @since 1.0.0
 */
const Effect_bindTo = effect_bindTo;
const Effect_let_ = bindValue;

// -------------------------------------------------------------------------------------
// conversions
// -------------------------------------------------------------------------------------
/**
 * Returns an effect whose failure and success have been lifted into an
 * `Either`. The resulting effect cannot fail, because the failure case has
 * been exposed as part of the `Either` success case.
 *
 * This method is useful for recovering from effects that may fail.
 *
 * The error parameter of the returned `Effect` is `never`, since it is
 * guaranteed the effect does not model failure.
 *
 * @since 1.0.0
 * @category conversions
 */
const Effect_either = core_either;
/**
 * @since 1.0.0
 * @category conversions
 */
const exit = core_exit;
/**
 * @since 1.0.0
 * @category conversions
 */
const Effect_intoDeferred = intoDeferred;
/**
 * Executes this effect, skipping the error but returning optionally the
 * success.
 *
 * @since 1.0.0
 * @category conversions
 */
const Effect_option = effect_option;
/**
 * Converts an option on values into an option on errors.
 *
 * @since 1.0.0
 * @category conversions
 */
const Effect_some = effect_some;
/**
 * Converts an option on errors into an option on values.
 *
 * @since 1.0.0
 * @category conversions
 */
const Effect_unsome = unsome;
// -------------------------------------------------------------------------------------
// filtering & conditionals
// -------------------------------------------------------------------------------------
const Effect_if_ = if_;

/**
 * Filter the specified effect with the provided function, dying with specified
 * defect if the predicate fails.
 *
 * @since 1.0.0
 * @category filtering & conditionals
 */
const Effect_filterOrDie = filterOrDie;
/**
 * Filter the specified effect with the provided function, dying with specified
 * message if the predicate fails.
 *
 * @since 1.0.0
 * @category filtering & conditionals
 */
const Effect_filterOrDieMessage = filterOrDieMessage;
/**
 * Filters the specified effect with the provided function returning the value
 * of the effect if it is successful, otherwise returns the value of `orElse`.
 *
 * @since 1.0.0
 * @category filtering & conditionals
 */
const Effect_filterOrElse = filterOrElse;
/**
 * Filter the specified effect with the provided function, failing with specified
 * error if the predicate fails.
 *
 * @since 1.0.0
 * @category filtering & conditionals
 */
const Effect_filterOrFail = filterOrFail;
/**
 * The moral equivalent of `if (!p) exp`.
 *
 * @since 1.0.0
 * @category filtering & conditionals
 */
const Effect_unless = unless;
/**
 * The moral equivalent of `if (!p) exp` when `p` has side-effects.
 *
 * @since 1.0.0
 * @category filtering & conditionals
 */
const Effect_unlessEffect = unlessEffect;
/**
 * The moral equivalent of `if (p) exp`.
 *
 * @since 1.0.0
 * @category filtering & conditionals
 */
const Effect_when = when;
/**
 * @since 1.0.0
 * @category filtering & conditionals
 */
const Effect_whenEffect = whenEffect;
/**
 * Executes this workflow when value of the specified `FiberRef` satisfies the
 * predicate.
 *
 * @since 1.0.0
 * @category filtering & conditionals
 */
const Effect_whenFiberRef = whenFiberRef;
/**
 * Executes this workflow when the value of the `Ref` satisfies the predicate.
 *
 * @since 1.0.0
 * @category filtering & conditionals
 */
const Effect_whenRef = whenRef;
// -------------------------------------------------------------------------------------
// sequencing
// -------------------------------------------------------------------------------------
/**
 * This function is a pipeable operator that maps over an `Effect` value,
 * flattening the result of the mapping function into a new `Effect` value.
 *
 * @param f - The mapping function to apply to the `Effect` value.
 * This function must return another `Effect` value.
 *
 * @returns A new `Effect` value that is the result of flattening the
 * mapped `Effect` value.
 *
 * @since 1.0.0
 * @category sequencing
 */
const Effect_flatMap = core_flatMap;
/**
 * @since 1.0.0
 * @category sequencing
 */
const Effect_flatten = core_flatten;
/**
 * Returns an effect that races this effect with all the specified effects,
 * yielding the value of the first effect to succeed with a value. Losers of
 * the race will be interrupted immediately
 *
 * @since 1.0.0
 * @category sequencing
 */
const Effect_raceAll = raceAll;
/**
 * Returns an effect that races this effect with the specified effect,
 * returning the first successful `A` from the faster side. If one effect
 * succeeds, the other will be interrupted. If neither succeeds, then the
 * effect will fail with some error.
 *
 * @since 1.0.0
 * @category sequencing
 */
const Effect_race = race;
/**
 * Returns an effect that races this effect with the specified effect,
 * yielding the first result to complete, whether by success or failure. If
 * neither effect completes, then the composed effect will not complete.
 *
 * WARNING: The raced effect will safely interrupt the "loser", but will not
 * resume until the loser has been cleanly terminated. If early return is
 * desired, then instead of performing `l raceFirst r`, perform
 * `l.disconnect raceFirst r.disconnect`, which disconnects left and right
 * interrupt signal, allowing a fast return, with interruption performed
 * in the background.
 *
 * @since 1.0.0
 * @category sequencing
 */
const Effect_raceFirst = raceFirst;
/**
 * Returns an effect that races this effect with the specified effect, calling
 * the specified finisher as soon as one result or the other has been computed.
 *
 * @since 1.0.0
 * @category sequencing
 */
const Effect_raceWith = raceWith;
/**
 * Summarizes a effect by computing some value before and after execution, and
 * then combining the values to produce a summary, together with the result of
 * execution.
 *
 * @since 1.0.0
 * @category sequencing
 */
const Effect_summarized = summarized;
/**
 * @since 1.0.0
 * @category sequencing
 */
const Effect_tap = core_tap;
/**
 * Returns an effect that effectfully "peeks" at the failure or success of
 * this effect.
 *
 * @since 1.0.0
 * @category sequencing
 */
const Effect_tapBoth = tapBoth;
/**
 * Returns an effect that effectually "peeks" at the defect of this effect.
 *
 * @since 1.0.0
 * @category sequencing
 */
const Effect_tapDefect = tapDefect;
/**
 * Returns an effect that effectfully "peeks" at the failure of this effect.
 *
 * @since 1.0.0
 * @category sequencing
 */
const Effect_tapError = tapError;
/**
 * Returns an effect that effectfully "peeks" at the specific tagged failure of this effect.
 *
 * @since 1.0.0
 * @category sequencing
 */
const Effect_tapErrorTag = tapErrorTag;
/**
 * Returns an effect that effectually "peeks" at the cause of the failure of
 * this effect.
 *
 * @since 1.0.0
 * @category sequencing
 */
const Effect_tapErrorCause = tapErrorCause;
// -------------------------------------------------------------------------------------
// repetition / recursion
// -------------------------------------------------------------------------------------
/**
 * Repeats this effect forever (until the first error).
 *
 * @since 1.0.0
 * @category repetition / recursion
 */
const Effect_forever = forever;
/**
 * Iterates with the specified effectual function. The moral equivalent of:
 *
 * ```ts
 * let s = initial
 *
 * while (cont(s)) {
 *   s = body(s)
 * }
 *
 * return s
 * ```
 *
 * @since 1.0.0
 * @category repetition / recursion
 */
const Effect_iterate = iterate;
/**
 * Loops with the specified effectual function, collecting the results into a
 * list. The moral equivalent of:
 *
 * ```ts
 * let s  = initial
 * let as = [] as readonly A[]
 *
 * while (cont(s)) {
 *   as = [body(s), ...as]
 *   s  = inc(s)
 * }
 *
 * A.reverse(as)
 * ```
 *
 * @since 1.0.0
 * @category repetition / recursion
 */
const Effect_loop = loop;
/**
 * Returns a new effect that repeats this effect according to the specified
 * schedule or until the first failure. Scheduled recurrences are in addition
 * to the first execution, so that `io.repeat(Schedule.once)` yields an effect
 * that executes `io`, and then if that succeeds, executes `io` an additional
 * time.
 *
 * @since 1.0.0
 * @category repetition / recursion
 */
const Effect_repeat = repeat_Effect;
/**
 * Returns a new effect that repeats this effect the specified number of times
 * or until the first failure. Repeats are in addition to the first execution,
 * so that `io.repeatN(1)` yields an effect that executes `io`, and then if
 * that succeeds, executes `io` an additional time.
 *
 * @since 1.0.0
 * @category repetition / recursion
 */
const Effect_repeatN = repeatN;
/**
 * Returns a new effect that repeats this effect according to the specified
 * schedule or until the first failure, at which point, the failure value and
 * schedule output are passed to the specified handler.
 *
 * Scheduled recurrences are in addition to the first execution, so that
 * `pipe(effect, Effect.repeat(Schedule.once()))` yields an effect that executes
 * `effect`, and then if that succeeds, executes `effect` an additional time.
 *
 * @since 1.0.0
 * @category repetition / recursion
 */
const repeatOrElse = repeatOrElse_Effect;
/**
 * Repeats this effect until its value satisfies the specified predicate or
 * until the first failure.
 *
 * @since 1.0.0
 * @category repetition / recursion
 */
const repeatUntil = repeatUntil_Effect;
/**
 * Repeats this effect until its value satisfies the specified effectful
 * predicate or until the first failure.
 *
 * @since 1.0.0
 * @category repetition / recursion
 */
const repeatUntilEffect = repeatUntilEffect_Effect;
/**
 * Repeats this effect while its value satisfies the specified effectful
 * predicate or until the first failure.
 *
 * @since 1.0.0
 * @category repetition / recursion
 */
const repeatWhile = repeatWhile_Effect;
/**
 * Repeats this effect while its value satisfies the specified effectful
 * predicate or until the first failure.
 *
 * @since 1.0.0
 * @category repetition / recursion
 */
const repeatWhileEffect = repeatWhileEffect_Effect;
/**
 * Runs this effect according to the specified schedule.
 *
 * See `scheduleFrom` for a variant that allows the schedule's decision to
 * depend on the result of this effect.
 *
 * @since 1.0.0
 * @category repetition / recursion
 */
const schedule = schedule_Effect;
/**
 * Runs this effect according to the specified schedule in a new fiber
 * attached to the current scope.
 *
 * @since 1.0.0
 * @category repetition / recursion
 */
const Effect_scheduleForked = scheduleForked;
/**
 * Runs this effect according to the specified schedule starting from the
 * specified input value.
 *
 * @since 1.0.0
 * @category repetition / recursion
 */
const scheduleFrom = scheduleFrom_Effect;
/**
 * @since 1.0.0
 * @category repetition / recursion
 */
const Effect_whileLoop = whileLoop;
// -------------------------------------------------------------------------------------
// fiber refs
// -------------------------------------------------------------------------------------
/**
 * Returns a collection of all `FiberRef` values for the fiber running this
 * effect.
 *
 * @since 1.0.0
 * @category fiber refs
 */
const Effect_getFiberRefs = getFiberRefs;
/**
 * Inherits values from all `FiberRef` instances into current fiber.
 *
 * @since 1.0.0
 * @category fiber refs
 */
const Effect_inheritFiberRefs = inheritFiberRefs;
/**
 * @since 1.0.0
 * @category fiber refs
 */
const Effect_locally = fiberRefLocally;
/**
 * @since 1.0.0
 * @category fiber refs
 */
const locallyWith = fiberRefLocallyWith;
/**
 * @since 1.0.0
 * @category fiber refs
 */
const locallyScoped = fiberRefLocallyScoped;
/**
 * @since 1.0.0
 * @category fiber refs
 */
const locallyScopedWith = fiberRefLocallyScopedWith;
/**
 * Applies the specified changes to the `FiberRef` values for the fiber
 * running this workflow.
 *
 * @since 1.0.0
 * @category fiber refs
 */
const Effect_patchFiberRefs = patchFiberRefs;
/**
 * Sets the `FiberRef` values for the fiber running this effect to the values
 * in the specified collection of `FiberRef` values.
 *
 * @since 1.0.0
 * @category fiber refs
 */
const Effect_setFiberRefs = setFiberRefs;
/**
 * Updates the `FiberRef` values for the fiber running this effect using the
 * specified function.
 *
 * @since 1.0.0
 * @category constructors
 */
const Effect_updateFiberRefs = updateFiberRefs;
// -------------------------------------------------------------------------------------
// getters & folding
// -------------------------------------------------------------------------------------
/**
 * Returns `true` if this effect is a failure, `false` otherwise.
 *
 * @since 1.0.0
 * @category getters & folding
 */
const Effect_isFailure = effect_isFailure;
/**
 * Returns `true` if this effect is a success, `false` otherwise.
 *
 * @since 1.0.0
 * @category getters & folding
 */
const Effect_isSuccess = isSuccess;
/**
 * Folds over the failure value or the success value to yield an effect that
 * does not fail, but succeeds with the value returned by the left or right
 * function passed to `match`.
 *
 * @since 1.0.0
 * @category getters & folding
 */
const Effect_match = effect_match;
/**
 * @since 1.0.0
 * @category getters & folding
 */
const Effect_matchCause = matchCause;
/**
 * @since 1.0.0
 * @category getters & folding
 */
const Effect_matchCauseEffect = matchCauseEffect;
/**
 * @since 1.0.0
 * @category getters & folding
 */
const Effect_matchEffect = matchEffect;
// -------------------------------------------------------------------------------------
// logging
// -------------------------------------------------------------------------------------
/**
 * Logs the specified message or cause at the current log level.
 *
 * You can set the current log level using `FiberRef.currentLogLevel`.
 *
 * @since 1.0.0
 * @category logging
 */
const Effect_log = log;
/**
 * Logs the specified message or cause at the Trace log level.
 *
 * @since 1.0.0
 * @category logging
 */
const Effect_logTrace = logTrace;
/**
 * Logs the specified message or cause at the Debug log level.
 *
 * @since 1.0.0
 * @category logging
 */
const Effect_logDebug = logDebug;
/**
 * Logs the specified message or cause at the Info log level.
 *
 * @since 1.0.0
 * @category logging
 */
const Effect_logInfo = logInfo;
/**
 * Logs the specified message or cause at the Warning log level.
 *
 * @since 1.0.0
 * @category logging
 */
const Effect_logWarning = logWarning;
/**
 * Logs the specified message or cause at the Error log level.
 *
 * @since 1.0.0
 * @category logging
 */
const Effect_logError = logError;
/**
 * Logs the specified message or cause at the Fatal log level.
 *
 * @since 1.0.0
 * @category logging
 */
const Effect_logFatal = logFatal;
/**
 * Adjusts the label for the current logging span.
 *
 * @since 1.0.0
 * @category logging
 */
const Effect_withLogSpan = withLogSpan;
/**
 * Annotates each log in this effect with the specified log annotation.
 *
 * @since 1.0.0
 * @category logging
 */
const Effect_annotateLogs = annotateLogs;
/**
 * Retrieves the log annotations associated with the current scope.
 *
 * @since 1.0.0
 * @category logging
 */
const Effect_logAnnotations = logAnnotations;
/**
 * Decides wether child fibers will report or not unhandled errors via the logger
 *
 * @since 1.0.0
 * @category logging
 */
const Effect_withUnhandledErrorLogLevel = withUnhandledErrorLogLevel;
/**
 * @since 1.0.0
 * @category logging
 */
const setUnhandledErrorLogLevel = level => layer.scopedDiscard(fiberRuntime.fiberRefLocallyScoped(core.currentUnhandledErrorLogLevel, level));
// -------------------------------------------------------------------------------------
// alternatives
// -------------------------------------------------------------------------------------
/**
 * Translates effect failure into death of the fiber, making all failures
 * unchecked and not a part of the type of the effect.
 *
 * @since 1.0.0
 * @category alternatives
 */
const Effect_orDie = orDie;
/**
 * Keeps none of the errors, and terminates the fiber with them, using the
 * specified function to convert the `E` into a `Throwable`.
 *
 * @since 1.0.0
 * @category alternatives
 */
const Effect_orDieWith = orDieWith;
/**
 * Executes this effect and returns its value, if it succeeds, but otherwise
 * executes the specified effect.
 *
 * @since 1.0.0
 * @category alternatives
 */
const Effect_orElse = core_orElse;
/**
 * Executes this effect and returns its value, if it succeeds, but otherwise
 * fails with the specified error.
 *
 * @since 1.0.0
 * @category alternatives
 */
const Effect_orElseFail = orElseFail;
/**
 * Executes this effect and returns its value, if it succeeds, but
 * otherwise succeeds with the specified value.
 *
 * @since 1.0.0
 * @category alternatives
 */
const Effect_orElseSucceed = orElseSucceed;
// -------------------------------------------------------------------------------------
// random
// -------------------------------------------------------------------------------------
/**
 * Retreives the `Random` service from the context.
 *
 * @since 1.0.0
 * @category random
 */
const Effect_random = effect_random;
/**
 * Retreives the `Random` service from the context and uses it to run the
 * specified workflow.
 *
 * @since 1.0.0
 * @category random
 */
const Effect_randomWith = randomWith;
// -------------------------------------------------------------------------------------
// runtime
// -------------------------------------------------------------------------------------
/**
 * Returns an effect that accesses the runtime, which can be used to
 * (unsafely) execute tasks. This is useful for integration with legacy code
 * that must call back into Effect code.
 *
 * @since 1.0.0
 * @category runtime
 */
const Effect_runtime = runtime_runtime;
/**
 * Retrieves an effect that succeeds with the current runtime flags, which
 * govern behavior and features of the runtime system.
 *
 * @since 1.0.0
 * @category runtime
 */
const Effect_runtimeFlags = runtimeFlags;
/**
 * @since 1.0.0
 * @category runtime
 */
const Effect_updateRuntimeFlags = updateRuntimeFlags;
/**
 * @since 1.0.0
 * @category runtime
 */
const Effect_withRuntimeFlags = withRuntimeFlags;
/**
 * @since 1.0.0
 * @category runtime
 */
const Effect_withRuntimeFlagsScoped = withRuntimeFlagsScoped;
// -------------------------------------------------------------------------------------
// metrics
// -------------------------------------------------------------------------------------
/**
 * Tags each metric in this effect with the specific tag.
 *
 * @since 1.0.0
 * @category metrics
 */
const Effect_tagMetrics = tagMetrics;
/**
 * Tags each metric in this effect with the specific tag.
 *
 * @since 1.0.0
 * @category metrics
 */
const Effect_labelMetrics = labelMetrics;
/**
 * Tags each metric in this effect with the specific tag.
 *
 * @since 1.0.0
 * @category metrics
 */
const Effect_labelMetricsSet = labelMetricsSet;
/**
 * Tags each metric in a scope with a the specific tag.
 *
 * @since 1.0.0
 * @category metrics
 */
const Effect_tagMetricsScoped = tagMetricsScoped;
/**
 * Tags each metric in a scope with a the specific tag.
 *
 * @since 1.0.0
 * @category metrics
 */
const Effect_labelMetricsScoped = labelMetricsScoped;
/**
 * Tags each metric in a scope with a the specific tag.
 *
 * @since 1.0.0
 * @category metrics
 */
const Effect_labelMetricsScopedSet = labelMetricsScopedSet;
/**
 * Retrieves the metric labels associated with the current scope.
 *
 * @since 1.0.0
 * @category metrics
 */
const Effect_metricLabels = metricLabels;
/**
 * @since 1.0.0
 * @category metrics
 */
const Effect_withMetric = withMetric;
// -------------------------------------------------------------------------------------
// unify
// -------------------------------------------------------------------------------------
/**
 * Used to unify functions that would otherwise return `Effect<A, B, C> | Effect<D, E, F>`
 *
 * @category unify
 * @since 1.0.0
 */
const unifiedFn = unified;
/**
 * Used to unify effects that would otherwise be `Effect<A, B, C> | Effect<D, E, F>`
 *
 * @category unify
 * @since 1.0.0
 */
const Effect_unified = (/* unused pure expression or super */ null && (identity));
/**
 * Unsafely creates a new Semaphore
 *
 * @since 1.0.0
 * @category semaphore
 */
const Effect_unsafeMakeSemaphore = unsafeMakeSemaphore;
/**
 * Creates a new Semaphore
 *
 * @since 1.0.0
 * @category semaphore
 */
const Effect_makeSemaphore = makeSemaphore;
// -------------------------------------------------------------------------------------
// execution
// -------------------------------------------------------------------------------------
/**
 * @since 1.0.0
 * @category execution
 */
const runFork = unsafeForkEffect;
/**
 * @since 1.0.0
 * @category execution
 */
const runCallback = unsafeRunEffect;
/**
 * Runs an `Effect` workflow, returning a `Promise` which resolves with the
 * result of the workflow or rejects with an error.
 *
 * @since 1.0.0
 * @category execution
 */
const runPromise = unsafeRunPromiseEffect;
/**
 * Runs an `Effect` workflow, returning a `Promise` which resolves with the
 * `Exit` value of the workflow.
 *
 * @since 1.0.0
 * @category execution
 */
const runPromiseExit = unsafeRunPromiseExitEffect;
/**
 * @since 1.0.0
 * @category execution
 */
const runSync = unsafeRunSyncEffect;
/**
 * @since 1.0.0
 * @category execution
 */
const runSyncExit = unsafeRunSyncExitEffect;
// -------------------------------------------------------------------------------------
// zipping
// -------------------------------------------------------------------------------------
/**
 * Sequentially zips the this result with the specified result. Combines both
 * `Cause`s when both effects fail.
 *
 * @since 1.0.0
 * @category zipping
 */
const Effect_validate = fiberRuntime_validate;
/**
 * Sequentially zips this effect with the specified effect using the specified
 * combiner function. Combines the causes in case both effect fail.
 *
 * @since 1.0.0
 * @category zipping
 */
const Effect_validateWith = validateWith;
/**
 * @since 1.0.0
 * @category zipping
 */
const Effect_zip = zipOptions;
/**
 * @since 1.0.0
 * @category zipping
 */
const Effect_zipLeft = zipLeftOptions;
/**
 * @since 1.0.0
 * @category zipping
 */
const Effect_zipRight = zipRightOptions;
/**
 * @since 1.0.0
 * @category zipping
 */
const Effect_zipWith = zipWithOptions;
// -------------------------------------------------------------------------------------
// requests & batching
// -------------------------------------------------------------------------------------
/**
 * @category requests & batching
 * @since 1.0.0
 */
const blocked = core_blocked;
/**
 * @category requests & batching
 * @since 1.0.0
 */
const Effect_runRequestBlock = runRequestBlock;
/**
 * @category requests & batching
 * @since 1.0.0
 */
const Effect_step = step;
/**
 * @category requests & batching
 * @since 1.0.0
 */
const Effect_flatMapStep = flatMapStep;
/**
 * @since 1.0.0
 * @category requests & batching
 */
const request = fromRequest;
/**
 * @since 1.0.0
 * @category requests & batching
 */
const cacheRequestResult = cacheRequest;
/**
 * @since 1.0.0
 * @category requests & batching
 */
const Effect_withRequestBatching = withRequestBatching;
/**
 * @since 1.0.0
 * @category requests & batching
 */
const setRequestBatching = requestBatching => layer.scopedDiscard(fiberRuntime.fiberRefLocallyScoped(core.currentRequestBatching, requestBatching));
/**
 * @since 1.0.0
 * @category requests & batching
 */
const setRequestCaching = requestCaching => layer.scopedDiscard(fiberRuntime.fiberRefLocallyScoped(query.currentCacheEnabled, requestCaching));
/**
 * @since 1.0.0
 * @category requests & batching
 */
const setRequestCache = cache => layer.scopedDiscard(core.isEffect(cache) ? core.flatMap(cache, x => fiberRuntime.fiberRefLocallyScoped(query.currentCache, x)) : fiberRuntime.fiberRefLocallyScoped(query.currentCache, cache));
/**
 * @since 1.0.0
 * @category requests & batching
 */
const Effect_withRequestCaching = withRequestCaching;
/**
 * @since 1.0.0
 * @category requests & batching
 */
const Effect_withRequestCache = withRequestCache;
// -------------------------------------------------------------------------------------
// tracing
// -------------------------------------------------------------------------------------
/**
 * Create a Layer that sets the current Tracer
 *
 * @since 1.0.0
 * @category tracing
 */
const Effect_setTracer = setTracer;
/**
 * @since 1.0.0
 * @category tracing
 */
const Effect_tracer = tracer;
/**
 * @since 1.0.0
 * @category tracing
 */
const Effect_tracerWith = tracerWith;
/**
 * @since 1.0.0
 * @category tracing
 */
const Effect_withTracer = withTracer;
/**
 * @since 1.0.0
 * @category tracing
 */
const Effect_withTracerScoped = withTracerScoped;
/**
 * @since 1.0.0
 * @category tracing
 */
const Effect_withTracerTiming = withTracerTiming;
/**
 * @since 1.0.0
 * @category tracing
 */
const setTracerTiming = enabled => layer.scopedDiscard(fiberRuntime.fiberRefLocallyScoped(core.currentTracerTimingEnabled, enabled));
/**
 * Adds an annotation to each span in this effect.
 *
 * @since 1.0.0
 * @category tracing
 */
const Effect_annotateSpans = annotateSpans;
/**
 * Adds an annotation to the current span if available
 *
 * @since 1.0.0
 * @category tracing
 */
const Effect_annotateCurrentSpan = annotateCurrentSpan;
/**
 * @since 1.0.0
 * @category tracing
 */
const Effect_currentSpan = currentSpan;
/**
 * @since 1.0.0
 * @category tracing
 */
const Effect_currentParentSpan = currentParentSpan;
/**
 * @since 1.0.0
 * @category tracing
 */
const Effect_spanAnnotations = spanAnnotations;
/**
 * @since 1.0.0
 * @category tracing
 */
const Effect_spanLinks = spanLinks;
/**
 * For all spans in this effect, add a link with the provided span.
 *
 * @since 1.0.0
 * @category tracing
 */
const Effect_linkSpans = linkSpans;
/**
 * Create a new span for tracing.
 *
 * @since 1.0.0
 * @category tracing
 */
const Effect_makeSpan = makeSpan;
/**
 * Adds the provided span to the span stack.
 *
 * @since 1.0.0
 * @category tracing
 */
const Effect_setParentSpan = setParentSpan;
/**
 * Create and add a span to the current span stack.
 *
 * The span is ended when the Layer is released.
 *
 * @since 1.0.0
 * @category tracing
 */
const Effect_setSpan = setSpan;
/**
 * Create a new span for tracing, and automatically close it when the effect
 * completes.
 *
 * The span is not added to the current span stack, so no child spans will be
 * created for it.
 *
 * @since 1.0.0
 * @category tracing
 */
const Effect_useSpan = useSpan;
/**
 * Create a new span for tracing, and automatically close it when the Scope
 * finalizes.
 *
 * The span is not added to the current span stack, so no child spans will be
 * created for it.
 *
 * @since 1.0.0
 * @category tracing
 */
const Effect_useSpanScoped = useSpanScoped;
/**
 * Wraps the effect with a new span for tracing.
 *
 * @since 1.0.0
 * @category tracing
 */
const Effect_withSpan = withSpan;
/**
 * Create and add a span to the current span stack.
 *
 * The span is ended when the Scope is finalized.
 *
 * @since 1.0.0
 * @category tracing
 */
const Effect_withSpanScoped = withSpanScoped;
/**
 * Adds the provided span to the current span stack.
 *
 * @since 1.0.0
 * @category tracing
 */
const Effect_withParentSpan = withParentSpan;
/**
 * Adds the provided span to the current span stack.
 *
 * @since 1.0.0
 * @category tracing
 */
const Effect_withParentSpanScoped = withParentSpanScoped;
// -------------------------------------------------------------------------------------
// optionality
// -------------------------------------------------------------------------------------
/**
 * Returns an effect that errors with `NoSuchElementException` if the value is
 * null or undefined, otherwise succeeds with the value.
 *
 * @since 1.0.0
 * @category optionality
 */
const Effect_fromNullable = effect_fromNullable;
/**
 * Wraps the success value of this effect with `Option.some`, and maps
 * `Cause.NoSuchElementException` to `Option.none`.
 *
 * @since 1.0.0
 * @category optionality
 */
const Effect_optionFromOptional = optionFromOptional;
//# sourceMappingURL=Effect.mjs.map
;// CONCATENATED MODULE: ./src/utils.ts


const utils_logInfo = (message) => Effect_sync(() => lib_core.info(message));
const utils_logDebug = (message) => Effect_sync(() => lib_core.debug(`-- ${message}`));

;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+data@0.17.6/node_modules/@effect/data/mjs/Brand.mjs
/**
 * This module provides types and utility functions to create and work with branded types,
 * which are TypeScript types with an added type tag to prevent accidental usage of a value in the wrong context.
 *
 * The `refined` and `nominal` functions are both used to create branded types in TypeScript.
 * The main difference between them is that `refined` allows for validation of the data, while `nominal` does not.
 *
 * The `nominal` function is used to create a new branded type that has the same underlying type as the input, but with a different name.
 * This is useful when you want to distinguish between two values of the same type that have different meanings.
 * The `nominal` function does not perform any validation of the input data.
 *
 * On the other hand, the `refined` function is used to create a new branded type that has the same underlying type as the input,
 * but with a different name, and it also allows for validation of the input data.
 * The `refined` function takes a predicate that is used to validate the input data.
 * If the input data fails the validation, a `BrandErrors` is returned, which provides information about the specific validation failure.
 *
 * @since 1.0.0
 */




/**
 * @since 1.0.0
 * @category symbols
 */
const BrandTypeId = /*#__PURE__*/(/* unused pure expression or super */ null && (Symbol.for("@effect/data/Brand")));
/**
 * @since 1.0.0
 * @category symbols
 */
const RefinedConstructorsTypeId = /*#__PURE__*/Symbol.for("@effect/data/Brand/Refined");
/**
 * Returns a `BrandErrors` that contains a single `RefinementError`.
 *
 * @since 1.0.0
 * @category constructors
 */
const error = (message, meta) => [{
  message,
  meta
}];
/**
 * Takes a variable number of `BrandErrors` and returns a single `BrandErrors` that contains all refinement errors.
 *
 * @since 1.0.0
 * @category constructors
 */
const errors = (...errors) => ReadonlyArray.flatten(errors);
/**
 * Returns a `Brand.Constructor` that can construct a branded type from an unbranded value using the provided `refinement`
 * predicate as validation of the input data.
 *
 * If you don't want to perform any validation but only distinguish between two values of the same type but with different meanings,
 * see {@link nominal}.
 *
 * @param refinement - The refinement predicate to apply to the unbranded value.
 * @param onFailure - Takes the unbranded value that did not pass the `refinement` predicate and returns a `BrandErrors`.
 *
 * @example
 * import * as Brand from "@effect/data/Brand"
 *
 * type Int = number & Brand.Brand<"Int">
 *
 * const Int = Brand.refined<Int>(
 *   (n) => Number.isInteger(n),
 *   (n) => Brand.error(`Expected ${n} to be an integer`)
 * )
 *
 * assert.strictEqual(Int(1), 1)
 * assert.throws(() => Int(1.1))
 *
 * @since 1.0.0
 * @category constructors
 */
const refined = (refinement, onFailure) => {
  const either = args => refinement(args) ? Either.right(args) : Either.left(onFailure(args));
  // @ts-expect-error
  return Object.assign(args => Either.match(either(args), {
    onLeft: e => {
      throw e;
    },
    onRight: identity
  }), {
    [RefinedConstructorsTypeId]: RefinedConstructorsTypeId,
    option: args => Option.getRight(either(args)),
    either,
    refine: args => Either.isRight(either(args))
  });
};
/**
 * This function returns a `Brand.Constructor` that **does not apply any runtime checks**, it just returns the provided value.
 * It can be used to create nominal types that allow distinguishing between two values of the same type but with different meanings.
 *
 * If you also want to perform some validation, see {@link refined}.
 *
 * @example
 * import * as Brand from "@effect/data/Brand"
 *
 * type UserId = number & Brand.Brand<"UserId">
 *
 * const UserId = Brand.nominal<UserId>()
 *
 * assert.strictEqual(UserId(1), 1)
 *
 * @since 1.0.0
 * @category constructors
 */
const nominal = () => {
  // @ts-expect-error
  return Object.assign(args => args, {
    [RefinedConstructorsTypeId]: RefinedConstructorsTypeId,
    option: args => Option.some(args),
    either: args => Either.right(args),
    refine: _args => true
  });
};
/**
 * Combines two or more brands together to form a single branded type.
 * This API is useful when you want to validate that the input data passes multiple brand validators.
 *
 * @example
 * import * as Brand from "@effect/data/Brand"
 *
 * type Int = number & Brand.Brand<"Int">
 * const Int = Brand.refined<Int>(
 *   (n) => Number.isInteger(n),
 *   (n) => Brand.error(`Expected ${n} to be an integer`)
 * )
 * type Positive = number & Brand.Brand<"Positive">
 * const Positive = Brand.refined<Positive>(
 *   (n) => n > 0,
 *   (n) => Brand.error(`Expected ${n} to be positive`)
 * )
 *
 * const PositiveInt = Brand.all(Int, Positive)
 *
 * assert.strictEqual(PositiveInt(1), 1)
 * assert.throws(() => PositiveInt(1.1))
 *
 * @since 1.0.0
 * @category combining
 */
const Brand_all = (...brands) => {
  const either = args => {
    let result = Either.right(args);
    for (const brand of brands) {
      const nextResult = brand.either(args);
      if (Either.isLeft(result) && Either.isLeft(nextResult)) {
        result = Either.left([...result.left, ...nextResult.left]);
      } else {
        result = Either.isLeft(result) ? result : nextResult;
      }
    }
    return result;
  };
  // @ts-expect-error
  return Object.assign(args => Either.match(either(args), {
    onLeft: e => {
      throw e;
    },
    onRight: identity
  }), {
    [RefinedConstructorsTypeId]: RefinedConstructorsTypeId,
    option: args => Option.getRight(either(args)),
    either,
    refine: args => Either.isRight(either(args))
  });
};
//# sourceMappingURL=Brand.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+schema@0.33.2_@effect+data@0.17.6_@effect+io@0.38.2/node_modules/@effect/schema/mjs/internal/common.mjs
/**
 * @since 1.0.0
 */
// ---------------------------------------------
// hooks
// ---------------------------------------------
/** @internal */
const ArbitraryHookId = "@effect/schema/ArbitraryHookId";
/** @internal */
const PrettyHookId = "@effect/schema/PrettyHookId";
// ---------------------------------------------
// Schema APIs
// ---------------------------------------------
/** @internal */
const getKeysForIndexSignature = (input, parameter) => {
  switch (parameter._tag) {
    case "StringKeyword":
    case "TemplateLiteral":
      return Object.keys(input);
    case "SymbolKeyword":
      return Object.getOwnPropertySymbols(input);
    case "Refinement":
      return getKeysForIndexSignature(input, parameter.from);
  }
};
// ---------------------------------------------
// general helpers
// ---------------------------------------------
/** @internal */
const common_ownKeys = o => Object.keys(o).concat(Object.getOwnPropertySymbols(o));
/** @internal */
const memoizeThunk = f => {
  let done = false;
  let a;
  return () => {
    if (done) {
      return a;
    }
    a = f();
    done = true;
    return a;
  };
};
//# sourceMappingURL=common.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+schema@0.33.2_@effect+data@0.17.6_@effect+io@0.38.2/node_modules/@effect/schema/mjs/ParseResult.mjs
/**
 * @since 1.0.0
 */



/**
 * @since 1.0.0
 */
const parseError = errors => ({
  _tag: "ParseError",
  errors
});
/**
 * @category constructors
 * @since 1.0.0
 */
const type = (expected, actual, message) => ({
  _tag: "Type",
  expected,
  actual,
  message: fromNullable(message)
});
/**
 * @category constructors
 * @since 1.0.0
 */
const forbidden = {
  _tag: "Forbidden"
};
/**
 * @category constructors
 * @since 1.0.0
 */
const ParseResult_index = (index, errors) => ({
  _tag: "Index",
  index,
  errors
});
/**
 * @category constructors
 * @since 1.0.0
 */
const ParseResult_key = (key, errors) => ({
  _tag: "Key",
  key,
  errors
});
/**
 * @category constructors
 * @since 1.0.0
 */
const missing = {
  _tag: "Missing"
};
/**
 * @category constructors
 * @since 1.0.0
 */
const unexpected = actual => ({
  _tag: "Unexpected",
  actual
});
/**
 * @category constructors
 * @since 1.0.0
 */
const unionMember = errors => ({
  _tag: "UnionMember",
  errors
});
/**
 * @category constructors
 * @since 1.0.0
 */
const success = Either_right;
/**
 * @category constructors
 * @since 1.0.0
 */
const failure = e => Either_left(parseError([e]));
/**
 * @category constructors
 * @since 1.0.0
 */
const ParseResult_failures = es => Either_left(parseError(es));
/**
 * @category optimisation
 * @since 1.0.0
 */
const eitherOrUndefined = self => {
  const s = self;
  if (s["_tag"] === "Left" || s["_tag"] === "Right") {
    return s;
  }
};
/**
 * @category optimisation
 * @since 1.0.0
 */
const ParseResult_flatMap = (self, f) => {
  const s = self;
  if (s["_tag"] === "Left") {
    return s;
  }
  if (s["_tag"] === "Right") {
    return f(s.right);
  }
  return Effect_flatMap(self, f);
};
/**
 * @category optimisation
 * @since 1.0.0
 */
const ParseResult_map = (self, f) => {
  const s = self;
  if (s["_tag"] === "Left") {
    return s;
  }
  if (s["_tag"] === "Right") {
    return Either_right(f(s.right));
  }
  return Effect_map(self, f);
};
//# sourceMappingURL=ParseResult.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+schema@0.33.2_@effect+data@0.17.6_@effect+io@0.38.2/node_modules/@effect/schema/mjs/AST.mjs
/**
 * @since 1.0.0
 */









/**
 * @category annotations
 * @since 1.0.0
 */
const BrandAnnotationId = "@effect/schema/BrandAnnotationId";
/**
 * @category annotations
 * @since 1.0.0
 */
const TypeAnnotationId = "@effect/schema/TypeAnnotationId";
/**
 * @category annotations
 * @since 1.0.0
 */
const MessageAnnotationId = "@effect/schema/MessageAnnotationId";
/**
 * @category annotations
 * @since 1.0.0
 */
const IdentifierAnnotationId = "@effect/schema/IdentifierAnnotationId";
/**
 * @category annotations
 * @since 1.0.0
 */
const TitleAnnotationId = "@effect/schema/TitleAnnotationId";
/**
 * @category annotations
 * @since 1.0.0
 */
const DescriptionAnnotationId = "@effect/schema/DescriptionAnnotationId";
/**
 * @category annotations
 * @since 1.0.0
 */
const ExamplesAnnotationId = "@effect/schema/ExamplesAnnotationId";
/**
 * @category annotations
 * @since 1.0.0
 */
const JSONSchemaAnnotationId = "@effect/schema/JSONSchemaAnnotationId";
/**
 * @category annotations
 * @since 1.0.0
 */
const DocumentationAnnotationId = "@effect/schema/DocumentationAnnotationId";
/**
 * @since 1.0.0
 */
const getAnnotation = key => annotated => Object.prototype.hasOwnProperty.call(annotated.annotations, key) ? mjs_Option_some(annotated.annotations[key]) : Option_none();
/**
 * @category constructors
 * @since 1.0.0
 */
const createDeclaration = (typeParameters, type, decode, annotations = {}) => ({
  _tag: "Declaration",
  typeParameters,
  type,
  decode,
  annotations
});
/**
 * @category guards
 * @since 1.0.0
 */
const isDeclaration = ast => ast._tag === "Declaration";
/**
 * @category constructors
 * @since 1.0.0
 */
const createLiteral = literal => ({
  _tag: "Literal",
  literal,
  annotations: {}
});
/**
 * @category guards
 * @since 1.0.0
 */
const isLiteral = ast => ast._tag === "Literal";
/**
 * @category constructors
 * @since 1.0.0
 */
const createUniqueSymbol = (symbol, annotations = {}) => ({
  _tag: "UniqueSymbol",
  symbol,
  annotations
});
/**
 * @category guards
 * @since 1.0.0
 */
const isUniqueSymbol = ast => ast._tag === "UniqueSymbol";
/**
 * @category constructors
 * @since 1.0.0
 */
const undefinedKeyword = {
  _tag: "UndefinedKeyword",
  annotations: {
    [TitleAnnotationId]: "undefined"
  }
};
/**
 * @category guards
 * @since 1.0.0
 */
const isUndefinedKeyword = ast => ast._tag === "UndefinedKeyword";
/**
 * @category constructors
 * @since 1.0.0
 */
const voidKeyword = {
  _tag: "VoidKeyword",
  annotations: {
    [TitleAnnotationId]: "void"
  }
};
/**
 * @category guards
 * @since 1.0.0
 */
const isVoidKeyword = ast => ast._tag === "VoidKeyword";
/**
 * @category constructors
 * @since 1.0.0
 */
const neverKeyword = {
  _tag: "NeverKeyword",
  annotations: {
    [TitleAnnotationId]: "never"
  }
};
/**
 * @category guards
 * @since 1.0.0
 */
const isNeverKeyword = ast => ast._tag === "NeverKeyword";
/**
 * @category constructors
 * @since 1.0.0
 */
const unknownKeyword = {
  _tag: "UnknownKeyword",
  annotations: {
    [TitleAnnotationId]: "unknown"
  }
};
/**
 * @category guards
 * @since 1.0.0
 */
const isUnknownKeyword = ast => ast._tag === "UnknownKeyword";
/**
 * @category constructors
 * @since 1.0.0
 */
const anyKeyword = {
  _tag: "AnyKeyword",
  annotations: {
    [TitleAnnotationId]: "any"
  }
};
/**
 * @category guards
 * @since 1.0.0
 */
const isAnyKeyword = ast => ast._tag === "AnyKeyword";
/**
 * @category constructors
 * @since 1.0.0
 */
const stringKeyword = {
  _tag: "StringKeyword",
  annotations: {
    [TitleAnnotationId]: "string"
  }
};
/**
 * @category guards
 * @since 1.0.0
 */
const isStringKeyword = ast => ast._tag === "StringKeyword";
/**
 * @category constructors
 * @since 1.0.0
 */
const numberKeyword = {
  _tag: "NumberKeyword",
  annotations: {
    [TitleAnnotationId]: "number"
  }
};
/**
 * @category guards
 * @since 1.0.0
 */
const isNumberKeyword = ast => ast._tag === "NumberKeyword";
/**
 * @category constructors
 * @since 1.0.0
 */
const booleanKeyword = {
  _tag: "BooleanKeyword",
  annotations: {
    [TitleAnnotationId]: "boolean"
  }
};
/**
 * @category guards
 * @since 1.0.0
 */
const isBooleanKeyword = ast => ast._tag === "BooleanKeyword";
/**
 * @category constructors
 * @since 1.0.0
 */
const bigIntKeyword = {
  _tag: "BigIntKeyword",
  annotations: {
    [TitleAnnotationId]: "bigint"
  }
};
/**
 * @category guards
 * @since 1.0.0
 */
const isBigIntKeyword = ast => ast._tag === "BigIntKeyword";
/**
 * @category constructors
 * @since 1.0.0
 */
const symbolKeyword = {
  _tag: "SymbolKeyword",
  annotations: {
    [TitleAnnotationId]: "symbol"
  }
};
/**
 * @category guards
 * @since 1.0.0
 */
const isSymbolKeyword = ast => ast._tag === "SymbolKeyword";
/**
 * @category constructors
 * @since 1.0.0
 */
const objectKeyword = {
  _tag: "ObjectKeyword",
  annotations: {
    [TitleAnnotationId]: "object"
  }
};
/**
 * @category guards
 * @since 1.0.0
 */
const isObjectKeyword = ast => ast._tag === "ObjectKeyword";
/**
 * @category constructors
 * @since 1.0.0
 */
const createEnums = enums => ({
  _tag: "Enums",
  enums,
  annotations: {}
});
/**
 * @category guards
 * @since 1.0.0
 */
const isEnums = ast => ast._tag === "Enums";
/**
 * @category constructors
 * @since 1.0.0
 */
const createTemplateLiteral = (head, spans) => RA.isNonEmptyReadonlyArray(spans) ? {
  _tag: "TemplateLiteral",
  head,
  spans,
  annotations: {}
} : createLiteral(head);
/**
 * @category guards
 * @since 1.0.0
 */
const isTemplateLiteral = ast => ast._tag === "TemplateLiteral";
/**
 * @since 1.0.0
 */
const createElement = (type, isOptional) => ({
  type,
  isOptional
});
/**
 * @category constructors
 * @since 1.0.0
 */
const createTuple = (elements, rest, isReadonly, annotations = {}) => ({
  _tag: "Tuple",
  elements,
  rest,
  isReadonly,
  annotations
});
/**
 * @category guards
 * @since 1.0.0
 */
const isTuple = ast => ast._tag === "Tuple";
/**
 * @since 1.0.0
 */
const createPropertySignature = (name, type, isOptional, isReadonly, annotations = {}) => ({
  name,
  type,
  isOptional,
  isReadonly,
  annotations
});
/**
 * @since 1.0.0
 */
const isParameter = ast => {
  switch (ast._tag) {
    case "StringKeyword":
    case "SymbolKeyword":
    case "TemplateLiteral":
      return true;
    case "Refinement":
      return isParameter(ast.from);
    default:
      return false;
  }
};
/**
 * @since 1.0.0
 */
const createIndexSignature = (parameter, type, isReadonly) => {
  if (isParameter(parameter)) {
    return {
      parameter,
      type,
      isReadonly
    };
  }
  throw new Error("An index signature parameter type must be 'string', 'symbol', a template literal type or a refinement of the previous types");
};
/**
 * @category constructors
 * @since 1.0.0
 */
const createTypeLiteral = (propertySignatures, indexSignatures, annotations = {}) => {
  // check for duplicate property signatures
  const keys = {};
  for (let i = 0; i < propertySignatures.length; i++) {
    const name = propertySignatures[i].name;
    if (Object.prototype.hasOwnProperty.call(keys, name)) {
      throw new Error(`Duplicate property signature ${String(name)}`);
    }
    keys[name] = null;
  }
  // check for duplicate index signatures
  const parameters = {
    string: false,
    symbol: false
  };
  for (let i = 0; i < indexSignatures.length; i++) {
    const parameter = getParameterBase(indexSignatures[i].parameter);
    if (isStringKeyword(parameter)) {
      if (parameters.string) {
        throw new Error("Duplicate index signature for type `string`");
      }
      parameters.string = true;
    } else if (isSymbolKeyword(parameter)) {
      if (parameters.symbol) {
        throw new Error("Duplicate index signature for type `symbol`");
      }
      parameters.symbol = true;
    }
  }
  return {
    _tag: "TypeLiteral",
    propertySignatures: sortPropertySignatures(propertySignatures),
    indexSignatures,
    annotations
  };
};
/**
 * @category guards
 * @since 1.0.0
 */
const isTypeLiteral = ast => ast._tag === "TypeLiteral";
/**
 * @category constructors
 * @since 1.0.0
 */
const createUnion = (candidates, annotations = {}) => {
  const types = unify(candidates);
  switch (types.length) {
    case 0:
      return neverKeyword;
    case 1:
      return types[0];
    default:
      {
        return {
          _tag: "Union",
          types: sortUnionMembers(types),
          annotations
        };
      }
  }
};
/**
 * @category guards
 * @since 1.0.0
 */
const isUnion = ast => ast._tag === "Union";
/**
 * @category constructors
 * @since 1.0.0
 */
const createLazy = (f, annotations = {}) => ({
  _tag: "Lazy",
  f: memoizeThunk(f),
  annotations
});
/**
 * @category guards
 * @since 1.0.0
 */
const isLazy = ast => ast._tag === "Lazy";
/**
 * @category constructors
 * @since 1.0.0
 */
const createRefinement = (from, decode, isReversed, annotations = {}) => ({
  _tag: "Refinement",
  from,
  decode,
  isReversed,
  annotations
});
/**
 * @category guards
 * @since 1.0.0
 */
const isRefinement = ast => ast._tag === "Refinement";
/**
 * @category constructors
 * @since 1.0.0
 */
const createPropertySignatureTransformation = (from, to, decode, encode) => ({
  from,
  to,
  decode,
  encode
});
/** @internal */
const _createTransform = (from, to, decode, encode, propertySignatureTransformations, annotations = {}) => ({
  _tag: "Transform",
  from,
  to,
  decode,
  encode,
  propertySignatureTransformations,
  annotations
});
/**
 * @category constructors
 * @since 1.0.0
 */
const createTransform = (from, to, decode, encode, annotations = {}) => _createTransform(from, to, decode, encode, [], annotations);
/**
 * @category constructors
 * @since 1.0.0
 */
const createTransformByPropertySignatureTransformations = (from, to, propertySignatureTransformations, annotations = {}) => _createTransform(from, to, input => {
  for (let i = 0; i < propertySignatureTransformations.length; i++) {
    const t = propertySignatureTransformations[i];
    const name = t.from;
    const from = Object.prototype.hasOwnProperty.call(input, name) ? mjs_Option_some(input[name]) : Option_none();
    delete input[name];
    const to = t.decode(from);
    if (Option_isSome(to)) {
      input[t.to] = to.value;
    }
  }
  return success(input);
}, input => {
  for (let i = 0; i < propertySignatureTransformations.length; i++) {
    const t = propertySignatureTransformations[i];
    const name = t.to;
    const from = Object.prototype.hasOwnProperty.call(input, name) ? mjs_Option_some(input[name]) : Option_none();
    delete input[name];
    const to = t.encode(from);
    if (Option_isSome(to)) {
      input[t.from] = to.value;
    }
  }
  return success(input);
}, propertySignatureTransformations, annotations);
/**
 * @category guards
 * @since 1.0.0
 */
const isTransform = ast => ast._tag === "Transform";
// -------------------------------------------------------------------------------------
// API
// -------------------------------------------------------------------------------------
/**
 * Adds a group of annotations, potentially overwriting existing annotations.
 *
 * @since 1.0.0
 */
const mergeAnnotations = (ast, annotations) => ({
  ...ast,
  annotations: {
    ...ast.annotations,
    ...annotations
  }
});
/**
 * Adds an annotation, potentially overwriting the existing annotation with the specified id.
 *
 * @since 1.0.0
 */
const setAnnotation = (ast, id, value) => ({
  ...ast,
  annotations: {
    ...ast.annotations,
    [id]: value
  }
});
/**
 * Adds a rest element to the end of a tuple, or throws an exception if the rest element is already present.
 *
 * @since 1.0.0
 */
const appendRestElement = (ast, restElement) => {
  if (O.isSome(ast.rest)) {
    // example: `type A = [...string[], ...number[]]` is illegal
    throw new Error("A rest element cannot follow another rest element. ts(1265)");
  }
  return createTuple(ast.elements, O.some([restElement]), ast.isReadonly);
};
/**
 * Appends an element to a tuple or throws an exception in the following cases:
 * - A required element cannot follow an optional element. ts(1257)
 * - An optional element cannot follow a rest element. ts(1266)
 *
 * @since 1.0.0
 */
const appendElement = (ast, newElement) => {
  if (ast.elements.some(e => e.isOptional) && !newElement.isOptional) {
    throw new Error("A required element cannot follow an optional element. ts(1257)");
  }
  return pipe(ast.rest, O.match({
    onNone: () => createTuple([...ast.elements, newElement], O.none(), ast.isReadonly),
    onSome: rest => {
      if (newElement.isOptional) {
        throw new Error("An optional element cannot follow a rest element. ts(1266)");
      }
      return createTuple(ast.elements, O.some([...rest, newElement.type]), ast.isReadonly);
    }
  }));
};
/**
 * Equivalent at runtime to the TypeScript type-level `keyof` operator.
 *
 * @since 1.0.0
 */
const keyof = ast => createUnion(_keyof(ast));
/**
 * @since 1.0.0
 */
const getPropertySignatures = ast => {
  switch (ast._tag) {
    case "TypeLiteral":
      return ast.propertySignatures;
    case "Lazy":
      return getPropertySignatures(ast.f());
  }
  throw new Error(`getPropertySignatures: unsupported schema (${ast._tag})`);
};
/**
 * Create a record with the specified key type and value type.
 *
 * @since 1.0.0
 */
const createRecord = (key, value, isReadonly) => {
  const propertySignatures = [];
  const indexSignatures = [];
  const go = key => {
    switch (key._tag) {
      case "NeverKeyword":
        break;
      case "StringKeyword":
      case "SymbolKeyword":
      case "TemplateLiteral":
      case "Refinement":
        indexSignatures.push(createIndexSignature(key, value, isReadonly));
        break;
      case "Literal":
        if (isString(key.literal) || isNumber(key.literal)) {
          propertySignatures.push(createPropertySignature(key.literal, value, false, isReadonly));
        } else {
          throw new Error(`createRecord: unsupported literal ${String(key.literal)}`);
        }
        break;
      case "UniqueSymbol":
        propertySignatures.push(createPropertySignature(key.symbol, value, false, isReadonly));
        break;
      case "Union":
        key.types.forEach(go);
        break;
      default:
        throw new Error(`createRecord: unsupported key ${key._tag}`);
    }
  };
  go(key);
  return createTypeLiteral(propertySignatures, indexSignatures);
};
/**
 * Equivalent at runtime to the built-in TypeScript utility type `Pick`.
 *
 * @since 1.0.0
 */
const AST_pick = (ast, keys) => createTypeLiteral(getPropertySignatures(ast).filter(ps => keys.includes(ps.name)), []);
/**
 * Equivalent at runtime to the built-in TypeScript utility type `Omit`.
 *
 * @since 1.0.0
 */
const AST_omit = (ast, keys) => createTypeLiteral(getPropertySignatures(ast).filter(ps => !keys.includes(ps.name)), []);
/**
 * Equivalent at runtime to the built-in TypeScript utility type `Partial`.
 *
 * @since 1.0.0
 */
const partial = ast => {
  switch (ast._tag) {
    case "Tuple":
      return createTuple(ast.elements.map(e => createElement(e.type, true)), pipe(ast.rest, O.map(rest => [createUnion([...rest, undefinedKeyword])])), ast.isReadonly);
    case "TypeLiteral":
      return createTypeLiteral(ast.propertySignatures.map(f => createPropertySignature(f.name, f.type, true, f.isReadonly, f.annotations)), ast.indexSignatures);
    case "Union":
      return createUnion(ast.types.map(member => partial(member)));
    case "Lazy":
      return createLazy(() => partial(ast.f()));
    case "Declaration":
      throw new Error("`partial` cannot handle declarations");
    case "Refinement":
      throw new Error("`partial` cannot handle refinements");
    case "Transform":
      throw new Error("`partial` cannot handle transformations");
    default:
      return ast;
  }
};
/**
 * Equivalent at runtime to the built-in TypeScript utility type `Required`.
 *
 * @since 1.0.0
 */
const required = ast => {
  switch (ast._tag) {
    case "Tuple":
      return createTuple(ast.elements.map(e => createElement(e.type, false)), pipe(ast.rest, O.map(rest => {
        const u = createUnion([...rest]);
        return RA.mapNonEmpty(rest, () => u);
      })), ast.isReadonly);
    case "TypeLiteral":
      return createTypeLiteral(ast.propertySignatures.map(f => createPropertySignature(f.name, f.type, false, f.isReadonly, f.annotations)), ast.indexSignatures);
    case "Union":
      return createUnion(ast.types.map(member => required(member)));
    case "Lazy":
      return createLazy(() => required(ast.f()));
    case "Declaration":
      throw new Error("`required` cannot handle declarations");
    case "Refinement":
      throw new Error("`required` cannot handle refinements");
    case "Transform":
      throw new Error("`required` cannot handle transformations");
    default:
      return ast;
  }
};
/**
 * @since 1.0.0
 */
const getCompiler = match => {
  const compile = ast => match[ast._tag](ast, compile);
  return compile;
};
/** @internal */
const getToPropertySignatures = ps => ps.map(p => createPropertySignature(p.name, AST_to(p.type), p.isOptional, p.isReadonly, p.annotations));
/** @internal */
const getToIndexSignatures = ps => ps.map(is => createIndexSignature(is.parameter, AST_to(is.type), is.isReadonly));
/**
 * @since 1.0.0
 */
const AST_to = ast => {
  switch (ast._tag) {
    case "Declaration":
      return createDeclaration(ast.typeParameters.map(AST_to), AST_to(ast.type), ast.decode, ast.annotations);
    case "Tuple":
      return createTuple(ast.elements.map(e => createElement(AST_to(e.type), e.isOptional)), map(ast.rest, mapNonEmpty(AST_to)), ast.isReadonly, ast.annotations);
    case "TypeLiteral":
      return createTypeLiteral(getToPropertySignatures(ast.propertySignatures), getToIndexSignatures(ast.indexSignatures), ast.annotations);
    case "Union":
      return createUnion(ast.types.map(AST_to), ast.annotations);
    case "Lazy":
      return createLazy(() => AST_to(ast.f()), ast.annotations);
    case "Refinement":
      return createRefinement(AST_to(ast.from), ast.decode, false, ast.annotations);
    case "Transform":
      return AST_to(ast.to);
  }
  return ast;
};
/**
 * @since 1.0.0
 */
const from = ast => {
  switch (ast._tag) {
    case "Declaration":
      return createDeclaration(ast.typeParameters.map(from), from(ast.type), ast.decode, ast.annotations);
    case "Tuple":
      return createTuple(ast.elements.map(e => createElement(from(e.type), e.isOptional)), map(ast.rest, mapNonEmpty(from)), ast.isReadonly);
    case "TypeLiteral":
      return createTypeLiteral(ast.propertySignatures.map(p => createPropertySignature(p.name, from(p.type), p.isOptional, p.isReadonly)), ast.indexSignatures.map(is => createIndexSignature(is.parameter, from(is.type), is.isReadonly)));
    case "Union":
      return createUnion(ast.types.map(from));
    case "Lazy":
      return createLazy(() => from(ast.f()));
    case "Refinement":
    case "Transform":
      return from(ast.from);
  }
  return ast;
};
/** @internal */
const getCardinality = ast => {
  switch (ast._tag) {
    case "Declaration":
      return getCardinality(ast.type);
    case "NeverKeyword":
      return 0;
    case "Literal":
    case "UndefinedKeyword":
    case "VoidKeyword":
    case "UniqueSymbol":
      return 1;
    case "BooleanKeyword":
      return 2;
    case "StringKeyword":
    case "NumberKeyword":
    case "BigIntKeyword":
    case "SymbolKeyword":
      return 3;
    case "ObjectKeyword":
      return 5;
    case "UnknownKeyword":
    case "AnyKeyword":
      return 6;
    default:
      return 4;
  }
};
const sortPropertySignatures = /*#__PURE__*/sort( /*#__PURE__*/Function_pipe(Number_Order, /*#__PURE__*/Order_mapInput(ps => getCardinality(ps.type))));
const WeightOrder = /*#__PURE__*/Order_tuple(Number_Order, Number_Order, Number_Order);
const maxWeight = /*#__PURE__*/max(WeightOrder);
const emptyWeight = [0, 0, 0];
const maxWeightAll = weights => weights.reduce(maxWeight, emptyWeight);
/** @internal */
const getWeight = ast => {
  switch (ast._tag) {
    case "Tuple":
      {
        const y = ast.elements.length;
        const z = Option_isSome(ast.rest) ? ast.rest.value.length : 0;
        return [2, y, z];
      }
    case "TypeLiteral":
      {
        const y = ast.propertySignatures.length;
        const z = ast.indexSignatures.length;
        return y + z === 0 ? [-4, 0, 0] : [4, y, z];
      }
    case "Declaration":
      {
        const [_, y, z] = getWeight(ast.type);
        return [6, y, z];
      }
    case "Lazy":
      return [8, 0, 0];
    case "Union":
      return maxWeightAll(ast.types.map(getWeight));
    case "Refinement":
      {
        const [x, y, z] = getWeight(ast.from);
        return [x + 1, y, z];
      }
    case "Transform":
      return getWeight(ast.from);
    case "ObjectKeyword":
      return [-2, 0, 0];
    case "UnknownKeyword":
    case "AnyKeyword":
      return [-4, 0, 0];
    default:
      return emptyWeight;
  }
};
const sortUnionMembers = /*#__PURE__*/sort( /*#__PURE__*/reverse( /*#__PURE__*/Order_mapInput(WeightOrder, getWeight)));
const unify = candidates => {
  let out = Function_pipe(candidates, ReadonlyArray_flatMap(ast => {
    switch (ast._tag) {
      case "NeverKeyword":
        return [];
      case "Union":
        return ast.types;
      default:
        return [ast];
    }
  }));
  if (out.some(isAnyKeyword)) {
    return [anyKeyword];
  }
  if (out.some(isUnknownKeyword)) {
    return [unknownKeyword];
  }
  let i;
  if ((i = out.findIndex(isStringKeyword)) !== -1) {
    out = out.filter((m, j) => j === i || !isStringKeyword(m) && !(isLiteral(m) && typeof m.literal === "string"));
  }
  if ((i = out.findIndex(isNumberKeyword)) !== -1) {
    out = out.filter((m, j) => j === i || !isNumberKeyword(m) && !(isLiteral(m) && typeof m.literal === "number"));
  }
  if ((i = out.findIndex(isBooleanKeyword)) !== -1) {
    out = out.filter((m, j) => j === i || !isBooleanKeyword(m) && !(isLiteral(m) && typeof m.literal === "boolean"));
  }
  if ((i = out.findIndex(isBigIntKeyword)) !== -1) {
    out = out.filter((m, j) => j === i || !isBigIntKeyword(m) && !(isLiteral(m) && typeof m.literal === "bigint"));
  }
  if ((i = out.findIndex(isSymbolKeyword)) !== -1) {
    out = out.filter((m, j) => j === i || !isSymbolKeyword(m) && !isUniqueSymbol(m));
  }
  return out;
};
/** @internal */
const getParameterBase = ast => {
  switch (ast._tag) {
    case "StringKeyword":
    case "SymbolKeyword":
    case "TemplateLiteral":
      return ast;
    case "Refinement":
      return getParameterBase(ast.from);
  }
};
const _keyof = ast => {
  switch (ast._tag) {
    case "Declaration":
      return _keyof(ast.type);
    case "TypeLiteral":
      return ast.propertySignatures.map(p => isSymbol(p.name) ? createUniqueSymbol(p.name) : createLiteral(p.name)).concat(ast.indexSignatures.map(is => getParameterBase(is.parameter)));
    case "Lazy":
      return _keyof(ast.f());
    default:
      throw new Error(`keyof: unsupported schema (${ast._tag})`);
  }
};
//# sourceMappingURL=AST.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+schema@0.33.2_@effect+data@0.17.6_@effect+io@0.38.2/node_modules/@effect/schema/mjs/TreeFormatter.mjs
/**
 * @since 1.0.0
 */



const TreeFormatter_make = (value, forest = []) => ({
  value,
  forest
});
/**
 * @since 1.0.0
 */
const formatErrors = errors => drawTree(TreeFormatter_make(`error(s) found`, errors.map(go)));
const drawTree = tree => tree.value + draw("\n", tree.forest);
const draw = (indentation, forest) => {
  let r = "";
  const len = forest.length;
  let tree;
  for (let i = 0; i < len; i++) {
    tree = forest[i];
    const isLast = i === len - 1;
    r += indentation + (isLast ? "└" : "├") + "─ " + tree.value;
    r += draw(indentation + (len > 1 && !isLast ? "│  " : "   "), tree.forest);
  }
  return r;
};
/** @internal */
const formatActual = actual => {
  if (actual === undefined || actual === null || typeof actual === "number" || typeof actual === "symbol" || actual instanceof Date) {
    return String(actual);
  }
  if (typeof actual === "bigint") {
    return String(actual) + "n";
  }
  try {
    return JSON.stringify(actual);
  } catch (e) {
    return String(actual);
  }
};
const formatTemplateLiteralSpan = span => {
  switch (span.type._tag) {
    case "StringKeyword":
      return "${string}";
    case "NumberKeyword":
      return "${number}";
  }
};
const formatTemplateLiteral = ast => ast.head + ast.spans.map(span => formatTemplateLiteralSpan(span) + span.literal).join("");
const getMessage = /*#__PURE__*/getAnnotation(MessageAnnotationId);
const getTitle = /*#__PURE__*/getAnnotation(TitleAnnotationId);
const getIdentifier = /*#__PURE__*/getAnnotation(IdentifierAnnotationId);
const getDescription = /*#__PURE__*/getAnnotation(DescriptionAnnotationId);
const getExpected = ast => Function_pipe(getIdentifier(ast), orElse(() => getTitle(ast)), orElse(() => getDescription(ast)));
/** @internal */
const formatExpected = ast => {
  switch (ast._tag) {
    case "StringKeyword":
    case "NumberKeyword":
    case "BooleanKeyword":
    case "BigIntKeyword":
    case "UndefinedKeyword":
    case "SymbolKeyword":
    case "ObjectKeyword":
    case "AnyKeyword":
    case "UnknownKeyword":
    case "VoidKeyword":
    case "NeverKeyword":
      return getOrElse(getExpected(ast), () => ast._tag);
    case "Literal":
      return getOrElse(getExpected(ast), () => formatActual(ast.literal));
    case "UniqueSymbol":
      return getOrElse(getExpected(ast), () => formatActual(ast.symbol));
    case "Union":
      return ast.types.map(formatExpected).join(" or ");
    case "TemplateLiteral":
      return getOrElse(getExpected(ast), () => formatTemplateLiteral(ast));
    case "Tuple":
      return getOrElse(getExpected(ast), () => "<anonymous tuple or array schema>");
    case "TypeLiteral":
      return getOrElse(getExpected(ast), () => "<anonymous type literal schema>");
    case "Enums":
      return getOrElse(getExpected(ast), () => ast.enums.map((_, value) => JSON.stringify(value)).join(" | "));
    case "Lazy":
      return getOrElse(getExpected(ast), () => "<anonymous lazy schema>");
    case "Declaration":
      return getOrElse(getExpected(ast), () => "<anonymous declaration schema>");
    case "Refinement":
      return getOrElse(getExpected(ast), () => "<anonymous refinement schema>");
    case "Transform":
      return getOrElse(getExpected(ast), () => `${formatExpected(ast.from)} -> ${formatExpected(ast.to)}`);
  }
};
const go = e => {
  switch (e._tag) {
    case "Type":
      return TreeFormatter_make(Function_pipe(getMessage(e.expected), map(f => f(e.actual)), orElse(() => e.message), getOrElse(() => `Expected ${formatExpected(e.expected)}, actual ${formatActual(e.actual)}`)));
    case "Forbidden":
      return TreeFormatter_make("is forbidden");
    case "Index":
      {
        const es = e.errors.map(go);
        if (es.length === 1 && es[0].forest.length !== 0) {
          return TreeFormatter_make(`[${e.index}]${es[0].value}`, es[0].forest);
        }
        return TreeFormatter_make(`[${e.index}]`, es);
      }
    case "Unexpected":
      return TreeFormatter_make(`is unexpected`);
    case "Key":
      {
        const es = e.errors.map(go);
        if (es.length === 1 && es[0].forest.length !== 0) {
          return TreeFormatter_make(`[${formatActual(e.key)}]${es[0].value}`, es[0].forest);
        }
        return TreeFormatter_make(`[${formatActual(e.key)}]`, es);
      }
    case "Missing":
      return TreeFormatter_make(`is missing`);
    case "UnionMember":
      return TreeFormatter_make(`union member`, e.errors.map(go));
  }
};
//# sourceMappingURL=TreeFormatter.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+schema@0.33.2_@effect+data@0.17.6_@effect+io@0.38.2/node_modules/@effect/schema/mjs/Parser.mjs
/**
 * @since 1.0.0
 */










const getSync = ast => {
  const parser = Parser_go(ast);
  return (input, options) => {
    const result = parser(input, options);
    // @ts-expect-error
    if (Either_isLeft(result)) {
      throw new Error(formatErrors(result.left.errors));
    }
    // @ts-expect-error
    return result.right;
  };
};
const Parser_getOption = ast => {
  const parser = getEither(ast);
  return (input, options) => Option_getRight(parser(input, options));
};
const getEither = ast => {
  const parser = Parser_go(ast);
  return (input, options) => parser(input, options);
};
const getPromise = ast => {
  const parser = Parser_go(ast);
  return (input, options) => Effect.runPromise(parser(input, {
    ...options,
    isEffectAllowed: true
  }));
};
const getEffect = ast => {
  const parser = Parser_go(ast);
  return (input, options) => parser(input, {
    ...options,
    isEffectAllowed: true
  });
};
/**
 * @category parsing
 * @since 1.0.0
 */
const parseSync = schema => getSync(schema.ast);
/**
 * @category parsing
 * @since 1.0.0
 */
const parseOption = schema => Parser_getOption(schema.ast);
/**
 * @category parsing
 * @since 1.0.0
 */
const parseEither = schema => getEither(schema.ast);
/**
 * @category parsing
 * @since 1.0.0
 */
const parseResult = schema => Parser_go(schema.ast);
/**
 * @category parsing
 * @since 1.0.0
 */
const parsePromise = schema => getPromise(schema.ast);
/**
 * @category parsing
 * @since 1.0.0
 */
const parse = schema => getEffect(schema.ast);
/**
 * @category decoding
 * @since 1.0.0
 */
const decodeSync = (/* unused pure expression or super */ null && (parseSync));
/**
 * @category decoding
 * @since 1.0.0
 */
const decodeOption = (/* unused pure expression or super */ null && (parseOption));
/**
 * @category decoding
 * @since 1.0.0
 */
const decodeEither = (/* unused pure expression or super */ null && (parseEither));
/**
 * @category decoding
 * @since 1.0.0
 */
const decodeResult = (/* unused pure expression or super */ null && (parseResult));
/**
 * @category decoding
 * @since 1.0.0
 */
const decodePromise = (/* unused pure expression or super */ null && (parsePromise));
/**
 * @category decoding
 * @since 1.0.0
 */
const Parser_decode = (/* unused pure expression or super */ null && (parse));
/**
 * @category validation
 * @since 1.0.0
 */
const validateSync = schema => getSync(AST_to(schema.ast));
/**
 * @category validation
 * @since 1.0.0
 */
const Parser_validateOption = schema => Parser_getOption(AST_to(schema.ast));
/**
 * @category validation
 * @since 1.0.0
 */
const Parser_validateEither = schema => getEither(AST_to(schema.ast));
/**
 * @category validation
 * @since 1.0.0
 */
const validateResult = schema => Parser_go(AST.to(schema.ast));
/**
 * @category validation
 * @since 1.0.0
 */
const validatePromise = schema => getPromise(AST.to(schema.ast));
/**
 * @category validation
 * @since 1.0.0
 */
const Parser_validate = schema => getEffect(AST.to(schema.ast));
/**
 * @category validation
 * @since 1.0.0
 */
const Parser_is = schema => {
  const getEither = Parser_validateEither(schema);
  return a => Either_isRight(getEither(a));
};
/**
 * @category validation
 * @since 1.0.0
 */
const asserts = schema => {
  const get = validateSync(schema);
  return (a, options) => {
    get(a, options);
  };
};
/**
 * @category encoding
 * @since 1.0.0
 */
const encodeSync = schema => getSync(Parser_reverse(schema.ast));
/**
 * @category encoding
 * @since 1.0.0
 */
const encodeOption = schema => Parser_getOption(Parser_reverse(schema.ast));
/**
 * @category encoding
 * @since 1.0.0
 */
const encodeEither = schema => getEither(Parser_reverse(schema.ast));
/**
 * @category encoding
 * @since 1.0.0
 */
const encodeResult = schema => Parser_go(Parser_reverse(schema.ast));
/**
 * @category encoding
 * @since 1.0.0
 */
const encodePromise = schema => getPromise(Parser_reverse(schema.ast));
/**
 * @category encoding
 * @since 1.0.0
 */
const encode = schema => getEffect(Parser_reverse(schema.ast));
const Parser_go = (ast, isBoundary = true) => {
  switch (ast._tag) {
    case "Refinement":
      {
        if (ast.isReversed) {
          const from = Parser_go(AST_to(ast), isBoundary);
          const to = Parser_go(Parser_reverse(dropRightRefinement(ast.from)), false);
          return (i, options) => handleForbidden(ParseResult_flatMap(from(i, options), a => to(a, options)), options);
        } else {
          const from = Parser_go(ast.from, isBoundary);
          return (i, options) => handleForbidden(ParseResult_flatMap(from(i, options), a => ast.decode(a, options)), options);
        }
      }
    case "Transform":
      {
        const from = Parser_go(ast.from, isBoundary);
        const to = Parser_go(ast.to, false);
        return (i1, options) => handleForbidden(ParseResult_flatMap(from(i1, options), a => ParseResult_flatMap(ast.decode(a, options), i2 => to(i2, options))), options);
      }
    case "Declaration":
      {
        const decode = ast.decode(...ast.typeParameters);
        return (i, options) => handleForbidden(decode(i, options), options);
      }
    case "Literal":
      return fromRefinement(ast, u => u === ast.literal);
    case "UniqueSymbol":
      return fromRefinement(ast, u => u === ast.symbol);
    case "UndefinedKeyword":
      return fromRefinement(ast, isUndefined);
    case "VoidKeyword":
      return fromRefinement(ast, isUndefined);
    case "NeverKeyword":
      return fromRefinement(ast, isNever);
    case "UnknownKeyword":
    case "AnyKeyword":
      return success;
    case "StringKeyword":
      return fromRefinement(ast, Predicate_isString);
    case "NumberKeyword":
      return fromRefinement(ast, Predicate_isNumber);
    case "BooleanKeyword":
      return fromRefinement(ast, isBoolean);
    case "BigIntKeyword":
      return fromRefinement(ast, isBigint);
    case "SymbolKeyword":
      return fromRefinement(ast, Predicate_isSymbol);
    case "ObjectKeyword":
      return fromRefinement(ast, Predicate_isObject);
    case "Enums":
      return fromRefinement(ast, u => ast.enums.some(([_, value]) => value === u));
    case "TemplateLiteral":
      {
        const regex = getTemplateLiteralRegex(ast);
        return fromRefinement(ast, u => Predicate_isString(u) && regex.test(u));
      }
    case "Tuple":
      {
        const elements = ast.elements.map(e => Parser_go(e.type, isBoundary));
        const rest = Function_pipe(ast.rest, map(mapNonEmpty(ast => Parser_go(ast))));
        let requiredLen = ast.elements.filter(e => !e.isOptional).length;
        if (Option_isSome(ast.rest)) {
          requiredLen += ast.rest.value.length - 1;
        }
        return (input, options) => {
          if (!Array.isArray(input)) {
            return failure(type(unknownArray, input));
          }
          const allErrors = options?.errors === "all";
          const es = [];
          let stepKey = 0;
          // ---------------------------------------------
          // handle missing indexes
          // ---------------------------------------------
          const len = input.length;
          for (let i = len; i <= requiredLen - 1; i++) {
            const e = ParseResult_index(i, [missing]);
            if (allErrors) {
              es.push([stepKey++, e]);
              continue;
            } else {
              return failure(e);
            }
          }
          // ---------------------------------------------
          // handle excess indexes
          // ---------------------------------------------
          if (Option_isNone(ast.rest)) {
            for (let i = ast.elements.length; i <= len - 1; i++) {
              const e = ParseResult_index(i, [unexpected(input[i])]);
              if (allErrors) {
                es.push([stepKey++, e]);
                continue;
              } else {
                return ParseResult_failures(mutableAppend(sortByIndex(es), e));
              }
            }
          }
          const output = [];
          let i = 0;
          let queue = undefined;
          // ---------------------------------------------
          // handle elements
          // ---------------------------------------------
          for (; i < elements.length; i++) {
            if (len < i + 1) {
              // the input element is missing...
              if (ast.elements[i].isOptional) {
                continue;
              }
            } else {
              const parser = elements[i];
              const te = parser(input[i], options);
              const eu = eitherOrUndefined(te);
              if (eu) {
                if (Either_isLeft(eu)) {
                  // the input element is present but is not valid
                  const e = ParseResult_index(i, eu.left.errors);
                  if (allErrors) {
                    es.push([stepKey++, e]);
                    continue;
                  } else {
                    return ParseResult_failures(mutableAppend(sortByIndex(es), e));
                  }
                }
                output.push([stepKey++, eu.right]);
              } else {
                const nk = stepKey++;
                const index = i;
                if (!queue) {
                  queue = [];
                }
                queue.push(({
                  es,
                  output
                }) => Effect_flatMap(Effect_either(te), t => {
                  if (Either_isLeft(t)) {
                    // the input element is present but is not valid
                    const e = ParseResult_index(index, t.left.errors);
                    if (allErrors) {
                      es.push([nk, e]);
                      return Effect_unit;
                    } else {
                      return ParseResult_failures(mutableAppend(sortByIndex(es), e));
                    }
                  }
                  output.push([nk, t.right]);
                  return Effect_unit;
                }));
              }
            }
          }
          // ---------------------------------------------
          // handle rest element
          // ---------------------------------------------
          if (Option_isSome(rest)) {
            const head = headNonEmpty(rest.value);
            const tail = tailNonEmpty(rest.value);
            for (; i < len - tail.length; i++) {
              const te = head(input[i], options);
              const eu = eitherOrUndefined(te);
              if (eu) {
                if (Either_isLeft(eu)) {
                  const e = ParseResult_index(i, eu.left.errors);
                  if (allErrors) {
                    es.push([stepKey++, e]);
                    continue;
                  } else {
                    return ParseResult_failures(mutableAppend(sortByIndex(es), e));
                  }
                } else {
                  output.push([stepKey++, eu.right]);
                }
              } else {
                const nk = stepKey++;
                const index = i;
                if (!queue) {
                  queue = [];
                }
                queue.push(({
                  es,
                  output
                }) => Effect_flatMap(Effect_either(te), t => {
                  if (Either_isLeft(t)) {
                    const e = ParseResult_index(index, t.left.errors);
                    if (allErrors) {
                      es.push([nk, e]);
                      return Effect_unit;
                    } else {
                      return ParseResult_failures(mutableAppend(sortByIndex(es), e));
                    }
                  } else {
                    output.push([nk, t.right]);
                    return Effect_unit;
                  }
                }));
              }
            }
            // ---------------------------------------------
            // handle post rest elements
            // ---------------------------------------------
            for (let j = 0; j < tail.length; j++) {
              i += j;
              if (len < i + 1) {
                continue;
              } else {
                const te = tail[j](input[i], options);
                const eu = eitherOrUndefined(te);
                if (eu) {
                  if (Either_isLeft(eu)) {
                    // the input element is present but is not valid
                    const e = ParseResult_index(i, eu.left.errors);
                    if (allErrors) {
                      es.push([stepKey++, e]);
                      continue;
                    } else {
                      return ParseResult_failures(mutableAppend(sortByIndex(es), e));
                    }
                  }
                  output.push([stepKey++, eu.right]);
                } else {
                  const nk = stepKey++;
                  const index = i;
                  if (!queue) {
                    queue = [];
                  }
                  queue.push(({
                    es,
                    output
                  }) => Effect_flatMap(Effect_either(te), t => {
                    if (Either_isLeft(t)) {
                      // the input element is present but is not valid
                      const e = ParseResult_index(index, t.left.errors);
                      if (allErrors) {
                        es.push([nk, e]);
                        return Effect_unit;
                      } else {
                        return ParseResult_failures(mutableAppend(sortByIndex(es), e));
                      }
                    }
                    output.push([nk, t.right]);
                    return Effect_unit;
                  }));
                }
              }
            }
          }
          // ---------------------------------------------
          // compute output
          // ---------------------------------------------
          const computeResult = ({
            es,
            output
          }) => ReadonlyArray_isNonEmptyArray(es) ? ParseResult_failures(sortByIndex(es)) : success(sortByIndex(output));
          if (queue && queue.length > 0) {
            const cqueue = queue;
            return Effect_suspend(() => {
              const state = {
                es: Array.from(es),
                output: Array.from(output)
              };
              return Effect_flatMap(Effect_forEach(cqueue, f => f(state), {
                concurrency: "unbounded",
                discard: true
              }), () => computeResult(state));
            });
          }
          return computeResult({
            output,
            es
          });
        };
      }
    case "TypeLiteral":
      {
        if (ast.propertySignatures.length === 0 && ast.indexSignatures.length === 0) {
          return fromRefinement(ast, isNotNullable);
        }
        const propertySignatures = ast.propertySignatures.map(ps => Parser_go(ps.type, isBoundary));
        const indexSignatures = ast.indexSignatures.map(is => [Parser_go(is.parameter, isBoundary), Parser_go(is.type, isBoundary)]);
        const parameter = Parser_go(createUnion(ast.indexSignatures.map(is => getParameterBase(is.parameter))));
        const expectedKeys = {};
        for (let i = 0; i < propertySignatures.length; i++) {
          expectedKeys[ast.propertySignatures[i].name] = null;
        }
        return (input, options) => {
          if (!isRecord(input)) {
            return failure(type(unknownRecord, input));
          }
          const allErrors = options?.errors === "all";
          const es = [];
          let stepKey = 0;
          // ---------------------------------------------
          // handle excess properties
          // ---------------------------------------------
          const onExcessPropertyError = options?.onExcessProperty === "error";
          if (onExcessPropertyError) {
            for (const key of common_ownKeys(input)) {
              if (!Object.prototype.hasOwnProperty.call(expectedKeys, key)) {
                const te = parameter(key);
                const eu = eitherOrUndefined(te);
                if (eu && Either_isLeft(eu)) {
                  const e = ParseResult_key(key, [unexpected(input[key])]);
                  if (allErrors) {
                    es.push([stepKey++, e]);
                    continue;
                  } else {
                    return ParseResult_failures(mutableAppend(sortByIndex(es), e));
                  }
                }
              }
            }
          }
          // ---------------------------------------------
          // handle property signatures
          // ---------------------------------------------
          const output = {};
          let queue = undefined;
          for (let i = 0; i < propertySignatures.length; i++) {
            const ps = ast.propertySignatures[i];
            const parser = propertySignatures[i];
            const name = ps.name;
            if (Object.prototype.hasOwnProperty.call(input, name)) {
              const te = parser(input[name], options);
              const eu = eitherOrUndefined(te);
              if (eu) {
                if (Either_isLeft(eu)) {
                  // the input key is present but is not valid
                  const e = ParseResult_key(name, eu.left.errors);
                  if (allErrors) {
                    es.push([stepKey++, e]);
                    continue;
                  } else {
                    return ParseResult_failures(mutableAppend(sortByIndex(es), e));
                  }
                }
                output[name] = eu.right;
              } else {
                const nk = stepKey++;
                const index = name;
                if (!queue) {
                  queue = [];
                }
                queue.push(({
                  es,
                  output
                }) => Effect_flatMap(Effect_either(te), t => {
                  if (Either_isLeft(t)) {
                    // the input key is present but is not valid
                    const e = ParseResult_key(index, t.left.errors);
                    if (allErrors) {
                      es.push([nk, e]);
                      return Effect_unit;
                    } else {
                      return ParseResult_failures(mutableAppend(sortByIndex(es), e));
                    }
                  }
                  output[index] = t.right;
                  return Effect_unit;
                }));
              }
            } else {
              // ---------------------------------------------
              // handle missing keys
              // ---------------------------------------------
              if (!ps.isOptional) {
                const e = ParseResult_key(name, [missing]);
                if (allErrors) {
                  es.push([stepKey++, e]);
                  continue;
                } else {
                  return failure(e);
                }
              }
            }
          }
          // ---------------------------------------------
          // handle index signatures
          // ---------------------------------------------
          for (let i = 0; i < indexSignatures.length; i++) {
            const parameter = indexSignatures[i][0];
            const type = indexSignatures[i][1];
            const keys = getKeysForIndexSignature(input, ast.indexSignatures[i].parameter);
            for (const key of keys) {
              if (Object.prototype.hasOwnProperty.call(expectedKeys, key)) {
                continue;
              }
              // ---------------------------------------------
              // handle keys
              // ---------------------------------------------
              const keu = eitherOrUndefined(parameter(key, options));
              if (keu) {
                if (Either_isLeft(keu)) {
                  const e = ParseResult_key(key, keu.left.errors);
                  if (allErrors) {
                    es.push([stepKey++, e]);
                    continue;
                  } else {
                    return ParseResult_failures(mutableAppend(sortByIndex(es), e));
                  }
                }
              }
              // there's no else here because index signature parameters are restricted to primitives
              // ---------------------------------------------
              // handle values
              // ---------------------------------------------
              const vpr = type(input[key], options);
              const veu = eitherOrUndefined(vpr);
              if (veu) {
                if (Either_isLeft(veu)) {
                  const e = ParseResult_key(key, veu.left.errors);
                  if (allErrors) {
                    es.push([stepKey++, e]);
                    continue;
                  } else {
                    return ParseResult_failures(mutableAppend(sortByIndex(es), e));
                  }
                } else {
                  output[key] = veu.right;
                }
              } else {
                const nk = stepKey++;
                const index = key;
                if (!queue) {
                  queue = [];
                }
                queue.push(({
                  es,
                  output
                }) => Effect_flatMap(Effect_either(vpr), tv => {
                  if (Either_isLeft(tv)) {
                    const e = ParseResult_key(index, tv.left.errors);
                    if (allErrors) {
                      es.push([nk, e]);
                      return Effect_unit;
                    } else {
                      return ParseResult_failures(mutableAppend(sortByIndex(es), e));
                    }
                  } else {
                    output[key] = tv.right;
                    return Effect_unit;
                  }
                }));
              }
            }
          }
          // ---------------------------------------------
          // compute output
          // ---------------------------------------------
          const computeResult = ({
            es,
            output
          }) => ReadonlyArray_isNonEmptyArray(es) ? ParseResult_failures(sortByIndex(es)) : success(output);
          if (queue && queue.length > 0) {
            const cqueue = queue;
            return Effect_suspend(() => {
              const state = {
                es: Array.from(es),
                output: Object.assign({}, output)
              };
              return Effect_flatMap(Effect_forEach(cqueue, f => f(state), {
                concurrency: "unbounded",
                discard: true
              }), () => computeResult(state));
            });
          }
          return computeResult({
            es,
            output
          });
        };
      }
    case "Union":
      {
        const searchTree = _getSearchTree(ast.types);
        const ownKeys = common_ownKeys(searchTree.keys);
        const len = ownKeys.length;
        const map = new Map();
        for (let i = 0; i < ast.types.length; i++) {
          map.set(ast.types[i], Parser_go(ast.types[i], true)); // <= this must be true
        }

        return (input, options) => {
          const es = [];
          let stepKey = 0;
          let candidates = [];
          if (len > 0) {
            // if there is at least one key then input must be an object
            if (isRecord(input)) {
              for (let i = 0; i < len; i++) {
                const name = ownKeys[i];
                const buckets = searchTree.keys[name].buckets;
                // for each property that should contain a literal, check if the input contains that property
                if (Object.prototype.hasOwnProperty.call(input, name)) {
                  const literal = String(input[name]);
                  // check that the value obtained from the input for the property corresponds to an existing bucket
                  if (Object.prototype.hasOwnProperty.call(buckets, literal)) {
                    // retrive the minimal set of candidates for decoding
                    candidates = candidates.concat(buckets[literal]);
                  } else {
                    es.push([stepKey++, ParseResult_key(name, [type(searchTree.keys[name].ast, input[name])])]);
                  }
                } else {
                  es.push([stepKey++, ParseResult_key(name, [missing])]);
                }
              }
            } else {
              es.push([stepKey++, type(unknownRecord, input)]);
            }
          }
          if (searchTree.otherwise.length > 0) {
            candidates = candidates.concat(searchTree.otherwise);
          }
          let queue = undefined;
          for (let i = 0; i < candidates.length; i++) {
            const pr = map.get(candidates[i])(input, options);
            // the members of a union are ordered based on which one should be decoded first,
            // therefore if one member has added a task, all subsequent members must
            // also add a task to the queue even if they are synchronous
            const eu = !queue || queue.length === 0 ? eitherOrUndefined(pr) : undefined;
            if (eu) {
              if (Either_isRight(eu)) {
                return success(eu.right);
              } else {
                es.push([stepKey++, unionMember(eu.left.errors)]);
              }
            } else {
              const nk = stepKey++;
              if (!queue) {
                queue = [];
              }
              queue.push(state => Effect_suspend(() => {
                if ("finalResult" in state) {
                  return Effect_unit;
                } else {
                  return Effect_flatMap(Effect_either(pr), t => {
                    if (Either_isRight(t)) {
                      state.finalResult = success(t.right);
                    } else {
                      state.es.push([nk, unionMember(t.left.errors)]);
                    }
                    return Effect_unit;
                  });
                }
              }));
            }
          }
          // ---------------------------------------------
          // compute output
          // ---------------------------------------------
          const computeResult = es => ReadonlyArray_isNonEmptyArray(es) ? ParseResult_failures(sortByIndex(es)) :
          // this should never happen
          failure(type(neverKeyword, input));
          if (queue && queue.length > 0) {
            const cqueue = queue;
            return Effect_suspend(() => {
              const state = {
                es: Array.from(es)
              };
              return Effect_flatMap(Effect_forEach(cqueue, f => f(state), {
                concurrency: 1,
                discard: true
              }), () => {
                if ("finalResult" in state) {
                  return state.finalResult;
                }
                return computeResult(state.es);
              });
            });
          }
          return computeResult(es);
        };
      }
    case "Lazy":
      {
        const get = memoizeThunk(() => Parser_go(ast.f(), isBoundary));
        return (a, options) => get()(a, options);
      }
  }
};
const fromRefinement = (ast, refinement) => u => refinement(u) ? success(u) : failure(type(ast, u));
/** @internal */
const _getLiterals = ast => {
  switch (ast._tag) {
    case "Declaration":
      return _getLiterals(ast.type);
    case "TypeLiteral":
      {
        const out = [];
        for (let i = 0; i < ast.propertySignatures.length; i++) {
          const propertySignature = ast.propertySignatures[i];
          const type = from(propertySignature.type);
          if (isLiteral(type) && !propertySignature.isOptional) {
            out.push([propertySignature.name, type]);
          }
        }
        return out;
      }
    case "Refinement":
    case "Transform":
      return _getLiterals(ast.from);
  }
  return [];
};
/**
 * The purpose of the algorithm is to narrow down the pool of possible candidates for decoding as much as possible.
 *
 * This function separates the schemas into two groups, `keys` and `otherwise`:
 *
 * - `keys`: the schema has at least one property with a literal value
 * - `otherwise`: the schema has no properties with a literal value
 *
 * If a schema has at least one property with a literal value, so it ends up in `keys`, first a namespace is created for
 * the name of the property containing the literal, and then within this namespace a "bucket" is created for the literal
 * value in which to store all the schemas that have the same property and literal value.
 *
 * @internal
 */
const _getSearchTree = members => {
  const keys = {};
  const otherwise = [];
  for (let i = 0; i < members.length; i++) {
    const member = members[i];
    const tags = _getLiterals(member);
    if (tags.length > 0) {
      for (let j = 0; j < tags.length; j++) {
        const [key, literal] = tags[j];
        const hash = String(literal.literal);
        keys[key] = keys[key] || {
          buckets: {},
          ast: neverKeyword
        };
        const buckets = keys[key].buckets;
        if (Object.prototype.hasOwnProperty.call(buckets, hash)) {
          if (j < tags.length - 1) {
            continue;
          }
          buckets[hash].push(member);
          keys[key].ast = createUnion([keys[key].ast, literal]);
        } else {
          buckets[hash] = [member];
          keys[key].ast = createUnion([keys[key].ast, literal]);
          break;
        }
      }
    } else {
      otherwise.push(member);
    }
  }
  return {
    keys,
    otherwise
  };
};
const dropRightRefinement = ast => isRefinement(ast) ? dropRightRefinement(ast.from) : ast;
const handleForbidden = (conditional, options) => {
  const eu = eitherOrUndefined(conditional);
  return eu ? eu : options?.isEffectAllowed === true ? conditional : failure(forbidden);
};
const unknownArray = /*#__PURE__*/createTuple([], /*#__PURE__*/mjs_Option_some([unknownKeyword]), true, {
  [DescriptionAnnotationId]: "a generic array"
});
const unknownRecord = /*#__PURE__*/createTypeLiteral([], [/*#__PURE__*/createIndexSignature(stringKeyword, unknownKeyword, true), /*#__PURE__*/createIndexSignature(symbolKeyword, unknownKeyword, true)], {
  [DescriptionAnnotationId]: "a generic object"
});
const mutableAppend = (self, a) => {
  self.push(a);
  return self;
};
const getTemplateLiteralRegex = ast => {
  let pattern = `^${ast.head}`;
  for (const span of ast.spans) {
    if (isStringKeyword(span.type)) {
      pattern += ".*";
    } else if (isNumberKeyword(span.type)) {
      pattern += "-?\\d+(\\.\\d+)?";
    }
    pattern += span.literal;
  }
  pattern += "$";
  return new RegExp(pattern);
};
function sortByIndex(es) {
  return es.sort(([a], [b]) => a > b ? 1 : a < b ? -1 : 0).map(([_, a]) => a);
}
/** @internal */
const Parser_reverse = ast => {
  switch (ast._tag) {
    case "Declaration":
      return createDeclaration(ast.typeParameters.map(Parser_reverse), ast.type, ast.decode, ast.annotations);
    case "Tuple":
      return createTuple(ast.elements.map(e => createElement(Parser_reverse(e.type), e.isOptional)), map(ast.rest, mapNonEmpty(Parser_reverse)), ast.isReadonly);
    case "TypeLiteral":
      return createTypeLiteral(ast.propertySignatures.map(ps => createPropertySignature(ps.name, Parser_reverse(ps.type), ps.isOptional, ps.isReadonly, ps.annotations)), ast.indexSignatures.map(is => createIndexSignature(is.parameter, Parser_reverse(is.type), is.isReadonly)));
    case "Union":
      return createUnion(ast.types.map(Parser_reverse));
    case "Lazy":
      return createLazy(() => Parser_reverse(ast.f()));
    case "Refinement":
      return createRefinement(ast.from, ast.decode, !ast.isReversed, ast.annotations);
    case "Transform":
      return _createTransform(Parser_reverse(ast.to), Parser_reverse(ast.from), ast.encode, ast.decode, ast.propertySignatureTransformations.map(t => createPropertySignatureTransformation(t.to, t.from, t.encode, t.decode)));
  }
  return ast;
};
//# sourceMappingURL=Parser.mjs.map
;// CONCATENATED MODULE: ./node_modules/.pnpm/@effect+schema@0.33.2_@effect+data@0.17.6_@effect+io@0.38.2/node_modules/@effect/schema/mjs/Schema.mjs
/**
 * @since 1.0.0
 */


















const Schema_TypeId = /*#__PURE__*/Symbol.for("@effect/schema/Schema");
/**
 * @since 1.0.0
 */
const Schema_from = schema => Schema_make(AST.from(schema.ast));
/**
 * @since 1.0.0
 */
const to = schema => Schema_make(AST_to(schema.ast));
/* c8 ignore start */

/* c8 ignore end */
// ---------------------------------------------
// constructors
// ---------------------------------------------
class SchemaImpl {
  ast;
  _id = Schema_TypeId;
  From;
  To;
  constructor(ast) {
    this.ast = ast;
  }
  pipe() {
    return Pipeable_pipeArguments(this, arguments);
  }
}
/**
 * @category constructors
 * @since 1.0.0
 */
const Schema_make = ast => new SchemaImpl(ast);
/**
 * Tests if a value is a `Schema`.
 *
 * @category guards
 * @since 1.0.0
 */
const isSchema = input => isObject(input) && "_id" in input && input["_id"] === Schema_TypeId;
const makeLiteral = value => Schema_make(createLiteral(value));
/**
 * @category constructors
 * @since 1.0.0
 */
const literal = (...literals) => Schema_union(...literals.map(literal => makeLiteral(literal)));
/**
 * @category constructors
 * @since 1.0.0
 */
const uniqueSymbol = (symbol, annotations) => Schema_make(AST.createUniqueSymbol(symbol, annotations));
/**
 * @category constructors
 * @since 1.0.0
 */
const enums = enums => Schema_make(AST.createEnums(Object.keys(enums).filter(key => typeof enums[enums[key]] !== "number").map(key => [key, enums[key]])));
/**
 * @category constructors
 * @since 1.0.0
 */
const templateLiteral = (...[head, ...tail]) => {
  let types = getTemplateLiterals(head.ast);
  for (const span of tail) {
    types = RA.flatMap(types, a => getTemplateLiterals(span.ast).map(b => combineTemplateLiterals(a, b)));
  }
  return Schema_make(AST.createUnion(types));
};
const combineTemplateLiterals = (a, b) => {
  if (AST.isLiteral(a)) {
    return AST.isLiteral(b) ? AST.createLiteral(String(a.literal) + String(b.literal)) : AST.createTemplateLiteral(String(a.literal) + b.head, b.spans);
  }
  if (AST.isLiteral(b)) {
    return AST.createTemplateLiteral(a.head, RA.modifyNonEmptyLast(a.spans, span => ({
      ...span,
      literal: span.literal + String(b.literal)
    })));
  }
  return AST.createTemplateLiteral(a.head, RA.appendAll(RA.modifyNonEmptyLast(a.spans, span => ({
    ...span,
    literal: span.literal + String(b.head)
  })), b.spans));
};
const getTemplateLiterals = ast => {
  switch (ast._tag) {
    case "Literal":
      return [ast];
    case "NumberKeyword":
    case "StringKeyword":
      return [AST.createTemplateLiteral("", [{
        type: ast,
        literal: ""
      }])];
    case "Union":
      return RA.flatMap(ast.types, getTemplateLiterals);
    default:
      throw new Error(`templateLiteral: unsupported template literal span ${ast._tag}`);
  }
};
/**
  @category combinators
  @since 1.0.0
*/
const declare = (typeParameters, type, decode, annotations) => Schema_make(createDeclaration(typeParameters.map(tp => tp.ast), type.ast, (...typeParameters) => decode(...typeParameters.map(Schema_make)), annotations));
// ---------------------------------------------
// combinators
// ---------------------------------------------
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_union = (...members) => Schema_make(createUnion(members.map(m => m.ast)));
/**
 * @category combinators
 * @since 1.0.0
 */
const nullable = self => Schema_union(_null, self);
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_keyof = schema => Schema_make(AST.keyof(schema.ast));
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_tuple = (...elements) => Schema_make(AST.createTuple(elements.map(schema => AST.createElement(schema.ast, false)), O.none(), true));
/**
 * @category combinators
 * @since 1.0.0
 */
const rest = rest => self => {
  if (AST.isTuple(self.ast)) {
    return Schema_make(AST.appendRestElement(self.ast, rest.ast));
  }
  throw new Error("`rest` is not supported on this schema");
};
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_element = element => self => {
  if (AST.isTuple(self.ast)) {
    return Schema_make(AST.appendElement(self.ast, AST.createElement(element.ast, false)));
  }
  throw new Error("`element` is not supported on this schema");
};
/**
 * @category combinators
 * @since 1.0.0
 */
const optionalElement = element => self => {
  if (AST.isTuple(self.ast)) {
    return Schema_make(AST.appendElement(self.ast, AST.createElement(element.ast, true)));
  }
  throw new Error("`optionalElement` is not supported on this schema");
};
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_array = item => Schema_make(AST.createTuple([], O.some([item.ast]), true));
/**
 * @category combinators
 * @since 1.0.0
 */
const nonEmptyArray = item => Schema_tuple(item).pipe(rest(item));
class PropertySignatureImpl {
  _from;
  _annotations;
  _optional;
  From;
  FromIsOptional;
  To;
  ToIsOptional;
  constructor(_from, _annotations, _optional) {
    this._from = _from;
    this._annotations = _annotations;
    this._optional = _optional;
  }
  optional() {
    if (this._optional) {
      throw new Error(`duplicate optional configuration`);
    }
    return new PropertySignatureImpl(this._from, this._annotations, {
      to: "optional"
    });
  }
  withDefault(value) {
    if (this._optional && this._optional.to !== "optional") {
      throw new Error(`duplicate optional configuration`);
    }
    return new PropertySignatureImpl(this._from, this._annotations, {
      to: "default",
      value
    });
  }
  toOption() {
    if (this._optional && this._optional.to !== "optional") {
      throw new Error(`duplicate optional configuration`);
    }
    return new PropertySignatureImpl(this._from, this._annotations, {
      to: "Option"
    });
  }
}
/**
 * @since 1.0.0
 * @category constructors
 */
const propertySignature = (schema, annotations) => new PropertySignatureImpl(schema.ast, annotations);
/**
 * @since 1.0.0
 */
const optional = (schema, annotations) => propertySignature(schema, annotations).optional();
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_struct = fields => {
  const ownKeys = common_ownKeys(fields);
  const propertySignatures = [];
  const fromPropertySignatures = [];
  const toPropertySignatures = [];
  const propertySignatureTransformations = [];
  for (let i = 0; i < ownKeys.length; i++) {
    const key = ownKeys[i];
    const field = fields[key];
    if (field instanceof PropertySignatureImpl) {
      const optional = field._optional;
      if (optional) {
        switch (optional.to) {
          case "optional":
            {
              propertySignatures.push(createPropertySignature(key, field._from, true, true, field._annotations));
              fromPropertySignatures.push(createPropertySignature(key, field._from, true, true));
              toPropertySignatures.push(createPropertySignature(key, AST_to(field._from), true, true, field._annotations));
              break;
            }
          case "default":
            {
              fromPropertySignatures.push(createPropertySignature(key, field._from, true, true));
              toPropertySignatures.push(createPropertySignature(key, AST_to(field._from), false, true, field._annotations));
              propertySignatureTransformations.push(createPropertySignatureTransformation(key, key, orElse(() => mjs_Option_some(optional.value())), Function_identity));
              break;
            }
          case "Option":
            {
              fromPropertySignatures.push(createPropertySignature(key, field._from, true, true));
              toPropertySignatures.push(createPropertySignature(key, optionFromSelf(Schema_make(AST_to(field._from))).ast, false, true, field._annotations));
              propertySignatureTransformations.push(createPropertySignatureTransformation(key, key, mjs_Option_some, flatten));
              break;
            }
        }
      } else {
        propertySignatures.push(createPropertySignature(key, field._from, false, true, field._annotations));
        fromPropertySignatures.push(createPropertySignature(key, field._from, false, true));
        toPropertySignatures.push(createPropertySignature(key, AST_to(field._from), false, true, field._annotations));
      }
    } else {
      propertySignatures.push(createPropertySignature(key, field.ast, false, true));
      fromPropertySignatures.push(createPropertySignature(key, field.ast, false, true));
      toPropertySignatures.push(createPropertySignature(key, AST_to(field.ast), false, true));
    }
  }
  if (propertySignatureTransformations.length > 0) {
    return Schema_make(createTransformByPropertySignatureTransformations(createTypeLiteral(fromPropertySignatures, []), createTypeLiteral(toPropertySignatures, []), propertySignatureTransformations));
  } else {
    return Schema_make(createTypeLiteral(propertySignatures, []));
  }
};
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_pick = (...keys) => self => {
  const ast = self.ast;
  if (AST.isTransform(ast) && ast.propertySignatureTransformations.length > 0) {
    return Schema_make(AST.createTransformByPropertySignatureTransformations(AST.pick(ast.from, keys), AST.pick(ast.to, keys), ast.propertySignatureTransformations.filter(t => keys.includes(t.to))));
  }
  return Schema_make(AST.pick(ast, keys));
};
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_omit = (...keys) => self => {
  const ast = self.ast;
  if (AST.isTransform(ast) && ast.propertySignatureTransformations.length > 0) {
    return Schema_make(AST.createTransformByPropertySignatureTransformations(AST.omit(ast.from, keys), AST.omit(ast.to, keys), ast.propertySignatureTransformations.filter(t => !keys.includes(t.to))));
  }
  return Schema_make(AST.omit(ast, keys));
};
/**
 * Returns a nominal branded schema by applying a brand to a given schema.
 *
 * ```
 * Schema<A> + B -> Schema<A & Brand<B>>
 * ```
 *
 * @param self - The input schema to be combined with the brand.
 * @param brand - The brand to apply.
 *
 * @example
 * import * as S from "@effect/schema/Schema"
 *
 * const Int = S.number.pipe(S.int(), S.brand("Int"))
 * type Int = S.To<typeof Int> // number & Brand<"Int">
 *
 * @category combinators
 * @since 1.0.0
 */
const brand = (brand, options) => self => {
  const annotations = toAnnotations(options);
  annotations[BrandAnnotationId] = [...getBrands(self.ast), brand];
  const ast = mergeAnnotations(self.ast, annotations);
  const schema = Schema_make(ast);
  const validate = validateSync(schema);
  const validateOption = Parser_validateOption(schema);
  const validateEither = Parser_validateEither(schema);
  const is = Parser_is(schema);
  const out = Object.assign(input => validate(input), {
    [RefinedConstructorsTypeId]: RefinedConstructorsTypeId,
    _id: Schema_TypeId,
    ast,
    option: input => validateOption(input),
    either: input => mapLeft(validateEither(input), e => [{
      meta: input,
      message: formatErrors(e.errors)
    }]),
    refine: input => is(input),
    pipe() {
      return Pipeable_pipeArguments(this, arguments);
    }
  });
  return out;
};
const getBrands = ast => ast.annotations[BrandAnnotationId] || [];
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_partial = self => Schema_make(AST.partial(self.ast));
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_required = self => Schema_make(AST.required(self.ast));
/**
 * @category combinators
 * @since 1.0.0
 */
const record = (key, value) => Schema_make(AST.createRecord(key.ast, value.ast, true));
const intersectUnionMembers = (xs, ys) => {
  return AST.createUnion(xs.flatMap(x => {
    return ys.map(y => {
      if (AST.isTypeLiteral(x)) {
        if (AST.isTypeLiteral(y)) {
          // isTypeLiteral(x) && isTypeLiteral(y)
          return AST.createTypeLiteral(x.propertySignatures.concat(y.propertySignatures), x.indexSignatures.concat(y.indexSignatures));
        } else if (AST.isTransform(y) && y.propertySignatureTransformations.length > 0 && AST.isTypeLiteral(y.from) && AST.isTypeLiteral(y.to)) {
          // isTypeLiteral(x) && isTransform(y)
          const from = AST.createTypeLiteral(x.propertySignatures.concat(y.from.propertySignatures), x.indexSignatures.concat(y.from.indexSignatures));
          const to = AST.createTypeLiteral(AST.getToPropertySignatures(x.propertySignatures).concat(y.to.propertySignatures), AST.getToIndexSignatures(x.indexSignatures).concat(y.to.indexSignatures));
          return AST.createTransformByPropertySignatureTransformations(from, to, y.propertySignatureTransformations);
        }
      } else if (AST.isTransform(x) && x.propertySignatureTransformations.length > 0 && AST.isTypeLiteral(x.from) && AST.isTypeLiteral(x.to)) {
        if (AST.isTypeLiteral(y)) {
          // isTransform(x) && isTypeLiteral(y)
          const from = AST.createTypeLiteral(x.from.propertySignatures.concat(y.propertySignatures), x.from.indexSignatures.concat(y.indexSignatures));
          const to = AST.createTypeLiteral(x.to.propertySignatures.concat(AST.getToPropertySignatures(y.propertySignatures)), x.to.indexSignatures.concat(AST.getToIndexSignatures(y.indexSignatures)));
          return AST.createTransformByPropertySignatureTransformations(from, to, x.propertySignatureTransformations);
        } else if (AST.isTransform(y) && y.propertySignatureTransformations.length > 0 && AST.isTypeLiteral(y.from) && AST.isTypeLiteral(y.to)) {
          // isTransform(x) && isTransform(y)
          const from = AST.createTypeLiteral(x.from.propertySignatures.concat(y.from.propertySignatures), x.from.indexSignatures.concat(y.from.indexSignatures));
          const to = AST.createTypeLiteral(x.to.propertySignatures.concat(y.to.propertySignatures), x.to.indexSignatures.concat(y.to.indexSignatures));
          const propertySignatureTransformations = x.propertySignatureTransformations.concat(y.propertySignatureTransformations);
          return AST.createTransformByPropertySignatureTransformations(from, to, propertySignatureTransformations);
        }
      }
      throw new Error("`extend` can only handle type literals or unions of type literals");
    });
  }));
};
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_extend = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, that) => Schema_make(intersectUnionMembers(AST.isUnion(self.ast) ? self.ast.types : [self.ast], AST.isUnion(that.ast) ? that.ast.types : [that.ast])))));
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_compose = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (ab, cd) => Schema_transform(ab, cd, identity, identity))));
/**
 * @category combinators
 * @since 1.0.0
 */
const lazy = (f, annotations) => Schema_make(AST.createLazy(() => f().ast, annotations));
const toAnnotations = options => {
  const annotations = {};
  if (options?.typeId !== undefined) {
    const typeId = options?.typeId;
    if (typeof typeId === "object") {
      annotations[TypeAnnotationId] = typeId.id;
      annotations[typeId.id] = typeId.params;
    } else {
      annotations[TypeAnnotationId] = typeId;
    }
  }
  if (options?.message !== undefined) {
    annotations[MessageAnnotationId] = options?.message;
  }
  if (options?.identifier !== undefined) {
    annotations[IdentifierAnnotationId] = options?.identifier;
  }
  if (options?.title !== undefined) {
    annotations[TitleAnnotationId] = options?.title;
  }
  if (options?.description !== undefined) {
    annotations[DescriptionAnnotationId] = options?.description;
  }
  if (options?.examples !== undefined) {
    annotations[ExamplesAnnotationId] = options?.examples;
  }
  if (options?.documentation !== undefined) {
    annotations[DocumentationAnnotationId] = options?.documentation;
  }
  if (options?.jsonSchema !== undefined) {
    annotations[JSONSchemaAnnotationId] = options?.jsonSchema;
  }
  if (options?.arbitrary !== undefined) {
    annotations[ArbitraryHookId] = options?.arbitrary;
  }
  return annotations;
};
function Schema_filter(predicate, options) {
  return self => {
    const decode = a => predicate(a) ? success(a) : failure(type(ast, a));
    const ast = createRefinement(self.ast, decode, false, toAnnotations(options));
    return Schema_make(ast);
  };
}
/**
  Create a new `Schema` by transforming the input and output of an existing `Schema`
  using the provided decoding functions.

  @category combinators
  @since 1.0.0
 */
const transformResult = /*#__PURE__*/Function_dual(4, (from, to, decode, encode) => Schema_make(createTransform(from.ast, to.ast, decode, encode)));
/**
  Create a new `Schema` by transforming the input and output of an existing `Schema`
  using the provided mapping functions.

  @category combinators
  @since 1.0.0
*/
const Schema_transform = /*#__PURE__*/Function_dual(4, (from, to, decode, encode) => transformResult(from, to, a => Either_right(decode(a)), b => Either_right(encode(b))));
/**
 * Attaches a property signature with the specified key and value to the schema.
 * This API is useful when you want to add a property to your schema which doesn't describe the shape of the input,
 * but rather maps to another schema, for example when you want to add a discriminant to a simple union.
 *
 * @param self - The input schema.
 * @param key - The name of the property to add to the schema.
 * @param value - The value of the property to add to the schema.
 *
 * @example
 * import * as S from "@effect/schema/Schema"
 * import { pipe } from "@effect/data/Function"
 *
 * const Circle = S.struct({ radius: S.number })
 * const Square = S.struct({ sideLength: S.number })
 * const Shape = S.union(
 *   Circle.pipe(S.attachPropertySignature("kind", "circle")),
 *   Square.pipe(S.attachPropertySignature("kind", "square"))
 * )
 *
 * assert.deepStrictEqual(S.decodeSync(Shape)({ radius: 10 }), {
 *   kind: "circle",
 *   radius: 10
 * })
 *
 * @category combinators
 * @since 1.0.0
 */
const attachPropertySignature = (key, value) => schema => Schema_make(AST.createTransformByPropertySignatureTransformations(schema.ast, to(schema).pipe(Schema_extend(Schema_struct({
  [key]: literal(value)
}))).ast, [AST.createPropertySignatureTransformation(key, key, () => O.some(value), () => O.none())]));
// ---------------------------------------------
// annotations
// ---------------------------------------------
/**
 * @category combinators
 * @since 1.0.0
 */
const annotations = annotations => self => Schema_make(AST.mergeAnnotations(self.ast, annotations));
/**
 * @category annotations
 * @since 1.0.0
 */
const message = message => self => Schema_make(AST.setAnnotation(self.ast, AST.MessageAnnotationId, message));
/**
 * @category annotations
 * @since 1.0.0
 */
const identifier = identifier => self => Schema_make(AST.setAnnotation(self.ast, AST.IdentifierAnnotationId, identifier));
/**
 * @category annotations
 * @since 1.0.0
 */
const title = title => self => Schema_make(AST.setAnnotation(self.ast, AST.TitleAnnotationId, title));
/**
 * @category annotations
 * @since 1.0.0
 */
const description = description => self => Schema_make(AST.setAnnotation(self.ast, AST.DescriptionAnnotationId, description));
/**
 * @category annotations
 * @since 1.0.0
 */
const examples = examples => self => Schema_make(AST.setAnnotation(self.ast, AST.ExamplesAnnotationId, examples));
/**
 * @category annotations
 * @since 1.0.0
 */
const documentation = documentation => self => Schema_make(AST.setAnnotation(self.ast, AST.DocumentationAnnotationId, documentation));
const makeClass = (selfSchema, selfFields, base) => {
  const validator = P.validateSync(selfSchema);
  const fn = function (props) {
    Object.assign(this, validator(props));
  };
  fn.prototype = Object.create(base);
  fn.schemaStruct = function schemaStruct() {
    return selfSchema;
  };
  fn.schema = function schema() {
    return Schema_transform(selfSchema, instanceOf(this), input => Object.assign(Object.create(this.prototype), input), input => ({
      ...input
    }));
  };
  fn.extend = function extend(fields) {
    const newFields = {
      ...selfFields,
      ...fields
    };
    return makeClass(Schema_struct(newFields), newFields, this.prototype);
  };
  fn.transform = function transform(fields, decode, encode) {
    const newFields = {
      ...selfFields,
      ...fields
    };
    return makeClass(transformResult(selfSchema, to(Schema_struct(newFields)), decode, encode), newFields, this.prototype);
  };
  fn.transformFrom = function transform(fields, decode, encode) {
    const newFields = {
      ...selfFields,
      ...fields
    };
    return makeClass(transformResult(Schema_from(selfSchema), Schema_struct(newFields), decode, encode), newFields, this.prototype);
  };
  return fn;
};
/**
 * @category classes
 * @since 1.0.0
 */
const Schema_Class = fields => makeClass(Schema_struct(fields), fields, D.Class.prototype);
// ---------------------------------------------
// data
// ---------------------------------------------
const _undefined = /*#__PURE__*/Schema_make(undefinedKeyword);
const _void = /*#__PURE__*/Schema_make(voidKeyword);
const _null = /*#__PURE__*/(/* unused pure expression or super */ null && (Schema_make( /*#__PURE__*/AST.createLiteral(null))));

/**
 * @category primitives
 * @since 1.0.0
 */
const Schema_never = /*#__PURE__*/Schema_make(neverKeyword);
/**
 * @category primitives
 * @since 1.0.0
 */
const unknown = /*#__PURE__*/Schema_make(unknownKeyword);
/**
 * @category primitives
 * @since 1.0.0
 */
const any = /*#__PURE__*/Schema_make(anyKeyword);
/**
 * @category primitives
 * @since 1.0.0
 */
const Schema_string = /*#__PURE__*/Schema_make(stringKeyword);
/**
 * @category primitives
 * @since 1.0.0
 */
const Schema_number = /*#__PURE__*/Schema_make(numberKeyword);
/**
 * @category primitives
 * @since 1.0.0
 */
const Schema_boolean = /*#__PURE__*/Schema_make(booleanKeyword);
/**
 * @category primitives
 * @since 1.0.0
 */
const Schema_bigint = /*#__PURE__*/Schema_make(bigIntKeyword);
/**
 * @category primitives
 * @since 1.0.0
 */
const Schema_symbol = /*#__PURE__*/Schema_make(symbolKeyword);
/**
 * @category primitives
 * @since 1.0.0
 */
const object = /*#__PURE__*/Schema_make(objectKeyword);
// ---------------------------------------------
// data/Bigint
// ---------------------------------------------
/**
 * @category type id
 * @since 1.0.0
 */
const GreaterThanBigintTypeId = "@effect/schema/GreaterThanBigintTypeId";
/**
 * @category bigint
 * @since 1.0.0
 */
const greaterThanBigint = (min, options) => self => self.pipe(Schema_filter(a => a > min, {
  typeId: GreaterThanBigintTypeId,
  description: `a bigint greater than ${min}n`,
  jsonSchema: {
    exclusiveMinimum: min
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const GreaterThanOrEqualToBigintTypeId = "@effect/schema/GreaterThanOrEqualToBigintTypeId";
/**
 * @category bigint
 * @since 1.0.0
 */
const greaterThanOrEqualToBigint = (min, options) => self => self.pipe(Schema_filter(a => a >= min, {
  typeId: GreaterThanOrEqualToBigintTypeId,
  description: `a bigint greater than or equal to ${min}n`,
  jsonSchema: {
    minimum: min
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const LessThanBigintTypeId = "@effect/schema/LessThanBigintTypeId";
/**
 * @category bigint
 * @since 1.0.0
 */
const lessThanBigint = (max, options) => self => self.pipe(Schema_filter(a => a < max, {
  typeId: LessThanBigintTypeId,
  description: `a bigint less than ${max}n`,
  jsonSchema: {
    exclusiveMaximum: max
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const LessThanOrEqualToBigintTypeId = "@effect/schema/LessThanOrEqualToBigintTypeId";
/**
 * @category bigint
 * @since 1.0.0
 */
const lessThanOrEqualToBigint = (max, options) => self => self.pipe(Schema_filter(a => a <= max, {
  typeId: LessThanOrEqualToBigintTypeId,
  description: `a bigint less than or equal to ${max}n`,
  jsonSchema: {
    maximum: max
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const BetweenBigintTypeId = "@effect/schema/BetweenBigintTypeId";
/**
 * @category bigint
 * @since 1.0.0
 */
const betweenBigint = (min, max, options) => self => self.pipe(Schema_filter(a => a >= min && a <= max, {
  typeId: BetweenBigintTypeId,
  description: `a bigint between ${min}n and ${max}n`,
  jsonSchema: {
    maximum: max,
    minimum: min
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const PositiveBigintTypeId = "@effect/schema/PositiveBigintTypeId";
/**
 * @category bigint
 * @since 1.0.0
 */
const positiveBigint = options => greaterThanBigint(0n, {
  typeId: PositiveBigintTypeId,
  description: "a positive bigint",
  ...options
});
/**
 * @category type id
 * @since 1.0.0
 */
const NegativeBigintTypeId = "@effect/schema/NegativeBigintTypeId";
/**
 * @category bigint
 * @since 1.0.0
 */
const negativeBigint = options => lessThanBigint(0n, {
  typeId: NegativeBigintTypeId,
  description: "a negative bigint",
  ...options
});
/**
 * @category type id
 * @since 1.0.0
 */
const NonNegativeBigintTypeId = "@effect/schema/NonNegativeBigintTypeId";
/**
 * @category bigint
 * @since 1.0.0
 */
const nonNegativeBigint = options => greaterThanOrEqualToBigint(0n, {
  typeId: NonNegativeBigintTypeId,
  description: "a non-negative bigint",
  ...options
});
/**
 * @category type id
 * @since 1.0.0
 */
const NonPositiveBigintTypeId = "@effect/schema/NonPositiveBigintTypeId";
/**
 * @category bigint
 * @since 1.0.0
 */
const nonPositiveBigint = options => lessThanOrEqualToBigint(0n, {
  typeId: NonPositiveBigintTypeId,
  description: "a non-positive bigint",
  ...options
});
/**
 * Clamps a bigint between a minimum and a maximum value.
 *
 * @category bigint
 * @since 1.0.0
 */
const clampBigint = (min, max) => self => Schema_transform(self, self.pipe(to, betweenBigint(min, max)), self => B.clamp(self, min, max),
// this is safe because `self.pipe(to, betweenBigint(min, max))` will check its input anyway
identity);
/**
 * This combinator transforms a `string` into a `bigint` by parsing the string using the `BigInt` function.
 *
 * It returns an error if the value can't be converted (for example when non-numeric characters are provided).
 *
 * @param self - The schema representing the input string
 *
 * @category bigint
 * @since 1.0.0
 */
const bigintFromString = self => {
  const schema = transformResult(self, Schema_bigint, s => {
    if (s.trim() === "") {
      return PR.failure(PR.type(schema.ast, s));
    }
    try {
      return PR.success(BigInt(s));
    } catch (_) {
      return PR.failure(PR.type(schema.ast, s));
    }
  }, n => PR.success(String(n)) // this is safe because `self` will check its input anyway
  );

  return schema;
};
/**
 * This schema transforms a `string` into a `bigint` by parsing the string using the `BigInt` function.
 *
 * It returns an error if the value can't be converted (for example when non-numeric characters are provided).
 *
 * @category bigint
 * @since 1.0.0
 */
const BigintFromString = /*#__PURE__*/(/* unused pure expression or super */ null && (bigintFromString(Schema_string)));
// ---------------------------------------------
// data/Boolean
// ---------------------------------------------
/**
 * Negates a boolean value
 *
 * @category boolean
 * @since 1.0.0
 */
const Schema_not = self => Schema_transform(self, to(self), self => !self, self => !self);
// ---------------------------------------------
// data/Brand
// ---------------------------------------------
/**
 * @category type id
 * @since 1.0.0
 */
const Schema_BrandTypeId = "@effect/schema/BrandTypeId";
/**
 * @category combinators
 * @since 1.0.0
 */
const fromBrand = (constructor, options) => self => {
  const decode = a => E.mapLeft(constructor.either(a), brandErrors => PR.parseError([PR.type(ast, a, brandErrors.map(v => v.message).join(", "))]));
  const ast = AST.createRefinement(self.ast, decode, false, toAnnotations({
    typeId: Schema_BrandTypeId,
    ...options
  }));
  return Schema_make(ast);
};
// ---------------------------------------------
// data/Chunk
// ---------------------------------------------
const chunkArbitrary = item => fc => fc.array(item(fc)).map(C.fromIterable);
const chunkPretty = item => c => `Chunk(${C.toReadonlyArray(c).map(item).join(", ")})`;
/**
 * @category constructors
 * @since 1.0.0
 */
const chunkFromSelf = item => {
  const schema = declare([item], Schema_struct({
    _id: uniqueSymbol(Symbol.for("@effect/data/Chunk")),
    length: Schema_number
  }), item => {
    const parse = P.parseResult(Schema_array(item));
    return (u, options) => !C.isChunk(u) ? PR.failure(PR.type(schema.ast, u)) : PR.map(parse(C.toReadonlyArray(u), options), C.fromIterable);
  }, {
    [AST.IdentifierAnnotationId]: "Chunk",
    [I.PrettyHookId]: chunkPretty,
    [I.ArbitraryHookId]: chunkArbitrary
  });
  return schema;
};
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_chunk = item => Schema_transform(Schema_array(item), to(chunkFromSelf(item)), C.fromIterable, C.toReadonlyArray);
// ---------------------------------------------
// data/Data
// ---------------------------------------------
const toData = a => Array.isArray(a) ? D.array(a) : D.struct(a);
const dataArbitrary = item => fc => item(fc).map(toData);
const dataPretty = item => d => `Data(${item(d)})`;
/**
 * @category combinators
 * @since 1.0.0
 */
const dataFromSelf = item => {
  const schema = declare([item], item, item => {
    const parse = P.parseResult(item);
    return (u, options) => !Equal.isEqual(u) ? PR.failure(PR.type(schema.ast, u)) : PR.map(parse(u, options), toData);
  }, {
    [AST.IdentifierAnnotationId]: "Data",
    [I.PrettyHookId]: dataPretty,
    [I.ArbitraryHookId]: dataArbitrary
  });
  return schema;
};
/**
 * @category combinators
 * @since 1.0.0
 */
const data = item => Schema_transform(item, to(dataFromSelf(item)), toData, a => Array.isArray(a) ? Array.from(a) : Object.assign({}, a));
// ---------------------------------------------
// data/Date
// ---------------------------------------------
const dateArbitrary = () => fc => fc.date();
const datePretty = () => date => `new Date(${JSON.stringify(date)})`;
/**
 * @category Date
 * @since 1.0.0
 */
const DateFromSelf = /*#__PURE__*/declare([], /*#__PURE__*/Schema_struct({}), () => u => !isDate(u) ? failure(type(DateFromSelf.ast, u)) : success(u), {
  [IdentifierAnnotationId]: "Date",
  [PrettyHookId]: datePretty,
  [ArbitraryHookId]: dateArbitrary
});
/**
 * @category type id
 * @since 1.0.0
 */
const ValidDateTypeId = "@effect/schema/ValidDateTypeId";
/**
 * A filter excluding invalid dates (e.g. `new Date("fail")`).
 *
 * @category Date
 * @since 1.0.0
 */
const validDate = options => self => self.pipe(Schema_filter(a => !isNaN(a.getTime()), {
  typeId: ValidDateTypeId,
  description: "a valid Date",
  ...options
}));
/**
 * A schema representing valid dates, e.g. `new Date("fail")` is excluded, even though it is an instance of `Date`.
 *
 * @category Date
 * @since 1.0.0
 */
const ValidDateFromSelf = /*#__PURE__*/(/* unused pure expression or super */ null && (DateFromSelf.pipe( /*#__PURE__*/validDate())));
/**
  A combinator that transforms a `string` into a valid `Date`.

  @category Date
  @since 1.0.0
*/
const dateFromString = self => transformResult(self, ValidDateFromSelf, s => PR.success(new Date(s)), n => PR.success(n.toISOString()) // this is safe because `self` will check its input anyway
);

const _Date = /*#__PURE__*/(/* unused pure expression or super */ null && (dateFromString(Schema_string)));

// ---------------------------------------------
// data/Either
// ---------------------------------------------
const eitherArbitrary = (left, right) => fc => fc.oneof(left(fc).map(E.left), right(fc).map(E.right));
const eitherPretty = (left, right) => E.match({
  onLeft: e => `left(${left(e)})`,
  onRight: a => `right(${right(a)})`
});
const eitherInline = (left, right) => Schema_union(Schema_struct({
  _tag: literal("Left"),
  left
}), Schema_struct({
  _tag: literal("Right"),
  right
}));
/**
 * @category combinators
 * @since 1.0.0
 */
const eitherFromSelf = (left, right) => {
  const schema = declare([left, right], eitherInline(left, right), (left, right) => {
    const parseLeft = P.parseResult(left);
    const parseRight = P.parseResult(right);
    return (u, options) => !E.isEither(u) ? PR.failure(PR.type(schema.ast, u)) : E.isLeft(u) ? PR.map(parseLeft(u.left, options), E.left) : PR.map(parseRight(u.right, options), E.right);
  }, {
    [AST.IdentifierAnnotationId]: "Either",
    [I.PrettyHookId]: eitherPretty,
    [I.ArbitraryHookId]: eitherArbitrary
  });
  return schema;
};
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_either = (left, right) => Schema_transform(eitherInline(left, right), to(eitherFromSelf(left, right)), a => a._tag === "Left" ? E.left(a.left) : E.right(a.right), E.match({
  onLeft: left => ({
    _tag: "Left",
    left
  }),
  onRight: right => ({
    _tag: "Right",
    right
  })
}));
// ---------------------------------------------
// data/Json
// ---------------------------------------------
/**
 * @category type id
 * @since 1.0.0
 */
const JsonNumberTypeId = "@effect/schema/JsonNumberTypeId";
/**
 * The `JsonNumber` is a schema for representing JSON numbers. It ensures that the provided value is a valid
 * number by filtering out `NaN` and `(+/-) Infinity`. This is useful when you want to validate and represent numbers in JSON
 * format.
 *
 * @example
 * import * as S from "@effect/schema/Schema"
 *
 * const is = S.is(S.JsonNumber)
 *
 * assert.deepStrictEqual(is(42), true)
 * assert.deepStrictEqual(is(Number.NaN), false)
 * assert.deepStrictEqual(is(Number.POSITIVE_INFINITY), false)
 * assert.deepStrictEqual(is(Number.NEGATIVE_INFINITY), false)
 *
 * @category constructors
 * @since 1.0.0
 */
const JsonNumber = /*#__PURE__*/Schema_number.pipe( /*#__PURE__*/Schema_filter(n => !isNaN(n) && isFinite(n), {
  typeId: JsonNumberTypeId,
  description: "a JSON number"
}));
// ---------------------------------------------
// data/Number
// ---------------------------------------------
/**
 * @category type id
 * @since 1.0.0
 */
const FiniteTypeId = "@effect/schema/FiniteTypeId";
/**
 * @category number
 * @since 1.0.0
 */
const finite = options => self => self.pipe(Schema_filter(a => Number.isFinite(a), {
  typeId: FiniteTypeId,
  description: "a finite number",
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const GreaterThanTypeId = "@effect/schema/GreaterThanTypeId";
/**
 * @category number
 * @since 1.0.0
 */
const Schema_greaterThan = (min, options) => self => self.pipe(Schema_filter(a => a > min, {
  typeId: GreaterThanTypeId,
  description: `a number greater than ${min}`,
  jsonSchema: {
    exclusiveMinimum: min
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const GreaterThanOrEqualToTypeId = "@effect/schema/GreaterThanOrEqualToTypeId";
/**
 * @category number
 * @since 1.0.0
 */
const Schema_greaterThanOrEqualTo = (min, options) => self => self.pipe(Schema_filter(a => a >= min, {
  typeId: GreaterThanOrEqualToTypeId,
  description: `a number greater than or equal to ${min}`,
  jsonSchema: {
    minimum: min
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const MultipleOfTypeId = "@effect/schema/MultipleOfTypeId";
/**
 * @category number
 * @since 1.0.0
 */
const multipleOf = (divisor, options) => self => self.pipe(Schema_filter(a => N.remainder(a, divisor) === 0, {
  typeId: MultipleOfTypeId,
  description: `a number divisible by ${divisor}`,
  jsonSchema: {
    multipleOf: Math.abs(divisor)
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const IntTypeId = "@effect/schema/IntTypeId";
/**
 * @category number
 * @since 1.0.0
 */
const Schema_int = options => self => self.pipe(Schema_filter(a => Number.isInteger(a), {
  typeId: IntTypeId,
  description: "integer",
  jsonSchema: {
    type: "integer"
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const LessThanTypeId = "@effect/schema/LessThanTypeId";
/**
 * @category number
 * @since 1.0.0
 */
const Schema_lessThan = (max, options) => self => self.pipe(Schema_filter(a => a < max, {
  typeId: LessThanTypeId,
  description: `a number less than ${max}`,
  jsonSchema: {
    exclusiveMaximum: max
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const LessThanOrEqualToTypeId = "@effect/schema/LessThanOrEqualToTypeId";
/**
 * @category number
 * @since 1.0.0
 */
const Schema_lessThanOrEqualTo = (max, options) => self => self.pipe(Schema_filter(a => a <= max, {
  typeId: LessThanOrEqualToTypeId,
  description: `a number less than or equal to ${max}`,
  jsonSchema: {
    maximum: max
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const BetweenTypeId = "@effect/schema/BetweenTypeId";
/**
 * @category number
 * @since 1.0.0
 */
const Schema_between = (min, max, options) => self => self.pipe(Schema_filter(a => a >= min && a <= max, {
  typeId: BetweenTypeId,
  description: `a number between ${min} and ${max}`,
  jsonSchema: {
    maximum: max,
    minimum: min
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const NonNaNTypeId = "@effect/schema/NonNaNTypeId";
/**
 * @category number
 * @since 1.0.0
 */
const nonNaN = options => self => self.pipe(Schema_filter(a => !Number.isNaN(a), {
  typeId: NonNaNTypeId,
  description: "a number NaN excluded",
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const PositiveTypeId = "@effect/schema/PositiveTypeId";
/**
 * @category number
 * @since 1.0.0
 */
const positive = options => Schema_greaterThan(0, {
  typeId: PositiveTypeId,
  description: "a positive number",
  ...options
});
/**
 * @category type id
 * @since 1.0.0
 */
const NegativeTypeId = "@effect/schema/NegativeTypeId";
/**
 * @category number
 * @since 1.0.0
 */
const negative = options => Schema_lessThan(0, {
  typeId: NegativeTypeId,
  description: "a negative number",
  ...options
});
/**
 * @category type id
 * @since 1.0.0
 */
const NonNegativeTypeId = "@effect/schema/NonNegativeTypeId";
/**
 * @category number
 * @since 1.0.0
 */
const nonNegative = options => Schema_greaterThanOrEqualTo(0, {
  typeId: NonNegativeTypeId,
  description: "a non-negative number",
  ...options
});
/**
 * @category type id
 * @since 1.0.0
 */
const NonPositiveTypeId = "@effect/schema/NonPositiveTypeId";
/**
 * @category number
 * @since 1.0.0
 */
const nonPositive = options => Schema_lessThanOrEqualTo(0, {
  typeId: NonPositiveTypeId,
  description: "a non-positive number",
  ...options
});
/**
 * Clamps a number between a minimum and a maximum value.
 *
 * @category number
 * @since 1.0.0
 */
const Schema_clamp = (min, max) => self => Schema_transform(self, self.pipe(to, Schema_between(min, max)), self => N.clamp(self, min, max),
// this is safe because `self.pipe(to, between(min, max))` will check its input anyway
identity);
/**
 * This combinator transforms a `string` into a `number` by parsing the string using the `Number` function.
 *
 * It returns an error if the value can't be converted (for example when non-numeric characters are provided).
 *
 * The following special string values are supported: "NaN", "Infinity", "-Infinity".
 *
 * @param self - The schema representing the input string
 *
 * @category number
 * @since 1.0.0
 */
const numberFromString = self => {
  const schema = transformResult(self, Schema_number, s => {
    if (s === "NaN") {
      return PR.success(NaN);
    }
    if (s === "Infinity") {
      return PR.success(Infinity);
    }
    if (s === "-Infinity") {
      return PR.success(-Infinity);
    }
    if (s.trim() === "") {
      return PR.failure(PR.type(schema.ast, s));
    }
    const n = Number(s);
    return isNaN(n) ? PR.failure(PR.type(schema.ast, s)) : PR.success(n);
  }, n => PR.success(String(n)) // this is safe because `self` will check its input anyway
  );

  return schema;
};
/**
 * This schema transforms a `string` into a `number` by parsing the string using the `Number` function.
 *
 * It returns an error if the value can't be converted (for example when non-numeric characters are provided).
 *
 * The following special string values are supported: "NaN", "Infinity", "-Infinity".
 *
 * @category number
 * @since 1.0.0
 */
const NumberFromString = /*#__PURE__*/(/* unused pure expression or super */ null && (numberFromString(Schema_string)));
// ---------------------------------------------
// data/Object
// ---------------------------------------------
/**
 * @category type id
 * @since 1.0.0
 */
const InstanceOfTypeId = "@effect/schema/InstanceOfTypeId";
/**
 * @category constructors
 * @since 1.0.0
 */
const instanceOf = (constructor, options) => {
  const annotations = toAnnotations(options);
  const schema = declare([], Schema_struct({}), () => input => input instanceof constructor ? PR.success(input) : PR.failure(PR.type(schema.ast, input)), {
    [AST.TypeAnnotationId]: InstanceOfTypeId,
    [InstanceOfTypeId]: {
      constructor
    },
    [AST.DescriptionAnnotationId]: `an instance of ${constructor.name}`,
    ...annotations
  });
  return schema;
};
// ---------------------------------------------
// data/Option
// ---------------------------------------------
const optionArbitrary = value => fc => fc.oneof(fc.constant(Option_none()), value(fc).map(mjs_Option_some));
const optionPretty = value => match({
  onNone: () => "none()",
  onSome: a => `some(${value(a)})`
});
const optionInline = value => Schema_union(Schema_struct({
  _tag: literal("None")
}), Schema_struct({
  _tag: literal("Some"),
  value
}));
/**
 * @category combinators
 * @since 1.0.0
 */
const optionFromSelf = value => {
  const schema = declare([value], optionInline(value), value => {
    const parse = parseResult(value);
    return (u, options) => !Option_isOption(u) ? failure(type(schema.ast, u)) : Option_isNone(u) ? success(Option_none()) : ParseResult_map(parse(u.value, options), mjs_Option_some);
  }, {
    [IdentifierAnnotationId]: "Option",
    [PrettyHookId]: optionPretty,
    [ArbitraryHookId]: optionArbitrary
  });
  return schema;
};
/**
 * @category combinators
 * @since 1.0.0
 */
const Schema_option = value => Schema_transform(optionInline(value), to(optionFromSelf(value)), a => a._tag === "None" ? O.none() : O.some(a.value), O.match({
  onNone: () => ({
    _tag: "None"
  }),
  onSome: value => ({
    _tag: "Some",
    value
  })
}));
/**
 * @category option
 * @since 1.0.0
 */
const optionFromNullable = value => Schema_transform(nullable(value), to(optionFromSelf(value)), O.fromNullable, O.getOrNull);
// ---------------------------------------------
// data/ReadonlyArray
// ---------------------------------------------
/**
 * @category type id
 * @since 1.0.0
 */
const MinItemsTypeId = "@effect/schema/MinItemsTypeId";
/**
 * @category array
 * @since 1.0.0
 */
const minItems = (n, options) => self => self.pipe(Schema_filter(a => a.length >= n, {
  typeId: MinItemsTypeId,
  description: `an array of at least ${n} items`,
  jsonSchema: {
    minItems: n
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const MaxItemsTypeId = "@effect/schema/MaxItemsTypeId";
/**
 * @category array
 * @since 1.0.0
 */
const maxItems = (n, options) => self => self.pipe(Schema_filter(a => a.length <= n, {
  typeId: MaxItemsTypeId,
  description: `an array of at most ${n} items`,
  jsonSchema: {
    maxItems: n
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const ItemsCountTypeId = "@effect/schema/ItemsCountTypeId";
/**
 * @category array
 * @since 1.0.0
 */
const itemsCount = (n, options) => self => self.pipe(Schema_filter(a => a.length === n, {
  typeId: ItemsCountTypeId,
  description: `an array of exactly ${n} items`,
  jsonSchema: {
    minItems: n,
    maxItems: n
  },
  ...options
}));
// ---------------------------------------------
// data/ReadonlyMap
// ---------------------------------------------
const isMap = u => u instanceof Map;
const readonlyMapArbitrary = (key, value) => fc => fc.array(fc.tuple(key(fc), value(fc))).map(as => new Map(as));
const readonlyMapPretty = (key, value) => map => `new Map([${Array.from(map.entries()).map(([k, v]) => `[${key(k)}, ${value(v)}]`).join(", ")}])`;
/**
 * @category constructors
 * @since 1.0.0
 */
const readonlyMapFromSelf = (key, value) => {
  const schema = declare([key, value], Schema_struct({
    size: Schema_number
  }), (key, value) => {
    const parse = P.parseResult(Schema_array(Schema_tuple(key, value)));
    return (u, options) => !isMap(u) ? PR.failure(PR.type(schema.ast, u)) : PR.map(parse(Array.from(u.entries()), options), as => new Map(as));
  }, {
    [AST.IdentifierAnnotationId]: "ReadonlyMap",
    [I.PrettyHookId]: readonlyMapPretty,
    [I.ArbitraryHookId]: readonlyMapArbitrary
  });
  return schema;
};
/**
 * @category combinators
 * @since 1.0.0
 */
const readonlyMap = (key, value) => Schema_transform(Schema_array(Schema_tuple(key, value)), to(readonlyMapFromSelf(key, value)), as => new Map(as), map => Array.from(map.entries()));
// ---------------------------------------------
// data/ReadonlySet
// ---------------------------------------------
const isSet = u => u instanceof Set;
const readonlySetArbitrary = item => fc => fc.array(item(fc)).map(as => new Set(as));
const readonlySetPretty = item => set => `new Set([${Array.from(set.values()).map(a => item(a)).join(", ")}])`;
/**
 * @category constructors
 * @since 1.0.0
 */
const readonlySetFromSelf = item => {
  const schema = declare([item], Schema_struct({
    size: Schema_number
  }), item => {
    const parse = P.parseResult(Schema_array(item));
    return (u, options) => !isSet(u) ? PR.failure(PR.type(schema.ast, u)) : PR.map(parse(Array.from(u.values()), options), as => new Set(as));
  }, {
    [AST.IdentifierAnnotationId]: "ReadonlySet",
    [I.PrettyHookId]: readonlySetPretty,
    [I.ArbitraryHookId]: readonlySetArbitrary
  });
  return schema;
};
/**
 * @category combinators
 * @since 1.0.0
 */
const readonlySet = item => Schema_transform(Schema_array(item), to(readonlySetFromSelf(item)), as => new Set(as), set => Array.from(set));
// ---------------------------------------------
// data/String
// ---------------------------------------------
/**
 * @category type id
 * @since 1.0.0
 */
const TrimmedTypeId = "@effect/schema/TrimmedTypeId";
/**
 * Verifies that a string contains no leading or trailing whitespaces.
 *
 * Note. This combinator does not make any transformations, it only validates.
 * If what you were looking for was a combinator to trim strings, then check out the `trim` combinator.
 *
 * @category string
 * @since 1.0.0
 */
const trimmed = options => self => self.pipe(Schema_filter(a => a === a.trim(), {
  typeId: TrimmedTypeId,
  description: "a string with no leading or trailing whitespace",
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const MaxLengthTypeId = "@effect/schema/MaxLengthTypeId";
/**
 * @category string
 * @since 1.0.0
 */
const maxLength = (maxLength, options) => self => self.pipe(Schema_filter(a => a.length <= maxLength, {
  typeId: MaxLengthTypeId,
  description: `a string at most ${maxLength} character(s) long`,
  jsonSchema: {
    maxLength
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const MinLengthTypeId = "@effect/schema/MinLengthTypeId";
/**
 * @category string
 * @since 1.0.0
 */
const minLength = (minLength, options) => self => self.pipe(Schema_filter(a => a.length >= minLength, {
  typeId: MinLengthTypeId,
  description: `a string at least ${minLength} character(s) long`,
  jsonSchema: {
    minLength
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const PatternTypeId = "@effect/schema/PatternTypeId";
/**
 * @category string
 * @since 1.0.0
 */
const pattern = (regex, options) => self => {
  const pattern = regex.source;
  return self.pipe(Schema_filter(a => {
    // The following line ensures that `lastIndex` is reset to `0` in case the user has specified the `g` flag
    regex.lastIndex = 0;
    return regex.test(a);
  }, {
    typeId: {
      id: PatternTypeId,
      params: {
        regex
      }
    },
    description: `a string matching the pattern ${pattern}`,
    jsonSchema: {
      pattern
    },
    arbitrary: () => fc => fc.stringMatching(regex),
    ...options
  }));
};
/**
 * @category type id
 * @since 1.0.0
 */
const StartsWithTypeId = "@effect/schema/StartsWithTypeId";
/**
 * @category string
 * @since 1.0.0
 */
const startsWith = (startsWith, options) => self => self.pipe(Schema_filter(a => a.startsWith(startsWith), {
  typeId: {
    id: StartsWithTypeId,
    params: {
      startsWith
    }
  },
  description: `a string starting with ${JSON.stringify(startsWith)}`,
  jsonSchema: {
    pattern: `^${startsWith}`
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const EndsWithTypeId = "@effect/schema/EndsWithTypeId";
/**
 * @category string
 * @since 1.0.0
 */
const endsWith = (endsWith, options) => self => self.pipe(Schema_filter(a => a.endsWith(endsWith), {
  typeId: {
    id: EndsWithTypeId,
    params: {
      endsWith
    }
  },
  description: `a string ending with ${JSON.stringify(endsWith)}`,
  jsonSchema: {
    pattern: `^.*${endsWith}$`
  },
  ...options
}));
/**
 * @category type id
 * @since 1.0.0
 */
const IncludesTypeId = "@effect/schema/IncludesTypeId";
/**
 * @category string
 * @since 1.0.0
 */
const Schema_includes = (searchString, options) => self => self.pipe(Schema_filter(a => a.includes(searchString), {
  typeId: {
    id: IncludesTypeId,
    params: {
      includes: searchString
    }
  },
  description: `a string including ${JSON.stringify(searchString)}`,
  jsonSchema: {
    pattern: `.*${searchString}.*`
  },
  ...options
}));
/**
 * This combinator allows removing whitespaces from the beginning and end of a string.
 *
 * @category string
 * @since 1.0.0
 */
const trim = self => Schema_transform(self, to(self).pipe(trimmed()), s => s.trim(),
// this is safe because `pipe(to(self), trimmed())` will check its input anyway
Function_identity);
/**
 * This schema allows removing whitespaces from the beginning and end of a string.
 *
 * @category string
 * @since 1.0.0
 */
const Trim = /*#__PURE__*/(/* unused pure expression or super */ null && (trim(Schema_string)));
/**
 * This combinator allows splitting a string into an array of strings.
 *
 * @category string
 * @since 1.0.0
 */
const Schema_split = /*#__PURE__*/(/* unused pure expression or super */ null && (dual(2, (self, separator) => Schema_transform(self, Schema_array(Schema_string), S.split(separator), RA.join(separator)))));
/**
 * @category type id
 * @since 1.0.0
 */
const UUIDTypeId = "@effect/schema/UUIDTypeId";
const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/i;
/**
 * @category constructors
 * @since 1.0.0
 */
const UUID = /*#__PURE__*/Schema_string.pipe( /*#__PURE__*/pattern(uuidRegex, {
  typeId: UUIDTypeId,
  title: "UUID",
  arbitrary: () => fc => fc.uuid()
}));
/**
 * @category type id
 * @since 1.0.0
 */
const ULIDTypeId = "@effect/schema/ULIDTypeId";
const ulidRegex = /^[0-7][0-9A-HJKMNP-TV-Z]{25}$/i;
/**
 * @category constructors
 * @since 1.0.0
 */
const ULID = /*#__PURE__*/Schema_string.pipe( /*#__PURE__*/pattern(ulidRegex, {
  typeId: ULIDTypeId,
  title: "ULID",
  arbitrary: () => fc => fc.ulid()
}));
/**
 * @category string
 * @since 1.0.0
 */
const Schema_length = (length, options) => self => minLength(length, options)(maxLength(length)(self));
/**
 * @category string
 * @since 1.0.0
 */
const nonEmpty = options => minLength(1, options);
/**
 * The `parseJson` combinator offers a method to convert JSON strings into the `unknown` type using the underlying
 * functionality of `JSON.parse`. It also employs `JSON.stringify` for encoding.
 *
 * @category string
 * @since 1.0.0
 */
const parseJson = (self, options) => {
  const schema = transformResult(self, unknown, s => {
    try {
      return PR.success(JSON.parse(s, options?.reviver));
    } catch (e) {
      return PR.failure(PR.type(schema.ast, s, e.message));
    }
  }, u => {
    try {
      return PR.success(JSON.stringify(u, options?.replacer, options?.space)); // this is safe because `self` will check its input anyway
    } catch (e) {
      return PR.failure(PR.type(schema.ast, u, e.message));
    }
  });
  return schema;
};
/**
 * The `ParseJson` schema offers a method to convert JSON strings into the `unknown` type using the underlying
 * functionality of `JSON.parse`. It also employs `JSON.stringify` for encoding.
 *
 * @category string
 * @since 1.0.0
 */
const ParseJson = /*#__PURE__*/(/* unused pure expression or super */ null && (parseJson(Schema_string)));
//# sourceMappingURL=Schema.mjs.map
;// CONCATENATED MODULE: ./src/envvars.ts



const NESBrand = Symbol.for("NonEmptyString");
const NESSchema = Function_pipe(Schema_string, trim, nonEmpty(), brand(NESBrand));
const NES = {
    unsafe: (s) => s,
    fromString: (s) => parseOption(NESSchema)(s),
    unsafeFromString: (s) => parseSync(NESSchema)(s),
};
const HttpsUrlBrand = Symbol.for("HttpsUrl");
const HttpsUrlSchema = Function_pipe(Schema_string, trim, startsWith("https://"), brand(HttpsUrlBrand));
const HttpsUrl = {
    unsafeFromString: (s) => parseSync(HttpsUrlSchema)(s),
};
const Ref = taggedEnum();
const Ref_ = {
    unsafeMake(refType, value) {
        switch (refType.toLowerCase()) {
            case "branch":
                return Ref("Branch")({ value: value });
            case "tag":
                return Ref("Tag")({ value: value });
            default:
                throw new Error(`Invalid ref type: ${refType}`);
        }
    },
};
const RunnerOs = {
    unsafeFromString: (s) => {
        switch (s.toLowerCase()) {
            case "linux":
                return "linux";
            case "windows":
                return "windows";
            case "macos":
                return "macos";
            default:
                throw new Error(`Invalid runner OS: ${s}`);
        }
    },
};
const RunnerArch = {
    unsafeFromString: (s) => {
        switch (s.toLowerCase()) {
            case "x86":
                return "x86";
            case "x64":
                return "x64";
            case "arm":
                return "arm";
            case "arm64":
                return "arm64";
            default:
                throw new Error(`Invalid runner arch: ${s}`);
        }
    },
};
// -- Envvars --
//
// Documentation of GitHub envvars: https://docs.github.com/en/actions/learn-github-actions/variables
//
const ZEKLIN_SERVER_URL = NES.unsafeFromString(process.env["ZEKLIN_SERVER_URL"] ?? "https://api.zeklin.io");
/**
 * A unique number for each workflow run within a repository.
 * This number does not change if you re-run the workflow run.
 * For example, 1658821493.
 */
const GITHUB_RUN_ID = Number(process.env.GITHUB_RUN_ID);
/**
 * A unique number for each run of a particular workflow in a repository.
 * This number begins at 1 for the workflow's first run, and increments with each new run.
 * This number does not change if you re-run the workflow run.
 * For example, 3.
 */
const GITHUB_RUN_NUMBER = Number(process.env.GITHUB_RUN_NUMBER);
/**
 * [Not documented]
 */
const RUNNER_NAME = NES.unsafeFromString(process.env.RUNNER_NAME);
/**
 * A unique number for each attempt of a particular workflow run in a repository.
 * This number begins at 1 for the workflow run's first attempt, and increments with each re-run.
 * For example, 3.
 */
const GITHUB_RUN_ATTEMPT = Number(process.env.GITHUB_RUN_ATTEMPT);
/**
 * The owner and repository name.
 * For example, octocat/Hello-World.
 */
const GITHUB_REPOSITORY = NES.unsafeFromString(process.env.GITHUB_REPOSITORY);
/**
 * The ID of the repository.
 * For example, 123456789.
 * Note that this is different from the repository name.
 */
const GITHUB_REPOSITORY_ID = Number(process.env.GITHUB_REPOSITORY_ID);
/**
 * The repository owner's account ID.
 * For example, 1234567.
 * Note that this is different from the owner's name.
 */
const GITHUB_REPOSITORY_OWNER_ID = Number(process.env.GITHUB_REPOSITORY_OWNER_ID);
/**
 * The commit SHA that triggered the workflow.
 * The value of this commit SHA depends on the event that triggered the workflow.
 * For more information, see [Events that trigger workflows](https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows).
 * For example, ffac537e6cbbf934b08745a378932722df287a53.
 */
const GITHUB_SHA = NES.unsafeFromString(process.env.GITHUB_SHA);
/**
 * The short ref name of the branch or tag that triggered the workflow run.
 * This value matches the branch or tag name shown on GitHub.
 * For example, feature-branch-1.
 */
const GITHUB_REF_NAME = NES.unsafeFromString(process.env.GITHUB_REF_NAME);
/**
 * The type of ref that triggered the workflow run.
 * Valid values are "branch" or "tag".
 */
const GITHUB_REF_TYPE = NES.unsafeFromString(process.env.GITHUB_REF_TYPE);
/**
 * [Not documented]
 *
 * In GitHub, the value seems to be "github-hosted"
 * TBC: In self-hosted runners, the value is probably something like to be "self-hosted"
 */
const RUNNER_ENVIRONMENT = NES.unsafeFromString(process.env.RUNNER_ENVIRONMENT);
/**
 * The operating system of the runner executing the job.
 * Possible values are Linux, Windows, or macOS.
 * For example, Windows
 */
const RUNNER_OS = RunnerOs.unsafeFromString(process.env.RUNNER_OS);
/**
 * The architecture of the runner executing the job.
 * Possible values are X86, X64, ARM, or ARM64.
 */
const RUNNER_ARCH = RunnerArch.unsafeFromString(process.env.RUNNER_ARCH);
/**
 * Returns the API URL.
 * For example: https://api.github.com.
 */
const GITHUB_API_URL = HttpsUrl.unsafeFromString(process.env.GITHUB_API_URL);
/**
 * The name of the person or app that initiated the workflow.
 * For example, octocat.
 */
const GITHUB_ACTOR = NES.unsafeFromString(process.env.GITHUB_ACTOR);
/**
 * The account ID of the person or app that triggered the initial workflow run.
 * For example, 1234567. Note that this is different from the actor username.
 */
const GITHUB_ACTOR_ID = Number(process.env.GITHUB_ACTOR_ID);
/**
 * The URL of the GitHub server.
 * For example: https://github.com.
 */
const GITHUB_SERVER_URL = HttpsUrl.unsafeFromString(process.env.GITHUB_SERVER_URL);
/**
 * Comes from https://docs.github.com/en/actions/learn-github-actions/variables
 */
const WORKFLOW_URL = HttpsUrl.unsafeFromString(`${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}`);
const REF = Ref_.unsafeMake(GITHUB_REF_TYPE, GITHUB_REF_NAME);
const debugVariables = () => {
    utils_logDebug(`ZEKLIN_SERVER_URL: ${ZEKLIN_SERVER_URL}`);
    utils_logDebug(`GITHUB_RUN_ID: ${GITHUB_RUN_ID}`);
    utils_logDebug(`GITHUB_RUN_NUMBER: ${GITHUB_RUN_NUMBER}`);
    utils_logDebug(`GITHUB_RUNNER_NAME: ${RUNNER_NAME}`);
    utils_logDebug(`GITHUB_RUN_ATTEMPT: ${GITHUB_RUN_ATTEMPT}`);
    utils_logDebug(`GITHUB_REPOSITORY: ${GITHUB_REPOSITORY}`);
    utils_logDebug(`GITHUB_REPOSITORY_ID: ${GITHUB_REPOSITORY_ID}`);
    utils_logDebug(`GITHUB_REPOSITORY_OWNER_ID: ${GITHUB_REPOSITORY_OWNER_ID}`);
    utils_logDebug(`GITHUB_SHA: ${GITHUB_SHA}`);
    utils_logDebug(`GITHUB_REF_NAME: ${GITHUB_REF_NAME}`);
    utils_logDebug(`GITHUB_REF_TYPE: ${GITHUB_REF_TYPE}`);
    utils_logDebug(`RUNNER_ENVIRONMENT: ${RUNNER_ENVIRONMENT}`);
    utils_logDebug(`RUNNER_OS: ${RUNNER_OS}`);
    utils_logDebug(`RUNNER_ARCH: ${RUNNER_ARCH}`);
    utils_logDebug(`GITHUB_API_URL: ${GITHUB_API_URL}`);
    utils_logDebug(`GITHUB_ACTOR: ${GITHUB_ACTOR}`);
    utils_logDebug(`GITHUB_ACTOR_ID: ${GITHUB_ACTOR_ID}`);
    utils_logDebug(`GITHUB_SERVER_URL: ${GITHUB_SERVER_URL}`);
    utils_logDebug(`WORKFLOW_URL: ${WORKFLOW_URL}`);
    utils_logDebug(`REF: ${REF}`);
};

// EXTERNAL MODULE: ./node_modules/.pnpm/@actions+exec@1.1.1/node_modules/@actions/exec/lib/exec.js
var exec = __nccwpck_require__(1757);
;// CONCATENATED MODULE: external "fs/promises"
const promises_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("fs/promises");
// EXTERNAL MODULE: external "path"
var external_path_ = __nccwpck_require__(1017);
;// CONCATENATED MODULE: external "node:http"
const external_node_http_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:http");
;// CONCATENATED MODULE: external "node:https"
const external_node_https_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:https");
;// CONCATENATED MODULE: external "node:zlib"
const external_node_zlib_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:zlib");
;// CONCATENATED MODULE: external "node:stream"
const external_node_stream_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:stream");
;// CONCATENATED MODULE: external "node:buffer"
const external_node_buffer_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:buffer");
;// CONCATENATED MODULE: ./node_modules/.pnpm/data-uri-to-buffer@4.0.1/node_modules/data-uri-to-buffer/dist/index.js
/**
 * Returns a `Buffer` instance from the given data URI `uri`.
 *
 * @param {String} uri Data URI to turn into a Buffer instance
 * @returns {Buffer} Buffer instance from Data URI
 * @api public
 */
function dataUriToBuffer(uri) {
    if (!/^data:/i.test(uri)) {
        throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
    }
    // strip newlines
    uri = uri.replace(/\r?\n/g, '');
    // split the URI up into the "metadata" and the "data" portions
    const firstComma = uri.indexOf(',');
    if (firstComma === -1 || firstComma <= 4) {
        throw new TypeError('malformed data: URI');
    }
    // remove the "data:" scheme and parse the metadata
    const meta = uri.substring(5, firstComma).split(';');
    let charset = '';
    let base64 = false;
    const type = meta[0] || 'text/plain';
    let typeFull = type;
    for (let i = 1; i < meta.length; i++) {
        if (meta[i] === 'base64') {
            base64 = true;
        }
        else if (meta[i]) {
            typeFull += `;${meta[i]}`;
            if (meta[i].indexOf('charset=') === 0) {
                charset = meta[i].substring(8);
            }
        }
    }
    // defaults to US-ASCII only if type is not provided
    if (!meta[0] && !charset.length) {
        typeFull += ';charset=US-ASCII';
        charset = 'US-ASCII';
    }
    // get the encoded data portion and decode URI-encoded chars
    const encoding = base64 ? 'base64' : 'ascii';
    const data = unescape(uri.substring(firstComma + 1));
    const buffer = Buffer.from(data, encoding);
    // set `.type` and `.typeFull` properties to MIME type
    buffer.type = type;
    buffer.typeFull = typeFull;
    // set the `.charset` property
    buffer.charset = charset;
    return buffer;
}
/* harmony default export */ const dist = (dataUriToBuffer);
//# sourceMappingURL=index.js.map
;// CONCATENATED MODULE: external "node:util"
const external_node_util_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:util");
// EXTERNAL MODULE: ./node_modules/.pnpm/fetch-blob@3.2.0/node_modules/fetch-blob/index.js
var fetch_blob = __nccwpck_require__(8967);
// EXTERNAL MODULE: ./node_modules/.pnpm/formdata-polyfill@4.0.10/node_modules/formdata-polyfill/esm.min.js
var esm_min = __nccwpck_require__(2000);
;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/errors/base.js
class FetchBaseError extends Error {
	constructor(message, type) {
		super(message);
		// Hide custom error implementation details from end-users
		Error.captureStackTrace(this, this.constructor);

		this.type = type;
	}

	get name() {
		return this.constructor.name;
	}

	get [Symbol.toStringTag]() {
		return this.constructor.name;
	}
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/errors/fetch-error.js



/**
 * @typedef {{ address?: string, code: string, dest?: string, errno: number, info?: object, message: string, path?: string, port?: number, syscall: string}} SystemError
*/

/**
 * FetchError interface for operational errors
 */
class FetchError extends FetchBaseError {
	/**
	 * @param  {string} message -      Error message for human
	 * @param  {string} [type] -        Error type for machine
	 * @param  {SystemError} [systemError] - For Node.js system error
	 */
	constructor(message, type, systemError) {
		super(message, type);
		// When err.type is `system`, err.erroredSysCall contains system error and err.code contains system error code
		if (systemError) {
			// eslint-disable-next-line no-multi-assign
			this.code = this.errno = systemError.code;
			this.erroredSysCall = systemError.syscall;
		}
	}
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/utils/is.js
/**
 * Is.js
 *
 * Object type checks.
 */

const NAME = Symbol.toStringTag;

/**
 * Check if `obj` is a URLSearchParams object
 * ref: https://github.com/node-fetch/node-fetch/issues/296#issuecomment-307598143
 * @param {*} object - Object to check for
 * @return {boolean}
 */
const isURLSearchParameters = object => {
	return (
		typeof object === 'object' &&
		typeof object.append === 'function' &&
		typeof object.delete === 'function' &&
		typeof object.get === 'function' &&
		typeof object.getAll === 'function' &&
		typeof object.has === 'function' &&
		typeof object.set === 'function' &&
		typeof object.sort === 'function' &&
		object[NAME] === 'URLSearchParams'
	);
};

/**
 * Check if `object` is a W3C `Blob` object (which `File` inherits from)
 * @param {*} object - Object to check for
 * @return {boolean}
 */
const isBlob = object => {
	return (
		object &&
		typeof object === 'object' &&
		typeof object.arrayBuffer === 'function' &&
		typeof object.type === 'string' &&
		typeof object.stream === 'function' &&
		typeof object.constructor === 'function' &&
		/^(Blob|File)$/.test(object[NAME])
	);
};

/**
 * Check if `obj` is an instance of AbortSignal.
 * @param {*} object - Object to check for
 * @return {boolean}
 */
const isAbortSignal = object => {
	return (
		typeof object === 'object' && (
			object[NAME] === 'AbortSignal' ||
			object[NAME] === 'EventTarget'
		)
	);
};

/**
 * isDomainOrSubdomain reports whether sub is a subdomain (or exact match) of
 * the parent domain.
 *
 * Both domains must already be in canonical form.
 * @param {string|URL} original
 * @param {string|URL} destination
 */
const isDomainOrSubdomain = (destination, original) => {
	const orig = new URL(original).hostname;
	const dest = new URL(destination).hostname;

	return orig === dest || orig.endsWith(`.${dest}`);
};

/**
 * isSameProtocol reports whether the two provided URLs use the same protocol.
 *
 * Both domains must already be in canonical form.
 * @param {string|URL} original
 * @param {string|URL} destination
 */
const isSameProtocol = (destination, original) => {
	const orig = new URL(original).protocol;
	const dest = new URL(destination).protocol;

	return orig === dest;
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/body.js

/**
 * Body.js
 *
 * Body interface provides common methods for Request and Response
 */












const pipeline = (0,external_node_util_namespaceObject.promisify)(external_node_stream_namespaceObject.pipeline);
const INTERNALS = Symbol('Body internals');

/**
 * Body mixin
 *
 * Ref: https://fetch.spec.whatwg.org/#body
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Body {
	constructor(body, {
		size = 0
	} = {}) {
		let boundary = null;

		if (body === null) {
			// Body is undefined or null
			body = null;
		} else if (isURLSearchParameters(body)) {
			// Body is a URLSearchParams
			body = external_node_buffer_namespaceObject.Buffer.from(body.toString());
		} else if (isBlob(body)) {
			// Body is blob
		} else if (external_node_buffer_namespaceObject.Buffer.isBuffer(body)) {
			// Body is Buffer
		} else if (external_node_util_namespaceObject.types.isAnyArrayBuffer(body)) {
			// Body is ArrayBuffer
			body = external_node_buffer_namespaceObject.Buffer.from(body);
		} else if (ArrayBuffer.isView(body)) {
			// Body is ArrayBufferView
			body = external_node_buffer_namespaceObject.Buffer.from(body.buffer, body.byteOffset, body.byteLength);
		} else if (body instanceof external_node_stream_namespaceObject) {
			// Body is stream
		} else if (body instanceof esm_min/* FormData */.Ct) {
			// Body is FormData
			body = (0,esm_min/* formDataToBlob */.au)(body);
			boundary = body.type.split('=')[1];
		} else {
			// None of the above
			// coerce to string then buffer
			body = external_node_buffer_namespaceObject.Buffer.from(String(body));
		}

		let stream = body;

		if (external_node_buffer_namespaceObject.Buffer.isBuffer(body)) {
			stream = external_node_stream_namespaceObject.Readable.from(body);
		} else if (isBlob(body)) {
			stream = external_node_stream_namespaceObject.Readable.from(body.stream());
		}

		this[INTERNALS] = {
			body,
			stream,
			boundary,
			disturbed: false,
			error: null
		};
		this.size = size;

		if (body instanceof external_node_stream_namespaceObject) {
			body.on('error', error_ => {
				const error = error_ instanceof FetchBaseError ?
					error_ :
					new FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, 'system', error_);
				this[INTERNALS].error = error;
			});
		}
	}

	get body() {
		return this[INTERNALS].stream;
	}

	get bodyUsed() {
		return this[INTERNALS].disturbed;
	}

	/**
	 * Decode response as ArrayBuffer
	 *
	 * @return  Promise
	 */
	async arrayBuffer() {
		const {buffer, byteOffset, byteLength} = await consumeBody(this);
		return buffer.slice(byteOffset, byteOffset + byteLength);
	}

	async formData() {
		const ct = this.headers.get('content-type');

		if (ct.startsWith('application/x-www-form-urlencoded')) {
			const formData = new esm_min/* FormData */.Ct();
			const parameters = new URLSearchParams(await this.text());

			for (const [name, value] of parameters) {
				formData.append(name, value);
			}

			return formData;
		}

		const {toFormData} = await __nccwpck_require__.e(/* import() */ 795).then(__nccwpck_require__.bind(__nccwpck_require__, 795));
		return toFormData(this.body, ct);
	}

	/**
	 * Return raw response as Blob
	 *
	 * @return Promise
	 */
	async blob() {
		const ct = (this.headers && this.headers.get('content-type')) || (this[INTERNALS].body && this[INTERNALS].body.type) || '';
		const buf = await this.arrayBuffer();

		return new fetch_blob/* default */.Z([buf], {
			type: ct
		});
	}

	/**
	 * Decode response as json
	 *
	 * @return  Promise
	 */
	async json() {
		const text = await this.text();
		return JSON.parse(text);
	}

	/**
	 * Decode response as text
	 *
	 * @return  Promise
	 */
	async text() {
		const buffer = await consumeBody(this);
		return new TextDecoder().decode(buffer);
	}

	/**
	 * Decode response as buffer (non-spec api)
	 *
	 * @return  Promise
	 */
	buffer() {
		return consumeBody(this);
	}
}

Body.prototype.buffer = (0,external_node_util_namespaceObject.deprecate)(Body.prototype.buffer, 'Please use \'response.arrayBuffer()\' instead of \'response.buffer()\'', 'node-fetch#buffer');

// In browsers, all properties are enumerable.
Object.defineProperties(Body.prototype, {
	body: {enumerable: true},
	bodyUsed: {enumerable: true},
	arrayBuffer: {enumerable: true},
	blob: {enumerable: true},
	json: {enumerable: true},
	text: {enumerable: true},
	data: {get: (0,external_node_util_namespaceObject.deprecate)(() => {},
		'data doesn\'t exist, use json(), text(), arrayBuffer(), or body instead',
		'https://github.com/node-fetch/node-fetch/issues/1000 (response)')}
});

/**
 * Consume and convert an entire Body to a Buffer.
 *
 * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body
 *
 * @return Promise
 */
async function consumeBody(data) {
	if (data[INTERNALS].disturbed) {
		throw new TypeError(`body used already for: ${data.url}`);
	}

	data[INTERNALS].disturbed = true;

	if (data[INTERNALS].error) {
		throw data[INTERNALS].error;
	}

	const {body} = data;

	// Body is null
	if (body === null) {
		return external_node_buffer_namespaceObject.Buffer.alloc(0);
	}

	/* c8 ignore next 3 */
	if (!(body instanceof external_node_stream_namespaceObject)) {
		return external_node_buffer_namespaceObject.Buffer.alloc(0);
	}

	// Body is stream
	// get ready to actually consume the body
	const accum = [];
	let accumBytes = 0;

	try {
		for await (const chunk of body) {
			if (data.size > 0 && accumBytes + chunk.length > data.size) {
				const error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, 'max-size');
				body.destroy(error);
				throw error;
			}

			accumBytes += chunk.length;
			accum.push(chunk);
		}
	} catch (error) {
		const error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, 'system', error);
		throw error_;
	}

	if (body.readableEnded === true || body._readableState.ended === true) {
		try {
			if (accum.every(c => typeof c === 'string')) {
				return external_node_buffer_namespaceObject.Buffer.from(accum.join(''));
			}

			return external_node_buffer_namespaceObject.Buffer.concat(accum, accumBytes);
		} catch (error) {
			throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, 'system', error);
		}
	} else {
		throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);
	}
}

/**
 * Clone body given Res/Req instance
 *
 * @param   Mixed   instance       Response or Request instance
 * @param   String  highWaterMark  highWaterMark for both PassThrough body streams
 * @return  Mixed
 */
const clone = (instance, highWaterMark) => {
	let p1;
	let p2;
	let {body} = instance[INTERNALS];

	// Don't allow cloning a used body
	if (instance.bodyUsed) {
		throw new Error('cannot clone body after it is used');
	}

	// Check that body is a stream and not form-data object
	// note: we can't clone the form-data object without having it as a dependency
	if ((body instanceof external_node_stream_namespaceObject) && (typeof body.getBoundary !== 'function')) {
		// Tee instance body
		p1 = new external_node_stream_namespaceObject.PassThrough({highWaterMark});
		p2 = new external_node_stream_namespaceObject.PassThrough({highWaterMark});
		body.pipe(p1);
		body.pipe(p2);
		// Set instance body to teed body and return the other teed body
		instance[INTERNALS].stream = p1;
		body = p2;
	}

	return body;
};

const getNonSpecFormDataBoundary = (0,external_node_util_namespaceObject.deprecate)(
	body => body.getBoundary(),
	'form-data doesn\'t follow the spec and requires special treatment. Use alternative package',
	'https://github.com/node-fetch/node-fetch/issues/1167'
);

/**
 * Performs the operation "extract a `Content-Type` value from |object|" as
 * specified in the specification:
 * https://fetch.spec.whatwg.org/#concept-bodyinit-extract
 *
 * This function assumes that instance.body is present.
 *
 * @param {any} body Any options.body input
 * @returns {string | null}
 */
const extractContentType = (body, request) => {
	// Body is null or undefined
	if (body === null) {
		return null;
	}

	// Body is string
	if (typeof body === 'string') {
		return 'text/plain;charset=UTF-8';
	}

	// Body is a URLSearchParams
	if (isURLSearchParameters(body)) {
		return 'application/x-www-form-urlencoded;charset=UTF-8';
	}

	// Body is blob
	if (isBlob(body)) {
		return body.type || null;
	}

	// Body is a Buffer (Buffer, ArrayBuffer or ArrayBufferView)
	if (external_node_buffer_namespaceObject.Buffer.isBuffer(body) || external_node_util_namespaceObject.types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
		return null;
	}

	if (body instanceof esm_min/* FormData */.Ct) {
		return `multipart/form-data; boundary=${request[INTERNALS].boundary}`;
	}

	// Detect form data input from form-data module
	if (body && typeof body.getBoundary === 'function') {
		return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;
	}

	// Body is stream - can't really do much about this
	if (body instanceof external_node_stream_namespaceObject) {
		return null;
	}

	// Body constructor defaults other things to string
	return 'text/plain;charset=UTF-8';
};

/**
 * The Fetch Standard treats this as if "total bytes" is a property on the body.
 * For us, we have to explicitly get it with a function.
 *
 * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes
 *
 * @param {any} obj.body Body object from the Body instance.
 * @returns {number | null}
 */
const getTotalBytes = request => {
	const {body} = request[INTERNALS];

	// Body is null or undefined
	if (body === null) {
		return 0;
	}

	// Body is Blob
	if (isBlob(body)) {
		return body.size;
	}

	// Body is Buffer
	if (external_node_buffer_namespaceObject.Buffer.isBuffer(body)) {
		return body.length;
	}

	// Detect form data input from form-data module
	if (body && typeof body.getLengthSync === 'function') {
		return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
	}

	// Body is stream
	return null;
};

/**
 * Write a Body to a Node.js WritableStream (e.g. http.Request) object.
 *
 * @param {Stream.Writable} dest The stream to write to.
 * @param obj.body Body object from the Body instance.
 * @returns {Promise<void>}
 */
const writeToStream = async (dest, {body}) => {
	if (body === null) {
		// Body is null
		dest.end();
	} else {
		// Body is stream
		await pipeline(body, dest);
	}
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/headers.js
/**
 * Headers.js
 *
 * Headers class offers convenient helpers
 */




/* c8 ignore next 9 */
const validateHeaderName = typeof external_node_http_namespaceObject.validateHeaderName === 'function' ?
	external_node_http_namespaceObject.validateHeaderName :
	name => {
		if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
			const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);
			Object.defineProperty(error, 'code', {value: 'ERR_INVALID_HTTP_TOKEN'});
			throw error;
		}
	};

/* c8 ignore next 9 */
const validateHeaderValue = typeof external_node_http_namespaceObject.validateHeaderValue === 'function' ?
	external_node_http_namespaceObject.validateHeaderValue :
	(name, value) => {
		if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
			const error = new TypeError(`Invalid character in header content ["${name}"]`);
			Object.defineProperty(error, 'code', {value: 'ERR_INVALID_CHAR'});
			throw error;
		}
	};

/**
 * @typedef {Headers | Record<string, string> | Iterable<readonly [string, string]> | Iterable<Iterable<string>>} HeadersInit
 */

/**
 * This Fetch API interface allows you to perform various actions on HTTP request and response headers.
 * These actions include retrieving, setting, adding to, and removing.
 * A Headers object has an associated header list, which is initially empty and consists of zero or more name and value pairs.
 * You can add to this using methods like append() (see Examples.)
 * In all methods of this interface, header names are matched by case-insensitive byte sequence.
 *
 */
class Headers extends URLSearchParams {
	/**
	 * Headers class
	 *
	 * @constructor
	 * @param {HeadersInit} [init] - Response headers
	 */
	constructor(init) {
		// Validate and normalize init object in [name, value(s)][]
		/** @type {string[][]} */
		let result = [];
		if (init instanceof Headers) {
			const raw = init.raw();
			for (const [name, values] of Object.entries(raw)) {
				result.push(...values.map(value => [name, value]));
			}
		} else if (init == null) { // eslint-disable-line no-eq-null, eqeqeq
			// No op
		} else if (typeof init === 'object' && !external_node_util_namespaceObject.types.isBoxedPrimitive(init)) {
			const method = init[Symbol.iterator];
			// eslint-disable-next-line no-eq-null, eqeqeq
			if (method == null) {
				// Record<ByteString, ByteString>
				result.push(...Object.entries(init));
			} else {
				if (typeof method !== 'function') {
					throw new TypeError('Header pairs must be iterable');
				}

				// Sequence<sequence<ByteString>>
				// Note: per spec we have to first exhaust the lists then process them
				result = [...init]
					.map(pair => {
						if (
							typeof pair !== 'object' || external_node_util_namespaceObject.types.isBoxedPrimitive(pair)
						) {
							throw new TypeError('Each header pair must be an iterable object');
						}

						return [...pair];
					}).map(pair => {
						if (pair.length !== 2) {
							throw new TypeError('Each header pair must be a name/value tuple');
						}

						return [...pair];
					});
			}
		} else {
			throw new TypeError('Failed to construct \'Headers\': The provided value is not of type \'(sequence<sequence<ByteString>> or record<ByteString, ByteString>)');
		}

		// Validate and lowercase
		result =
			result.length > 0 ?
				result.map(([name, value]) => {
					validateHeaderName(name);
					validateHeaderValue(name, String(value));
					return [String(name).toLowerCase(), String(value)];
				}) :
				undefined;

		super(result);

		// Returning a Proxy that will lowercase key names, validate parameters and sort keys
		// eslint-disable-next-line no-constructor-return
		return new Proxy(this, {
			get(target, p, receiver) {
				switch (p) {
					case 'append':
					case 'set':
						return (name, value) => {
							validateHeaderName(name);
							validateHeaderValue(name, String(value));
							return URLSearchParams.prototype[p].call(
								target,
								String(name).toLowerCase(),
								String(value)
							);
						};

					case 'delete':
					case 'has':
					case 'getAll':
						return name => {
							validateHeaderName(name);
							return URLSearchParams.prototype[p].call(
								target,
								String(name).toLowerCase()
							);
						};

					case 'keys':
						return () => {
							target.sort();
							return new Set(URLSearchParams.prototype.keys.call(target)).keys();
						};

					default:
						return Reflect.get(target, p, receiver);
				}
			}
		});
		/* c8 ignore next */
	}

	get [Symbol.toStringTag]() {
		return this.constructor.name;
	}

	toString() {
		return Object.prototype.toString.call(this);
	}

	get(name) {
		const values = this.getAll(name);
		if (values.length === 0) {
			return null;
		}

		let value = values.join(', ');
		if (/^content-encoding$/i.test(name)) {
			value = value.toLowerCase();
		}

		return value;
	}

	forEach(callback, thisArg = undefined) {
		for (const name of this.keys()) {
			Reflect.apply(callback, thisArg, [this.get(name), name, this]);
		}
	}

	* values() {
		for (const name of this.keys()) {
			yield this.get(name);
		}
	}

	/**
	 * @type {() => IterableIterator<[string, string]>}
	 */
	* entries() {
		for (const name of this.keys()) {
			yield [name, this.get(name)];
		}
	}

	[Symbol.iterator]() {
		return this.entries();
	}

	/**
	 * Node-fetch non-spec method
	 * returning all headers and their values as array
	 * @returns {Record<string, string[]>}
	 */
	raw() {
		return [...this.keys()].reduce((result, key) => {
			result[key] = this.getAll(key);
			return result;
		}, {});
	}

	/**
	 * For better console.log(headers) and also to convert Headers into Node.js Request compatible format
	 */
	[Symbol.for('nodejs.util.inspect.custom')]() {
		return [...this.keys()].reduce((result, key) => {
			const values = this.getAll(key);
			// Http.request() only supports string as Host header.
			// This hack makes specifying custom Host header possible.
			if (key === 'host') {
				result[key] = values[0];
			} else {
				result[key] = values.length > 1 ? values : values[0];
			}

			return result;
		}, {});
	}
}

/**
 * Re-shaping object for Web IDL tests
 * Only need to do it for overridden methods
 */
Object.defineProperties(
	Headers.prototype,
	['get', 'entries', 'forEach', 'values'].reduce((result, property) => {
		result[property] = {enumerable: true};
		return result;
	}, {})
);

/**
 * Create a Headers object from an http.IncomingMessage.rawHeaders, ignoring those that do
 * not conform to HTTP grammar productions.
 * @param {import('http').IncomingMessage['rawHeaders']} headers
 */
function fromRawHeaders(headers = []) {
	return new Headers(
		headers
			// Split into pairs
			.reduce((result, value, index, array) => {
				if (index % 2 === 0) {
					result.push(array.slice(index, index + 2));
				}

				return result;
			}, [])
			.filter(([name, value]) => {
				try {
					validateHeaderName(name);
					validateHeaderValue(name, String(value));
					return true;
				} catch {
					return false;
				}
			})

	);
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/utils/is-redirect.js
const redirectStatus = new Set([301, 302, 303, 307, 308]);

/**
 * Redirect code matching
 *
 * @param {number} code - Status code
 * @return {boolean}
 */
const isRedirect = code => {
	return redirectStatus.has(code);
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/response.js
/**
 * Response.js
 *
 * Response class provides content decoding
 */





const response_INTERNALS = Symbol('Response internals');

/**
 * Response class
 *
 * Ref: https://fetch.spec.whatwg.org/#response-class
 *
 * @param   Stream  body  Readable stream
 * @param   Object  opts  Response options
 * @return  Void
 */
class Response extends Body {
	constructor(body = null, options = {}) {
		super(body, options);

		// eslint-disable-next-line no-eq-null, eqeqeq, no-negated-condition
		const status = options.status != null ? options.status : 200;

		const headers = new Headers(options.headers);

		if (body !== null && !headers.has('Content-Type')) {
			const contentType = extractContentType(body, this);
			if (contentType) {
				headers.append('Content-Type', contentType);
			}
		}

		this[response_INTERNALS] = {
			type: 'default',
			url: options.url,
			status,
			statusText: options.statusText || '',
			headers,
			counter: options.counter,
			highWaterMark: options.highWaterMark
		};
	}

	get type() {
		return this[response_INTERNALS].type;
	}

	get url() {
		return this[response_INTERNALS].url || '';
	}

	get status() {
		return this[response_INTERNALS].status;
	}

	/**
	 * Convenience property representing if the request ended normally
	 */
	get ok() {
		return this[response_INTERNALS].status >= 200 && this[response_INTERNALS].status < 300;
	}

	get redirected() {
		return this[response_INTERNALS].counter > 0;
	}

	get statusText() {
		return this[response_INTERNALS].statusText;
	}

	get headers() {
		return this[response_INTERNALS].headers;
	}

	get highWaterMark() {
		return this[response_INTERNALS].highWaterMark;
	}

	/**
	 * Clone this response
	 *
	 * @return  Response
	 */
	clone() {
		return new Response(clone(this, this.highWaterMark), {
			type: this.type,
			url: this.url,
			status: this.status,
			statusText: this.statusText,
			headers: this.headers,
			ok: this.ok,
			redirected: this.redirected,
			size: this.size,
			highWaterMark: this.highWaterMark
		});
	}

	/**
	 * @param {string} url    The URL that the new response is to originate from.
	 * @param {number} status An optional status code for the response (e.g., 302.)
	 * @returns {Response}    A Response object.
	 */
	static redirect(url, status = 302) {
		if (!isRedirect(status)) {
			throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
		}

		return new Response(null, {
			headers: {
				location: new URL(url).toString()
			},
			status
		});
	}

	static error() {
		const response = new Response(null, {status: 0, statusText: ''});
		response[response_INTERNALS].type = 'error';
		return response;
	}

	static json(data = undefined, init = {}) {
		const body = JSON.stringify(data);

		if (body === undefined) {
			throw new TypeError('data is not JSON serializable');
		}

		const headers = new Headers(init && init.headers);

		if (!headers.has('content-type')) {
			headers.set('content-type', 'application/json');
		}

		return new Response(body, {
			...init,
			headers
		});
	}

	get [Symbol.toStringTag]() {
		return 'Response';
	}
}

Object.defineProperties(Response.prototype, {
	type: {enumerable: true},
	url: {enumerable: true},
	status: {enumerable: true},
	ok: {enumerable: true},
	redirected: {enumerable: true},
	statusText: {enumerable: true},
	headers: {enumerable: true},
	clone: {enumerable: true}
});

;// CONCATENATED MODULE: external "node:url"
const external_node_url_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:url");
;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/utils/get-search.js
const getSearch = parsedURL => {
	if (parsedURL.search) {
		return parsedURL.search;
	}

	const lastOffset = parsedURL.href.length - 1;
	const hash = parsedURL.hash || (parsedURL.href[lastOffset] === '#' ? '#' : '');
	return parsedURL.href[lastOffset - hash.length] === '?' ? '?' : '';
};

;// CONCATENATED MODULE: external "node:net"
const external_node_net_namespaceObject = __WEBPACK_EXTERNAL_createRequire(import.meta.url)("node:net");
;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/utils/referrer.js


/**
 * @external URL
 * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/URL|URL}
 */

/**
 * @module utils/referrer
 * @private
 */

/**
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#strip-url|Referrer Policy §8.4. Strip url for use as a referrer}
 * @param {string} URL
 * @param {boolean} [originOnly=false]
 */
function stripURLForUseAsAReferrer(url, originOnly = false) {
	// 1. If url is null, return no referrer.
	if (url == null) { // eslint-disable-line no-eq-null, eqeqeq
		return 'no-referrer';
	}

	url = new URL(url);

	// 2. If url's scheme is a local scheme, then return no referrer.
	if (/^(about|blob|data):$/.test(url.protocol)) {
		return 'no-referrer';
	}

	// 3. Set url's username to the empty string.
	url.username = '';

	// 4. Set url's password to null.
	// Note: `null` appears to be a mistake as this actually results in the password being `"null"`.
	url.password = '';

	// 5. Set url's fragment to null.
	// Note: `null` appears to be a mistake as this actually results in the fragment being `"#null"`.
	url.hash = '';

	// 6. If the origin-only flag is true, then:
	if (originOnly) {
		// 6.1. Set url's path to null.
		// Note: `null` appears to be a mistake as this actually results in the path being `"/null"`.
		url.pathname = '';

		// 6.2. Set url's query to null.
		// Note: `null` appears to be a mistake as this actually results in the query being `"?null"`.
		url.search = '';
	}

	// 7. Return url.
	return url;
}

/**
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#enumdef-referrerpolicy|enum ReferrerPolicy}
 */
const ReferrerPolicy = new Set([
	'',
	'no-referrer',
	'no-referrer-when-downgrade',
	'same-origin',
	'origin',
	'strict-origin',
	'origin-when-cross-origin',
	'strict-origin-when-cross-origin',
	'unsafe-url'
]);

/**
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#default-referrer-policy|default referrer policy}
 */
const DEFAULT_REFERRER_POLICY = 'strict-origin-when-cross-origin';

/**
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#referrer-policies|Referrer Policy §3. Referrer Policies}
 * @param {string} referrerPolicy
 * @returns {string} referrerPolicy
 */
function validateReferrerPolicy(referrerPolicy) {
	if (!ReferrerPolicy.has(referrerPolicy)) {
		throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);
	}

	return referrerPolicy;
}

/**
 * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-origin-trustworthy|Referrer Policy §3.2. Is origin potentially trustworthy?}
 * @param {external:URL} url
 * @returns `true`: "Potentially Trustworthy", `false`: "Not Trustworthy"
 */
function isOriginPotentiallyTrustworthy(url) {
	// 1. If origin is an opaque origin, return "Not Trustworthy".
	// Not applicable

	// 2. Assert: origin is a tuple origin.
	// Not for implementations

	// 3. If origin's scheme is either "https" or "wss", return "Potentially Trustworthy".
	if (/^(http|ws)s:$/.test(url.protocol)) {
		return true;
	}

	// 4. If origin's host component matches one of the CIDR notations 127.0.0.0/8 or ::1/128 [RFC4632], return "Potentially Trustworthy".
	const hostIp = url.host.replace(/(^\[)|(]$)/g, '');
	const hostIPVersion = (0,external_node_net_namespaceObject.isIP)(hostIp);

	if (hostIPVersion === 4 && /^127\./.test(hostIp)) {
		return true;
	}

	if (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {
		return true;
	}

	// 5. If origin's host component is "localhost" or falls within ".localhost", and the user agent conforms to the name resolution rules in [let-localhost-be-localhost], return "Potentially Trustworthy".
	// We are returning FALSE here because we cannot ensure conformance to
	// let-localhost-be-loalhost (https://tools.ietf.org/html/draft-west-let-localhost-be-localhost)
	if (url.host === 'localhost' || url.host.endsWith('.localhost')) {
		return false;
	}

	// 6. If origin's scheme component is file, return "Potentially Trustworthy".
	if (url.protocol === 'file:') {
		return true;
	}

	// 7. If origin's scheme component is one which the user agent considers to be authenticated, return "Potentially Trustworthy".
	// Not supported

	// 8. If origin has been configured as a trustworthy origin, return "Potentially Trustworthy".
	// Not supported

	// 9. Return "Not Trustworthy".
	return false;
}

/**
 * @see {@link https://w3c.github.io/webappsec-secure-contexts/#is-url-trustworthy|Referrer Policy §3.3. Is url potentially trustworthy?}
 * @param {external:URL} url
 * @returns `true`: "Potentially Trustworthy", `false`: "Not Trustworthy"
 */
function isUrlPotentiallyTrustworthy(url) {
	// 1. If url is "about:blank" or "about:srcdoc", return "Potentially Trustworthy".
	if (/^about:(blank|srcdoc)$/.test(url)) {
		return true;
	}

	// 2. If url's scheme is "data", return "Potentially Trustworthy".
	if (url.protocol === 'data:') {
		return true;
	}

	// Note: The origin of blob: and filesystem: URLs is the origin of the context in which they were
	// created. Therefore, blobs created in a trustworthy origin will themselves be potentially
	// trustworthy.
	if (/^(blob|filesystem):$/.test(url.protocol)) {
		return true;
	}

	// 3. Return the result of executing §3.2 Is origin potentially trustworthy? on url's origin.
	return isOriginPotentiallyTrustworthy(url);
}

/**
 * Modifies the referrerURL to enforce any extra security policy considerations.
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7
 * @callback module:utils/referrer~referrerURLCallback
 * @param {external:URL} referrerURL
 * @returns {external:URL} modified referrerURL
 */

/**
 * Modifies the referrerOrigin to enforce any extra security policy considerations.
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}, step 7
 * @callback module:utils/referrer~referrerOriginCallback
 * @param {external:URL} referrerOrigin
 * @returns {external:URL} modified referrerOrigin
 */

/**
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#determine-requests-referrer|Referrer Policy §8.3. Determine request's Referrer}
 * @param {Request} request
 * @param {object} o
 * @param {module:utils/referrer~referrerURLCallback} o.referrerURLCallback
 * @param {module:utils/referrer~referrerOriginCallback} o.referrerOriginCallback
 * @returns {external:URL} Request's referrer
 */
function determineRequestsReferrer(request, {referrerURLCallback, referrerOriginCallback} = {}) {
	// There are 2 notes in the specification about invalid pre-conditions.  We return null, here, for
	// these cases:
	// > Note: If request's referrer is "no-referrer", Fetch will not call into this algorithm.
	// > Note: If request's referrer policy is the empty string, Fetch will not call into this
	// > algorithm.
	if (request.referrer === 'no-referrer' || request.referrerPolicy === '') {
		return null;
	}

	// 1. Let policy be request's associated referrer policy.
	const policy = request.referrerPolicy;

	// 2. Let environment be request's client.
	// not applicable to node.js

	// 3. Switch on request's referrer:
	if (request.referrer === 'about:client') {
		return 'no-referrer';
	}

	// "a URL": Let referrerSource be request's referrer.
	const referrerSource = request.referrer;

	// 4. Let request's referrerURL be the result of stripping referrerSource for use as a referrer.
	let referrerURL = stripURLForUseAsAReferrer(referrerSource);

	// 5. Let referrerOrigin be the result of stripping referrerSource for use as a referrer, with the
	//    origin-only flag set to true.
	let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);

	// 6. If the result of serializing referrerURL is a string whose length is greater than 4096, set
	//    referrerURL to referrerOrigin.
	if (referrerURL.toString().length > 4096) {
		referrerURL = referrerOrigin;
	}

	// 7. The user agent MAY alter referrerURL or referrerOrigin at this point to enforce arbitrary
	//    policy considerations in the interests of minimizing data leakage. For example, the user
	//    agent could strip the URL down to an origin, modify its host, replace it with an empty
	//    string, etc.
	if (referrerURLCallback) {
		referrerURL = referrerURLCallback(referrerURL);
	}

	if (referrerOriginCallback) {
		referrerOrigin = referrerOriginCallback(referrerOrigin);
	}

	// 8.Execute the statements corresponding to the value of policy:
	const currentURL = new URL(request.url);

	switch (policy) {
		case 'no-referrer':
			return 'no-referrer';

		case 'origin':
			return referrerOrigin;

		case 'unsafe-url':
			return referrerURL;

		case 'strict-origin':
			// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a
			//    potentially trustworthy URL, then return no referrer.
			if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
				return 'no-referrer';
			}

			// 2. Return referrerOrigin.
			return referrerOrigin.toString();

		case 'strict-origin-when-cross-origin':
			// 1. If the origin of referrerURL and the origin of request's current URL are the same, then
			//    return referrerURL.
			if (referrerURL.origin === currentURL.origin) {
				return referrerURL;
			}

			// 2. If referrerURL is a potentially trustworthy URL and request's current URL is not a
			//    potentially trustworthy URL, then return no referrer.
			if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
				return 'no-referrer';
			}

			// 3. Return referrerOrigin.
			return referrerOrigin;

		case 'same-origin':
			// 1. If the origin of referrerURL and the origin of request's current URL are the same, then
			//    return referrerURL.
			if (referrerURL.origin === currentURL.origin) {
				return referrerURL;
			}

			// 2. Return no referrer.
			return 'no-referrer';

		case 'origin-when-cross-origin':
			// 1. If the origin of referrerURL and the origin of request's current URL are the same, then
			//    return referrerURL.
			if (referrerURL.origin === currentURL.origin) {
				return referrerURL;
			}

			// Return referrerOrigin.
			return referrerOrigin;

		case 'no-referrer-when-downgrade':
			// 1. If referrerURL is a potentially trustworthy URL and request's current URL is not a
			//    potentially trustworthy URL, then return no referrer.
			if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
				return 'no-referrer';
			}

			// 2. Return referrerURL.
			return referrerURL;

		default:
			throw new TypeError(`Invalid referrerPolicy: ${policy}`);
	}
}

/**
 * @see {@link https://w3c.github.io/webappsec-referrer-policy/#parse-referrer-policy-from-header|Referrer Policy §8.1. Parse a referrer policy from a Referrer-Policy header}
 * @param {Headers} headers Response headers
 * @returns {string} policy
 */
function parseReferrerPolicyFromHeader(headers) {
	// 1. Let policy-tokens be the result of extracting header list values given `Referrer-Policy`
	//    and response’s header list.
	const policyTokens = (headers.get('referrer-policy') || '').split(/[,\s]+/);

	// 2. Let policy be the empty string.
	let policy = '';

	// 3. For each token in policy-tokens, if token is a referrer policy and token is not the empty
	//    string, then set policy to token.
	// Note: This algorithm loops over multiple policy values to allow deployment of new policy
	// values with fallbacks for older user agents, as described in § 11.1 Unknown Policy Values.
	for (const token of policyTokens) {
		if (token && ReferrerPolicy.has(token)) {
			policy = token;
		}
	}

	// 4. Return policy.
	return policy;
}

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/request.js
/**
 * Request.js
 *
 * Request class contains server only options
 *
 * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.
 */









const request_INTERNALS = Symbol('Request internals');

/**
 * Check if `obj` is an instance of Request.
 *
 * @param  {*} object
 * @return {boolean}
 */
const request_isRequest = object => {
	return (
		typeof object === 'object' &&
		typeof object[request_INTERNALS] === 'object'
	);
};

const doBadDataWarn = (0,external_node_util_namespaceObject.deprecate)(() => {},
	'.data is not a valid RequestInit property, use .body instead',
	'https://github.com/node-fetch/node-fetch/issues/1000 (request)');

/**
 * Request class
 *
 * Ref: https://fetch.spec.whatwg.org/#request-class
 *
 * @param   Mixed   input  Url or Request instance
 * @param   Object  init   Custom options
 * @return  Void
 */
class Request extends Body {
	constructor(input, init = {}) {
		let parsedURL;

		// Normalize input and force URL to be encoded as UTF-8 (https://github.com/node-fetch/node-fetch/issues/245)
		if (request_isRequest(input)) {
			parsedURL = new URL(input.url);
		} else {
			parsedURL = new URL(input);
			input = {};
		}

		if (parsedURL.username !== '' || parsedURL.password !== '') {
			throw new TypeError(`${parsedURL} is an url with embedded credentials.`);
		}

		let method = init.method || input.method || 'GET';
		if (/^(delete|get|head|options|post|put)$/i.test(method)) {
			method = method.toUpperCase();
		}

		if (!request_isRequest(init) && 'data' in init) {
			doBadDataWarn();
		}

		// eslint-disable-next-line no-eq-null, eqeqeq
		if ((init.body != null || (request_isRequest(input) && input.body !== null)) &&
			(method === 'GET' || method === 'HEAD')) {
			throw new TypeError('Request with GET/HEAD method cannot have body');
		}

		const inputBody = init.body ?
			init.body :
			(request_isRequest(input) && input.body !== null ?
				clone(input) :
				null);

		super(inputBody, {
			size: init.size || input.size || 0
		});

		const headers = new Headers(init.headers || input.headers || {});

		if (inputBody !== null && !headers.has('Content-Type')) {
			const contentType = extractContentType(inputBody, this);
			if (contentType) {
				headers.set('Content-Type', contentType);
			}
		}

		let signal = request_isRequest(input) ?
			input.signal :
			null;
		if ('signal' in init) {
			signal = init.signal;
		}

		// eslint-disable-next-line no-eq-null, eqeqeq
		if (signal != null && !isAbortSignal(signal)) {
			throw new TypeError('Expected signal to be an instanceof AbortSignal or EventTarget');
		}

		// §5.4, Request constructor steps, step 15.1
		// eslint-disable-next-line no-eq-null, eqeqeq
		let referrer = init.referrer == null ? input.referrer : init.referrer;
		if (referrer === '') {
			// §5.4, Request constructor steps, step 15.2
			referrer = 'no-referrer';
		} else if (referrer) {
			// §5.4, Request constructor steps, step 15.3.1, 15.3.2
			const parsedReferrer = new URL(referrer);
			// §5.4, Request constructor steps, step 15.3.3, 15.3.4
			referrer = /^about:(\/\/)?client$/.test(parsedReferrer) ? 'client' : parsedReferrer;
		} else {
			referrer = undefined;
		}

		this[request_INTERNALS] = {
			method,
			redirect: init.redirect || input.redirect || 'follow',
			headers,
			parsedURL,
			signal,
			referrer
		};

		// Node-fetch-only options
		this.follow = init.follow === undefined ? (input.follow === undefined ? 20 : input.follow) : init.follow;
		this.compress = init.compress === undefined ? (input.compress === undefined ? true : input.compress) : init.compress;
		this.counter = init.counter || input.counter || 0;
		this.agent = init.agent || input.agent;
		this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;
		this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;

		// §5.4, Request constructor steps, step 16.
		// Default is empty string per https://fetch.spec.whatwg.org/#concept-request-referrer-policy
		this.referrerPolicy = init.referrerPolicy || input.referrerPolicy || '';
	}

	/** @returns {string} */
	get method() {
		return this[request_INTERNALS].method;
	}

	/** @returns {string} */
	get url() {
		return (0,external_node_url_namespaceObject.format)(this[request_INTERNALS].parsedURL);
	}

	/** @returns {Headers} */
	get headers() {
		return this[request_INTERNALS].headers;
	}

	get redirect() {
		return this[request_INTERNALS].redirect;
	}

	/** @returns {AbortSignal} */
	get signal() {
		return this[request_INTERNALS].signal;
	}

	// https://fetch.spec.whatwg.org/#dom-request-referrer
	get referrer() {
		if (this[request_INTERNALS].referrer === 'no-referrer') {
			return '';
		}

		if (this[request_INTERNALS].referrer === 'client') {
			return 'about:client';
		}

		if (this[request_INTERNALS].referrer) {
			return this[request_INTERNALS].referrer.toString();
		}

		return undefined;
	}

	get referrerPolicy() {
		return this[request_INTERNALS].referrerPolicy;
	}

	set referrerPolicy(referrerPolicy) {
		this[request_INTERNALS].referrerPolicy = validateReferrerPolicy(referrerPolicy);
	}

	/**
	 * Clone this request
	 *
	 * @return  Request
	 */
	clone() {
		return new Request(this);
	}

	get [Symbol.toStringTag]() {
		return 'Request';
	}
}

Object.defineProperties(Request.prototype, {
	method: {enumerable: true},
	url: {enumerable: true},
	headers: {enumerable: true},
	redirect: {enumerable: true},
	clone: {enumerable: true},
	signal: {enumerable: true},
	referrer: {enumerable: true},
	referrerPolicy: {enumerable: true}
});

/**
 * Convert a Request to Node.js http request options.
 *
 * @param {Request} request - A Request instance
 * @return The options object to be passed to http.request
 */
const getNodeRequestOptions = request => {
	const {parsedURL} = request[request_INTERNALS];
	const headers = new Headers(request[request_INTERNALS].headers);

	// Fetch step 1.3
	if (!headers.has('Accept')) {
		headers.set('Accept', '*/*');
	}

	// HTTP-network-or-cache fetch steps 2.4-2.7
	let contentLengthValue = null;
	if (request.body === null && /^(post|put)$/i.test(request.method)) {
		contentLengthValue = '0';
	}

	if (request.body !== null) {
		const totalBytes = getTotalBytes(request);
		// Set Content-Length if totalBytes is a number (that is not NaN)
		if (typeof totalBytes === 'number' && !Number.isNaN(totalBytes)) {
			contentLengthValue = String(totalBytes);
		}
	}

	if (contentLengthValue) {
		headers.set('Content-Length', contentLengthValue);
	}

	// 4.1. Main fetch, step 2.6
	// > If request's referrer policy is the empty string, then set request's referrer policy to the
	// > default referrer policy.
	if (request.referrerPolicy === '') {
		request.referrerPolicy = DEFAULT_REFERRER_POLICY;
	}

	// 4.1. Main fetch, step 2.7
	// > If request's referrer is not "no-referrer", set request's referrer to the result of invoking
	// > determine request's referrer.
	if (request.referrer && request.referrer !== 'no-referrer') {
		request[request_INTERNALS].referrer = determineRequestsReferrer(request);
	} else {
		request[request_INTERNALS].referrer = 'no-referrer';
	}

	// 4.5. HTTP-network-or-cache fetch, step 6.9
	// > If httpRequest's referrer is a URL, then append `Referer`/httpRequest's referrer, serialized
	// >  and isomorphic encoded, to httpRequest's header list.
	if (request[request_INTERNALS].referrer instanceof URL) {
		headers.set('Referer', request.referrer);
	}

	// HTTP-network-or-cache fetch step 2.11
	if (!headers.has('User-Agent')) {
		headers.set('User-Agent', 'node-fetch');
	}

	// HTTP-network-or-cache fetch step 2.15
	if (request.compress && !headers.has('Accept-Encoding')) {
		headers.set('Accept-Encoding', 'gzip, deflate, br');
	}

	let {agent} = request;
	if (typeof agent === 'function') {
		agent = agent(parsedURL);
	}

	// HTTP-network fetch step 4.2
	// chunked encoding is handled by Node.js

	const search = getSearch(parsedURL);

	// Pass the full URL directly to request(), but overwrite the following
	// options:
	const options = {
		// Overwrite search to retain trailing ? (issue #776)
		path: parsedURL.pathname + search,
		// The following options are not expressed in the URL
		method: request.method,
		headers: headers[Symbol.for('nodejs.util.inspect.custom')](),
		insecureHTTPParser: request.insecureHTTPParser,
		agent
	};

	return {
		/** @type {URL} */
		parsedURL,
		options
	};
};

;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/errors/abort-error.js


/**
 * AbortError interface for cancelled requests
 */
class AbortError extends FetchBaseError {
	constructor(message, type = 'aborted') {
		super(message, type);
	}
}

// EXTERNAL MODULE: ./node_modules/.pnpm/fetch-blob@3.2.0/node_modules/fetch-blob/from.js + 2 modules
var fetch_blob_from = __nccwpck_require__(7253);
;// CONCATENATED MODULE: ./node_modules/.pnpm/node-fetch@3.3.2/node_modules/node-fetch/src/index.js
/**
 * Index.js
 *
 * a request API compatible with window.fetch
 *
 * All spec algorithm step numbers are based on https://fetch.spec.whatwg.org/commit-snapshots/ae716822cb3a61843226cd090eefc6589446c1d2/.
 */
























const supportedSchemas = new Set(['data:', 'http:', 'https:']);

/**
 * Fetch function
 *
 * @param   {string | URL | import('./request').default} url - Absolute url or Request instance
 * @param   {*} [options_] - Fetch options
 * @return  {Promise<import('./response').default>}
 */
async function fetch(url, options_) {
	return new Promise((resolve, reject) => {
		// Build request object
		const request = new Request(url, options_);
		const {parsedURL, options} = getNodeRequestOptions(request);
		if (!supportedSchemas.has(parsedURL.protocol)) {
			throw new TypeError(`node-fetch cannot load ${url}. URL scheme "${parsedURL.protocol.replace(/:$/, '')}" is not supported.`);
		}

		if (parsedURL.protocol === 'data:') {
			const data = dist(request.url);
			const response = new Response(data, {headers: {'Content-Type': data.typeFull}});
			resolve(response);
			return;
		}

		// Wrap http.request into fetch
		const send = (parsedURL.protocol === 'https:' ? external_node_https_namespaceObject : external_node_http_namespaceObject).request;
		const {signal} = request;
		let response = null;

		const abort = () => {
			const error = new AbortError('The operation was aborted.');
			reject(error);
			if (request.body && request.body instanceof external_node_stream_namespaceObject.Readable) {
				request.body.destroy(error);
			}

			if (!response || !response.body) {
				return;
			}

			response.body.emit('error', error);
		};

		if (signal && signal.aborted) {
			abort();
			return;
		}

		const abortAndFinalize = () => {
			abort();
			finalize();
		};

		// Send request
		const request_ = send(parsedURL.toString(), options);

		if (signal) {
			signal.addEventListener('abort', abortAndFinalize);
		}

		const finalize = () => {
			request_.abort();
			if (signal) {
				signal.removeEventListener('abort', abortAndFinalize);
			}
		};

		request_.on('error', error => {
			reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, 'system', error));
			finalize();
		});

		fixResponseChunkedTransferBadEnding(request_, error => {
			if (response && response.body) {
				response.body.destroy(error);
			}
		});

		/* c8 ignore next 18 */
		if (process.version < 'v14') {
			// Before Node.js 14, pipeline() does not fully support async iterators and does not always
			// properly handle when the socket close/end events are out of order.
			request_.on('socket', s => {
				let endedWithEventsCount;
				s.prependListener('end', () => {
					endedWithEventsCount = s._eventsCount;
				});
				s.prependListener('close', hadError => {
					// if end happened before close but the socket didn't emit an error, do it now
					if (response && endedWithEventsCount < s._eventsCount && !hadError) {
						const error = new Error('Premature close');
						error.code = 'ERR_STREAM_PREMATURE_CLOSE';
						response.body.emit('error', error);
					}
				});
			});
		}

		request_.on('response', response_ => {
			request_.setTimeout(0);
			const headers = fromRawHeaders(response_.rawHeaders);

			// HTTP fetch step 5
			if (isRedirect(response_.statusCode)) {
				// HTTP fetch step 5.2
				const location = headers.get('Location');

				// HTTP fetch step 5.3
				let locationURL = null;
				try {
					locationURL = location === null ? null : new URL(location, request.url);
				} catch {
					// error here can only be invalid URL in Location: header
					// do not throw when options.redirect == manual
					// let the user extract the errorneous redirect URL
					if (request.redirect !== 'manual') {
						reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));
						finalize();
						return;
					}
				}

				// HTTP fetch step 5.5
				switch (request.redirect) {
					case 'error':
						reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));
						finalize();
						return;
					case 'manual':
						// Nothing to do
						break;
					case 'follow': {
						// HTTP-redirect fetch step 2
						if (locationURL === null) {
							break;
						}

						// HTTP-redirect fetch step 5
						if (request.counter >= request.follow) {
							reject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 6 (counter increment)
						// Create a new Request object.
						const requestOptions = {
							headers: new Headers(request.headers),
							follow: request.follow,
							counter: request.counter + 1,
							agent: request.agent,
							compress: request.compress,
							method: request.method,
							body: clone(request),
							signal: request.signal,
							size: request.size,
							referrer: request.referrer,
							referrerPolicy: request.referrerPolicy
						};

						// when forwarding sensitive headers like "Authorization",
						// "WWW-Authenticate", and "Cookie" to untrusted targets,
						// headers will be ignored when following a redirect to a domain
						// that is not a subdomain match or exact match of the initial domain.
						// For example, a redirect from "foo.com" to either "foo.com" or "sub.foo.com"
						// will forward the sensitive headers, but a redirect to "bar.com" will not.
						// headers will also be ignored when following a redirect to a domain using
						// a different protocol. For example, a redirect from "https://foo.com" to "http://foo.com"
						// will not forward the sensitive headers
						if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
							for (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {
								requestOptions.headers.delete(name);
							}
						}

						// HTTP-redirect fetch step 9
						if (response_.statusCode !== 303 && request.body && options_.body instanceof external_node_stream_namespaceObject.Readable) {
							reject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));
							finalize();
							return;
						}

						// HTTP-redirect fetch step 11
						if (response_.statusCode === 303 || ((response_.statusCode === 301 || response_.statusCode === 302) && request.method === 'POST')) {
							requestOptions.method = 'GET';
							requestOptions.body = undefined;
							requestOptions.headers.delete('content-length');
						}

						// HTTP-redirect fetch step 14
						const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);
						if (responseReferrerPolicy) {
							requestOptions.referrerPolicy = responseReferrerPolicy;
						}

						// HTTP-redirect fetch step 15
						resolve(fetch(new Request(locationURL, requestOptions)));
						finalize();
						return;
					}

					default:
						return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));
				}
			}

			// Prepare response
			if (signal) {
				response_.once('end', () => {
					signal.removeEventListener('abort', abortAndFinalize);
				});
			}

			let body = (0,external_node_stream_namespaceObject.pipeline)(response_, new external_node_stream_namespaceObject.PassThrough(), error => {
				if (error) {
					reject(error);
				}
			});
			// see https://github.com/nodejs/node/pull/29376
			/* c8 ignore next 3 */
			if (process.version < 'v12.10') {
				response_.on('aborted', abortAndFinalize);
			}

			const responseOptions = {
				url: request.url,
				status: response_.statusCode,
				statusText: response_.statusMessage,
				headers,
				size: request.size,
				counter: request.counter,
				highWaterMark: request.highWaterMark
			};

			// HTTP-network fetch step 12.1.1.3
			const codings = headers.get('Content-Encoding');

			// HTTP-network fetch step 12.1.1.4: handle content codings

			// in following scenarios we ignore compression support
			// 1. compression support is disabled
			// 2. HEAD request
			// 3. no Content-Encoding header
			// 4. no content response (204)
			// 5. content not modified response (304)
			if (!request.compress || request.method === 'HEAD' || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
				response = new Response(body, responseOptions);
				resolve(response);
				return;
			}

			// For Node v6+
			// Be less strict when decoding compressed responses, since sometimes
			// servers send slightly invalid responses that are still accepted
			// by common browsers.
			// Always using Z_SYNC_FLUSH is what cURL does.
			const zlibOptions = {
				flush: external_node_zlib_namespaceObject.Z_SYNC_FLUSH,
				finishFlush: external_node_zlib_namespaceObject.Z_SYNC_FLUSH
			};

			// For gzip
			if (codings === 'gzip' || codings === 'x-gzip') {
				body = (0,external_node_stream_namespaceObject.pipeline)(body, external_node_zlib_namespaceObject.createGunzip(zlibOptions), error => {
					if (error) {
						reject(error);
					}
				});
				response = new Response(body, responseOptions);
				resolve(response);
				return;
			}

			// For deflate
			if (codings === 'deflate' || codings === 'x-deflate') {
				// Handle the infamous raw deflate response from old servers
				// a hack for old IIS and Apache servers
				const raw = (0,external_node_stream_namespaceObject.pipeline)(response_, new external_node_stream_namespaceObject.PassThrough(), error => {
					if (error) {
						reject(error);
					}
				});
				raw.once('data', chunk => {
					// See http://stackoverflow.com/questions/37519828
					if ((chunk[0] & 0x0F) === 0x08) {
						body = (0,external_node_stream_namespaceObject.pipeline)(body, external_node_zlib_namespaceObject.createInflate(), error => {
							if (error) {
								reject(error);
							}
						});
					} else {
						body = (0,external_node_stream_namespaceObject.pipeline)(body, external_node_zlib_namespaceObject.createInflateRaw(), error => {
							if (error) {
								reject(error);
							}
						});
					}

					response = new Response(body, responseOptions);
					resolve(response);
				});
				raw.once('end', () => {
					// Some old IIS servers return zero-length OK deflate responses, so
					// 'data' is never emitted. See https://github.com/node-fetch/node-fetch/pull/903
					if (!response) {
						response = new Response(body, responseOptions);
						resolve(response);
					}
				});
				return;
			}

			// For br
			if (codings === 'br') {
				body = (0,external_node_stream_namespaceObject.pipeline)(body, external_node_zlib_namespaceObject.createBrotliDecompress(), error => {
					if (error) {
						reject(error);
					}
				});
				response = new Response(body, responseOptions);
				resolve(response);
				return;
			}

			// Otherwise, use response as-is
			response = new Response(body, responseOptions);
			resolve(response);
		});

		// eslint-disable-next-line promise/prefer-await-to-then
		writeToStream(request_, request).catch(reject);
	});
}

function fixResponseChunkedTransferBadEnding(request, errorCallback) {
	const LAST_CHUNK = external_node_buffer_namespaceObject.Buffer.from('0\r\n\r\n');

	let isChunkedTransfer = false;
	let properLastChunkReceived = false;
	let previousChunk;

	request.on('response', response => {
		const {headers} = response;
		isChunkedTransfer = headers['transfer-encoding'] === 'chunked' && !headers['content-length'];
	});

	request.on('socket', socket => {
		const onSocketClose = () => {
			if (isChunkedTransfer && !properLastChunkReceived) {
				const error = new Error('Premature close');
				error.code = 'ERR_STREAM_PREMATURE_CLOSE';
				errorCallback(error);
			}
		};

		const onData = buf => {
			properLastChunkReceived = external_node_buffer_namespaceObject.Buffer.compare(buf.slice(-5), LAST_CHUNK) === 0;

			// Sometimes final 0-length chunk and end of message code are in separate packets
			if (!properLastChunkReceived && previousChunk) {
				properLastChunkReceived = (
					external_node_buffer_namespaceObject.Buffer.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 &&
					external_node_buffer_namespaceObject.Buffer.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0
				);
			}

			previousChunk = buf;
		};

		socket.prependListener('close', onSocketClose);
		socket.on('data', onData);

		request.on('close', () => {
			socket.removeListener('close', onSocketClose);
			socket.removeListener('data', onData);
		});
	});
}

;// CONCATENATED MODULE: ./src/run.ts










// prettier-ignore
class PostJmhResultBody extends TaggedClass("PostJmhResultBody") {
    static from(data, computedAt) {
        return new PostJmhResultBody({
            workflowRunId: GITHUB_RUN_ID,
            workflowRunNumber: GITHUB_RUN_NUMBER,
            workflowRunnerName: RUNNER_NAME,
            workflowRunAttempt: GITHUB_RUN_ATTEMPT,
            workflowUrl: WORKFLOW_URL,
            runnerEnvironment: RUNNER_ENVIRONMENT,
            runnerOs: RUNNER_OS,
            runnerArch: RUNNER_ARCH,
            orgId: GITHUB_REPOSITORY_OWNER_ID,
            projectId: GITHUB_REPOSITORY_ID,
            ref: REF,
            commitHash: GITHUB_SHA,
            actor: GITHUB_ACTOR,
            actorId: GITHUB_ACTOR_ID,
            data: data,
            computedAt: computedAt
        });
    }
}
const execCommands = (inputs) => {
    const args = [];
    // @ts-ignore
    const options = {
        cwd: getOrUndefined(inputs.workdir),
        listeners: {
            errline: (line) => lib_core.info(`-- listener stderr: ${line}`),
            debug: (data) => lib_core.debug(`-- listener debug: ${data}`),
        },
    };
    const execCommand = (cmd) => Effect_tryPromise({
        try: () => (0,exec.exec)(cmd, args, options),
        catch: (_) => _,
    });
    return Function_pipe(utils_logDebug(`Running: '${inputs.cmd}' cmd ...`), Effect_flatMap(() => Effect_forEach(inputs.cmd, execCommand, {
        concurrency: 1,
        batching: false,
        discard: false,
    })), Effect_map((exitCodes) => exitCodes[exitCodes.length - 1]));
};
const findResults = (inputs) => Function_pipe(Effect_tryPromise({
    try: () => {
        // short name
        const output = inputs.outputFilePath;
        const file = (() => {
            if (external_path_.isAbsolute(output))
                return output;
            else
                return match(inputs.workdir, {
                    onNone: () => output,
                    onSome: (workdir) => `${workdir}/${output}`,
                });
        })();
        return promises_namespaceObject.readFile(file, { encoding: "utf-8" });
    },
    catch: (_) => _,
}), Effect_flatMap((data) => Effect_try_({
    try: () => JSON.parse(data),
    catch: (_) => _,
})), Effect_tap((data) => utils_logDebug(`Found results: ${JSON.stringify(data, null, 2)}`)));
const pingServer = Effect_tryPromise({
    try: (signal) => {
        return fetch(`${ZEKLIN_SERVER_URL}/ping`, {
            method: "GET",
            headers: {
                "User-Agent": "zeklin-action",
            },
            signal: signal,
        }).then((response) => {
            if (!response.ok) {
                Promise.reject(Error(`Failed to ping Zeklin servers: ${response.status} ${response.statusText}`));
            }
        });
    },
    catch: (_) => _,
});
const uploadResults = (inputs, results, computedAt) => Effect_tryPromise({
    try: (signal) => {
        const body = PostJmhResultBody.from(results, computedAt);
        const buff = Buffer.from(JSON.stringify(body, null, 0), "utf-8");
        const credentials = Buffer.from(`${inputs.apikeyId}:${inputs.apikey}`).toString("base64");
        return fetch(`${ZEKLIN_SERVER_URL}/api/runs/jmh`, {
            method: "POST",
            body: buff,
            headers: {
                "User-Agent": "zeklin-action",
                "Content-Type": "application/json",
                Authorization: `Basic ${credentials}`,
            },
            signal: signal,
        }).then((response) => {
            if (!response.ok) {
                Promise.reject(Error(`Failed to upload results: ${response.status} ${response.statusText}`));
            }
        });
    },
    catch: (_) => _,
});
/**
 * The main function for the action.
 */
const run_run = (inputs) => Function_pipe(execCommands(inputs), Effect_flatMap((exitCode) => exitCode === lib_core.ExitCode.Success
    ? utils_logInfo(`🎉 '${inputs.cmd}' ran successfully!`).pipe(Effect_as(new Date()))
    : Effect_fail(new Error(`❌ '${inputs.cmd}' exited with non-zero exit code: ${exitCode}`))), Effect_flatMap((computedAt) => findResults(inputs).pipe(Effect_map((_) => [_, computedAt]))), Effect_flatMap((data) => pingServer.pipe(Effect_as(data))), Effect_flatMap(([results, computedAt]) => uploadResults(inputs, results, computedAt)));

;// CONCATENATED MODULE: ./src/index.ts







const banner = String.raw `
 ___________
< Zeklin.io >
 -----------
     \\
      \\
          oO)-.                       .-(Oo
         /__  _\\                     /_  __\\
         \\  \\(  |     ()~()         |  )/  /
          \\__|\\ |    (-___-)        | /|__/
          '  '--'    ==\`-'==        '--'  '
`;
class Inputs extends TaggedClass("Inputs") {
}
const unsafeParseInputs = () => {
    const unsafeRequiredInput = (name) => {
        const v = lib_core.getInput(name, { required: true, trimWhitespace: true });
        lib_core.debug(`-- input ${name}: ${v}`);
        if (v.length === 0)
            throw new Error(`Input ${name} is required`);
        else
            return NES.unsafe(v);
    };
    const unsafeRequiredMultilineInput = (name) => {
        const v = lib_core.getMultilineInput(name, { required: true, trimWhitespace: true });
        lib_core.debug(`-- input ${name}: ${v}`);
        if (v.length === 0)
            throw new Error(`Input ${name} is required`);
        else
            return Function_pipe(Chunk_fromIterable(v), Chunk_filterMap(NES.fromString));
    };
    const optionalInput = (name) => {
        const v = lib_core.getInput(name, { required: false, trimWhitespace: true });
        lib_core.debug(`-- input ${name}: ${v}`);
        return NES.fromString(v);
    };
    try {
        return Either_right(new Inputs({
            apikey: unsafeRequiredInput("api-key"),
            apikeyId: unsafeRequiredInput("api-key-id"),
            outputFilePath: unsafeRequiredInput("output-file-path"),
            cmd: unsafeRequiredMultilineInput("cmd"),
            workdir: optionalInput("workdir"),
        }));
    }
    catch (error) {
        return Either_left(error);
    }
};
/**
 * The main function for the action.
 */
const main = Function_pipe(utils_logInfo(banner), Effect_flatMap(() => Effect_suspend(unsafeParseInputs)), Effect_tap((inputs) => utils_logDebug(`Inputs: ${JSON.stringify(inputs)}`)), Effect_flatMap((inputs) => run_run(inputs)));
if (process.env.GITHUB_ACTIONS !== "true") {
    (0,lib_core.setFailed)("The script must be run in GitHub Actions environment");
}
debugVariables();
runPromise(main).catch((error) => {
    if (error instanceof Error)
        lib_core.setFailed(error.message);
});

})();

var __webpack_exports__Inputs = __webpack_exports__.k;
var __webpack_exports__main = __webpack_exports__.D;
export { __webpack_exports__Inputs as Inputs, __webpack_exports__main as main };
